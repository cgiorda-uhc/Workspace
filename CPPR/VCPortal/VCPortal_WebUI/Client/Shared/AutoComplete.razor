
<style>
    #close {
        float: right;
        display: inline-block;
        padding: 2px 5px;
        background: #ccc;
    }

    li {
        cursor: pointer;
    }
</style>

<div class="autocomplete w-85">
    <textarea cols="@Cols" rows="@Rows" @bind=_autoCompleteSelect @oninput=HandleInput class="form-control filter @CssClass" @onfocus="@(() => hasFocus())" @onblur="@(() => lostFocus())" >
        @DefaultValue
    </textarea>
    @if (_subAutoCompleteList is not null)
    {
        <ul class="options">
            @if (_subAutoCompleteList.Any())
            {
                @foreach (var ac in _subAutoCompleteList)
                {
                    <li class="option" @onclick=@(_ => SelectValue(ac))>
                        <span class="option-text">@ac</span>
                    </li>
                }
            }
            else
            {
                <li id="liNoResults" style="display: block" class="disabled option">
                    <span id="close" onclick="document.getElementById('liNoResults').style.display='none'">x</span>
                    No results
                </li>
            }
        </ul>
    }
    else
    {
        <ul class="options @_showStatus">

            <li class="option-text">Searching...</li>
        </ul>
    }

</div>
@if (ShowLabel && !string.IsNullOrWhiteSpace(_autoCompleteSelect))
{
    <p class="mt-3">
        <strong>@_autoCompleteSelect</strong>
    </p>
}
@code {
    [Parameter]
    public List<string>? AutoCompleteList { get; set; }


    [Parameter]
    public int ResultCount { get; set; } = 20;

    [Parameter]
    public int FilterLimit { get; set; } = 2;


    [Parameter]
    public int Cols { get; set; } = 40;


    [Parameter]
    public int Rows { get; set; } = 1;


    [Parameter]
    public bool CanAddNew { get; set; } = false;


    [Parameter]
    public bool WildSearch { get; set; } = false;

    [Parameter]
    public bool ShowLabel { get; set; } = false;

    [Parameter]
    public string CssClass { get; set; }

    [Parameter]
    public string DefaultValue { get; set; } = "";


    private string _value;
    [Parameter]
    public string Value
    {
        get { return _value ?? string.Empty; }
        set
        {
            if (Value != value)
            {
                _value = value;
            }
        }
    }
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    private List<string>? _subAutoCompleteList;

    string? _autoCompleteSelect;
    string? _filter;

    string _showStatus = "invisible";



    async Task HandleInput(ChangeEventArgs e)
    {

        _filter = e.Value?.ToString();
        if (_filter?.Length > FilterLimit)
        {

            _showStatus = "visible";
            await Task.Run(async () =>
            {
                if (!WildSearch)
                    _subAutoCompleteList = AutoCompleteList.Where(o => o.ToLower().StartsWith(_filter.ToLower())).OrderBy(c => c).Take(ResultCount).ToList();
                else
                    _subAutoCompleteList = AutoCompleteList.Where(o => o.ToLower().Contains(_filter.ToLower())).OrderBy(c => c).Take(ResultCount).ToList();


                //_subAutoCompleteList = AutoCompleteList.Where(r => searchList.Any(f => r.StartsWith(f)));
                //_subAutoCompleteList = AutoCompleteList
                //.Where(c => c.AutoCompleteId.ToLower().StartsWith(_filter.ToLower()))
                //.Take(20).ToList();
                //.Where(c => c.AutoCompleteId.ToLower().StartsWith(_filter.ToLower()) || c.AutoCompleteDesc.ToLower().StartsWith(_filter.ToLower()))
                //.OrderBy(c => c.AutoCompleteDesc).Take(10).ToList();

            });



        }
        else
        {
            _showStatus = "invisible";

            _subAutoCompleteList = null;
            _autoCompleteSelect = null;
        }

        Value = null;
        await ValueChanged.InvokeAsync(Value);
    }

    Task SelectValue(string selection)
    {
        _showStatus = "invisible";

        _autoCompleteSelect = selection;
        //_autoCompleteId = id;
        //_autoCompleteDesc = _subAutoCompleteList!.First(c => c.AutoCompleteId.Equals(_autoCompleteId)).AutoCompleteDesc;
        //_autoCompleteFull = (_autoCompleteId != null ? _autoCompleteId + " ~ " : "") + _autoCompleteDesc;
        _subAutoCompleteList = null;

        Value = selection;
        return ValueChanged.InvokeAsync(Value);
    }

    public void hasFocus()
    {

    }

    public void lostFocus()
    {
        if (CanAddNew)
        {
            //NO DROPDOWN SELECT BUT NEW FILTER VALUE REMAINS SO ADD IT
            if(_filter != null && string.IsNullOrEmpty(Value))
            {
                Value = _filter;
                ValueChanged.InvokeAsync(Value);
            }

        }

    }
}
