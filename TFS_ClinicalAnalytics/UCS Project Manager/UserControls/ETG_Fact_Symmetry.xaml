<UserControl x:Class="UCS_Project_Manager.ETG_Fact_Symmetry"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:UCS_Project_Manager"
              xmlns:vml="clr-namespace:UCS_Project_Manager;assembly=UCS_Project_Manager_ViewModels"
             xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:cmd="clr-namespace:GalaSoft.MvvmLight.Command;assembly=GalaSoft.MvvmLight.Platform"
             xmlns:wpftoolkit="http://schemas.microsoft.com/wpf/2008/toolkit"
             xmlns:wpfTool="clr-namespace:Xceed.Wpf.Toolkit;assembly=Xceed.Wpf.Toolkit"
             vml:ViewModelLocator.AutoHookedUpViewModel="True"
             xmlns:converter="clr-namespace:UCS_Project_Manager"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800"  >
    <UserControl.Resources>


        <SolidColorBrush x:Key="clrEditable" Color="LightYellow" />

        <Style x:Key="mainHeader"  TargetType="DataGridColumnHeader">
            <Setter Property="Background" Value="Orange" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="Black" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
        </Style>

        <Style x:Key="pcHeader"  TargetType="DataGridColumnHeader">
            <Setter Property="Background" Value="LightGreen" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="Black" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
        </Style>

        <Style x:Key="ecHeader"  TargetType="DataGridColumnHeader">
            <Setter Property="Background" Value="LightPink" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="Black" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
        </Style>

        <Style x:Key="centHeader"  TargetType="DataGridColumnHeader">
            <Setter Property="Background" Value="DeepSkyBlue" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="Black" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
        </Style>


        <Style TargetType="{x:Type Button}">
            <Setter Property="Background" Value="CadetBlue" />
            <Setter Property="Foreground" Value="White" />
            <Setter Property="FontSize" Value="15" />
            <Setter Property="FontFamily" Value="./#Segoe UI" />
            <Setter Property="SnapsToDevicePixels" Value="True" />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border CornerRadius="4" Background="{TemplateBinding Background}">
                            <Grid>
                                <!--<Path x:Name="PathIcon" Width="15" Height="25" Stretch="Fill" Fill="#4C87B3" HorizontalAlignment="Left" Margin="17,0,0,0" Data="F1 M 30.0833,22.1667L 50.6665,37.6043L 50.6665,38.7918L 30.0833,53.8333L 30.0833,22.1667 Z "/>-->
                                <ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" />
                            </Grid>
                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#E59400" />
                                <Setter Property="Foreground" Value="White" />
                                <!--<Setter TargetName="PathIcon" Property="Fill" Value="Black" />-->
                            </Trigger>

                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="OrangeRed" />
                                <Setter Property="Foreground" Value="White" />
                            </Trigger>

                            <Trigger Property="IsEnabled" Value="False" >
                                <Setter Property="Background" Value="LightGray" />
                                <Setter Property="Foreground" Value="White" />
                            </Trigger>

                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </UserControl.Resources>

    <Grid x:Name="ETGFactDataView">


        <Grid.Resources>
            <converter:InvertBoolConverter x:Key="InvertBoolConverter" />
        </Grid.Resources>


        <Grid.RowDefinitions>
            <RowDefinition Height="23"/>
            <RowDefinition Height="30"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="60"/>
        </Grid.RowDefinitions>


        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>




        <DockPanel Grid.Row="0">
            <Menu DockPanel.Dock="Top"  Width="Auto">
                <MenuItem Header="_File">
                    <MenuItem Header="_Export All" Command="{Binding Path=ExportCommand}"/>
                    <!--<MenuItem Header="_Export Filtered" Click="MenuItem_Click_ExportFiltered" />-->
                    <Separator />
                    <MenuItem Header="_Exit" Click="MenuItem_Click_Exit" />
                </MenuItem>

                <!--<MenuItem Header="_Filter">
                    <MenuItem Header="_Version" Click="MenuItem_Click_Filter" />
                    
                </MenuItem>-->
            </Menu>
            <TextBox AcceptsReturn="True"  Background="CornflowerBlue"/>
        </DockPanel>




        <Grid Grid.Row="1"  Background="LightBlue" >  
        <Grid.ColumnDefinitions>
                <ColumnDefinition  Width="0.11*" />
                <ColumnDefinition  Width="0.1*" />
                <ColumnDefinition  Width="0.06*" />
                <ColumnDefinition  Width="0.1*" />
                <ColumnDefinition  Width="0.11*" />
                <ColumnDefinition  Width="0.1*" />
                <ColumnDefinition  Width="0.09*" />
                <ColumnDefinition  Width="0.1*" />
                <ColumnDefinition  Width="0.1*" />
                <ColumnDefinition  Width="0.15*" />
                <ColumnDefinition  Width="0.15*" />
                <ColumnDefinition Width="0.14*" />
            </Grid.ColumnDefinitions>  
        <Grid.RowDefinitions>  
            <RowDefinition Height="36" />  
            </Grid.RowDefinitions>
            <Label Content="Premium Specialty:"  Grid.Column="0" FontWeight="Bold" Margin="4" HorizontalAlignment="Left"   />
            <local:SelectAllCheckComboBox   Grid.Column="1"  x:Name="cbxPremiumSpecialtyFilter" HorizontalAlignment="Left" Width="120"  Margin="4"  ItemsSource="{Binding Path=ETG_Dim_PremiumSpecDic}"  DisplayMemberPath="Value" ValueMemberPath="Key"  SelectedValue="-9999" ItemSelectionChanged="cbxPremiumSpecialtyFilter_ItemSelectionChanged" Loaded="cbxPremiumSpecialtyFilter_Loaded"  />


            <Label   Grid.Column="2" Content="ETG Base:" FontWeight="Bold" Margin="4"  HorizontalAlignment="Left"  />
            <local:SelectAllCheckComboBox x:Name="cbxETGBaseFilter"   Grid.Column="3"  Width="120"  Margin="4"  HorizontalAlignment="Left" ItemsSource="{Binding Path=ETG_Dim_MasterDic}" DisplayMemberPath="Value" ValueMemberPath="Key"  SelectedValue="-9999" ItemSelectionChanged="cbxETGBaseFilter_ItemSelectionChanged" Loaded="cbxETGBaseFilter_Loaded"  />


            <Label  Grid.Column="4"  Content="Current Attribution:" FontWeight="Bold" Margin="4" HorizontalAlignment="Left" />
            <local:SelectAllCheckComboBox x:Name="cbxCurrentAttributionFilter" Width="120"  Margin="4"  Grid.Column="5"  HorizontalAlignment="Left" ItemsSource="{Binding Path=AttributionFilterLst}" SelectedValue="--All--" ItemSelectionChanged="CbxCurrentAttributionFilter_ItemSelectionChanged" Loaded="CbxCurrentAttributionFilter_Loaded"  />

            <Label Content="Measure Status:" Grid.Column="6" FontWeight="Bold" Margin="4" />
            <local:SelectAllCheckComboBox x:Name="cbxMeasureStatusFilter" Width="120"  Margin="4" Grid.Column="7" ItemsSource="{Binding Path=MeasureStatusFilterLst}" SelectedValue="--All--" ItemSelectionChanged="cbxMeasureStatusFilter_ItemSelectionChanged" Loaded="cbxMeasureStatusFilter_Loaded"  />

            <ComboBox x:Name="Symmetry_VerionFilter"  ItemsSource="{Binding Path=SymmetryVersionFilterArr }" Visibility="Hidden" SelectedIndex="0"  />


            <Button  x:Name="btnSearch"  Margin="4" Content=" Search "  Grid.Column="8" Command="{Binding Path=SearchCommand}"  Width="100" >
                <Button.Resources>
                    <local:SearchFilterConverter x:Key="SearchFilterConverter"/>
                </Button.Resources>
                <Button.CommandParameter>
                    <MultiBinding Converter="{StaticResource SearchFilterConverter}" >
                        <Binding Path="SelectedValue" ElementName="cbxPremiumSpecialtyFilter" />
                        <Binding Path="SelectedValue" ElementName="cbxETGBaseFilter"/>
                        <Binding Path="SelectedValue" ElementName="cbxCurrentAttributionFilter"/>
                        <Binding Path="SelectedValue" ElementName="cbxMeasureStatusFilter"/>
                        <!--<Binding Path="SelectedValue" ElementName="Symmetry_VerionFilter"/>-->
                    </MultiBinding>
                </Button.CommandParameter>
            </Button>


            <TextBlock Grid.Row="0"  Grid.Column="9" Margin="10" TextWrapping="Wrap"><Run Text="Current: Symmetry v" FontWeight="Bold" /><Run x:Name="Symmetry_VerionCurrent" Text="{Binding  Path=strCurrentSymmetry_VersionDisplay, Mode=TwoWay}" FontWeight="Bold" Foreground="Red"/></TextBlock>

            <TextBlock Grid.Row="0"  Grid.Column="10" Margin="10" TextWrapping="Wrap"><Run Text="Previous: Symmetry v" FontWeight="Bold" /><Run x:Name="Symmetry_VerionPrevious" Text="{Binding  Path=strPreviousSymmetry_VersionDisplay, Mode=TwoWay}" FontWeight="Bold" Foreground="Red"/></TextBlock>


            <Button x:Name="btnSubmit" HorizontalContentAlignment="Right" HorizontalAlignment="Right"  Margin="4" Grid.Column="11" Content=" Submit Changes " Command="{Binding Path=SaveCommand}" IsEnabled="{Binding NeedsUpdate}"  Width="140" />
        </Grid>
        <!--<ContentControl x:Name="EditableColumnsArr"  DataContext="{Binding Path=EditableColumnsArr}" />-->
        <DockPanel Grid.Row="2" Background="LightBlue">



           


            



           


            <!--<CheckBox IsChecked="{Binding IsUpdatesOnly}"  Margin="7" >Updates Only</CheckBox>-->


            <!--<Label Content="UHPD: " FontWeight="Bold"  />
            <Label x:Name="Symmetry_VerionCurrent" Content="{Binding Path=strCurrentSymmetry_Version, Mode=TwoWay}" FontWeight="Bold"  />-->



            <!--<Button  Margin="4" Content=" Search "  Command="{Binding Path=SearchCommand}" CommandParameter="{Binding SelectedValue, ElementName=PremiumSpecialtyFilter}" Width="75" />
            <Button  x:Name="btnSearch"  Margin="4" Content=" Search " Click="BtnSearch_Click"  Width="75" />-->
            

           






            <!--<Label Content="Symmetry Verion:" FontWeight="Bold" Margin="4" />
            <ComboBox x:Name="Symmetry_VerionFilter" Width="150"  Margin="4" ItemsSource="{Binding Path=ETG_Symmetry_VerionArr }" DisplayMemberPath="Symmetry_Version" SelectedValuePath="Symmetry_Version" SelectedIndex="0"  />
            <Button  x:Name="btnVersion"  Margin="4" Content=" Version "  Command="{Binding Path=VersionCommand}"  Width="75" >
                <Button.Resources>
                    <local:SearchFilterConverter x:Key="SearchFilterConverter"/>
                </Button.Resources>
                <Button.CommandParameter>
                    <MultiBinding Converter="{StaticResource SearchFilterConverter}" >
                        <Binding Path="SelectedValue" ElementName="Symmetry_VerionFilter"/>
                    </MultiBinding>
                </Button.CommandParameter>
            </Button>-->


           
        </DockPanel>

        <!--<local:DataGridExt x:Name="dgETGDataGrid" Grid.Row="2"  ItemsSource="{Binding ETG_Fact_SymmetryListCollectionView}"  AutoGenerateColumns="False"  HorizontalAlignment="Stretch" 
   HorizontalContentAlignment="Stretch" ColumnWidth="*"  FrozenColumnCount="4" ScrollViewer.HorizontalScrollBarVisibility="Auto"  ScrollViewer.VerticalScrollBarVisibility="Auto" CanUserSortColumns="True" ScrollViewer.ScrollChanged="DgETGDataGrid_ScrollChanged"  ScrollViewer.CanContentScroll="True" PreviewMouseUp="DgETGDataGrid_PreviewMouseUp" Height="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=ActualHeight}">-->




        <local:DataGridExt x:Name="dgETGDataGrid" Grid.Row="2"  ItemsSource="{Binding ETG_Fact_SymmetryListCollectionView}"  AutoGenerateColumns="False"  ColumnWidth="SizeToHeader"  FrozenColumnCount="4"  ScrollViewer.CanContentScroll="True" IsReadOnly="{Binding IsReadOnly, Converter={StaticResource InvertBoolConverter}}" CanUserSortColumns="True" CanUserDeleteRows="False" EnableRowVirtualization="True" ScrollViewer.VerticalScrollBarVisibility="Visible" ScrollViewer.HorizontalScrollBarVisibility = "Visible" VerticalAlignment="Top"  PreviewKeyDown="DgETGDataGrid_PreviewKeyDown" >


            <!--<DataGrid.ColumnHeaderStyle>
                <Style TargetType="DataGridColumnHeader">
                    <EventSetter Event="Click" Handler="ColumnHeader_Click" />
                </Style>
            </DataGrid.ColumnHeaderStyle>-->



            <DataGrid.Resources>
                <local:EpisodeCountComparisonConverter x:Key="EpisodeCountComparisonConverter"/>

                <sys:Int32 x:Key="GroupValue">1000</sys:Int32>
                <sys:String x:Key="PSGroup">FAMED,INTMD,PEDS</sys:String>
                <sys:Int32 x:Key="SingleValue">500</sys:Int32>
                <Style x:Key="SpecialistEpisodeCountBackgroundColourStyle" TargetType="{x:Type TextBlock}">
                    <Style.Triggers>
                        <DataTrigger Value="True">
                            <DataTrigger.Binding>
                                <MultiBinding Converter="{StaticResource EpisodeCountComparisonConverter}">
                                    <Binding Path="Text" RelativeSource="{RelativeSource Self}"/>
                                    <Binding Path="Premium_Specialty" />
                                    <Binding Source="{StaticResource GroupValue}"/>
                                    <Binding Source="{StaticResource PSGroup}"/>
                                    <Binding Source="{StaticResource SingleValue}"/>
                                </MultiBinding>
                            </DataTrigger.Binding>
                            <Setter Property="Background" Value="PaleVioletRed" />
                        </DataTrigger>
                    </Style.Triggers>
                    <Setter Property="TextBlock.TextAlignment"  Value="Right" />
                </Style>



                <Style x:Key="ColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
                    <Setter Property="Width" Value="8"/>
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="Cursor" Value="SizeWE"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Thumb}">
                                <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                <Style TargetType="{x:Type DataGridColumnHeader}">
                    <Setter Property="Background" Value="Blue"/>
                    <Setter Property="BorderBrush" Value="Red"/>
                    <Setter Property="BorderThickness" Value="1,1,1,1"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                                <Grid>
                                    <Themes:DataGridHeaderBorder BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" IsClickable="{TemplateBinding CanUserSort}" IsPressed="{TemplateBinding IsPressed}" IsHovered="{TemplateBinding IsMouseOver}" Padding="{TemplateBinding Padding}" SortDirection="{TemplateBinding SortDirection}" SeparatorBrush="{TemplateBinding SeparatorBrush}" SeparatorVisibility="{TemplateBinding SeparatorVisibility}">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <ContentPresenter Grid.Column="0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                            <Path x:Name="SortArrow"
                                            Grid.Column="1"
                                            HorizontalAlignment="Right" VerticalAlignment="Center"                                           
                                            Width="8" Height="6" Margin="2,0,5,0"
                                            Stretch="Fill" Opacity="0.5" Fill="White"
                                            RenderTransformOrigin="0.5,0.4"
                                            Visibility="Collapsed"
                                            Data="M0,0 L1,0 0.5,1 z" />
                                        </Grid>
                                    </Themes:DataGridHeaderBorder>
                                    <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Style="{StaticResource ColumnHeaderGripperStyle}"/>
                                    <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Style="{StaticResource ColumnHeaderGripperStyle}"/>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="SortDirection" Value="Ascending">
                                        <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                                        <Setter TargetName="SortArrow" Property="RenderTransform">
                                            <Setter.Value>
                                                <RotateTransform Angle="180" />
                                            </Setter.Value>
                                        </Setter>
                                    </Trigger>
                                    <Trigger Property="SortDirection" Value="Descending">
                                        <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>





                <!--<SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#FF0000"/>-->
            </DataGrid.Resources>





            <!-- WORK MVVM WAY :) BUT DOESNT SOLVE AUTOSCROLL AND ITS SLOWER :(
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="Sorting">
                    <cmd:EventToCommand Command="{Binding SortCommand}" PassEventArgsToCommand="True" />
                </i:EventTrigger>
            </i:Interaction.Triggers>-->





            <DataGrid.Columns>
                <DataGridTextColumn Header="ETG Symmetry Id"  Binding="{Binding ETG_Fact_Symmetry_id}" IsReadOnly="True" Visibility="Hidden"  SortDirection="Ascending"/>
                <DataGridTextColumn Header=" ETG Base Class "  x:Name="test" Binding="{Binding ETG_Base_Class}" IsReadOnly="True"  SortDirection="Ascending" HeaderStyle="{StaticResource mainHeader}"/>
                <DataGridTextColumn Header=" ETG Base Description " MinWidth="250"  Binding="{Binding ETG_Description}" IsReadOnly="True"   SortDirection="Ascending"  HeaderStyle="{StaticResource mainHeader}" />
                <DataGridTextColumn Header=" Premium Specialty " Binding="{Binding Premium_Specialty}" IsReadOnly="True"   SortDirection="Ascending" HeaderStyle="{StaticResource mainHeader}" />

                <!--<DataGridComboBoxColumn Header="Premium Specialty" SelectedValueBinding="{Binding Premium_Specialty_id}" DisplayMemberPath="Premium_Specialty" SelectedValuePath="Premium_Specialty_id">
                    <DataGridComboBoxColumn.ElementStyle>
                        <Style TargetType="{x:Type ComboBox}">
                            <Setter Property="ItemsSource" Value="{Binding Path=DataContext.ETG_Dim_PremiumSpecArr, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}" />
                        </Style>
                    </DataGridComboBoxColumn.ElementStyle>
                    <DataGridComboBoxColumn.EditingElementStyle>
                        <Style TargetType="{x:Type ComboBox}">
                            <Setter Property="ItemsSource" Value="{Binding Path=DataContext.ETG_Dim_PremiumSpecArr, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"  />
                        </Style>
                    </DataGridComboBoxColumn.EditingElementStyle>
                </DataGridComboBoxColumn>-->
                <DataGridTextColumn Header=" Previous LOB " Binding="{Binding LOBPreviousString}" IsReadOnly="True"   SortDirection="Ascending"  HeaderStyle="{StaticResource mainHeader}" />

                <DataGridComboBoxColumn Header=" Current LOB " SelectedValueBinding="{Binding LOBCurrentString, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" HeaderStyle="{StaticResource mainHeader}" >
                    <DataGridComboBoxColumn.CellStyle>
                        <Style TargetType="DataGridCell">
                            <Style.Triggers>
                                <Trigger Property="IsSelected"
                                            Value="False">
                                    <Setter Property="Background"
                                            Value="{StaticResource clrEditable}" />
                                    <Setter Property="Foreground"
                                            Value="Black" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </DataGridComboBoxColumn.CellStyle>
                    <DataGridComboBoxColumn.ElementStyle>
                        <Style TargetType="{x:Type ComboBox}">
                            <Setter Property="ItemsSource" Value="{Binding Path=DataContext.LOBOptionsArr, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}" />
                        </Style>
                    </DataGridComboBoxColumn.ElementStyle>
                    <DataGridComboBoxColumn.EditingElementStyle>
                        <Style TargetType="{x:Type ComboBox}">
                            <Setter Property="ItemsSource" Value="{Binding Path=DataContext.LOBOptionsArr, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"  />
                        </Style>
                    </DataGridComboBoxColumn.EditingElementStyle>
                </DataGridComboBoxColumn>


                




                <DataGridTextColumn Header=" Previous Rx/NRx " MinWidth="100" IsReadOnly="True"  Binding="{Binding has_nrx}" SortDirection="Ascending"  HeaderStyle="{StaticResource mainHeader}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>

                <DataGridTextColumn Header=" Current Rx/NRx " MinWidth="100" IsReadOnly="True"  Binding="{Binding has_rx}" SortDirection="Ascending"  HeaderStyle="{StaticResource mainHeader}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>



                <DataGridTextColumn Header=" PC Previous TX Indicator " IsReadOnly="True"  Binding="{Binding Pop_Cost_Previous_Treatment_Indicator}"  SortDirection="Ascending"  HeaderStyle="{StaticResource pcHeader}" />

                <DataGridComboBoxColumn Header=" PC Current TX Indicator "  SelectedValueBinding="{Binding Pop_Cost_Current_Treatment_Indicator, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"  HeaderStyle="{StaticResource pcHeader}" >
                    <DataGridComboBoxColumn.CellStyle>
                        <Style TargetType="DataGridCell">
                            <Style.Triggers>
                                <Trigger Property="IsSelected"
                                            Value="False">
                                    <Setter Property="Background"
                                            Value="{StaticResource clrEditable}" />
                                    <Setter Property="Foreground"
                                            Value="Black" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </DataGridComboBoxColumn.CellStyle>
                    <DataGridComboBoxColumn.ElementStyle>
                        <Style TargetType="{x:Type ComboBox}">
                            <Setter Property="ItemsSource" Value="{Binding Path=DataContext.TreatmentIndicatorOptionsArr, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}" />
                        </Style>
                    </DataGridComboBoxColumn.ElementStyle>
                    <DataGridComboBoxColumn.EditingElementStyle>
                        <Style TargetType="{x:Type ComboBox}">
                            <Setter Property="ItemsSource" Value="{Binding Path=DataContext.TreatmentIndicatorOptionsArr, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"  />
                        </Style>
                    </DataGridComboBoxColumn.EditingElementStyle>
                </DataGridComboBoxColumn>





                <DataGridTextColumn Header=" PC Episode Cnt " IsReadOnly="True"  Binding="{Binding Pop_Cost_Episode_Count_Commercial_Only, StringFormat={}{0:N0}}" SortDirection="Ascending"  HeaderStyle="{StaticResource pcHeader}">
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>


                <DataGridTextColumn Header=" PC Tot Cost " MinWidth="100" IsReadOnly="True"  Binding="{Binding Total_Cost_Commercial_Only, StringFormat={}{0:c0}}" SortDirection="Ascending" HeaderStyle="{StaticResource pcHeader}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>

                <DataGridTextColumn Header=" PC Avg Cost " MinWidth="100" IsReadOnly="True"  Binding="{Binding Average_Cost_Commercial_Only, StringFormat={}{0:c0}}" SortDirection="Ascending"  HeaderStyle="{StaticResource pcHeader}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>

                <DataGridTextColumn Header=" PC CV " IsReadOnly="True"  Binding="{Binding Coefficients_of_Variation_Commercial_Only, StringFormat={}{0:N4}}" SortDirection="Ascending"  HeaderStyle="{StaticResource pcHeader}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>

                <!--<DataGridTextColumn Header=" Normalized Pricing Episode Cnt " IsReadOnly="True"  Binding="{Binding Normalized_Pricing_Episode_Count, StringFormat={}{0:N0}}" SortDirection="Ascending"  HeaderStyle="{StaticResource pcHeader}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>

                <DataGridTextColumn Header=" Normalized Pricing Total Cost " IsReadOnly="True"  Binding="{Binding Normalized_Pricing_Total_Cost, StringFormat={}{0:c0}}" SortDirection="Ascending"  HeaderStyle="{StaticResource pcHeader}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>-->


                <DataGridTextColumn Header=" PC Spec Episode Cnt " IsReadOnly="True"  Binding="{Binding Specialist_Episode_Count, StringFormat={}{0:N0}}" SortDirection="Ascending" ElementStyle="{StaticResource SpecialistEpisodeCountBackgroundColourStyle}"  HeaderStyle="{StaticResource pcHeader}" />



                <DataGridTextColumn Header=" PC Spec Episode Distribution  " IsReadOnly="True"  Binding="{Binding Pop_Cost_Episode_Distribution, StringFormat={}{0:N4}}" SortDirection="Ascending"  HeaderStyle="{StaticResource pcHeader}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>



               <DataGridTextColumn Header=" PC Spec % of Episodes  " IsReadOnly="True"  Binding="{Binding Percent_of_Episodes, StringFormat={}{0:P2}}" SortDirection="Ascending"  HeaderStyle="{StaticResource pcHeader}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn> 



                <DataGridTextColumn Header=" PC Spec Tot Cost " MinWidth="100" IsReadOnly="True"  Binding="{Binding Specialist_Total_Cost, StringFormat={}{0:c0}}" SortDirection="Ascending" HeaderStyle="{StaticResource pcHeader}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>


                <DataGridTextColumn Header=" PC Spec Avg Cost " MinWidth="100" IsReadOnly="True"  Binding="{Binding Specialist_Average_Cost, StringFormat={}{0:c0}}" SortDirection="Ascending" HeaderStyle="{StaticResource pcHeader}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>


                <DataGridTextColumn Header=" PC Spec CV  " IsReadOnly="True"  Binding="{Binding Specialist_CV, StringFormat={}{0:N4}}" SortDirection="Ascending"  HeaderStyle="{StaticResource pcHeader}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>


                <!--<DataGridTextColumn Header=" Pop Cost Changes Made " Binding="{Binding Pop_Cost_Changes_Made}" IsReadOnly="True"   SortDirection="Ascending" HeaderStyle="{StaticResource pcHeader}" />-->


                <DataGridTextColumn Header=" PC Prev Attribution " IsReadOnly="True" Binding="{Binding Previous_Attribution}"  SortDirection="Ascending"  HeaderStyle="{StaticResource pcHeader}" />
                <DataGridComboBoxColumn Header=" PC Current Attribution " SelectedValueBinding="{Binding Current_Attribution, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"  HeaderStyle="{StaticResource pcHeader}">
                    <DataGridComboBoxColumn.CellStyle>
                        <Style TargetType="DataGridCell">
                            <Style.Triggers>
                                <Trigger Property="IsSelected"
                                            Value="False">
                                    <Setter Property="Background"
                                            Value="{StaticResource clrEditable}" />
                                    <Setter Property="Foreground"
                                            Value="Black" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </DataGridComboBoxColumn.CellStyle>
                    <DataGridComboBoxColumn.ElementStyle>
                        <Style TargetType="{x:Type ComboBox}">
                            <Setter Property="ItemsSource" Value="{Binding Path=DataContext.AttributionOptionsArr, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}" />
                        </Style>
                    </DataGridComboBoxColumn.ElementStyle>
                    <DataGridComboBoxColumn.EditingElementStyle>
                        <Style TargetType="{x:Type ComboBox}">
                            <Setter Property="ItemsSource" Value="{Binding Path=DataContext.AttributionOptionsArr, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"  />
                        </Style>
                    </DataGridComboBoxColumn.EditingElementStyle>
                </DataGridComboBoxColumn>

                <DataGridTextColumn Header=" PC Change Comments " MinWidth="400"  IsReadOnly="{Binding IsEditEnabled, Converter={StaticResource InvertBoolConverter}}"  Binding="{Binding Pop_Cost_Change_Comments, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"  SortDirection="Ascending"  HeaderStyle="{StaticResource pcHeader}" />


                <DataGridTextColumn Header=" Previous EC Treatment Indicator "  IsReadOnly="True" Binding="{Binding Previous_Episode_Cost_Treatment_Indicator}"  SortDirection="Ascending"   HeaderStyle="{StaticResource ecHeader}"/>
                <DataGridComboBoxColumn Header=" Current EC Treatment Indicator " SelectedValueBinding="{Binding Current_Episode_Cost_Treatment_Indicator, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"  HeaderStyle="{StaticResource ecHeader}">
                    <DataGridComboBoxColumn.CellStyle>
                        <Style TargetType="DataGridCell">
                            <Style.Triggers>
                                <Trigger Property="IsSelected"
                                            Value="False">
                                    <Setter Property="Background"
                                            Value="{StaticResource clrEditable}" />
                                    <Setter Property="Foreground"
                                            Value="Black" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </DataGridComboBoxColumn.CellStyle>
                    <DataGridComboBoxColumn.ElementStyle>
                        <Style TargetType="{x:Type ComboBox}">
                            <Setter Property="ItemsSource" Value="{Binding Path=DataContext.TreatmentIndicatorECOptionsArr, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}" />
                        </Style>
                    </DataGridComboBoxColumn.ElementStyle>
                    <DataGridComboBoxColumn.EditingElementStyle>
                        <Style TargetType="{x:Type ComboBox}">
                            <Setter Property="ItemsSource" Value="{Binding Path=DataContext.TreatmentIndicatorECOptionsArr, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"  />
                        </Style>
                    </DataGridComboBoxColumn.EditingElementStyle>
                </DataGridComboBoxColumn>




                <DataGridTextColumn Header=" EC Episode Cnt " IsReadOnly="True"  Binding="{Binding Episode_Cost_Episode_Count_Commercial_Only, StringFormat={}{0:N0}}" SortDirection="Ascending" ElementStyle="{StaticResource SpecialistEpisodeCountBackgroundColourStyle}"  HeaderStyle="{StaticResource ecHeader}" />


                <DataGridTextColumn Header=" EC Tot Cost " MinWidth="100" IsReadOnly="True"  Binding="{Binding Episode_Cost_Total_Cost_Commercial_Only, StringFormat={}{0:c0}}" SortDirection="Ascending" HeaderStyle="{StaticResource ecHeader}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>


                <DataGridTextColumn Header=" EC Avg Cost " MinWidth="100" IsReadOnly="True"  Binding="{Binding Episode_Cost_Average_Cost_Commercial_Only, StringFormat={}{0:c0}}" SortDirection="Ascending" HeaderStyle="{StaticResource ecHeader}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>


                <DataGridTextColumn Header=" EC CV " IsReadOnly="True"  Binding="{Binding Episode_Cost_Coefficients_of_Variation_Commercial_Only, StringFormat={}{0:N4}}" SortDirection="Ascending"  HeaderStyle="{StaticResource ecHeader}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>



                <!--
                <DataGridTextColumn Header=" EC Normalized Pricing Episode Cnt " IsReadOnly="True"  Binding="{Binding Episode_Cost_Normalized_Pricing_Episode_Count, StringFormat={}{0:N0}}" SortDirection="Ascending" ElementStyle="{StaticResource SpecialistEpisodeCountBackgroundColourStyle}"  HeaderStyle="{StaticResource ecHeader}" />


                <DataGridTextColumn Header=" EC Normalized Pricing Total Cost " MinWidth="100" IsReadOnly="True"  Binding="{Binding Episode_Cost_Normalized_Pricing_Total_Cost, StringFormat={}{0:c0}}" SortDirection="Ascending" HeaderStyle="{StaticResource ecHeader}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn> -->



                <DataGridTextColumn Header=" EC Spec Episode Cnt " IsReadOnly="True"  Binding="{Binding Episode_Count, StringFormat={}{0:N0}}"  SortDirection="Ascending" ElementStyle="{StaticResource SpecialistEpisodeCountBackgroundColourStyle}"  HeaderStyle="{StaticResource ecHeader}" />





                <DataGridTextColumn Header=" EC Spec Episode Distribution  " IsReadOnly="True"  Binding="{Binding Episode_Cost_Episode_Distribution, StringFormat={}{0:N4}}" SortDirection="Ascending"  HeaderStyle="{StaticResource ecHeader}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>

                <DataGridTextColumn Header=" EC Spec % of Episodes  " IsReadOnly="True"  Binding="{Binding Episode_Cost_Percent_of_Episodes, StringFormat={}{0:P2}}" SortDirection="Ascending"  HeaderStyle="{StaticResource ecHeader}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>


                <DataGridTextColumn Header=" EC Spec Tot Cost " MinWidth="100" IsReadOnly="True"  Binding="{Binding Episode_Cost_Total_Cost, StringFormat={}{0:c0}}" SortDirection="Ascending" HeaderStyle="{StaticResource ecHeader}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>

                <DataGridTextColumn Header=" EC Spec Avg Cost " MinWidth="100" IsReadOnly="True"  Binding="{Binding Episode_Cost_Average_Cost, StringFormat={}{0:c0}}" SortDirection="Ascending" HeaderStyle="{StaticResource ecHeader}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>

                <DataGridTextColumn Header=" EC Spec CV " MinWidth="100" IsReadOnly="True"  Binding="{Binding Episode_Cost_Specialist_CV, StringFormat={}{0:c0}}" SortDirection="Ascending" HeaderStyle="{StaticResource ecHeader}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>

                <!--<DataGridTextColumn Header="EC Previous Mapping "  IsReadOnly="True" Binding="{Binding Previous_Mapping}"  SortDirection="Ascending"   HeaderStyle="{StaticResource ecHeader}"/>-->



                

                <DataGridComboBoxColumn Header=" EC Previous Mapping "  SelectedValueBinding="{Binding Previous_Mapping, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"   HeaderStyle="{StaticResource ecHeader}">
                    <DataGridComboBoxColumn.CellStyle>
                        <Style TargetType="DataGridCell">
                            <Style.Triggers>
                                <Trigger Property="IsSelected"
                                            Value="False">
                                    <Setter Property="Background"
                                            Value="{StaticResource clrEditable}" />
                                    <Setter Property="Foreground"
                                            Value="Black" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </DataGridComboBoxColumn.CellStyle>
                    <DataGridComboBoxColumn.ElementStyle>
                        <Style TargetType="{x:Type ComboBox}">
                            <Setter Property="ItemsSource" Value="{Binding Path=DataContext.MappingOptionsArr, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}" />
                        </Style>
                    </DataGridComboBoxColumn.ElementStyle>
                    <DataGridComboBoxColumn.EditingElementStyle>
                        <Style TargetType="{x:Type ComboBox}">
                            <Setter Property="ItemsSource" Value="{Binding Path=DataContext.MappingOptionsArr, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"  />
                            <EventSetter Event="SelectionChanged" Handler="ECPreviousMappingSelectionChanged" />
                        </Style>
                    </DataGridComboBoxColumn.EditingElementStyle>
                </DataGridComboBoxColumn>






                <DataGridComboBoxColumn Header=" EC Current Mapping " x:Name="cbxECCurrentMapping" SelectedValueBinding="{Binding Current_Mapping, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"   HeaderStyle="{StaticResource ecHeader}">
                    <DataGridComboBoxColumn.CellStyle>
                        <Style TargetType="DataGridCell">
                            <Style.Triggers>
                                <Trigger Property="IsSelected"
                                            Value="False">
                                    <Setter Property="Background"
                                            Value="{StaticResource clrEditable}" />
                                    <Setter Property="Foreground"
                                            Value="Black" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </DataGridComboBoxColumn.CellStyle>
                    <DataGridComboBoxColumn.ElementStyle>
                        <Style TargetType="{x:Type ComboBox}">
                            <Setter Property="ItemsSource" Value="{Binding Path=DataContext.MappingOptionsArr, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}" />
                        </Style>
                    </DataGridComboBoxColumn.ElementStyle>
                    <DataGridComboBoxColumn.EditingElementStyle>
                        <Style TargetType="{x:Type ComboBox}">
                            <Setter Property="ItemsSource" Value="{Binding Path=DataContext.MappingOptionsArr, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"  />
                        </Style>
                    </DataGridComboBoxColumn.EditingElementStyle>
                </DataGridComboBoxColumn>

                <!-- <DataGridTextColumn Header=" EC Changes Made " Binding="{Binding Episode_Cost_Changes_Made}" IsReadOnly="True"   SortDirection="Ascending" HeaderStyle="{StaticResource ecHeader}" />-->



                <DataGridTextColumn Header=" EC Change Comments "  IsReadOnly="{Binding IsEditEnabled, Converter={StaticResource InvertBoolConverter}}" MinWidth="400"  Binding="{Binding Episode_Cost_Change_Comments, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"  SortDirection="Ascending"   HeaderStyle="{StaticResource ecHeader}"/>



                <DataGridTextColumn Header=" Previous Pt-Centric Mapping "  IsReadOnly="True" Binding="{Binding Previous_Patient_Centric_Mapping}"  SortDirection="Ascending"   HeaderStyle="{StaticResource centHeader}"/>
                <DataGridComboBoxColumn Header=" Current Pt-Centric Mapping " SelectedValueBinding="{Binding Current_Patient_Centric_Mapping, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"   HeaderStyle="{StaticResource centHeader}">
                    <DataGridComboBoxColumn.CellStyle>
                        <Style TargetType="DataGridCell">
                            <Style.Triggers>
                                <Trigger Property="IsSelected"
                                            Value="False">
                                    <Setter Property="Background"
                                            Value="{StaticResource clrEditable}" />
                                    <Setter Property="Foreground"
                                            Value="Black" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </DataGridComboBoxColumn.CellStyle>
                    <DataGridComboBoxColumn.ElementStyle>
                        <Style TargetType="{x:Type ComboBox}">
                            <Setter Property="ItemsSource" Value="{Binding Path=DataContext.PatientCentricMappingOptionsArr, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}" />
                        </Style>
                    </DataGridComboBoxColumn.ElementStyle>
                    <DataGridComboBoxColumn.EditingElementStyle>
                        <Style TargetType="{x:Type ComboBox}">
                            <Setter Property="ItemsSource" Value="{Binding Path=DataContext.PatientCentricMappingOptionsArr, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"  />
                        </Style>
                    </DataGridComboBoxColumn.EditingElementStyle>
                </DataGridComboBoxColumn>


                <DataGridTextColumn Header=" Pt-Centric Change Comments "  IsReadOnly="{Binding IsEditEnabled, Converter={StaticResource InvertBoolConverter}}" MinWidth="400"  Binding="{Binding Patient_Centric_Change_Comments, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"  SortDirection="Ascending"   HeaderStyle="{StaticResource centHeader}"/>




                <!--<DataGridTextColumn Header=" Is_Config " IsReadOnly="True"  Binding="{Binding Is_Config}" SortDirection="Ascending"   HeaderStyle="{StaticResource centHeader}" />-->

                <DataGridTextColumn Header=" Measure Status " IsReadOnly="True"  Binding="{Binding Measure_Status}" SortDirection="Ascending"   HeaderStyle="{StaticResource centHeader}" />

            </DataGrid.Columns>








            <i:Interaction.Behaviors>
                <local:SyncedColumnWidthsBehavior />
            </i:Interaction.Behaviors>
        </local:DataGridExt>



        <!--<StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Grid.Row="3" Width="350" Margin="10" >

           
            <Button Content=" Next " Height="30" Command="{Binding NextCommand}" Margin="3"/>
            <Label  Margin="6" Background="White" Width="200">
                <Label.Content>

                    <TextBlock>
                        <Run Text="Current Page:"/>
                         <Run Text="{Binding Path=ETG_Fact_SymmetryListCollectionView.CurrentPage, Mode=OneWay}"/>
                        <Run Text=" out of "/>
                        <Run Text="{Binding Path=ETG_Fact_SymmetryListCollectionView.PageCount, Mode=OneWay}"/>       
                    </TextBlock>
        </Label.Content>
        </Label>
        <Button Content=" Previous " Height="30"   Command="{Binding PreviousCommand}"  Margin="3"/>
        </StackPanel>-->

    </Grid>
</UserControl>

