// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.IO;
using System.Linq;
using Microsoft.ML;
using TFS_ClinicalAnalyticsML.Model;

namespace TFS_ClinicalAnalyticsML.ConsoleApp
{
    class Program
    {
        //Dataset to use for predictions 
        private const string DATA_FILEPATH = @"C:\Users\cgiorda\AppData\Local\Temp\2e12eb91-7d75-4bf9-b5e3-ce1432cc2362.tsv";

        static void Main(string[] args)
        {
            // Create single instance of sample data from first line of dataset for model input
            ModelInput sampleData = CreateSingleDataSample(DATA_FILEPATH);

            // Make a single prediction on the sample data and print results
            var predictionResult = ConsumeModel.Predict(sampleData);

            Console.WriteLine("Using model to make single prediction -- Comparing actual Hydroxychlo with predicted Hydroxychlo from sample data...\n\n");
            Console.WriteLine($"pdf_id: {sampleData.Pdf_id}");
            Console.WriteLine($"Chloroquine: {sampleData.Chloroquine}");
            Console.WriteLine($"Zithromax: {sampleData.Zithromax}");
            Console.WriteLine($"VitD: {sampleData.VitD}");
            Console.WriteLine($"Magnesium: {sampleData.Magnesium}");
            Console.WriteLine($"Prone: {sampleData.Prone}");
            Console.WriteLine($"ICU: {sampleData.ICU}");
            Console.WriteLine($"Steroid: {sampleData.Steroid}");
            Console.WriteLine($"Remdesivir: {sampleData.Remdesivir}");
            Console.WriteLine($"EIDD_2801: {sampleData.EIDD_2801}");
            Console.WriteLine($"Antibiotic: {sampleData.Antibiotic}");
            Console.WriteLine($"Rocephin: {sampleData.Rocephin}");
            Console.WriteLine($"Ceftriaxone: {sampleData.Ceftriaxone}");
            Console.WriteLine($"Other_Antibio: {sampleData.Other_Antibio}");
            Console.WriteLine($"Zinc: {sampleData.Zinc}");
            Console.WriteLine($"Plasma: {sampleData.Plasma}");
            Console.WriteLine($"Hyperbar_O2: {sampleData.Hyperbar_O2}");
            Console.WriteLine($"Avigan_Favip: {sampleData.Avigan_Favip}");
            Console.WriteLine($"Acterma_Tociliz: {sampleData.Acterma_Tociliz}");
            Console.WriteLine($"Kevzara_Sarilumb: {sampleData.Kevzara_Sarilumb}");
            Console.WriteLine($"Montelu_Singul: {sampleData.Montelu_Singul}");
            Console.WriteLine($"Vit_C: {sampleData.Vit_C}");
            Console.WriteLine($"Lovenox_Hep: {sampleData.Lovenox_Hep}");
            Console.WriteLine($"Aspirin_ASA: {sampleData.Aspirin_ASA}");
            Console.WriteLine($"Vent: {sampleData.Vent}");
            Console.WriteLine($"Intubated: {sampleData.Intubated}");
            Console.WriteLine($"Vent_Split: {sampleData.Vent_Split}");
            Console.WriteLine($"Fever_PosCovid: {sampleData.Fever_PosCovid}");
            Console.WriteLine($"PE_Bloodclot: {sampleData.PE_Bloodclot}");
            Console.WriteLine($"PulmEmb_DVT_Clot: {sampleData.PulmEmb_DVT_Clot}");
            Console.WriteLine($"Pulm_Embolism: {sampleData.Pulm_Embolism}");
            Console.WriteLine($"DVT_Bloodclot: {sampleData.DVT_Bloodclot}");
            Console.WriteLine($"Atazanavir: {sampleData.Atazanavir}");
            Console.WriteLine($"Tenofovir: {sampleData.Tenofovir}");
            Console.WriteLine($"Lamivudine: {sampleData.Lamivudine}");
            Console.WriteLine($"Ritonavir: {sampleData.Ritonavir}");
            Console.WriteLine($"pdf_text: {sampleData.Pdf_text}");
            Console.WriteLine($"\n\nActual Hydroxychlo: {sampleData.Hydroxychlo} \nPredicted Hydroxychlo: {predictionResult.Prediction}\n\n");
            Console.WriteLine("=============== End of process, hit any key to finish ===============");
            Console.ReadKey();
        }

        // Change this code to create your own sample data
        #region CreateSingleDataSample
        // Method to load single row of dataset to try a single prediction
        private static ModelInput CreateSingleDataSample(string dataFilePath)
        {
            // Create MLContext
            MLContext mlContext = new MLContext();

            // Load dataset
            IDataView dataView = mlContext.Data.LoadFromTextFile<ModelInput>(
                                            path: dataFilePath,
                                            hasHeader: true,
                                            separatorChar: '\t',
                                            allowQuoting: true,
                                            allowSparse: false);

            // Use first line of dataset as model input
            // You can replace this with new test data (hardcoded or from end-user application)
            ModelInput sampleForPrediction = mlContext.Data.CreateEnumerable<ModelInput>(dataView, false)
                                                                        .First();
            return sampleForPrediction;
        }
        #endregion
    }
}
