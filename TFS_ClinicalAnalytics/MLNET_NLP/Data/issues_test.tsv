ID	Area	Title	Description
24597	area-System.Net	HttpWebRequest Not Supported HTTP/1.0?	```  HttpRequest = (HttpWebRequest)WebRequest.CreateHttp(url);  HttpRequest.Method = method;  HttpRequest.ProtocolVersion = System.Net.HttpVersion.Version10;  ```  Parameter 1.0 is specified, but is not valid    Analysis of Using wireshark is still 1.1
24598	area-System.Diagnostics	System.Diagnostics.Tests.ProcessCollectionTests.TestThreadCollectionBehavior failed in CI	Failed test: System.Diagnostics.Tests.ProcessCollectionTests.TestThreadCollectionBehavior    Configuration:   osx10.12_debug    Detail: https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_debug/3296/testReport/System.Diagnostics.Tests/ProcessCollectionTests/TestThreadCollectionBehavior/    MESSAGE:  ~~~  System.IndexOutOfRangeException : Index was outside the bounds of the array.  ~~~    STACK TRACE:  ~~~  at System.Diagnostics.Tests.ProcessCollectionTests.TestThreadCollectionBehavior() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/src/System.Diagnostics.Process/tests/ProcessCollectionTests.cs:line 95  ~~~  
24599	area-System.Diagnostics	System.Diagnostics.Tests.ProcessStartInfoTests.TestEnvironmentOfChildProcess failed in CI	Failed test: System.Diagnostics.Tests.ProcessStartInfoTests.TestEnvironmentOfChildProcess     Configuration: osx10.12_debug    Detail: https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_debug/3296/testReport/System.Diagnostics.Tests/ProcessStartInfoTests/TestEnvironmentOfChildProcess/    MESSAGE:  Expected: HUDSON_COOKIE=2b6c4278-574d-442d-ad2f-c878bb995f20, WORKSPACE=/Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug, LANG=en_US.UTF-8, BUILD_TAG=jenkins-dotnet_corefx-master-osx10.12_debug-3296, GitBranchOrCommit=*/master, BUILD_NUMBER=3296, JOB_DISPLAY_URL=https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_debug/display/redirect, GIT_PREVIOUS_COMMIT=3143b836af48be68d3b02b45188b134dca25b27c, EXECUTION_DIR=/Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/bin/tests/System.Diagnostics.Process.Tests/netcoreapp-OSX-Debug-x64, JENKINS_SERVER_COOKIE=637e320b5b282ff8, HOME=/Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/tempHome, XPC_FLAGS=0x0, BranchName=master, SHLVL=7, QualifiedRepoName=dotnet/corefx, BUILD_TIMESTAMP=2017-10-11 21:36:27 PDT, HUDSON_SERVER_COOKIE=637e320b5b282ff8, GithubProjectName=corefx, GIT_BRANCH=origin/master, NODE_LABELS=dci-mac-build-054 dtap osx-10.12, OLDPWD=/Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/src/System.Diagnostics.Process/tests, JENKINS_HOME=/jenkins, BUILD_DISPLAY_NAME=#3296, GIT_PREVIOUS_SUCCESSFUL_COMMIT=3143b836af48be68d3b02b45188b134dca25b27c, _=/Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/bin/testhost/netcoreapp-OSX-Debug-x64//dotnet, CORECLR_SERVER_GC=0, com.apple.java.jvmTask=CommandLine, JAVA_ARCH=x86_64, HUDSON_URL=https://ci.dot.net/, BUILD_URL=https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_debug/3296/, __BUILDTOOLS_USE_CSPROJ=true, AutoSaveReproEnv=false, MSBuildLoadMicrosoftTargetsReadOnly=true, XPC_SERVICE_NAME=0, MSBuildForwardPropertiesFromChild=TargetPath, JENKINS_URL=https://ci.dot.net/, LC_ALL=en_US.UTF-8, RUNTIME_PATH=/Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/bin/testhost/netcoreapp-OSX-Debug-x64/, GIT_COMMIT=882303fc6863f3cfd86c6860c37fd898905d781f, BUILD_ID=3296, PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin, NODE_NAME=dci-mac-build-054, EXECUTOR_NUMBER=0, DOTNET_CLI_TELEMETRY_PROFILE=IsInternal_CIServer;dotnet/corefx, GIT_URL=https://github.com/dotnet/corefx.git, __CF_USER_TEXT_ENCODING=0x0:0:0, JOB_URL=https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_debug/, JAVA_MAIN_CLASS_66742=hudson.remoting.Launcher, HUDSON_HOME=/jenkins, JOB_BASE_NAME=osx10.12_debug, TestEnvironmentOfChildProcess_SpecialStuff=?\n?, RUN_CHANGES_DISPLAY_URL=https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_debug/3296/display/redirect?page=changes, PWD=/Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/bin/tests/System.Diagnostics.Process.Tests/netcoreapp-OSX-Debug-x64, RUN_DISPLAY_URL=https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_debug/3296/display/redirect, JOB_NAME=dotnet_corefx/master/osx10.12_debug, GithubOrgName=dotnet\n    Actual: \n  Expected: True\n  Actual: False    STACK TRACE:  at System.Diagnostics.Tests.ProcessStartInfoTests.TestEnvironmentOfChildProcess() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/src/System.Diagnostics.Process/tests/ProcessStartInfoTests.cs:line 225
24600	area-System.Diagnostics	System.Diagnostics.Tests.ProcessStreamReadTests.TestAsyncErrorStream failed in CI	Failed test: System.Diagnostics.Tests.ProcessStreamReadTests.TestAsyncErrorStream     Configuration: osx10.12_debug    Detail: https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_debug/3296/testReport/System.Diagnostics.Tests/ProcessStreamReadTests/TestAsyncErrorStream/    MESSAGE:  ~~~  Assert.Equal() Failure\n ? (pos 0)\nExpected: System.Diagnostics.Process.Tests started ···\nActual: A fatal error occurred, the required libr···\n ? (pos 0)  ~~~    STACK TRACE:  ~~~  at System.Diagnostics.Tests.ProcessStreamReadTests.TestAsyncErrorStream() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/src/System.Diagnostics.Process/tests/ProcessStreamReadTests.cs:line 50  ~~~
24601	area-System.Diagnostics	System.Diagnostics.Tests.ProcessTests.TestBasePriorityOnUnix failed in CI	Failed tests:    * System.Diagnostics.Tests.ProcessTests.TestBasePriorityOnUnix     * System.Diagnostics.Tests.ProcessStreamReadTests.TestAsyncErrorStream     Configuration: osx10.12_debug    Detail:  * https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_debug/3296/testReport/System.Diagnostics.Tests/ProcessTests/TestBasePriorityOnUnix/  * https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_debug/3296/testReport/System.Diagnostics.Tests/ProcessStreamReadTests/TestAsyncErrorStream/    MESSAGE: (System.Diagnostics.Tests.ProcessTests.TestBasePriorityOnUnix)  ~~~  System.ComponentModel.Win32Exception : No such process  ~~~    STACK TRACE:  ~~~  at System.Diagnostics.Process.get_PriorityClassCore() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs:line 196 at System.Diagnostics.Process.get_PriorityClass() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs:line 466   at System.Diagnostics.Tests.ProcessTests.TestBasePriorityOnUnix() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/src/System.Diagnostics.Process/tests/ProcessTests.Unix.cs:line 238  ~~~      MESSAGE: (System.Diagnostics.Tests.ProcessStreamReadTests.TestAsyncErrorStream)  ~~~  Assert.Equal() Failure\n ? (pos 0)\nExpected: System.Diagnostics.Process.Tests started ···\nActual: A fatal error occurred, the required libr···\n ? (pos 0)  ~~~    STACK TRACE:  ~~~  at System.Diagnostics.Tests.ProcessStreamReadTests.TestAsyncErrorStream() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/src/System.Diagnostics.Process/tests/ProcessStreamReadTests.cs:line 50  ~~~
24602	area-System.Diagnostics	System.Diagnostics.Tests.ProcessThreadTests.TestThreadStateProperty failed in CI	Failed test: System.Diagnostics.Tests.ProcessThreadTests.TestThreadStateProperty     Configuration: osx10.12_debug    Detail: https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_debug/3296/testReport/System.Diagnostics.Tests/ProcessThreadTests/TestThreadStateProperty/    MESSAGE:  ~~~  System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index  ~~~    STACK TRACE:  ~~~  at System.Collections.ArrayList.get_Item(Int32 index)   at System.Diagnostics.ProcessThreadCollection.get_Item(Int32 index) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs:line 35   at System.Diagnostics.Tests.ProcessThreadTests.TestThreadStateProperty() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/src/System.Diagnostics.Process/tests/ProcessThreadTests.cs:line 199  ~~~
24603	area-System.Diagnostics	System.Diagnostics.Tests.ProcessWaitingTests.SingleProcess_EnableRaisingEvents_CorrectExitCode failed in CI	Failed test: System.Diagnostics.Tests.ProcessWaitingTests.SingleProcess_EnableRaisingEvents_CorrectExitCode    Configuration: osx10.12_debug    Detail: https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_debug/3296/testReport/System.Diagnostics.Tests/ProcessWaitingTests/SingleProcess_EnableRaisingEvents_CorrectExitCode_exitCode__0_/    MESSAGE:  ~~~  Assert.Equal() Failure\nExpected: 0\nActual: 131  ~~~    STACK TRACE:  ~~~  at System.Diagnostics.Tests.ProcessWaitingTests.<SingleProcess_EnableRaisingEvents_CorrectExitCode>d__6.MoveNext() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/src/System.Diagnostics.Process/tests/ProcessWaitingTests.cs:line 123 --- End of stack trace from previous location where exception was thrown ---   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in /Users/buildagent/agent/_work/153/s/src/mscorlib/src/System/Runtime/ExceptionServices/ExceptionServicesCommon.cs:line 130   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) in /Users/buildagent/agent/_work/153/s/src/mscorlib/src/System/Runtime/CompilerServices/TaskAwaiter.cs:line 152 --- End of stack trace from previous location where exception was thrown ---   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in /Users/buildagent/agent/_work/153/s/src/mscorlib/src/System/Runtime/ExceptionServices/ExceptionServicesCommon.cs:line 130   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) in /Users/buildagent/agent/_work/153/s/src/mscorlib/src/System/Runtime/CompilerServices/TaskAwaiter.cs:line 152 --- End of stack trace from previous location where exception was thrown ---   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in /Users/buildagent/agent/_work/153/s/src/mscorlib/src/System/Runtime/ExceptionServices/ExceptionServicesCommon.cs:line 130   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) in /Users/buildagent/agent/_work/153/s/src/mscorlib/src/System/Runtime/CompilerServices/TaskAwaiter.cs:line 152  ~~~
24606	area-System.Memory	System.Memory package for netcoreapp2.0 is missing System.Numerics.Vectors reference	*Steps to Reproduce*:    1. docker run -it --rm microsoft/dotnet:2.0-sdk  2. mkdir ~/project  3. cd ~/project  4. dotnet new console  5. dotnet add package System.Memory --version 4.5.0-preview1-25812-01 --source https://dotnet.myget.org/F/dotnet-core/api/v3/index.json  6. `static void Main() { System.SpanExtensions.SequenceEqual(new byte[123], new byte[123]); }`  7. dotnet run    *Expected Behavior*:    No error.    *Actual Behavior*:    ```  Unhandled Exception: System.IO.FileLoadException: Could not load file or assembly 'System.Numerics.Vectors, Version=4.1.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)     at System.SpanHelpers.SequenceEqual(Byte& first, Byte& second, Int32 length)     at System.SpanExtensions.SequenceEqual(Span`1 first, ReadOnlySpan`1 second)     at project.Program.Main()  ```    *Workaround*:    8. dotnet add package System.Numerics.Vectors --version 4.5.0-preview1-25812-01 --source https://dotnet.myget.org/F/dotnet-core/api/v3/index.json  
24608	area-System.Data	sni.dll bug or problem using the same login.	I think there's a bug where I am using the same login to connect to a database, while another process is doing the same with connection pooling.   The way to test is to create a login for sql server, have 2 different apps connect using the same login under a service (using nssm as the service host). And the messasge sni.dll not found is sent on the connection open command.     The OS 2008 server sql server version 2008 r2.  
24610	area-System.Net	Is System.Net.Sockets a Implement Of NIO?	@anthonywanted commented on [Thu Oct 12 2017](https://github.com/dotnet/core/issues/1025)  # Issue Title    Is System.Net.Sockets an Implement Of NIO?    # General    Just few questions.  Is System.Net.Sockets an Implement of NIO?  In windows, is it an implement of IOCP?  In Linux, is it an implement of epoll?    How about aspnet core?    
24611	area-Serialization	Ignore the type in SGEN if it contains any property that only have private setter	Fix #19723    @shmao @zhenlan @mconnew 
24612	area-Infrastructure	Mark packages as stable for 2.0.3	cc: @weshaggard 
24614	area-System.Memory	Proposal: Span<T>.Sort Extensions	## Span<T>.Sort Extensions    ```csharp  public static class SpanExtensions  {      public static void Sort<T>(this Span<T> span) where T : IComparable<T> { }       public static void Sort<T>(this Span<T> span, Collections.Generic.IComparer<T> comparer) { }       public static void Sort<T>(this Span<T> span, Comparison<T> comparison) { }   }  ```  **Notes:**  * No offset, length overloads as can slice before sort  * Extensions so general case can be overridden by more more specific types     e.g.  ```csharp  public static void Sort(this Span<byte> span) { }   public static void Sort(this Span<MyType> span) { }   ```    Mentioned in api review for array sort https://github.com/dotnet/apireviews/blob/master/2017/10-10-GitHub%20issues.md    /cc @stephentoub @KrzysztofCwalina @terrajobst @karelz 
24615	area-System.Net	add some code to make sure we sent datagram before we try to receive it	This has been long outstanding problem. I was able to reproduce this locally on old Ubuntu 14 and running ALL tests in loop. This did non repro while running only single test or running them in sequence.     I was able to collect traces suggesting that in some cases send() is called after recv failed.   I added Task.Wait() to increase changes that sent is actually done when we try to receive.   With this change I was able to run the test for a day  where it would fail in about one hour before.     My original change had 1s wait. However after one day, it failed again with new debug message that the sending task did not complete in 1s time. This is Azure VM instance where it is not clear what else is happening at the same time. I feel it would be better to be more liberal and possibly wait longer than have random failures. I bumped wait() timeout to 3s and receive timeout to 1s.   This is still best guess but the tests are still running right now. When I get 3-5 days without failure I'll update this PR. I just wanted to get it out so people can comment on it.      fixes  #17681
24616	area-System.IO	Switch WaitNamedPipe and CreateNamedPipeClient invocation ordering.	We need to do this as WaitNamedPipe is not supported in Windows Containers.  With this change, CreateNamedPipeClient will be called first, with call to WaitNamedPipe as  a fallback only. This will allow us to use NamedPipeClientStream inside Windows  Containers.    This should handle both https://github.com/dotnet/corefx/issues/24594 and https://github.com/dotnet/corefx/issues/22014.    Fixes #22014 per @jiria request keeping #24594 open until it is ported to the next servicing release.    [Edit: added last line to close one issue and make clear why the other one is still open]
24617	area-System.Memory	Proposal: {ReadOnly}Memory<T> Extensions (mirror Span)	## `{ReadOnly}Memory<T>` Extensions    ### Background    Came up in https://github.com/dotnet/corefx/pull/24389#discussion_r142536789    Currently you can use all the `Span<T>` extensions and methods from `Memory<T>` by extracting the `Span<T>` e.g.    ```csharp  memory0.Span.SequenceEqual(memory1.Span);  ```    However this has two downsides  1. Not discoverable; you need to use the Span property to find them  2. Span can't be used in an `async` method; so to use them you need to create a second method and call that    ### Proposal    Include the second method as extensions on `{ReadOnly}Memory<T>` that passes through to the Span    ```csharp  public static class MemoryExtensions  {      // Span methods converted to Memory extension      public static void CopyTo<T>(this Memory<T> memory, Memory<T> destination)          => memory.Span.CopyTo(destination.Span);      public static void CopyTo<T>(this ReadOnlyMemory<T> memory, Memory<T> destination)          => memory.Span.CopyTo(destination.Span);      public static bool TryCopyTo<T>(this Memory<T> memory, Memory<T> destination)          => memory.Span.TryCopyTo(destination.Span);      public static bool TryCopyTo<T>(this ReadOnlyMemory<T> memory, Memory<T> destination)          => memory.Span.TryCopyTo(destination.Span);      public static void Fill<T>(this Memory<T> memory, T value)          => memory.Span.Fill(value);        // Array extension as per Span extension      public static void CopyTo<T>(this T[] array, Memory<T> destination)          => array.CopyTo(destination.Span);        // Valid? via Owned memory?      public static ReadOnlyMemory<char> AsReadOnlyMemory(this string text);        // Discoverable conversions as per Span      public static Memory<T> AsMemory<T>(this ArraySegment<T> arraySegment) => arraySegment;      public static Memory<T> AsMemory<T>(this T[] array) => array;        // Span extension pass-throughs      public static int IndexOf(this Memory<byte> memory, byte value)          => memory.Span.IndexOf(value);      public static int IndexOf(this Memory<byte> memory, ReadOnlyMemory<byte> value)          => memory.Span.IndexOf(value.Span);      public static int IndexOf(this ReadOnlyMemory<byte> memory, byte value)          => memory.Span.IndexOf(value);      public static int IndexOf(this ReadOnlyMemory<byte> memory, ReadOnlyMemory<byte> value)          => memory.Span.IndexOf(value.Span);        public static int IndexOf<T>(this Memory<T> memory, T value)          where T : struct, IEquatable<T>          => memory.Span.IndexOf(value);      public static int IndexOf<T>(this Memory<T> memory, ReadOnlyMemory<T> value)          where T : struct, IEquatable<T>          => memory.Span.IndexOf(value.Span);      public static int IndexOf<T>(this ReadOnlyMemory<T> memory, T value)          where T : struct, IEquatable<T>          => memory.Span.IndexOf(value);      public static int IndexOf<T>(this ReadOnlyMemory<T> memory, ReadOnlyMemory<T> value)          where T : struct, IEquatable<T>          => memory.Span.IndexOf(value.Span);        public static int IndexOfAny(this Memory<byte> memory, byte value0, byte value1)          => memory.Span.IndexOfAny(value0, value1);      public static int IndexOfAny(this Memory<byte> memory, byte value0, byte value1, byte value2)          => memory.Span.IndexOfAny(value0, value1, value2);      public static int IndexOfAny(this Memory<byte> memory, ReadOnlyMemory<byte> values)          => memory.Span.IndexOfAny(values.Span);        public static int IndexOfAny(this ReadOnlyMemory<byte> memory, byte value0, byte value1)          => memory.Span.IndexOfAny(value0, value1);      public static int IndexOfAny(this ReadOnlyMemory<byte> memory, byte value0, byte value1, byte value2)          => memory.Span.IndexOfAny(value0, value1, value2);      public static int IndexOfAny(this ReadOnlyMemory<byte> memory, ReadOnlyMemory<byte> values)          => memory.Span.IndexOfAny(values.Span);        public static bool SequenceEqual(this Memory<byte> first, ReadOnlyMemory<byte> second)          => first.Span.SequenceEqual(second.Span);      public static bool SequenceEqual(this ReadOnlyMemory<byte> first, ReadOnlyMemory<byte> second)          => first.Span.SequenceEqual(second.Span);        public static bool SequenceEqual<T>(this Memory<T> first, ReadOnlyMemory<T> value)          where T : struct, IEquatable<T>          => first.Span.SequenceEqual(value.Span);      public static bool SequenceEqual<T>(this ReadOnlyMemory<T> first, ReadOnlyMemory<T> value)          where T : struct, IEquatable<T>          => first.Span.SequenceEqual(value.Span);        public static bool StartsWith(this Memory<byte> memory, ReadOnlyMemory<byte> value)          => memory.Span.StartsWith(value.Span);      public static bool StartsWith(this ReadOnlyMemory<byte> memory, ReadOnlyMemory<byte> value)          => memory.Span.StartsWith(value.Span);        public static bool StartsWith<T>(this Memory<T> memory, ReadOnlyMemory<T> value)          where T : struct, IEquatable<T>          => memory.Span.StartsWith(value.Span);      public static bool StartsWith<T>(this ReadOnlyMemory<T> memory, ReadOnlyMemory<T> value)          where T : struct, IEquatable<T>          => memory.Span.StartsWith(value.Span);  }  ```    ### Notes    Items that change length can't be replicated due to the backing store e,g, `AsBytes`, `NonPortableCast`    ### Question    Is a string conversion possible?  ```csharp      public static ReadOnlyMemory<char> AsReadOnlyMemory(this string text);  ```    /cc @davidfowl @KrzysztofCwalina @stephentoub @jkotas 
24618	area-System.Diagnostics	Create the Microsoft.Diagnostics.EventSource.Redist Nuget Package	The package will be completed once the following is done:     - [X] Create project and solution file for Microsoft.Diagnostics.Tracing.EventSource.Redist.   - [x] Copy the code into CoreFX and make it build.   - [X] Migrate changes required for this nuget package (code changes and missing resource strings) back to CoreCLR.   - [X] Mirror code from CoreCLR repo.   - [X] Use SR for resource strings instead of using ResourceManager directly.   - [X] Produce a nuget package.   - [X] Enable EventSource tests to run against Microsoft.Diagnostics.Tracing.EventSource.Redist during CI.   - [x] Add EventCounter source and tests.  
24619	area-Infrastructure	Fix call to create submission metadata	We made a change to the Benchview tooling and did not update the use of  it in the CoreFX repo.  This fixes that.
24620	area-Infrastructure	Fix call to create submission metadata	We made a change to the Benchview tooling and did not update the use of  it in the CoreFX repo.  This fixes that.
24621	area-System.Data	Improving System.Data.Odbc by making it adhere to interop conventions	Reference: https://github.com/dotnet/corefx/blob/42ce0e696e08e190aceaf8613e47e67d57178550/Documentation/coding-guidelines/interop-guidelines.md    cc: @safern @danmosemsft @stephentoub 
24622	area-Infrastructure	Mark as stable for 1.1.5	All the crypto bumps are for: https://github.com/dotnet/corefx/pull/24459    cc: @weshaggard @bartonjs @ianhays 
24623	area-System.IO	Remove search trimming	Trimming prevents access to valid Windows paths. We've removed trimming from the rest of our API surface, this is the last place we have it.    Fixes #21096
24625	area-Infrastructure	Mark packages as stable for 1.0.8 servicing	cc: @weshaggard @ianhays @bartonjs 
24626	area-System.Memory	Adding ValidateTypeIsBlittable SpanHelper method and rename constant	Addressing leftover feedback from https://github.com/dotnet/corefx/pull/24400#pullrequestreview-69064639    cc @weshaggard, @KrzysztofCwalina, @jkotas  
24627	area-System.Diagnostics	Make stack traces readable	"Now that Task, async and await are prevalent - stack traces have become a lot less readable.    Here's one that I was sent today:    ```  System.InvalidOperationException: The specified API ""ConditionedProperties"" is not available because ProjectLoadSettings.DoNotEvaluateElementsWithFalseCondition was set when loading this project.     at Microsoft.Build.Shared.ErrorUtilities.ThrowInvalidOperation(String resourceName, Object[] args) in e:\projects\msbuild_3\src\Shared\ErrorUtilities.cs:line 304     at Microsoft.Build.Evaluation.Project.get_ConditionedProperties() in e:\projects\msbuild_3\src\Build\Definition\Project.cs:line 709     at Microsoft.VisualStudio.ProjectSystem.CoreProjectConfigurationsDimensionsProvider.<GetProjectConfigurationDimensionsAsync>d__7.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.VisualStudio.ProjectSystem.DeclaredDimensionsProjectConfigurationsService.<CalculateKnownProjectConfigurationsAsync>d__9.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectCache`1.<GetValueAsync>d__6.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.VisualStudio.ProjectSystem.ProjectConfigurationsServiceBase.<GetKnownProjectConfigurationsAsync>d__55.MoveNext()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.CrossTarget.CrossTargetSubscriptionHostBase.<UpdateProjectContextAsync>d__24.MoveNext()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.VisualStudio.ProjectSystem.DefaultingProjectConfigurationsServiceBase.<GetProjectConfigurationAsync>d__3.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.CrossTarget.CrossTargetSubscriptionHostBase.<UpdateProjectContextAndSubscriptionsAsync>d__23.MoveNext()     at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.VSUnconfiguredProjectIntegrationService.<GetActiveProjectConfigurationAsync>d__68.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.VSUnconfiguredProjectIntegrationService.<RefreshActiveProjectConfigurationAsync>d__62.MoveNext()     at Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.CrossTarget.CrossTargetSubscriptionHostBase.<InitializeCoreAsync>d__20.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.VisualStudio.ProjectSystem.VS.NuGet.NuGetRestorer.<RefreshActiveConfigurationAsync>d__18.MoveNext()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.Subscriptions.DependencySubscriptionsHost.<InitializeCoreAsync>d__45.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedAsync.<<-ctor>b__4_0>d.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.VisualStudio.Threading.AsyncLazy`1.<>c__DisplayClass13_1.<<GetValueAsync>b__0>d.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.CrossTarget.CrossTargetSubscriptionHostBase.<EnsureInitialized>d__19.MoveNext()  ```     Here it is minus the noise:    ```  System.InvalidOperationException: The specified API ""ConditionedProperties"" is not available because ProjectLoadSettings.DoNotEvaluateElementsWithFalseCondition was set when loading this project.     at Microsoft.Build.Shared.ErrorUtilities.ThrowInvalidOperation(String resourceName, Object[] args) in e:\projects\msbuild_3\src\Shared\ErrorUtilities.cs:line 304     at Microsoft.Build.Evaluation.Project.get_ConditionedProperties() in e:\projects\msbuild_3\src\Build\Definition\Project.cs:line 709     at Microsoft.VisualStudio.ProjectSystem.CoreProjectConfigurationsDimensionsProvider.<GetProjectConfigurationDimensionsAsync>d__7.MoveNext()     at Microsoft.VisualStudio.ProjectSystem.DeclaredDimensionsProjectConfigurationsService.<CalculateKnownProjectConfigurationsAsync>d__9.MoveNext()     at Microsoft.VisualStudio.ProjectSystem.UnconfiguredProjectCache`1.<GetValueAsync>d__6.MoveNext()     at Microsoft.VisualStudio.ProjectSystem.ProjectConfigurationsServiceBase.<GetKnownProjectConfigurationsAsync>d__55.MoveNext()     at Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.CrossTarget.CrossTargetSubscriptionHostBase.<UpdateProjectContextAsync>d__24.MoveNext()     at Microsoft.VisualStudio.ProjectSystem.DefaultingProjectConfigurationsServiceBase.<GetProjectConfigurationAsync>d__3.MoveNext()     at Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.CrossTarget.CrossTargetSubscriptionHostBase.<UpdateProjectContextAndSubscriptionsAsync>d__23.MoveNext()     at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.VSUnconfiguredProjectIntegrationService.<GetActiveProjectConfigurationAsync>d__68.MoveNext()     at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.VSUnconfiguredProjectIntegrationService.<RefreshActiveProjectConfigurationAsync>d__62.MoveNext()     at Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.CrossTarget.CrossTargetSubscriptionHostBase.<InitializeCoreAsync>d__20.MoveNext()     at Microsoft.VisualStudio.ProjectSystem.VS.NuGet.NuGetRestorer.<RefreshActiveConfigurationAsync>d__18.MoveNext()     at Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.Subscriptions.DependencySubscriptionsHost.<InitializeCoreAsync>d__45.MoveNext()     at Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedAsync.<<-ctor>b__4_0>d.MoveNext()     at Microsoft.VisualStudio.Threading.AsyncLazy`1.<>c__DisplayClass13_1.<<GetValueAsync>b__0>d.MoveNext()     at Microsoft.VisualStudio.ProjectSystem.VS.Tree.Dependencies.CrossTarget.CrossTargetSubscriptionHostBase.<EnsureInitialized>d__19.MoveNext()  ```    Much more understandable/readable.    Is there something we can do to collapse/reduce the noise here?"
24628	area-System.Collections	"Test: System.Collections.Tests.Perf_ArrayList/Indexer failed with ""System.OutOfMemoryException"""	Opened on behalf of @Jiayili1  The test `System.Collections.Tests.Perf_ArrayList/Indexer` has failed.  System.OutOfMemoryException : Exception of type 'System.OutOfMemoryException' was thrown.          Stack Trace:           Build : Master - 20171013.01 (Core Tests) Failing configurations: - Windows.81.Amd64-x86   - Release - Windows.7.Amd64-x86   - Release - Windows.10.Amd64.Core-x86   - Release - Windows.10.Amd64-x86   - Release  Detail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171013.01/workItem/System.Collections.NonGeneric.Performance.Tests/analysis/xunit/System.Collections.Tests.Perf_ArrayList~2FIndexer
24630	area-System.Data	"Test: System.Data.Odbc.Tests.DependencyCheckTest/OdbcConnection_OpenWhenOdbcNotInstalled_ThrowsException failed with ""Xunit.Sdk.ThrowsException"""	Opened on behalf of @Jiayili1  The test `System.Data.Odbc.Tests.DependencyCheckTest/OdbcConnection_OpenWhenOdbcNotInstalled_ThrowsException` has failed.  Assert.Throws() Failure\r     Expected: typeof(System.DllNotFoundException)\r     Actual:   (No exception was thrown)          Stack Trace:             at System.Data.Odbc.Tests.DependencyCheckTest.OdbcConnection_OpenWhenOdbcNotInstalled_ThrowsException() Build : Master - 20171013.01 (Core Tests) Failing configurations: - Windows.10.Amd64.Core-x86   - Release - Windows.10.Amd64.Core-x64   - Release  Detail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171013.01/workItem/System.Data.Odbc.Tests/analysis/xunit/System.Data.Odbc.Tests.DependencyCheckTest~2FOdbcConnection_OpenWhenOdbcNotInstalled_ThrowsException
24634	area-System.Net	How to Disabled Customer HttpHeader (x-ms-* header) with HttpClient?	How to Disabled Customer HttpHeader (x-ms-* header) with HttpClient?    ```  x-ms-request-root-id: e3d90637-45d0d4c5cdb27076  x-ms-request-id: |e3d90637-45d0d4c5cdb27076.1.  Request-Id: |e3d90637-45d0d4c5cdb27076.1.1.  ```
24635	area-System.IO	NamedPipeClientStream not handling error cases correctly	According to the documentation this isn't correct:    ```C#  // The timeout has expired.  if (errorCode == Interop.Errors.ERROR_SUCCESS)  {      if (cancellationToken.CanBeCanceled)      {      ...  ```    It should be checking ERROR_SEM_TIMEOUT.    https://msdn.microsoft.com/en-us/library/windows/desktop/aa365800.aspx  https://msdn.microsoft.com/en-us/library/cc232125.aspx    
24637	area-System.Collections	System.Collections.NonGeneric.Performance.Tests failed	https://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_netcoreapp_centos7.1_debug/196/     No test result generated, but shows the following issue:    /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_centos7.1_debug/Tools/tests.targets(481,5): error : One or more tests failed while running tests from 'System.Collections.NonGeneric.Performance.Tests' please check /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_centos7.1_debug/bin/tests/System.Collections.NonGeneric.Performance.Tests/netcoreapp-Linux-Debug-x64/testResults.xml for details! [/mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_centos7.1_debug/src/System.Collections.NonGeneric/tests/Performance/System.Collections.NonGeneric.Performance.Tests.csproj]  
24638	area-System.Data	NullReferenceException in SqlBulkCopy when setting ColumnMappings with names	We use `SqlBulkCopy` to insert data. In full .NET framework (4, 4.6) it works. The same code in .net core 2 throws `NullReferenceException`. The problem has something to do with column mappings (`SqlBulkCopy.ColumnMappings`). When we set mappings using indexes, everything works. When we set mappings using column names, NRE is thrown. See the attached example.    [SqlBulkCopySample.zip](https://github.com/dotnet/corefx/files/1382531/SqlBulkCopySample.zip)  
24640	area-System.Diagnostics	PerfCounter: Override SystemDiagnosticsSection.Properties	I noticed `s_properties` in `SystemDiagnosticsSection` wasn't used. In the [reference source](https://github.com/Microsoft/referencesource/blob/master/System/compmod/system/diagnostics/SystemDiagnosticsSection.cs#L42-L46) `Properties` is overridden to return `s_properties`, so do that here. Also, minor cleanup while making changes here (and do the same in `PerfCounterSection`).
24641	area-System.Diagnostics	EventSource: Improve debug message more clear	string _EventSource_VarArgsParameterMismatch_ in Microsoft.Diagnostics.tracing.EventSource.Redist could be improved showing lists of mismatch type and how they are not match.    Current debug message is    > parameters to the Event method do not match the parameters to the WriteEvent method. This may cause the event to be displayed incorrectly.  
24642	area-Infrastructure	Port Pipeline and netci.groovy changes from master	This is porting the netci.groovy and Pipeline files from CoreFx master to dev/release/2.0.0.    I need to sync with @mmitche to understand what's the best way to merge this / roll it out.  ie, I know I need to make an update to repolist.txt, it's not clear to me what the preferred method to validate these changes is.  Is it worth validating these in my fork before merging to dotnet/corefx, or is validating post merge sufficient.  
24643	area-System.Data	Correcting OdbcIsAvailable condition check for windows	Fixes #24630    cc: @danmosemsft   
24644	area-System.Net	Fix HttpWebRequest when sending with HTTP/1.0	The HttpWebRequest.ProtocolVersion property was implemented. But it was  not checked when actually creating the request (which uses HttpClient  underneath). So, all requests were sent with HTTP/1.1.    This fix now uses the ProtocolVersion property and sends either  HTTP/1.0 or HTTP/1.1.    Note: HTTP/2.0 is currently not supported when setting the  ProtocolVersion property. An ArgumentException is thrown. This is the  existing .NET Framework behavior which was ported to .NET Core. We could  investigate changing this in the future to allow ProtocolVersion to be  set to 2.0.    Fixes #24597
24645	area-Infrastructure	Update package index	This should fix https://github.com/dotnet/corefx/issues/24606.     This is a follow-up of https://github.com/dotnet/corefx/pull/23168 which fixes the inbox assembly versions.     cc @ericstj     
24646	area-Infrastructure	segfault in System.Net.Http.FunctionalTests on Windows code coverage	https://ci.dot.net/job/dotnet_corefx/job/master/job/code_coverage_windows/346/consoleFull#-113183012733fe3402-0c0f-45a7-a707-47164965bab5    https://dumpling.azurewebsites.net/api/dumplings/archived/f0b9dd148029f34b6dd910d2c5edff204b06aa0c    
24648	area-System.Net	Incorrect SSLStream cipher suites on Linux	"Currently SSLStream just passes ""All"" to OpenSSL for cipher suites. This is causing two unwanted choices:  1. It doesn't enable ECDHE or DHE cipher suites as that requires a separate call to set up.   2. It enables cipher suites using the SEED and CAMELLIA block ciphers, which can cause compliance issues.     We should consider this as a servicing candidate since a better set of suites improves defense-in-depth. "
24650	area-System.ComponentModel	System.ComponentModel.Win32Exception doesn't match ref contract	I encountered an issue while working with the corefx libraries using custom tooling.  It's possible that the following scenario is allowed, but here's what I'm seeing.    In M.Win32.Primitives the Win32Exception class has the GetObjectData method defined in the ref contract.  The method was removed from the implementation in https://github.com/dotnet/corefx/commit/9eafffc6054c8f039d788465621bcfd49a379ca1.  Assemblies in corefx build against the ref contract and have a memberref to a non existing member.  It is still implemented by a base type, but shouldn't this cause method binding errors?  Is this a case that is allowed by CIL spec or is this actually an error hidden by coreclr?    Edit for clarity:  This isn't a binding question, it's more of a CIL decoding question.  The particular error I encountered has a MemberReference token to the method in question.  AFAIK a CIL decoder shouldn't need to do method resolution while trying to decode the stream.    Edit:  The method is also explicitly overridden by Win32Exception in the netstandard contract.
24652	area-System.Runtime	UriTemplate from System.ServiceModel	"It would be nice to be able to do something like this:    ```csharp  private static readonly UriTemplate _activationTemplate = new UriTemplate(""license/activate/{licenseKey}"");  public async Task<LicenseActivationResponse> ActivateAsync(LicenseActivationRequest activationRequest)  {      var requestUrl = _activationTemplate.BindByPosition(_httpClient.BaseAddress, activationRequest.LicenseKey);      var serialized = JsonConvert.SerializeObject(activationRequest, _serializerSettings);      var content = new StringContent(serialized, Encoding.UTF8, ""application/json"");        using (var response = await _httpClient.PutAsync(requestUrl, content).ConfigureAwait(false))      {          // ...      }      // ...  }  ```    #7983 asks about the same thing, and the response was:    > Thank you for the suggestion. It is a good idea in general about having templates, but we think it belongs where it is in WCF and is not generally applicable to .NET Core.    I think that comment misunderstands the use case for `UriTemplate`s. There's nothing WCF-specific about `UriTemplate`. In fact, the code above is taken from a service client implementation that interacts with an ASP.NET Core web service.    `UriTemplate` is used to safely build URLs. It's safer, and more capable than string concatenation. Building URLs isn't specific to WCF, so it would be nice if it were available in .NET Core."
24653	area-System.Runtime	ValueTuple compatibility issues in .NET Framework 4.7.1	Cross posting for better visibility:  Microsoft/dotnet-framework-early-access#9    Fall creators update is going live in two days. Heads up! It will generate nasty compat issues for applications using `Task<ValueTuple>`. Not sure if this is a known issue or by design, but I have lost entire day today trying to track it down.  
24655	area-System.Data	Correct row source field is used to get column ordinal.	Current version uses `_DbDataReaderRowSource` field. This field is `null` in case of own implementation of `IDataReader`, which is not inherited from `DbDataReader`.    Fixes #24638
24656	area-System.Drawing	Fix for GraphicsPathIterator.CopyData throws EntrypointNotFoundException when index is out of range.	Work related to (#22026)
24657	area-System.Text	the Package: System.Text.Encoding.CodePages (ver:4.4.0) cannot be published	"I found this package of version 4.4.0 cannot be publish when I use ""dotnet publish"".  when I change to version 4.3.0, It's ok, It has rutimes\win and runtimes\unix.  for version 4.4-preview, it has only runtimes\win, no runtimes\unix."
24660	area-Infrastructure	Build step 'Execute shell' marked build as failure in CI	https://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_netcoreapp_ubuntu14.04_debug/200/    Detail: https://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_netcoreapp_ubuntu14.04_debug/lastCompletedBuild/consoleFull#-8536224876a086b3e-df04-41d2-bc4d-43e8f9406d07    Configuration: outerloop_netcoreapp_ubuntu14.04_debug    Build step 'Execute shell' marked build as failure  15:52:05 [xUnit] [INFO] - Starting to record.  15:52:05 [xUnit] [INFO] - Processing xUnit.Net-v2 (default)  15:52:06 [xUnit] [INFO] - [xUnit.Net-v2 (default)] - No test report file(s) were found with the pattern 'bin/**/testResults.xml' relative to '/mnt/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_ubuntu14.04_debug' for the testing framework 'xUnit.Net-v2 (default)'.  Did you enter a pattern relative to the correct directory?  Did you generate the result report(s) for 'xUnit.Net-v2 (default)'?  15:52:06   [xUnit] [ERROR] - No test reports found for the metric 'xUnit.Net' with the resolved pattern 'bin/**/testResults.xml'. Configuration error?.  15:52:06 [xUnit] [INFO] - Failing BUILD.  15:52:06 [xUnit] [INFO] - There are errors when processing test results.  15:52:06 [xUnit] [INFO] - Skipping tests recording.  15:52:06 [xUnit] [INFO] - Stop build.
24661	area-System.Net	WinForms application referencing NuGet library (.NETStandard 1.3) will not deploy System.Net.Http	Installing a NuGet package to a WinForms application which targets .NETStandard 1.3 results in an incomplete deployment. The dll System.Net.Http is not deployed (it's in the Debug/Release folder but not in the Publish folder) and also missing in Publish/Application Files.    Steps to reproduce  1) Create a new WinForms project.  2) Reference (in my case) YouTrackSharp (3.1.0).  3) Publish the project and see that System.Net.Http is missing.
24662	area-System.Security	Cannot decompress Rijndael encrypted Gzip	Hello,    we are using Rijndael encrypted gzips. The following code works just fine in .NET Framework 4.6.1 but throws exception in .NET Core 2.0  ```  using (var rijAlg = Rijndael.Create())  {      rijAlg.Key = _configK;      rijAlg.IV = _configI;      rijAlg.BlockSize = 128;      rijAlg.Padding = PaddingMode.PKCS7;        // Create a decrytor to perform the stream transform.      var decryptor = rijAlg.CreateDecryptor(rijAlg.Key, rijAlg.IV);        // Create the streams used for decryption.       using (var sourceStream = new MemoryStream(buffer))      {          using (var decryptStream = new CryptoStream(sourceStream, decryptor, CryptoStreamMode.Read))          {              if (isGzipped)              {                  using (var unzipStream = new System.IO.Compression.GZipStream(decryptStream, System.IO.Compression.CompressionMode.Decompress))                   {                      using (var targetStream = new MemoryStream())                      {                          unzipStream.CopyTo(targetStream);                          Content = targetStream.ToArray();                      }                  }              }              else              {                  using (var targetStream = new MemoryStream())    {        decryptStream.CopyTo(targetStream);        Content = targetStream.ToArray();    }       }   }      }  }  ```  The exception is:   `The archive entry was compressed using an unsupported compression method.`    Stack trace:  ```     at System.IO.Compression.Inflater.Inflate(FlushCode flushCode)     at System.IO.Compression.Inflater.ReadInflateOutput(Byte* bufPtr, Int32 length, FlushCode flushCode, Int32& bytesRead)     at System.IO.Compression.Inflater.InflateVerified(Byte* bufPtr, Int32 length)     at System.IO.Compression.Inflater.Inflate(Byte[] bytes, Int32 offset, Int32 length)     at System.IO.Compression.DeflateStream.Read(Byte[] array, Int32 offset, Int32 count)     at System.IO.Compression.GZipStream.Read(Byte[] array, Int32 offset, Int32 count)     at System.IO.Stream.CopyTo(Stream destination, Int32 bufferSize)  ```    Maybe the decryptor has a bug which results in an invalid decrypted data and that's why GzipStream fails to decompress it?
24663	area-System.Runtime	SystemNative_SysConf does not check for errors	It returns the result of calling `sysconf` directly:  https://github.com/dotnet/corefx/blob/c4d0529c24a8abc50009e561e96efed6b3e002b9/src/Native/Unix/System.Native/pal_io.cpp#L844-L859    From the man page of `sysconf`:    ```  RETURN VALUE         The return value of sysconf() is one of the following:           *  On error, -1 is returned and errno is set to indicate the cause of the error (for example, EINVAL, indicating that name is invalid).           *  If name corresponds to a maximum or minimum limit, and that limit is indeterminate, -1 is returned and errno is not changed.  (To distinguish an indeterminate limit from an error, set errno to zero before the call, and then check whether  errno  is  nonzero            when -1 is returned.)           *  If name corresponds to an option, a positive value is returned if the option is supported, and -1 is returned if the option is not supported.           *  Otherwise, the current value of the option or limit is returned.  This value will not be more restrictive than the corresponding value that was described to the application in <unistd.h> or <limits.h> when the application was compiled.  ```    Sysconf is indeed failing (I'm trying to get a minimal repro, but it's taking a while to narrow down). The end effect is [`Environment.ProcessorCount`](https://github.com/dotnet/corefx/blob/475c578fc77e16344679e337276c91a70fe1c79c/src/System.Runtime.Extensions/src/System/Environment.Unix.cs#L361) returns `-1`, which is... bizarre, to say the least!    [EDIT] Making code link inline for readability by @karelz
24675	area-System.Drawing	System.Drawing.Common needs netfx and netstandard configurations	Right now it has only netcoreapp configuration.   A netstandard configuration that simply throws would allow netstandard libraries that don't use drawing to reference the upcoming compat pack.  Ideally it can be built properly for netstandard in which case this would allow netstandard libraries to use drawing.    It also needs a netfx configuration to make a shim System.Drawing.Common that redirects to System.Drawing, so such netstandard libraries could also work on .NET Framework.     fyi @weshaggard @terrajobst 
24677	area-System.Net	Disposing Socket during Socket.Receive behaves badly on *nix	"### Repro app:    ```C#  using System;  using System.Net;  using System.Net.Sockets;  using System.Threading.Tasks;    namespace SocketInvalidArg  {      class Program      {          static void Main(string[] args)          {              using (var serverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp))              {                  serverSocket.Bind(new IPEndPoint(IPAddress.Loopback, 5000));                  serverSocket.Listen(512);                    var i = 0;                  try                  {                      for (;; i++)                      {                          using (var clientSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp))                          {                              clientSocket.Connect(IPAddress.Loopback, 5000);                                var acceptSocket = serverSocket.Accept();                                Task.WaitAll(Task.Run(() => ReadInput(acceptSocket)), Task.Run(() => acceptSocket.Dispose()));                          }                      }                  }                  catch                  {                      Console.Write(""Failed after #{0} iterations"", i);                      throw;                  }              }          }            static void ReadInput(Socket socket)          {              try              {                  Console.WriteLine(""Calling socket.Receive"");                  var count = socket.Receive(new byte[256]);                  Console.WriteLine(""Called socket.Receive with count = {0}"", count);              }              catch (ObjectDisposedException)              {                  Console.WriteLine(""Socket.Receive threw ODE"");              }              catch (SocketException ex) when (ex.SocketErrorCode != SocketError.InvalidArgument)              {                  Console.WriteLine(ex + Environment.NewLine + ex.SocketErrorCode);              }          }      }  }  ```    ### Actual Behavior (macOS 10.12 and Ubuntu 16.04)    On macOS and Linux, Socket.Recieve() either throws an ""Invalid argument"" SocketException:    ```$ dotnet run  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  Failed after #12 iterations  Unhandled Exception: System.AggregateException: One or more errors occurred. (Invalid argument) ---> System.Net.Sockets.SocketException: Invalid argument     at System.Net.Sockets.Socket.Receive(Byte[] buffer)     at SocketInvalidArg.Program.ReadInput(Socket socket) in /Users/shalter/source/halter73/SocketInvalidArg/Program.cs:line 45     at SocketInvalidArg.Program.<>c__DisplayClass0_0.<Main>b__0() in /Users/shalter/source/halter73/SocketInvalidArg/Program.cs:line 28     at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)     at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)     --- End of inner exception stack trace ---     at System.ThrowHelper.ThrowAggregateException(List`1 exceptions)     at System.Threading.Tasks.Task.WaitAll(Task[] tasks, Int32 millisecondsTimeout, CancellationToken cancellationToken)     at System.Threading.Tasks.Task.WaitAll(Task[] tasks, Int32 millisecondsTimeout)     at System.Threading.Tasks.Task.WaitAll(Task[] tasks)     at SocketInvalidArg.Program.Main(String[] args) in /Users/shalter/source/halter73/SocketInvalidArg/Program.cs:line 35  ```    Or hangs indefinitely on the call to Socket.Receive:  ```  $ dotnet run  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  ```    ### Expected Behavior (Current Behavior on Windows)    Socket.Receive always completes. If the Socket is Disposed after the call to Socket.Receive, it throws a ""ConnectionAborted"" SocketException instead of an ""InvalidArgument"" SocketException.    ```  ...  Calling socket.Receive  System.Net.Sockets.SocketException (0x80004005): An established connection was aborted by the software in your host machine     at System.Net.Sockets.Socket.Receive(Byte[] buffer)     at SocketInvalidArg.Program.ReadInput(Socket socket) in C:\Users\shalter\source\halter73\SocketInvalidArg\Program.cs:line 45  ConnectionAborted  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  Socket.Receive threw ODE  Calling socket.Receive  System.Net.Sockets.SocketException (0x80004005): An established connection was aborted by the software in your host machine     at System.Net.Sockets.Socket.Receive(Byte[] buffer)     at SocketInvalidArg.Program.ReadInput(Socket socket) in C:\Users\shalter\source\halter73\SocketInvalidArg\Program.cs:line 45  ConnectionAborted  Calling socket.Receive  Socket.Receive threw ODE  ...  (and so it goes forever)  ```"
24678	area-System.Console	"Tests under ""System.Console.Tests"" failed with ""Exit code was 131 but it should have been 42"" "	failed test: CancelKeyPressTests.CanAddAndRemoveHandler_Remote   Configuration: oxs10.12_release    Detail: https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_release/3358/testReport/(root)/CancelKeyPressTests/CanAddAndRemoveHandler_Remote/    MESSAGE:  ~~~  Exit code was 131 but it should have been 42\nExpected: True\nActual: False  ~~~  STACK TRACE:  ~~~  at System.Diagnostics.RemoteExecutorTestBase.RemoteInvokeHandle.Dispose()   in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_release/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 189  ~~~
24679	area-System.ComponentModel	"Test: System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests/RunWorkerAsync_NoOnWorkHandler_SetsResultToNull failed with ""System.Exception : The background worker never completed"""	Opened on behalf of @Jiayili1  The test `System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests/RunWorkerAsync_NoOnWorkHandler_SetsResultToNull` has failed.  System.Exception : The background worker never completed.          Stack Trace:             at System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests.RunWorkerAsync_NoOnWorkHandler_SetsResultToNull() in E:\A\_work\598\s\corefx\src\System.ComponentModel.EventBasedAsync\tests\BackgroundWorkerTests.cs:line 93        at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetV(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall)        at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean isTargetThisCall)        at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566      Build : Master - 20171017.01 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x86   - Debug  Detail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Filc~2F/build/20171017.01/workItem/System.ComponentModel.EventBasedAsync.Tests/analysis/xunit/System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests~2FRunWorkerAsync_NoOnWorkHandler_SetsResultToNull
24680	area-System.Runtime	Proposal : Full RFC 4122  for Guids	# Description  Provide full implementation of [RFC 4211](https://tools.ietf.org/html/rfc4122) for UUID as part of the Guid type.    Having hash based predictible Guids (v5) which could be derived from string and don't collide with random based guids (v4) can be extremely useful in some scenarios. RFC4122 proposes a standard around UUIDs to address that.    # Possible Use Cases    Here are some of the use cases I see:  * Slug projection to Guid primary key (eliminate the need to maintain an index for that matter, allows using the primary key which is usually the clustered index to get the data)  * Mixing potentially identical ids but namespaced in the same keyspace.  * Reducing a composite key to a single Guid.  * More broadly every scenario where a hash is a good fit (not from a security perspective) but where we need guids.     # Proposed API  ```  public partial struct Guid {      public static readonly Guid DnsNamespace // 6ba7b810-9dad-11d1-80b4-00c04fd430c8      public static readonly Guid UrlNamespace // 6ba7b811-9dad-11d1-80b4-00c04fd430c8        public static Guid NewGuid();        public static Guid NewUuidV1();      public static Guid NewUuidV4();      public static Guid NewUuidV5(string value, Guid namespace);      public static Guid NewUuidV5(byte[] value, Guid namespace);  }  ```  # Details  We would obviously keep the existing NewGuid() which in windows calls [`UuidCreate`](https://msdn.microsoft.com/en-us/library/windows/desktop/aa379205(v=vs.85).aspx). It seems that it uses UUID v4 under the hood.    In addition we would add NewGuidV1, NewGuidV4 et NewGuidV5 methods. They would map to the adequate UUID generation method.    # Related Issues    # Open Questions  Currently the byte order from the constructor and [ToByteArray is a bit unatural as it just reflect the underlying struct](https://stackoverflow.com/questions/10190817/guid-byte-order-in-net) as we could expect a more natural byte order. It could be worth it to add methods overload to read and write guid using the natural order.    # See also  * Current implementation:   [part 1](https://source.dot.net/#System.Private.CoreLib/shared/System/Guid.cs,b622ef5f6b76c10a) and [part 2](https://source.dot.net/#System.Private.CoreLib/src/System/Guid.CoreCLR.cs,b622ef5f6b76c10a)   * [Node JS implementation](https://www.npmjs.com/package/uuid)  * [Unoptimized quick and dirty Guid V5 c# implementation](https://github.com/geeklearningio/gl-dotnet-primitives/blob/feature/guid-v5/src/GeekLearning.Primitives/GuidV5.cs)    # Updates  * December 12, 2017: Provide a first API proposal  * January 18, 2017: Add use cases
24681	area-System.Diagnostics	Then, what's the status of Code Contracts usage in .NET Core?	Related: https://github.com/Microsoft/CodeContracts/issues/231  If the contracts feature is not usable, why included in corefx?
24683	area-System.Net	HttpClient SendAsync Object disposed exception when request version is Http 1.1 passes when it is HTTP 1.0	"I am using HttpClient to send a post request to my service , where when user is unauthorized 401 status code is returned on receiving that i throw an exception from my client code, but once this use case is done my client program keeps throwing , i get an exception when i call HttpClient.SendAsync() method.    > System.ObjectDisposedException occurred Message: A first chance exception of type 'System.ObjectDisposedException' occurred in System.dll Additional information: Cannot access a disposed object.    and finally i get -    > System.Net.Http.HttpRequestException occurred  >   _HResult=-2146233088  >   _message=Error while copying content to a stream.  >   HResult=-2146233088  >   IsTransient=false  >   Message=Error while copying content to a stream.  >   Source=mscorlib  >   StackTrace:  >        at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)  >   InnerException: System.IO.IOException  >        _HResult=-2146232800  >        _message=The read operation failed, see inner exception.  >        HResult=-2146232800  >        IsTransient=false  >        Message=The read operation failed, see inner exception.  >        Source=System.Net.Http  >        StackTrace:  >             at System.Net.Http.HttpClientHandler.WebExceptionWrapperStream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)  >             at System.Net.Http.StreamToStreamCopy.StartRead()  >        InnerException: System.Net.WebException  >             _HResult=-2146233079  >             _message=The request was aborted: The connection was closed unexpectedly.  >             HResult=-2146233079  >             IsTransient=false  >             Message=The request was aborted: The connection was closed unexpectedly.  >             Source=System  >             StackTrace:  >                  at System.Net.ConnectStream.BeginRead(Byte[] buffer, Int32 offset, Int32 size, AsyncCallback callback, Object state)  >                  at System.Net.Http.HttpClientHandler.WebExceptionWrapperStream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)  >             InnerException:     I have to in fact restart service to get proper response again.    Above behavior happens only if HttpRequestMessage.Version is set to HttpVersion.Version11 but when HttpVersion.Version10 everything works fine, following is a sample code i created to reproduce same , any insights on why this happens?  ```  class Program {          static HttpClientHandler handler = new HttpClientHandler{Credentials = CredentialCache.DefaultCredentials};                       static void Main()          {              for (int i = 0; i < 10; i++)              {                  try {                      Main2().Wait();                  } catch (Exception e) {                      Console.WriteLine(e);                  }                }              Console.ReadLine();          }            private static async Task Main2() {              var client1 = new HttpClient(handler,false);               client1.DefaultRequestHeaders.CacheControl = CacheControlHeaderValue.Parse(""no-cache"");               HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, ""http://localhost/RestFramework/AuditEventService/AuditEvent"") {                   Content = new StringContent(""sdad""),                   Version = HttpVersion.Version11                 };             request.Content.Headers.ContentType = new MediaTypeHeaderValue(""application/json"");              HttpResponseMessage response = null;              try              {                  response = await client1.SendAsync(request); // i am expecting a 401 status code, this line cause issue                  if (!response.IsSuccessStatusCode)                  {                      var statusCode = response.StatusCode;                       throw new Exception(statusCode.ToString());                  }              } finally {                  client1.Dispose();              }          }  ```    my web api service returns a 401 for the request which i am passing, if i put a sleep in my filter code mentioned below everything works fine ,the code for filter looks below-    ```  internal class IntegrateWindowsAuthenticationFilter : IActionFilter {           /// <summary>          /// user groups          /// </summary>          public IList<string> UserGroups { get; set; }            /// <summary>          /// user names          /// </summary>          public  IList<string> UserNames { get; set; }            #region IActionFilter Members            /// <summary>          ///     Executes the action filter asynchronous.          /// </summary>          /// <param name=""actionContext"">The action context.</param>          /// <param name=""cancellationToken"">The cancellation token.</param>          /// <param name=""continuation"">The continuation.</param>          /// <returns></returns>          public Task<HttpResponseMessage> ExecuteActionFilterAsync(HttpActionContext actionContext,              CancellationToken cancellationToken, Func<Task<HttpResponseMessage>> continuation) {              //Thread.sleep(1000) // this make things work with http 1.1              var output = false;              if (UserGroups != null) {                  foreach (var group in UserGroups) {                      output = actionContext.RequestContext.Principal.IsInRole(group);                      if (output) {                          return continuation();                      }                  }              }              if (UserNames != null) {                  foreach (var user in UserNames) {                      output =                          actionContext.RequestContext.Principal.Identity.Name                              .Equals(user,                                  StringComparison.OrdinalIgnoreCase);                      if (output) {                          return continuation();                      }                  }              }                var outcome = new OperationOutcome();              outcome.Issue.Add(new IssueComponent {                  Details = Constants.UnauthorizedAccess              });              return Task.FromResult(new HttpResponseMessage(HttpStatusCode.Unauthorized));          }            #endregion            #region IFilter Members            /// <summary>          ///     Gets a value indicating whether [allow multiple].          /// </summary>          /// <value>          ///     <c>true</c> if [allow multiple]; otherwise, <c>false</c>.          /// </value>          public bool AllowMultiple {              get {                  return false;              }          }            #endregion      }    ```  "
24685	area-System.IO	Proposed API for canonical paths	"# Rationale    > ""It seems we need a new API that allows us to get the canonical path that hits the disk and follows links and fixes casing"" [API Review 2015-08-27](https://github.com/dotnet/apireviews/tree/1894e009c6a3dfe9afa89da5c115aa43f3f8cb30/2015/08-26-long-path)    # Proposed API  ```C#  public static class Path  {      public static string GetCanonicalPath( string path );  // Resolves symbolic links      public static string GetCanonicalPath( string path, bool preserveSymbolicLinks );  }  ```    # Details  A canonical path  - is a fully qualified path path,  - uses only `DirectorySeparatorChar` as a directory separator,  - has no trailing directory separator (unless it is a/the root),  - contains no navigation elements (`.` and `..`) and no empty path elements (ex. `/foo//bar`),  - contains no symbolic links (unless otherwise specified),  - has its root in a canonical form (ex. on Windows, drive letters will be upper case), and  - adopts the actual casing of the file and directory names if the file and directory names are case-insensitive.    The behavior of `..` with respect to symbolic links is platform dependent.  On Windows, it removes the symbolic link element.  On Linux, it removes an element of path that was resolved from the symbolic link.    Examples:  - Windows: If `C:\Users\All Users` is a symbolic link to `C:\ProgramData` then the canonical form of `C:\Users\All Users\..\foo` is `C:\Users\foo`.  - Linux: If `/var/lock` is a symbolic link to `/run/lock` then the canonical form of `/var/lock/../foo` is `/run/foo`.    On Linux it is not always possible to preserve symbolic links while simplifying `..`.  In these cases `Path.GetCanonicalPath(string, bool)` will resolve the symbolic link regardless of the value of `preserveSymbolicLinks`.    For the purposes of this API, NTFS Junction Points are considered to be like Linux bind mounts and are not considered to be symbolic links.    Since most of the members of `Path` do not do I/O there might be some objection to adding `GetCanonicalPath` to `Path`.  There is at least one existing method that does do I/O  `Path.GetTempFileName`  so it would not be the first.    # Open Questions  - How should `GetCanonicalPath` handle paths in `\\?\` and `\\.\`?    - Maybe return a `\\?\` path if and only if the input path was in `\\?\`.    - Maybe reject paths in `\\.\`.  - What should `GetCanonicalPath` do if the path does not exist?    - Maybe canonicalize the existing part and append the rest as canonicalized as possible.  - Does Linux provide a mechanism for determining the actual casing of a file or directory name for files and directories that reside on a file system that is mounted in a case-insensitive mode?  If it doesn't then the provided casing will have to be returned.    # Related Issues  - #1086    # See Also  - [Relevant portion of .NET Core Design Reviews: MAX_PATH Limitations](https://youtu.be/lpa2OFauASM?t=2721)    # Updates  - Replace `SymbolicLinkOption` with `bool`.  - Split out #25569"
24690	area-System.Diagnostics	EventLogTests.DeleteLogTest failed on Win7 in CI	https://mc.dot.net/#/user/dotnet-maestro-bot/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/0105300fc3ca40d98db157cea91b097c68de6627/workItem/System.Diagnostics.EventLog.Tests/analysis/xunit/System.Diagnostics.Tests.EventLogTests~2FDeleteLogTest  ```  Windows.7.Amd64.Open-Debug-x64  Unhandled Exception of Type System.ComponentModel.Win32Exception  Message :  System.ComponentModel.Win32Exception : Access is denied  Stack Trace :     at System.Diagnostics.EventLogInternal.Clear()     at System.Diagnostics.EventLog.Clear()     at System.Diagnostics.EventLog.Delete(String logName, String machineName)     at System.Diagnostics.EventLog.Delete(String logName)     at System.Diagnostics.Tests.EventLogTests.DeleteLogTest()  ```
24694	area-System.Diagnostics	[ExcludeFromCodeCoverageAttribute] should be applicable to assemblies	Following up on https://github.com/Microsoft/vstest/issues/1050, https://github.com/Microsoft/testfx/issues/248, https://github.com/dotnet/corefx/issues/14488.    As of now `System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute` has the following [signature](https://msdn.microsoft.com/en-us/library/system.diagnostics.codeanalysis.excludefromcodecoverageattribute(v=vs.110).aspx):  ```csharp  [AttributeUsageAttribute      (AttributeTargets.Class |       AttributeTargets.Struct |       AttributeTargets.Constructor |       AttributeTargets.Method |       AttributeTargets.Property |       AttributeTargets.Event,       Inherited = false, AllowMultiple = false)]  public sealed class ExcludeFromCodeCoverageAttribute : Attribute  ```  what doesn't allow to apply it to assemblies.    I'd like to have the code like this in every tests project's AssemblyInfo.cs:    ```csharp  [assembly: ExcludeFromCodeCoverage]  ```    I talked to @pvlakshm, a PM on the VS Unit Testing Framework, we agreed this would be a good enhancement which they would pick-up and address once the following API change has been made:    ```csharp  [AttributeUsageAttribute      (AttributeTargets.Assembly | // <--       AttributeTargets.Class |       AttributeTargets.Struct |       AttributeTargets.Constructor |       AttributeTargets.Method |       AttributeTargets.Property |       AttributeTargets.Event,       Inherited = false, AllowMultiple = false)]  public sealed class ExcludeFromCodeCoverageAttribute : Attribute  ```
24697	area-System.IO	Remove dead code from System.IO.FileSystem.AccessControl	PR addresses issue #17905, project **System.IO.FileSystem.AccessControl**.    Removed just two unused string resources. Everything else is constants.
24698	area-Infrastructure	"Downloaded dotnet.exe now picking up installed SDK's in ""Program Files"""	"(Note this also affects CoreCLR and CoreFxLab - maybe this issue should be in buildtools)    ```  c:\dd\CoreFx\bin\testhost\netcoreapp-Windows_NT-Debug-x64\dotnet.exe --info    ...     Base Path:   C:\Program Files\dotnet\sdk\2.0.2\  ...  ```    This means that the build on these repos are picking up whatever dogfood that VS wishes on us, and yes, some of them do break minor functionality like ""init-tools.cmd""    Expected: The dotnet tooling in these repos are truly isolated from the machine environment.      "
24699	area-System.Collections	Set.TryGetValue not-found behavior/docs inconsistent	"Either the behavior or the inline documentation is incorrect for SortedSet/HashSet TryGetValue when the item is not found. The code returns default(T) but the inline comments state it should return the original value. I expect this is because the comments are copied from their Immutable counterparts where the original value is returned.    TryGetValue not found out value for other classes:    Function | actual out value when not found | what docs say the out value will be when not found  --------- | ------------- | -------------  SortedSet.TryGetValue | [default(T)](https://github.com/dotnet/corefx/blob/6ad6bce5f9fd1f2d98ea30a049bdfcee3f4d0ed3/src/System.Collections/src/System/Collections/Generic/SortedSet.cs#L2108) | [original value](https://github.com/dotnet/corefx/blob/6ad6bce5f9fd1f2d98ea30a049bdfcee3f4d0ed3/src/System.Collections/src/System/Collections/Generic/SortedSet.cs#L2092)  HashSet.TryGetValue | [default(T)](https://github.com/dotnet/corefx/blob/master/src/System.Collections/src/System/Collections/Generic/HashSet.cs#L480) | [original value](https://github.com/dotnet/corefx/blob/master/src/System.Collections/src/System/Collections/Generic/HashSet.cs#L461)  ImmutableHashSet.TryGetValue | [original value](https://github.com/dotnet/corefx/blob/3143b836af48be68d3b02b45188b134dca25b27c/src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet_1.cs#L237) | [original value](https://github.com/dotnet/corefx/blob/3143b836af48be68d3b02b45188b134dca25b27c/src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableHashSet_1.cs#L219)  ImmutableSortedSet.TryGetValue | [original value](https://github.com/dotnet/corefx/blob/3143b836af48be68d3b02b45188b134dca25b27c/src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet_1.cs#L219) | [original value](https://github.com/dotnet/corefx/blob/3143b836af48be68d3b02b45188b134dca25b27c/src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableSortedSet_1.cs#L205)  Dictionary | default(T) | default(T)  SortedList| default(T) | default(T)  SortedDictionary| default(T) | default(T)      ""original value"" here refers to the `equalValue` for which we are searching. I expect we want to just fix the comment to match the behavior which this PR aims to do. If we decide else-wise, I will update the PR as necessary.    cc: @TylerBrinkley @stephentoub "
24701	area-System.IO	Remove dead code from System.IO.FileSystem	PR addresses issue #17905, project **System.IO.FileSystem**.    Not really much to do. Most of the red things in [diff](http://tempcoverage.blob.core.windows.net/report2/System.IO.FileSystem.diff.html) file are:    - Classes in `src\Common` folder.  - Methods that are in `*.Unix` files, so I am not sure if they are not used on that platform and therefore they can't be removed.
24703	area-Meta	[Announcement] [Discussion]  Microsoft Security Advisory CVE-2017-8585 : Malformed Culture can cause application crash	# Microsoft Security Advisory CVE-2017-8585   ## Malformed Culture can cause application to crash  ### Executive Summary    Microsoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1. This advisory also provides guidance on what developers can do to update their applications correctly.    Microsoft is aware of a security vulnerability in the public version of .NET Core where a malformed string request could cause an application to crash and lead to a denial of service.    System administrators are advised to update their .NET Core runtimes to versions 1.0.7 and 1.1.4. Developers are advised to update their .NET Core SDK to version 1.1.4.    ### Mitigation Factors    .NET Core 2.0 is not affected by this issue.  ,NET Core 1.x applications are only affected if running on Windows 10 or Windows 2016.    ### Advisory FAQ  #### How do I know if I am affected?    Any application running against .NET Core 1.0.6 or lower versions, or 1.1.2 or lower versions is affected. The latest version of the .NET core runtime you have installed in your computer can be listed by running `dotnet --info`. Running that command produces an output similar to the following:    ```  .NET Command Line Tools (2.0.2)    Product Information:   Version:            2.0.2   Commit SHA-1 hash:  a04b4bf512    Runtime Environment:   OS Name:     Windows   OS Version:  10.0.16299   OS Platform: Windows   RID:         win10-x64   Base Path:   C:\Program Files\dotnet\sdk\2.0.2\    Microsoft .NET Core Shared Framework Host      Version  : 2.0.0    Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d  ```    As this command only displays the latest version of the runtime installed (or the version set in the *global.json* file), it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:    | Operating System | Location          |  |------------------|-------------------|  | Windows          | C:\Program Files\dotnet\shared\Microsoft.NETCore.App\ |  | macOS            | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/ |  | [Supported Linux platforms](https://docs.microsoft.com/dotnet/core/linux-prerequisites#supported-linux-versions) | /usr/share/dotnet/shared/Microsoft.NETCore.App/ |    Each runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.7 and 1.1.4, then any applications targeting 1.0 or 1.1 of .NET Core are vulnerable.    Also, even if you have a directory for 1.0.7 and 1.1.4 present in your system, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting the impacted versions, these applications are also vulnerable.    #### How do I fix my affected application?  Applications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). .NET Core 1.1.4 SDK installs both versions 1.0.7 and 1.1.4 of the .NET Core runtime.    If you've built a [self-contained application](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd), you must install the new runtime and SDK, recompile your application and redeploy.    #### What if the update breaks my application?  An application can be pinned to a previous version of the runtime by editing the [*application.runtime.config*](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application. Set the framework version to the desired version and the `rollForward` property to `false`. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.    Since the *application.runtime.config* file is an optional file, you may need to create one for each application and add it alongside the executable.    ### Acknowledgments  David Fernandez of [Sidertia Solutions](https://www.sidertia.com/Home)    ### External Links  [CVE-2017-8585](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8585)  [Sidertia blog on their discovery](https://www.sidertia.com/Home/Community/Blog/2017/07/14/Microsoft-fixes-the-CVE-2017-8585-security-vulnerability-discovered-by-Sidertia-Team)    _Version 1.1_  _Last Updated 2017-18-10_  
24704	area-System.Diagnostics	compatibility consideration for UseShellExecute with Process.Start()	"This is fresh start of topic related to #23705 and #24000    At least on Unix ""UseShell"" has standard meaning: shell is used to execute requested command.   There are many examples - like Python's popen() or simply difference between execv() and system().     On Windows his has different meaning and implies to open file with default application.   Unix implementation was recently updated to match Windows behavior.     However that possibly creates backward compatibility problem. 2.0 has been released with using /bin/sh to match traditional Unix experience.     Change in behavior can break existing usage of Process.Star() - and it did even in trivial case for corefx tests.   /bin/sh is pretty much guarantied to exist on any normal Unix system but new helpers may not.  Process.Start(new ProcessStartInfo { UseShellExecute = true, FileName =""ls""}) works with 2.0 but it does not work with current master branch on my system.     Further more, Unix users would expect normal shell behavior. Following examples will succeed when running with dotnet 2.0    ```          static void Main(string[] args)          {              String cmd=""if [ -e /etc/passwd ] ; then echo yes ; else echo no; fi"";              var startInfo = new ProcessStartInfo(cmd);              startInfo.UseShellExecute = true;              startInfo.CreateNoWindow = true;              using (Process px = Process.Start(startInfo))              {                      px.WaitForExit();                      Console.WriteLine(""cmd returned {0}"", px.ExitCode);              }          }    ```  One can pass in fragments of shell code with 2.0.     ```  test@net-chip:~/process$ dotnet run  yes  cmd returned 0  ```  another common use case is use if command pipeline and have shell handling it:    ```  String cmd=""cat /etc/passwd|grep root"";    test@net-chip:~/process$ dotnet run  root:x:0:0:root:/root:/bin/bash  cmd returned 0    ```    In this case shell will run each command in separate process and it will redirect output from cat to stdin of grep. This is pretty typical use.     Last part is use of .profile and shell variables. When used with shell, for example ""echo $HOME"" would expand to home directory. When used without shell, it would be passed in as string.   "
24705	area-System.Threading	Add method to avoid TaskScheduler.UnobservedTaskException for a given Task	Unobserved `Task` exceptions are propagated to the `TaskScheduler.UnobservedTaskException` event. There are cases where we want to be able to ignore the results of a task without triggering that event.    For example, we have an extension method, `task.WithTimeout(TimeSpan)` which will throw a `TimeoutException` if a task doesn't complete before a specified time. In this case we want to ignore the results of the original task.    Currently we use an extension method to ignore individual tasks:  ```C#  public static void Ignore(this Task task)  {      if (task.IsCompleted)      {          var ignored = task.Exception;      }      else      {          IgnoreAsync(task);      }        async void IgnoreAsync(Task asyncTask)      {          try          {              await asyncTask.ConfigureAwait(false);          }          catch          {              // Ignored.          }      }  }  ```  That method still has a cost, though, and ideally we would like to remove most of that cost.  A method inside the framework to ignore the results of a task without needing to register/allocate a continuation would be beneficial here.
24706	area-System.Net	Test that matching cookies are found after non-matching cookies	Test case for #24368. Adding a new non-matching cookie can cause matching cookies to not be returned. /aaa should return the following cookies because of a prefix match:  1. /aa  2. /a  3. /    Adding a /ab cookie will cause it to only return 2/3 of the cookies.    https://dotnetfiddle.net/xH5FVi helps show the issue.
24707	area-System.Net	NegotiateStreamTest should be improved	I bump into this while investigating #24000   - We have cases when tests would claim pass but it did not run.  - test it self is trying to install and remove system packages during test execution.  That will create reliability problems as well as it is unpleasant for anybody working on shared or production system.    It would be better to document prerequisites and run tests when conditions are met.  That would also mean checking or updating current CI images so we do not always skip runs due to lack of dependencies.     We should also update documentation and explain what is needed for proper execution so anybody from community can successfully run the tests.   
24709	area-System.ComponentModel	Question about BindingList<T>	Hello,    I have a question about `BindingList<T>`. Is there any particular reason that the `RaiseListChangedEvents` property is not exposed via an interface like `IBindingList` or a new one called `IRaiseListChangedEvents`?    I just ran into this today during work where I had a dynamic type created via `TypeBuilder` and an instance of `BindingList<T>` where `T` was this dynamic type. Before adding a bunch of items, I wanted to turn off the list changed notifications and turn them back on after and also call a `ResetBindings`.    So because I have a dynamic type I can't cast my list to `BindingList<T>`, because I have no information about `T` during the writing of the program.    If `BindingList<T>` implements a new interface `IRaiseListChangedEvents`, then I can just cast the collection to that and access the property. Same goes for `ResetBindings`.    I ended up creating an empty class deriving from `BindingList<T>`, implementing a new interface with the needed properties/methods so I can access them even if `T` is dynamic and not known at compile time.    What is the reason of not exposing these members as a new or as part of the existing interfaces?    Thanks in advance.
24711	area-System.Collections	"Fix for (#24628) - System.Collections.Tests.Perf_ArrayList/Indexer failed with ""System.OutOfMemoryException"""	Fix for (#24628) - Optimizing System.Collections.Tests.Perf_ArrayListTests tests which were using over 2GB of memory.
24712	area-System.Net	Test failure: System.Net.Http.Functional.Tests.ResponseStreamTest / ReadAsStreamAsync_InvalidServerResponse_ThrowsIOException	## Type of failures    ### An error occurred while sending the request    Failure [20171215.09](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171215.09/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.ResponseStreamTest~2FReadAsStreamAsync_InvalidServerResponse_ThrowsIOException(transferType:%20Chunked,%20transferError:%20MissingChunkTerminator)):  ```  Assert.Throws() Failure  Expected: typeof(System.IO.IOException)  Actual:   typeof(System.Net.Http.HttpRequestException): An error occurred while sending the request.     at System.Net.Http.HttpClient.<FinishSendAsyncUnbuffered>d__59.MoveNext() in E:\A\_work\1212\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 489  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.ResponseStreamTest.<ReadAsStreamHelper>d__9.MoveNext() in E:\A\_work\1212\s\corefx\src\System.Net.Http\tests\FunctionalTests\ResponseStreamTest.cs:line 247  --- End of stack trace from previous location where exception was thrown ---  ```    ### No exception was thrown    Failure [20180118.04](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180118.04/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.ResponseStreamTest~2FReadAsStreamAsync_InvalidServerResponse_ThrowsIOException(transferType:%20ContentLength,%20transferError:%20ContentLengthTooLarge)):  ```  Assert.Throws() Failure  Expected: typeof(System.IO.IOException)  Actual:   (No exception was thrown)  ```    ## History of failures    Day | Build | OS | Details  -- | -- | -- | --  5/10 | 20170510.02 | Win10 |   5/17 | 20170517.01 | Win10 |   10/18 | 20171018.01 | Win7 |   11/15 | 20171115.01 | Win7 |   11/28 | 20171128.07 | Win7 |   12/1 | 20171201.03 | Win7 |   12/4 | 20171204.01 | Win7 |   12/5 | 20171215.06 | Win7 | [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171215.09/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.ResponseStreamTest~2FReadAsStreamAsync_InvalidServerResponse_ThrowsIOException(transferType:%20Chunked,%20transferError:%20MissingChunkTerminator))  12/15 | 20171215.09 | Win7 | [link](https://mc.dot.net/#/product/netcore/master/source/official%7E2Fcorefx%7E2Fmaster%7E2F/type/test%7E2Ffunctional%7E2Fcli%7E2F/build/20171215.09/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.ResponseStreamTest%7E2FReadAsStreamAsync_InvalidServerResponse_ThrowsIOException(transferType:%20Chunked,%20transferError:%20MissingChunkTerminator))  12/16 | 20171216.06 | Win8.1 | [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171216.06/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.ResponseStreamTest~2FReadAsStreamAsync_InvalidServerResponse_ThrowsIOException(transferType:%20Chunked,%20transferError:%20ChunkSizeTooLarge))  1/6 | 20180106.01 | Win7 | [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180106.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.ResponseStreamTest~2FReadAsStreamAsync_InvalidServerResponse_ThrowsIOException(transferType:%20Chunked,%20transferError:%20ChunkSizeTooLarge))  1/11 | 20180111.02 | Win7 | [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180111.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.ResponseStreamTest~2FReadAsStreamAsync_InvalidServerResponse_ThrowsIOException(transferType:%20Chunked,%20transferError:%20MissingChunkTerminator))  1/18 | 20180118.04 | Win7 | No exception was thrown - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180118.04/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.ResponseStreamTest~2FReadAsStreamAsync_InvalidServerResponse_ThrowsIOException(transferType:%20ContentLength,%20transferError:%20ContentLengthTooLarge))  1/25 | 20180125.01 | Win7 | [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180125.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.ResponseStreamTest~2FReadAsStreamAsync_InvalidServerResponse_ThrowsIOException(transferType:%20Chunked,%20transferError:%20MissingChunkTerminator))  1/29 | 20180129.05 | Win7 | No exception was thrown - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180129.05/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.ResponseStreamTest~2FReadAsStreamAsync_InvalidServerResponse_ThrowsIOException(transferType:%20Chunked,%20transferError:%20ChunkSizeTooLarge))  2/6 | 20180206.04 | Win7 | only in [catastrophic failure logs](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180206.04/workItem/System.Net.Http.Functional.Tests/wilogs)  3/19 | 20180319.06 | Win10 |  3/22 | 20180322.01 | Win7 |     ## Failure details    Opened on behalf of @Jiayili1    The test `System.Net.Http.Functional.Tests.ResponseStreamTest/ReadAsStreamAsync_InvalidServerResponse_ThrowsIOException(transferType: ContentLength, transferError: ContentLengthTooLarge)` has failed.    ```  Assert.Throws() Failure  Expected: typeof(System.IO.IOException)  Actual:   typeof(System.Net.Http.HttpRequestException): An error occurred while sending the request.  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()  at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  at System.Net.Http.HttpClient.<FinishSendAsyncUnbuffered>d__59.MoveNext()  --- End of stack trace from previous location where exception was thrown ---  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()  at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  at System.Net.Http.Functional.Tests.ResponseStreamTest.<ReadAsStreamHelper>d__9.MoveNext()  --- End of stack trace from previous location where exception was thrown ---  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()  at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  ```  Build : Master - 20171018.01 (Core Tests)  Failing configurations:  - Windows.7.Amd64-x86    - Release    Detail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171018.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.ResponseStreamTest~2FReadAsStreamAsync_InvalidServerResponse_ThrowsIOException(transferType:%20ContentLength,%20transferError:%20ContentLengthTooLarge)
24713	area-System.Net	Status line handling differs between HttpClientHandler implementations	Some status lines that cause client requests to fail on .NET Core on Windows are not failing on .NET Framework, and vice versa.  Other status lines are failing on .NET Core on Windows and not failing on .NET Core on Linux.  See HttpProtocolTests tests for details.
24714	area-Infrastructure	update parameter parsing to be more flexible and be closer to coreclr and native build	allow keyword variants with and without leading '-'. e.g. both 'release' and  '-release' are valid. 
24722	area-System.Threading	Segfault in coreclr due to potential race with initializing thread statics on Linux	"Run the test ```System.Net.Security.Tests.SslStream_StreamToStream_Alpn_Success``` for repro. On initial debugging, this is the call stack from the process,    ```  * thread #15: tid = 34598, 0x00007ffff6e05c37 libc.so.6`gsignal + 55, name = 'dotnet', stop reason = signal SIGABRT    * frame #0: 0x00007ffff6e05c37 libc.so.6`gsignal + 55      frame #1: 0x00007ffff6e09028 libc.so.6`abort + 328      frame #2: 0x00007ffff61aafd3 libcoreclr.so`::PROCAbort() + 19 at process.cpp:3046      frame #3: 0x00007ffff61a6a56 libcoreclr.so`PROCEndProcess(hProcess=0x00000000ffffff01, uExitCode=123456789, bTerminateUnconditionally=YES) + 1222 at process.cpp:1394      frame #4: 0x00007ffff61a6b55 libcoreclr.so`::TerminateProcess(hProcess=0x00000000ffffff01, uExitCode=123456789) + 181 at process.cpp:1310      frame #5: 0x00007ffff5834a6f libcoreclr.so`TerminateOnAssert() + 31 at debug.cpp:183      frame #6: 0x00007ffff583590c libcoreclr.so`::_DbgBreakCheck(szFile=""/home/lasekar/coreclr/src/vm/object.inl"", iLine=209, szExpr=""pMT->IsArray()"", fConstrained=NO) + 2428 at debug.cpp:436      frame #7: 0x00007ffff5835f14 libcoreclr.so`_DbgBreakCheckNoThrow(szFile=""/home/lasekar/coreclr/src/vm/object.inl"", iLine=209, szExpr=""pMT->IsArray()"", fConstrained=NO) + 180 at debug.cpp:548      frame #8: 0x00007ffff5836404 libcoreclr.so`::DbgAssertDialog(szFile=""/home/lasekar/coreclr/src/vm/object.inl"", iLine=209, szExpr=""pMT->IsArray()"") + 260 at debug.cpp:735      frame #9: 0x00007ffff5884c76 libcoreclr.so`ArrayBase::GetDataPtrOffset(pMT=0x00007fff7ce8a018) + 54 at object.inl:209      frame #10: 0x00007ffff5883a63 libcoreclr.so`ArrayBase::GetDataPtr(this=0x00007fff54e6a088, inGC=NO) const + 115 at object.h:832      frame #11: 0x00007ffff59c3220 libcoreclr.so`ThreadLocalModule::GetPrecomputedGCStaticsBasePointer(this=0x00007fff3800c530) + 160 at threadstatics.h:128      frame #12: 0x00007ffff5ad0047 libcoreclr.so`JIT_GetSharedGCThreadStaticBase(moduleDomainID=140735268991016, dwClassDomainID=532) + 167 at jithelpers.cpp:1911      frame #13: 0x00007fff7ca6162c      frame #14: 0x00007fff7ca61c29      frame #15: 0x00007fff7cbbd000      frame #16: 0x00007ffff5cf8d0b libcoreclr.so`CallDescrWorkerInternal + 124 at unixasmmacrosamd64.inc:880      frame #17: 0x00007ffff5a1e09a libcoreclr.so`CallDescrWorkerWithHandler(pCallDescrData=0x00007fff78f2f2d8, fCriticalCall=NO) + 490 at callhelpers.cpp:78      frame #18: 0x00007ffff5a1f7ee libcoreclr.so`MethodDescCallSite::CallTargetWorker(this=0x00007fff78f2f3c0, pArguments=0x0000000000000000, pReturnValue=0x00007fff78f2f358, cbReturnValue=8) + 2862 at callhelpers.cpp:645      frame #19: 0x00007ffff5bb238a libcoreclr.so`MethodDescCallSite::Call_RetBool(this=0x00007fff78f2f3c0, pArguments=0x0000000000000000) + 202 at callhelpers.h:433      frame #20: 0x00007ffff5e5ace8 libcoreclr.so`QueueUserWorkItemManagedCallback(pArg=0x00007fff78f2fd56) + 200 at comthreadpool.cpp:472      frame #21: 0x00007ffff59b83be libcoreclr.so`ManagedThreadBase_DispatchInner(pCallState=0x00007fff78f2f880) + 206 at threads.cpp:9186      frame #22: 0x00007ffff59bd945 libcoreclr.so`ManagedThreadBase_DispatchMiddle(pCallState=0x00007fff78f2f880) + 149 at threads.cpp:9237      frame #23: 0x00007ffff59bd77d libcoreclr.so`ManagedThreadBase_DispatchOuter(this=0x00007fff78f2f758, pParam=0x00007fff78f2f810)::$_6::operator()(ManagedThreadBase_DispatchOuter(ManagedThreadCallState*)::TryArgs*) const::{lambda(Param*)#1}::operator()(Param*) const + 29 at threads.cpp:9475      frame #24: 0x00007ffff59bd57f libcoreclr.so`ManagedThreadBase_DispatchOuter(this=0x00007fff78f2f7e8, pArgs=0x00007fff78f2f7f0)::$_6::operator()(ManagedThreadBase_DispatchOuter(ManagedThreadCallState*)::TryArgs*) const + 111 at threads.cpp:9477      frame #25: 0x00007ffff59b8049 libcoreclr.so`ManagedThreadBase_DispatchOuter(pCallState=0x00007fff78f2f880) + 233 at threads.cpp:9514      frame #26: 0x00007ffff59b81d4 libcoreclr.so`ManagedThreadBase_FullTransitionWithAD(pAppDomain=(m_dwId = 1), pTarget=(libcoreclr.so`QueueUserWorkItemManagedCallback(void*) at comthreadpool.cpp:456), args=0x00007fff78f2fd56, filterType=ThreadPoolThread)(void*), void*, UnhandledExceptionLocation) + 84 at threads.cpp:9535      frame #27: 0x00007ffff59b823b libcoreclr.so`ManagedThreadBase::ThreadPool(pAppDomain=(m_dwId = 1), pTarget=(libcoreclr.so`QueueUserWorkItemManagedCallback(void*) at comthreadpool.cpp:456), args=0x00007fff78f2fd56)(void*), void*) + 59 at threads.cpp:9577      frame #28: 0x00007ffff5e1ccfb libcoreclr.so`ManagedPerAppDomainTPCount::DispatchWorkItem(this=0x00000000006b64c0, foundWork=0x00007fff78f2fd57, wasNotRecalled=0x00007fff78f2fd56) + 251 at threadpoolrequest.cpp:754      frame #29: 0x00007ffff59fcf0b libcoreclr.so`ThreadpoolMgr::ExecuteWorkRequest(foundWork=0x00007fff78f2fd57, wasNotRecalled=0x00007fff78f2fd56) + 203 at win32threadpool.cpp:1558      frame #30: 0x00007ffff59fe029 libcoreclr.so`ThreadpoolMgr::WorkerThreadStart(lpArgs=0x0000000000000000) + 937 at win32threadpool.cpp:2022      frame #31: 0x00007ffff59aa267 libcoreclr.so`Thread::intermediateThreadProc(arg=0x00007fff3401f540) + 167 at threads.cpp:2583      frame #32: 0x00007ffff61b1edd libcoreclr.so`CorUnix::CPalThread::ThreadEntry(pvParam=0x00007fff34020870) + 1677 at thread.cpp:1684      frame #33: 0x00007ffff79c0184 libpthread.so.0`start_thread + 196      frame #34: 0x00007ffff6eccffd libc.so.6`clone + 109  ```    and it looks like the assert is failing, as it is expecting an array object, instead receiving a Thread object.    ```  frame #12: 0x00007ffff5ad0047 libcoreclr.so`JIT_GetSharedGCThreadStaticBase(moduleDomainID=140735268991016, dwClassDomainID=532) + 167 at jithelpers.cpp:1911     1908     // If the TLM has been allocated and the class has been marked as initialized,     1909     // get the pointer to the GC statics base and return     1910     if (pThreadLocalModule != NULL && pThreadLocalModule->IsPrecomputedClassInitialized(dwClassDomainID))  -> 1911         return (void*)pThreadLocalModule->GetPrecomputedGCStaticsBasePointer();     1912     1913     // If the TLM was not allocated or if the class was not marked as initialized     1914     // then we have to go through the slow path  (lldb) p pThreadLocalModule  (ThreadLocalModule *) $0 = 0x00007fff3800c530     (lldb) p pThreadLocalModule->m_pGCStatics  (OBJECTHANDLE) $1 = 0x00007ffff7fd10e0     (lldb) frame select 9  frame #9: 0x00007ffff5884c76 libcoreclr.so`ArrayBase::GetDataPtrOffset(pMT=0x00007fff7ce8a018) + 54 at object.inl:209     206      LIMITED_METHOD_CONTRACT;     207      SUPPORTS_DAC;     208  #if !defined(DACCESS_COMPILE)  -> 209      _ASSERTE(pMT->IsArray());     210  #endif // DACCESS_COMPILE     211      // The -sizeof(ObjHeader) is because of the sync block, which is before ""this""     212      return pMT->GetBaseSize() - sizeof(ObjHeader);  (lldb) dumpmt pMT  EEClass:         00007FFF7BD76900  Module:          00007FFF7BC90400  Name:            System.Threading.Thread  mdToken:         000000000200020F  File:            /home/lasekar/corefx/bin/testhost/netcoreapp-Linux-Debug-x64/shared/Microsoft.NETCore.App/9.9.9/System.Private.CoreLib.dll  BaseSize:        0x50  ComponentSize:   0x0  Slots in VTable: 44  Number of IFaces in IFaceMap: 0     ```    cc @janvorli  @jkotas "
24723	area-System.Security	Fix Rijndael IV/Blocksize bug	resolves https://github.com/dotnet/corefx/issues/24662    cc: @bartonjs @gabor182
24726	area-System.Runtime	Question: How are unmanaged code libraries loaded as SafeHandles?	"**How are C++ libraries loaded into SafeHandle() classes in .Net Core on Linux (or any platform)?**    I am attempting to port an application to .Net Core. The application makes external calls to a C++ library.  Before doing so, it loads the library into a SafeHandle.    Windows platform:  ```  [DllImport(""Kernel32"", CharSet = CharSet.Auto, BestFitMapping = false, SetLastError = true)]  private static extern SafeLibraryHandle LoadLibrary(string fileName);  ```    Posix platform (via Mono):  ```  [DllImport(__Internal, CallingConvention = CCCdecl)]  private static extern SafeLibraryHandle dlopen(IntPtr filename, int flags);  ```    The class ""SafeLibraryHandle"" inherits from Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid. (The SafeHandleZeroOrMinusOneIsInvalid base class was added in .Net Core 2.0.)    The Kernel32 LoadLibrary() works as expected when running in .Net Core on Windows. When running on Linux, the Mono method is called and fails as expected because there is no __Internal library available.    From what I've found, Mono wraps the [Linux dlopen() command](http://man7.org/linux/man-pages/man3/dlopen.3.html) like [this](https://github.com/mono/mono/blob/master/libgc/gc_dlopen.c).    I'm rather unfamiliar with loading/using unmanaged code. From what I can tell, the purpose of these SafeHandle classes is to load the library files into memory and turn them into disposable types. Since the SafeHandle base class exists in .Net Standard and is used in .Net Core, it seems like there should be way to load libraries on any platform. **So how should C++ libraries be loaded into SafeHandle() classes in .Net Core on Linux?**"
24727	area-System.Net	[release/2.0.0] Port SmtpClient fixes to 2.0	cc @stephentoub     Fixes #24485   Port of #24536 to release/2.0.0 branch
24728	area-System.IO	Rename new Stream.Read/Write{Async} Span/Memory arguments to buffer	We'd previously decided to name these source/destination, but we also have an overriding principle that we should adhere to names used in existing overloads if possible, and we should only use source/destination to help in cases where we need to make the direction clear.  Thus we should update the names in these new overloads before we ship them.
24730	area-Infrastructure	Reset list for 2.0.4 servicing	cc: @weshaggard 
24732	area-Meta	Replace 'enlistment' with 'repo' in a few places	"Enlistment is a MS-internal term from Source Depot days for what in today's git world is now commonly called a ""repo"".    Updating this in a few places to avoid confusing compiler errors.    "
24735	area-System.Net	Remove dead code from System.Net.Http	PR addresses issue #17905, project **System.Net.Http**.
24738	area-System.ComponentModel	Want features for data annotation 	_From @amitsaini12345 on October 14, 2017 14:21_  Please bring features to share common data annotations between each entity or model.  I will be no need to define separate separate data annotations for each properties of each entity.      It would be more easy and bring code reusablity more if one can declare common data annotations of different properties because we see that common data annotation is like max length 50, int,  required etc. Are used to once and common for all entities.   _Copied from original issue: aspnet/Mvc#6955_
24739	area-Infrastructure	Engineering System Epic	This Epic is to track planned engineering work specific to the CoreFX repo. (The actual work may be in part in the BuildTools repo)    Like all our Epics in order to see the child work items you must have the free [Zenhub browser plugin ](https://www.zenhub.com/) enabled.
24741	area-Meta	Microservices and Cloud Epic	This Epic is to track work we are doing in CoreFX to support ASP.NET Core.    Like all our Epics in order to see the child work items you must have the free [Zenhub browser plugin ](https://www.zenhub.com/) enabled.
24742	area-System.Net	Networking Epic	This Epic is to track work we are doing in CoreFX for Networking for the next release.    Like all our Epics in order to see the child work items you must have the free [Zenhub browser plugin ](https://www.zenhub.com/) enabled.
24743	area-System.Security	Crypto Epic	This Epic is to track work we are doing for Crypto for the next release.    Like all our Epics in order to see the child work items you must have the free [Zenhub browser plugin ](https://www.zenhub.com/) enabled.
24744	area-Meta	Azure IoT Hub Epic	This Epic is to track work we are doing for Azure IoT hub for the next release.    Like all our Epics in order to see the child work items you must have the free [Zenhub browser plugin ](https://www.zenhub.com/) enabled.
24745	area-Meta	Security Epic	This Epic is to track (non Crypto) work we are doing in CoreFX for Security for the next release.    Like all our Epics in order to see the child work items you must have the free [Zenhub browser plugin ](https://www.zenhub.com/) enabled.
24746	area-System.IO	SystemNative_GetPeerID and SystemNative_GetEUid are not exposed	This is a blocking issue for Roslyn. We need to enforce that both ends of a unix domain socket are the same user (to disallow connecting to a compiler server that is not your own user, spitting junk at it, and potentially executing code as another (higher-privileged) user). These APIs allow us to do that.    Related: https://github.com/dotnet/corefx/issues/10981
24747	area-Meta	Performance Epic	This Epic is to track work we are doing in CoreFX (and corelib) to monitor and improve performance for the next release - excepting Networking performance, which is likely in the [Networking Epic](https://github.com/dotnet/corefx/issues/24742).    Like all our Epics in order to see the child work items you must have the free [Zenhub browser plugin ](https://www.zenhub.com/) enabled.
24749	area-System.Net	Remove dead code from System.Net.HttpListener.	PR addresses issue #17905, project **System.Net.HttpListener**.
24750	area-Meta	Linux/Windows Parity Epic	This Epic covers work to address places where Linux support is behind Windows support, and also potentially any Linux-specific features we add in CoreFX for this release.
24751	area-Meta	Customer adoption Epic	This Epic covers work we are doing in CoreFX to make it easier for existing .NET Framework customers to use .NET Core. For example, the recently announced portability package.    It also covers outreach to NuGet package owners to help them repackage/support .NET Standard 2.0.    Like all our Epics in order to see the child work items you must have the free [Zenhub browser plugin ](https://www.zenhub.com/) enabled.
24753	area-System.IO	System.IO.IOException: The system cannot find message text for message number 0x%1 in the message file for %2\r\n	Hi    It seems there is bug in the way exception messages are looked up.    I'm getting the following exception when trying to move a file:    > System.IO.IOException: The system cannot find message text for message number 0x%1 in the message file for %2\r\n   at System.IO.Win32FileSystem.MoveFile(String sourceFullPath, String destFullPath)\r\n   at System.IO.File.Move(String sourceFileName, String destFileName)    The exception seems to materialize from the call to Win32Marshal.GetExceptionForWin32Error in   [System.IO.Win32FileSystem.MoveFile(String sourceFullPath, String destFullPath)](https://github.com/dotnet/corefx/blob/e791e8b7a4f1e4d6ff5b4295fad04a6c9f65e909/src/System.IO.FileSystem/src/System/IO/Win32FileSystem.cs#L381)    Regards
24754	area-System.IO	Dev Center Certification Fails for Microsoft.NETCore.UniversalWindowsPlatform 6.0.1	@EdiWang reported this here: https://github.com/Microsoft/dotnet/issues/528    **Steps to Reproducte:**    1. Upgrade UWP's nuget package to Microsoft.NETCore.UniversalWindowsPlatform 6.0.1  3. Target 16299 for both target and min version.  4. Generate an app package to upload to store    **Actual Behaviour:**    Certification Failed  > PI ClearCommBreak in kernel32.dll is not supported for this application type. System.IO.Ports.dll calls this API.  > API ClearCommError in kernel32.dll is not supported for this application type. System.IO.Ports.dll calls this API.  > .... etc.    **Workaround**    Downgrade the package to 5.4.1 will fix the problem.     **Note**    I don't know if the dev center is not ready for verify 6.x uwp package, or it is the package itself have problem?    FYI the question on MSDN forum https://social.msdn.microsoft.com/Forums/en-US/b7355d61-cbf9-42e6-a9eb-44ffa144aa1f/rs31709certification-failure-due-to-unsupported-apis-after-upgrading-to-16299-sdk?forum=wpsubmit 
24755	area-System.ComponentModel	Parse CultureInfo no longer supported in .NET Core	"@viktor-morin commented on [Thu Oct 19 2017](https://github.com/dotnet/core/issues/1035)    Hi!    I reported an error using Newtonsoft.Json where I recieved that the error was in .NET Core and not Newtonsoft.Json itself. Copy paste the issue here below:    We are now changing to .NET Core and we get following error when trying to parse a following class:    `Dictionary<CultureInfo,string>`    > ArgumentException: Could not cast or convert from System.String to System.Globalization.CultureInfo.  > Newtonsoft.Json.Utilities.ConvertUtils.EnsureTypeAssignable(object value, Type initialType, Type targetType)  > JsonSerializationException: Error converting value ""en-US"" to type 'System.Globalization.CultureInfo'. Path 'Name.en-US', line 1, position 17.  > Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(JsonReader reader, object value, CultureInfo culture, JsonContract contract, Type targetType)  > JsonSerializationException: Could not convert string 'en-US' to dictionary key type 'System.Globalization.CultureInfo'. Create a TypeConverter to convert from the string to the key type object. Path 'Name.en-US', line 1, position 17.  > Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(IDictionary dictionary, JsonReader reader, JsonDictionaryContract contract, JsonProperty containerProperty, string id)    This is working in .NET Framwork.    Link to original post:  [https://github.com/JamesNK/Newtonsoft.Json/issues/1457](https://github.com/JamesNK/Newtonsoft.Json/issues/1457)    [@danmosemsft edited to make link clickable]"
24756	area-System.Runtime	Port System.Runtime.Caching to .NET Core	Please do not merge (yet)    Contributes to #14529
24757	area-System.Diagnostics	Markdown Format was Erasing Information	The markdown symbol pipe was creating a cell making the content that had a pipe not readable.
24759	area-System.Net	Create aggressive read/write concurrency test for SslStream	https://github.com/dotnet/corefx/issues/24142#issuecomment-330671855 has identified that we don't work well on macOS with the 2.0.0 product (in... some... circumstances?) when an async read is blocked-running while a write writes to the same SslStream object.    Since the scenario is one that we find virtuous, we should have a test to ensure that once the macOS version is fixed that it doesn't regress (and that the other platforms are meeting the guarantee and not regressing, either).    (cc @karelz @Priya91 @wfurt)
24761	area-Meta	Machine Learning Epic	This Epic is to track work in CoreFx for the ML scenario. We expect this to principally include introducing a Tensor exchange type.    Like all our Epics in order to see the child work items you must have the free [Zenhub browser plugin ](https://www.zenhub.com/) enabled.
24763	area-System.Collections	"Tests under ""System.Collections.Tests"" failed with ""Exit code was 131 but it should have been 42"""	Failed tests:   System.Collections.Tests.SortedListTests.Item_Get_DifferentCulture   System.Collections.Tests.CaseInsensitiveComparerTests.DefaultInvariant_Compare   System.Collections.Tests.CaseInsensitiveHashCodeProviderTests.Default_Compare_TurkishI   System.Collections.Tests.CaseInsensitiveHashCodeProviderTests.Ctor_Empty_ChangeCurrentCulture_GetHashCodeCompare   System.Collections.Tests.HashtableTests.Ctor_IDictionary_IEqualityComparer   System.Collections.Tests.HashtableTests.Ctor_IDictionary_Int_IEqualityComparer   System.Collections.Tests.HashtableTests.Ctor_IEqualityComparer   System.Collections.Tests.HashtableTests.Ctor_Int_IEqualityComparer   System.Collections.Tests.HashtableTests.Ctor_Int_Int_IEqualityComparer   System.Collections.Tests.ComparerTests.DefaultInvariant_Compare    Configuration: outerloop_netcoreapp_osx10.12_release    Detail: https://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_netcoreapp_osx_release/221/testReport/System.Collections.Tests/SortedListTests/Item_Get_DifferentCulture/    MESSAGE:  Exit code was 131 but it should have been 42\nExpected: True\nActual: False  +++++++++++++++++++  STACK TRACE:  at System.Diagnostics.RemoteExecutorTestBase.RemoteInvokeHandle.Dispose() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_osx_release/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 172
24766	area-System.Net	"Test: System.Net.Security.Tests.ServerAsyncAuthenticateTest/ServerAsyncAuthenticate_MismatchProtocols_Fails failed with ""System.InvalidProgramException"""	Opened on behalf of @Jiayili1  The test `System.Net.Security.Tests.ServerAsyncAuthenticateTest/ServerAsyncAuthenticate_MismatchProtocols_Fails(serverProtocol: Tls, clientProtocol: Tls12, expectedException: typeof(System.Security.Auth...` has failed.  Assert.Throws() Failure     Expected: typeof(System.Security.Authentication.AuthenticationException)     Actual:   typeof(System.InvalidProgramException): No exception available to rethrow.          Stack Trace:             at System.Threading.Tasks.TaskFactory`1.FromAsyncImpl[TArg1,TArg2,TArg3](Func`6 beginMethod, Func`2 endFunction, Action`1 endAction, TArg1 arg1, TArg2 arg2, TArg3 arg3, Object state, TaskCreationOptions creationOptions) in /root/coreclr/src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs:line 1218        at System.Threading.Tasks.TaskFactory.FromAsync[TArg1,TArg2,TArg3](Func`6 beginMethod, Action`1 endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, Object state) in /root/coreclr/src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs:line 1092        at System.Net.Security.SslStream.AuthenticateAsServerAsync(X509Certificate serverCertificate, Boolean clientCertificateRequired, SslProtocols enabledSslProtocols, Boolean checkCertificateRevocation) in /root/corefx-1075192/src/System.Net.Security/src/System/Net/Security/SslStream.cs:line 405        at System.Net.Security.Tests.ServerAsyncAuthenticateTest.<ServerAsyncSslHelper>d__11.MoveNext() in /root/corefx-1075192/src/System.Net.Security/tests/FunctionalTests/ServerAsyncAuthenticateTest.cs:line 154     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in /root/coreclr/src/mscorlib/src/System/Runtime/ExceptionServices/ExceptionServicesCommon.cs:line 130        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) in /root/coreclr/src/mscorlib/src/System/Runtime/CompilerServices/TaskAwaiter.cs:line 152 Build : Master - 20171020.01 (Core Tests) Failing configurations: - SLES.12.Amd64-x64   - Debug  Detail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171020.01/workItem/System.Net.Security.Tests/analysis/xunit/System.Net.Security.Tests.ServerAsyncAuthenticateTest~2FServerAsyncAuthenticate_MismatchProtocols_Fails(serverProtocol:%20Tls,%20clientProtocol:%20Tls12,%20expectedException:%20typeof(System.Security.Auth...
24767	area-System.Net	"Test: System.Net.Security.Tests.SslStreamStreamToStreamTest_Async/SslStream_StreamToStream_WriteAsync_ReadAsync_Pending_Success failed with ""System.NullReferenceException"""	Opened on behalf of @Jiayili1  The test `System.Net.Security.Tests.SslStreamStreamToStreamTest_Async/SslStream_StreamToStream_WriteAsync_ReadAsync_Pending_Success` has failed.  System.IO.IOException : The read operation failed, see inner exception.     ---- System.NullReferenceException : Object reference not set to an instance of an object.          Stack Trace:             at System.Net.Security.SslStreamInternal.EndRead(IAsyncResult asyncResult) in /root/corefx-1075192/src/System.Net.Security/src/System/Net/Security/SslStreamInternal.cs:line 155        at System.Net.Security.SslStream.EndRead(IAsyncResult asyncResult) in /root/corefx-1075192/src/System.Net.Security/src/System/Net/Security/SslStream.cs:line 696        at System.Threading.Tasks.TaskFactory`1.FromAsyncTrimPromise`1.Complete(TInstance thisRef, Func`3 endMethod, IAsyncResult asyncResult, Boolean requiresSynchronization) in /root/coreclr/src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs:line 1344     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in /root/coreclr/src/mscorlib/src/System/Runtime/ExceptionServices/ExceptionServicesCommon.cs:line 130        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) in /root/coreclr/src/mscorlib/src/System/Runtime/CompilerServices/TaskAwaiter.cs:line 152        at System.Net.Security.Tests.SslStreamStreamToStreamTest.<SslStream_StreamToStream_WriteAsync_ReadAsync_Pending_Success>d__10.MoveNext() in /root/corefx-1075192/src/System.Net.Security/tests/FunctionalTests/SslStreamStreamToStreamTest.cs:line 316     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in /root/coreclr/src/mscorlib/src/System/Runtime/ExceptionServices/ExceptionServicesCommon.cs:line 130        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) in /root/coreclr/src/mscorlib/src/System/Runtime/CompilerServices/TaskAwaiter.cs:line 152     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in /root/coreclr/src/mscorlib/src/System/Runtime/ExceptionServices/ExceptionServicesCommon.cs:line 130        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) in /root/coreclr/src/mscorlib/src/System/Runtime/CompilerServices/TaskAwaiter.cs:line 152     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in /root/coreclr/src/mscorlib/src/System/Runtime/ExceptionServices/ExceptionServicesCommon.cs:line 130        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) in /root/coreclr/src/mscorlib/src/System/Runtime/CompilerServices/TaskAwaiter.cs:line 152     ----- Inner Stack Trace -----        at System.Buffers.TlsOverPerCoreLockedStacksArrayPool`1.Return(T[] array, Boolean clearArray) in /root/coreclr/src/mscorlib/shared/System/Buffers/TlsOverPerCoreLockedStacksArrayPool.cs:line 178        at System.Net.Security.SslStreamInternal.ReturnReadBufferIfEmpty() in /root/corefx-1075192/src/System.Net.Security/src/System/Net/Security/SslStreamInternal.cs:line 54        at System.Net.Security.SslStreamInternal.CopyDecryptedData(Byte[] buffer, Int32 offset, Int32 count) in /root/corefx-1075192/src/System.Net.Security/src/System/Net/Security/SslStreamInternal.cs:line 517        at System.Net.Security.SslStreamInternal.ProcessFrameBody(Int32 readBytes, Byte[] buffer, Int32 offset, Int32 count, AsyncProtocolRequest asyncRequest) in /root/corefx-1075192/src/System.Net.Security/src/System/Net/Security/SslStreamInternal.cs:line 697        at System.Net.Security.SslStreamInternal.StartFrameBody(Int32 readBytes, Byte[] buffer, Int32 offset, Int32 count, AsyncProtocolRequest asyncRequest) in /root/corefx-1075192/src/System.Net.Security/src/System/Net/Security/SslStreamInternal.cs:line 652        at System.Net.Security.SslStreamInternal.ReadHeaderCallback(AsyncProtocolRequest asyncRequest) in /root/corefx-1075192/src/System.Net.Security/src/System/Net/Security/SslStreamInternal.cs:line 758 Build : Master - 20171020.01 (Core Tests) Failing configurations: - SLES.12.Amd64-x64   - Debug  Detail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171020.01/workItem/System.Net.Security.Tests/analysis/xunit/System.Net.Security.Tests.SslStreamStreamToStreamTest_Async~2FSslStream_StreamToStream_WriteAsync_ReadAsync_Pending_Success
24768	area-System.Net	"Test: System.Net.Tests.SimpleHttpTests/UnknownHeaders_Success failed with ""Xunit.Sdk.EqualException"""	Opened on behalf of @Jiayili1  The test `System.Net.Tests.SimpleHttpTests/UnknownHeaders_Success(numHeaders: 100)` has failed.  Assert.Equal() Failure\r     Expected: 0\r     Actual:   (null)          Stack Trace:             at System.Net.Tests.SimpleHttpTests.<UnknownHeaders_Success>d__13.MoveNext()     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) Build : 2.0.0 - 20171020.01 (Core Tests) Failing configurations: - windows.10.amd64.iot-x64   - Release  Detail: https://mc.dot.net/#/product/netcore/200/source/official~2Fcorefx~2Frelease~2F2.0.0~2F/type/test~2Ffunctional~2Fcli~2F/build/20171020.01/workItem/System.Net.HttpListener.Tests/analysis/xunit/System.Net.Tests.SimpleHttpTests~2FUnknownHeaders_Success(numHeaders:%20100)
24770	area-System.Collections	Add RemoveIfValue to ConcurrentDictionary	"This is similar to #24246, but I don't think it's quite the same.    I have the following scenario: I use a ConcurrentDictionary<Key,Value> as the core of a simple memory cache. The Get function of the cache will look up the key, and check the value's timestamp to see if the entry is expired. If it is, I want to remove it from the dictionary. However, a different thread might have concurrently renewed the cache entry, thus making removal unnecessary. So I want to remove the entry, but only if it is still the same value as before.    I am basically looking for TryUpdate, but with the updated value being ""not there"". Or to put it another way, I want ICollection.Remove(KeyValuePair) exposed and documented as a regular function.    The implementation is actually trivial:    ```  public bool RemoveIfValue(TKey key, TValue value)  {      if (key == null) throw new ArgumentNullException(nameof(key), SR.ConcurrentDictionary_ItemKeyIsNull);        TValue throwAwayValue;      return TryRemoveInternal(key, out throwAwayValue, true, value);  }  ```    This is basically a copy&paste of the explicit IDictionary.Remove implementation, but with separate arguments instead of a KeyValuePair, and exposed as a method accessible without casting.    This can currently be worked around with this extension method:    ```  public static bool RemoveIfValue<TKey, TValue>(this ConcurrentDictionary<TKey, TValue> self,      TKey key, TValue value)  {    var asCollection = (ICollection<KeyValuePair<TKey, TValue>>)self;    return asCollection.Remove(new KeyValuePair<TKey, TValue>(key, value));  }  ```"
24771	area-System.Runtime	Throw exception if SysConf fails in Environment.ProcessorCount	This shouldn't happen in a valid configuration, but adding the exception to help highlight the problem with an invalid configuration.    Related to https://github.com/dotnet/corefx/issues/24663  cc: @joperezr, @AlexGhiondea 
24773	area-System.Linq	Add optimized path for IReadOnlyCollection/IReadOnlyList in System.Linq	It's kind of historical reason for the readonly interfaces not inherited by `ICollection<T>`/`IList<T>`.  Adding a optimized path needs a copy of all `ICollection<T>`/`IList<T>` paths and classes.  Implementing `ICollection<T>` with `IsReadOnly = true` does get the optimizations, but it's kind of violating the interfaces.
24774	area-System.Net	Request for documentation of HttpClientHandler.ServerCertificateCustomValidationCallback	Currently the behavior of the property ServerCertificateCustomValidationCallback of the class HttpClientHandler is not obvious and lacks proper documentation.  This is a request to document the behavior of the property.  I would expect the documentation to go into details on:   - what behavior is support on different OS and frameworks (and probably how the version of the SSL/CURL stack affect this)  - how this property should be used for different OS and frameworks  - how to determine what is supported for the current OS/framework/network stack  - its relation to the HttpClientHandler.DangerousAcceptAnyServerCertificateValidator  - how and if it might affect or be affected by code that use ServicePointManager.ServerCertificateValidationCallback (e.g. potential race conditions)  - how and if it might affect or be affected by code that use WebRequestHandler.ServerCertificateValidationCallback (e.g. potential race conditions)    Also I would like to request similar documentation for the WebRequestHandler.ServerCertificateValidationCallback property.      
24775	area-System.Net	System.Net.Security tests hanging more often on Linux	"e.g.  https://mc.dot.net/#/user/stephentoub/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/f60e3fcc6d98a1e237ad36c302f421410267328c/workItem/System.Net.Security.Tests/wilogs  ```  Executed on dnblup140000TTW  2017-10-20 14:09:11,846: INFO: scriptrunner(33): _main: BuildTools Helix Script Runner v0.1 starting  2017-10-20 14:09:11,847: INFO: helix_test_execution(24): __init__: Copying execution payload files from /home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip to /home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution  2017-10-20 14:09:11,847: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/kdc.conf.ubuntu' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/kdc.conf.ubuntu'  2017-10-20 14:09:11,847: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/setup-kdc.sh' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/setup-kdc.sh'  2017-10-20 14:09:11,848: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/krb5.conf' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/krb5.conf'  2017-10-20 14:09:11,848: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/System.Net.Security.Tests.dll' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/System.Net.Security.Tests.dll'  2017-10-20 14:09:11,848: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/System.Net.Security.Tests.pdb' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/System.Net.Security.Tests.pdb'  2017-10-20 14:09:11,849: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/RemoteExecutorConsoleApp.pdb' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/RemoteExecutorConsoleApp.pdb'  2017-10-20 14:09:11,849: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/kdc.conf.opensuse' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/kdc.conf.opensuse'  2017-10-20 14:09:11,849: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/kdc.conf.centos' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/kdc.conf.centos'  2017-10-20 14:09:11,849: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/xunit.console.netcore.runtimeconfig.json' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/xunit.console.netcore.runtimeconfig.json'  2017-10-20 14:09:11,849: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/RunTests.sh' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/RunTests.sh'  2017-10-20 14:09:11,850: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/RemoteExecutorConsoleApp.exe' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/RemoteExecutorConsoleApp.exe'  2017-10-20 14:09:11,850: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/xunit.console.netcore.exe' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/xunit.console.netcore.exe'  2017-10-20 14:09:11,850: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/RemoteExecutorConsoleApp.runtimeconfig.json' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/RemoteExecutorConsoleApp.runtimeconfig.json'  2017-10-20 14:09:11,850: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/DumplingHelper.py' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/DumplingHelper.py'  2017-10-20 14:09:11,850: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/TestData/testselfsignedservereku.contoso.com.p7b' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/TestData/testselfsignedservereku.contoso.com.p7b'  2017-10-20 14:09:11,851: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/TestData/testnoeku.contoso.com.pfx' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/TestData/testnoeku.contoso.com.pfx'  2017-10-20 14:09:11,851: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/TestData/testservereku.contoso.com.cer' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/TestData/testservereku.contoso.com.cer'  2017-10-20 14:09:11,851: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/TestData/testselfsignedclienteku.contoso.com.pfx' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/TestData/testselfsignedclienteku.contoso.com.pfx'  2017-10-20 14:09:11,851: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/TestData/testservereku.contoso.com.p7b' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/TestData/testservereku.contoso.com.p7b'  2017-10-20 14:09:11,852: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/TestData/contoso.com.cer' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/TestData/contoso.com.cer'  2017-10-20 14:09:11,852: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/TestData/testselfsignedclienteku.contoso.com.cer' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/TestData/testselfsignedclienteku.contoso.com.cer'  2017-10-20 14:09:11,852: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/TestData/testclienteku.contoso.com.pfx' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/TestData/testclienteku.contoso.com.pfx'  2017-10-20 14:09:11,852: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/TestData/testnoeku.contoso.com.p7b' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/TestData/testnoeku.contoso.com.p7b'  2017-10-20 14:09:11,852: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/TestData/testservereku.contoso.com.pfx' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/TestData/testservereku.contoso.com.pfx'  2017-10-20 14:09:11,853: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/TestData/testclient1_at_contoso.com.p7b' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/TestData/testclient1_at_contoso.com.p7b'  2017-10-20 14:09:11,853: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/TestData/testclienteku.contoso.com.cer' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/TestData/testclienteku.contoso.com.cer'  2017-10-20 14:09:11,853: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/TestData/testnoeku.contoso.com.cer' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/TestData/testnoeku.contoso.com.cer'  2017-10-20 14:09:11,853: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/TestData/testselfsignedservereku.contoso.com.cer' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/TestData/testselfsignedservereku.contoso.com.cer'  2017-10-20 14:09:11,853: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/TestData/DummyTcpServer.pfx' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/TestData/DummyTcpServer.pfx'  2017-10-20 14:09:11,853: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/TestData/testselfsignedclienteku.contoso.com.p7b' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/TestData/testselfsignedclienteku.contoso.com.p7b'  2017-10-20 14:09:11,854: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/TestData/contoso.com.pfx' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/TestData/contoso.com.pfx'  2017-10-20 14:09:11,854: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/TestData/contoso.com.p7b' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/TestData/contoso.com.p7b'  2017-10-20 14:09:11,854: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/TestData/testclient1_at_contoso.com.pfx' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/TestData/testclient1_at_contoso.com.pfx'  2017-10-20 14:09:11,854: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/TestData/testclienteku.contoso.com.p7b' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/TestData/testclienteku.contoso.com.p7b'  2017-10-20 14:09:11,854: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/TestData/testselfsignedservereku.contoso.com.pfx' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/TestData/testselfsignedservereku.contoso.com.pfx'  2017-10-20 14:09:11,855: INFO: io(27): copy_tree_to: Copying '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/TestData/testclient1_at_contoso.com.cer' to '/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Exec/execution/TestData/testclient1_at_contoso.com.cer'  2017-10-20 14:09:11,855: INFO: proc(23): run_and_log_output: Running: /home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip/RunTests.sh /home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Payload  2017-10-20 14:09:11,855: INFO: proc(26): run_and_log_output: CWD: /home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip  2017-10-20 14:09:11,858: INFO: proc(54): run_and_log_output: Output: Using as the test runtime folder.  2017-10-20 14:09:11,860: INFO: proc(54): run_and_log_output: Output: Running tests... Start time: 14:09:11  2017-10-20 14:09:11,860: INFO: proc(54): run_and_log_output: Output: Commands:  2017-10-20 14:09:11,860: INFO: proc(54): run_and_log_output: Output: python DumplingHelper.py install_dumpling  2017-10-20 14:09:11,860: INFO: proc(54): run_and_log_output: Output: __TIMESTAMP=`python DumplingHelper.py get_timestamp`  2017-10-20 14:09:11,860: INFO: proc(54): run_and_log_output: Output: chmod +x /home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Payload/dotnet  2017-10-20 14:09:11,861: INFO: proc(54): run_and_log_output: Output: /home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Payload/dotnet xunit.console.netcore.exe System.Net.Security.Tests.dll  -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests  -notrait category=OuterLoop -notrait category=failing  2017-10-20 14:09:11,861: INFO: proc(54): run_and_log_output: Output: python DumplingHelper.py collect_dump $\ `pwd`  System.Net.Security.Tests /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/bin/runtime/netcoreapp-Linux-Release-x64/,/mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/bin/tests/System.Net.Security.Tests/netcoreapp-Linux-Release-x64/,/home/helixbot/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Payload,/lib/x86_64-linux-gnu/libgcc_s.so.1,/lib/x86_64-linux-gnu/libpthread.so.0,/lib/x86_64-linux-gnu/librt.so.1,/usr/lib/x86_64-linux-gnu/libunwind.so.8,/lib/x86_64-linux-gnu/libdl.so.2,/lib/x86_64-linux-gnu/libuuid.so.1,/usr/lib/x86_64-linux-gnu/libunwind-x86_64.so.8,/usr/lib/x86_64-linux-gnu/libstdc++.so.6,/lib/x86_64-linux-gnu/libm.so.6,/lib/x86_64-linux-gnu/libc.so.6,/lib64/ld-linux-x86-64.so.2,/lib/x86_64-linux-gnu/liblzma.so.5  2017-10-20 14:09:11,861: INFO: proc(54): run_and_log_output: Output: ~/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip ~/dotnetbuild/work/282ace74-88c4-48cc-a76d-4d82bfa600c7/Work/48747109-97f1-465f-973b-e824e0f189ff/Unzip  2017-10-20 14:09:12,187: INFO: proc(54): run_and_log_output: Output: downloaded dumpling.py  2017-10-20 14:09:12,188: INFO: proc(54): run_and_log_output: Output: total elapsed time 0:00:00.201976  2017-10-20 14:09:12,296: INFO: proc(54): run_and_log_output: Output: xUnit.net console test runner (64-bit .NET Core)  2017-10-20 14:09:12,296: INFO: proc(54): run_and_log_output: Output: Copyright (C) 2014 Outercurve Foundation.  2017-10-20 14:09:12,297: INFO: proc(54): run_and_log_output: Output:   2017-10-20 14:09:12,355: INFO: proc(54): run_and_log_output: Output: Discovering: System.Net.Security.Tests  2017-10-20 14:09:12,573: INFO: proc(54): run_and_log_output: Output: Discovered:  System.Net.Security.Tests  2017-10-20 14:09:12,669: INFO: proc(54): run_and_log_output: Output: Starting:    System.Net.Security.Tests  2017-10-20 14:09:16,107: INFO: proc(54): run_and_log_output: Output:    System.Net.Security.Tests.SslStreamEKUTest.SslStream_NoEKUServerAuth_Ok [SKIP]  2017-10-20 14:09:16,108: INFO: proc(54): run_and_log_output: Output:       Condition(s) not met: \""IsRootCertificateInstalled\""  2017-10-20 14:09:16,109: INFO: proc(54): run_and_log_output: Output:    System.Net.Security.Tests.SslStreamEKUTest.SslStream_SelfSignedClientEKUClientAuth_Ok [SKIP]  2017-10-20 14:09:16,109: INFO: proc(54): run_and_log_output: Output:       Condition(s) not met: \""IsRootCertificateInstalled\""  2017-10-20 14:09:16,109: INFO: proc(54): run_and_log_output: Output:    System.Net.Security.Tests.SslStreamEKUTest.SslStream_NoEKUClientAuth_Ok [SKIP]  2017-10-20 14:09:16,109: INFO: proc(54): run_and_log_output: Output:       Condition(s) not met: \""IsRootCertificateInstalled\""  2017-10-20 14:09:16,109: INFO: proc(54): run_and_log_output: Output:    System.Net.Security.Tests.SslStreamEKUTest.SslStream_ServerEKUClientAuth_Fails [SKIP]  2017-10-20 14:09:16,109: INFO: proc(54): run_and_log_output: Output:       Condition(s) not met: \""IsRootCertificateInstalled\""  2017-10-20 14:09:16,109: INFO: proc(54): run_and_log_output: Output:    System.Net.Security.Tests.SslStreamEKUTest.SslStream_ClientEKUServerAuth_Fails [SKIP]  2017-10-20 14:09:16,109: INFO: proc(54): run_and_log_output: Output:       Condition(s) not met: \""IsRootCertificateInstalled\""  Killed  ```  cc: @geoffkizer, @Drawaes     @Drawaes, I'm a little worried this is due to some of the recent SslStream changes.    @safern, @danmosemsft, we don't yet have a way to know which test(s) hung, do we?"
24776	area-Infrastructure	netcoreapp build vertical needs to be buildable without previous versions	See comment at https://github.com/dotnet/corefx/pull/24708#discussion_r145993635.    For our netcoreapp build vertical we need to be able to build it against the latest version without needing to restore the older packages. This is for the build-from-source efforts which require us to build all the assets instead of restoring them. 
24778	area-System.Net	ManagedHandler: Protocol corruption if 100-continue is expected but not received	ManagedHandler has the same 100-continue bug as CurlHandler: https://github.com/dotnet/corefx/issues/24435    100-continue is an inherent race condition. The client is waiting for a 100 response or a final response, but only for a given timeout. When the server sends the final response without a 100, it has no way of knowing if the client's timer has expired and it has already started sending data. This would be an ambiguous situation as the server wouldn't reliably know if the next bytes it received were the body it was promised or the headers for the next request. To prevent this ambiguity the client must always send the data it promised, or a chunked terminator, or close the connection. For small bodies it's worth sending it to avoid the cost of creating a new connection, but for large bodies is far more economical close the connection.    ManagedHandler (and CurlHandler) does not send the the request body if it receives a final response rather than a 100 continue. This causes protocol corruption on the next request and it is rejected by the server (e.g. 400 Bad Request).     Final status codes are common in authentication scenarios like when the user's request is rejected due to missing or insufficient permissions. The client can send a new request with the required credentials, and many clients do this automatically. See AuthenticationHandler.    Workaround: Apps must disable ExpectContinue on every request with a body.    The fix for ManagedHandler looks small, handling for ReceivedOtherStatusCode needs to be added to the switch here:  https://github.com/dotnet/corefx/blob/08802ff9c877f7f75a82d6704d84d321e99eb5c8/src/System.Net.Http/src/System/Net/Http/Managed/HttpConnection.cs#L457-L462  Sending the data is the minimal fix, but consider sending only the chunked terminator or closing the connection for non-trivial request bodies. This can also avoid problems with un-buffered HttpContent objects that can't be sent twice.
24779	area-System.Runtime	Adding tests for Random Hashing	Fixes #24466    cc: @danmosemsft @stephentoub 
24781	area-System.Net	[WIP] Checking Master with  <XunitShowProgress>true</XunitShowProgress> Outerloop	
24782	area-Infrastructure	Update ProjectNTfs, ProjectNTfsTestILC, Standard to rel-25916-00, rel-25916-00, preview1-25916-01, respectively (release/uwp6.0)	
24788	area-System.Linq	Add a single parameter, with return type `ValueTuple` overload for `Enumerable.Zip`?	"Instead of writing    ```cs  foreach (var (x, y) in Seq1.Zip(Seq2, (s1, s2) => (s1, s2)))  ```    we could write:    ```cs  foreach (var (x, y) in Seq1.Zip(Seq2))  ```    The implementation seems to be trivial:    ```cs  public static class ZipExtensions  {      public static IEnumerable<(T, U)> Zip<T, U>(this IEnumerable<T> seq1, IEnumerable<U> seq2)      {          return seq1.Zip(seq2, (x, y) => (x, y));      }  }  ```    ## Usage    ```cs  var list = new List<int>{1, 2, 3, 4};  foreach(var (n, i) in list.Zip(Range(0, list.Count)))  {      Console.WriteLine($""{i}: {n}"");  }  ```    ## Other Languages    `Zip`-like functions in Rust, C++ (Boost, range-v3) all return `tuple`s."
24789	area-System.Net	Make Expect: 100-continue handling more robust	"When libcurl sends an Expect: 100-continue header, if it gets back a success error code, it may avoid sending the remaining payload and also may keep the connection open, which can confuse servers that expect to receive the fully promised payload and that don't close the connection when sending a final success status code instead of 100 continue.  To mitigate this, we simply change the default ExpectContinue == null behavior to be the equivalent of ExpectContinue == false rather than to be ""do whatever the platform decides"".  This also more closely aligns with WinHttpHandler and ManagedHandler, where effectively the ""platform"" in those cases decides that the default is disabled.    For ManagedHandler, currently we're mimicking behavior like that libcurl employed and may sometimes not send the full payload but still keep the connection open.  Instead, make sure we either always send the full payload or close the connection.    Fixes https://github.com/dotnet/corefx/issues/24435  Fixes https://github.com/dotnet/corefx/issues/24778    cc: @geoffkizer, @Tratcher, @Priya91, @wfurt "
24791	area-System.Net	SSLStream Check for deallocated GCHandle	The GCHandle can easily be deallocated (by closing the SSlStream or if it's cancelled) before OpenSsl calls back due to the otherside sending the Client Hello. Therefore if I am not mistaken we should check that the GCHandle is still allocated when we rehydrate it from a pointer handed in from unmanaged code?    Also if it is null or deallocated, we don't want to throw an exception inside a Native callback because it can cause all kinds of havoc.
24792	area-System.Data	SqlClient: OUTPUT clause causes exceptions to not get thrown until read	"This scenario is a bit lengthy, so I'll load it into a gist: https://gist.github.com/benrr101/31628b57f1ab410090237c9018860e05    Basically what this boils down to is that if I `.ExecuteReader()` on a `SqlCommand` that has an `OUTPUT` clause in it, I don't get an exception from the query failing until I call `.Read()` on the `SqlDataReader` I gt back.    For instance executing:  ```  INSERT INTO [dbo].[testtable]([small_col]) VALUES (""this value will be truncated"")  SELECT * FROM [dbo].[testtable]  ```  ```  SqlDataReader reader = cmd.ExecuteReader(); // Doesn't throw  reader.Read() // DOES throw  ```    But executing:  ```  INSERT INTO [dbo].[testtable]([small_col]) OUTPUT inserted.[small_col] VALUES (""this value will be truncated"")  ```  ```  SqlDataReader reader = cmd.ExecuteReader(); // DOES throw  reader.Read(); // Never executed  ```    At this point I'm not sure if this is an expected behavior due to quirks in the TDS protocol or if it's a bug. Nevertheless, this is a bit of weird behavior that has already caused us a couple unexpected issue."
24793	area-System.Runtime	Add Convert.cs performance tests.	Add Convert.cs performance tests. (#18765)
24794	area-System.Runtime	Environment.ProcessorCount is -1	"On my Linux system (a VPS running Debian, using the [KVM](https://www.linux-kvm.org/page/Main_Page) virtualization platform), `Environment.ProcessorCount` is returning `-1`. However, the native syscall works fine:    ```csharp  using System;  using System.Runtime.InteropServices;    namespace ConcurrentBug  {      class Program      {       private const int _SC_NPROCESSORS_ONLN = 84;    [DllImport(""libc"")]       private static extern long sysconf(int name);      static void Main(string[] args)          {              Console.WriteLine($""Processor Count (Managed): {Environment.ProcessorCount}"");           Console.WriteLine($""Processor Count (Native): {sysconf(_SC_NPROCESSORS_ONLN)}"");    }      }  }    ```  ```  0:25 daniel@vps03 /tmp/ConcurrentBug  % /usr/bin/dotnet ConcurrentBug.dll  Processor Count (Managed): -1  Processor Count (Native): 1  ```    This breaks the default constructor for `ConcurrentDictionary` - **All** ASP.NET Core sites on this server fail with:  ```  Unhandled Exception: System.ArgumentOutOfRangeException: The concurrencyLevel argument must be positive.  Parameter name: concurrencyLevel     at System.Collections.Concurrent.ConcurrentDictionary`2..ctor(Int32 concurrencyLevel, Int32 capacity, Boolean growLockArray, IEqualityComparer`1 comparer)     at Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher..ctor(String root, FileSystemWatcher fileSystemWatcher, Boolean pollForChanges)     at Microsoft.Extensions.FileProviders.PhysicalFileProvider.CreateFileWatcher(String root)     at Microsoft.AspNetCore.Hosting.Internal.HostingEnvironmentExtensions.Initialize(IHostingEnvironment hostingEnvironment, String applicationName, String contentRootPath, WebHostOptions options)     at Microsoft.AspNetCore.Hosting.WebHostBuilder.BuildCommonServices(AggregateException& hostingStartupErrors)     at Microsoft.AspNetCore.Hosting.WebHostBuilder.Build()     at Example.Web.Program.BuildWebHost(String[] args) in C:\src\Example\src\Example.Web\Program.cs:line 21     at Example.Web.Program.Main(String[] args) in C:\src\Example\src\Example.Web\Program.cs:line 17  ```    ## Environment  ```  0:16 daniel@vps03 /tmp/ConcurrentBug  % /usr/bin/dotnet --info  .NET Command Line Tools (2.0.0)    Product Information:   Version:            2.0.0   Commit SHA-1 hash:  cdcd1928c9    Runtime Environment:   OS Name:     debian   OS Version:   OS Platform: Linux   RID:         debian-x64   Base Path:   /usr/share/dotnet/sdk/2.0.0/    Microsoft .NET Core Shared Framework Host      Version  : 2.0.0    Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d    0:17 daniel@vps03 /tmp/ConcurrentBug  % cat /proc/cpuinfo  processor       : 0  vendor_id       : GenuineIntel  cpu family      : 6  model           : 60  model name      : Intel(R) Xeon(R) CPU E3-1270 v3 @ 3.50GHz  stepping        : 3  microcode       : 0x1  cpu MHz         : 3500.014  cache size      : 8192 KB  physical id     : 0  siblings        : 1  core id         : 0  cpu cores       : 1  apicid          : 0  initial apicid  : 0  fpu             : yes  fpu_exception   : yes  cpuid level     : 13  wp              : yes  flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon rep_good nopl cpuid pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm fsgsbase bmi1 avx2 smep bmi2 erms invpcid xsaveopt  bugs            :  bogomips        : 7000.02  clflush size    : 64  cache_alignment : 64  address sizes   : 40 bits physical, 48 bits virtual  power management:  ```  "
24796	area-System.Diagnostics	[Api] StackTraceFormatting{Options} 	"## Motivation  Stack traces are very noisy as they *post*-exception stacks (and ones used to produce the exception, like `ThrowHelper`s); that are the same for every exception:  ```     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()      at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)      at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)      at System.Runtime.CompilerServices.TaskAwaiter.GetResult()      at Program.<DelayedAsync>d__2.MoveNext()  ```  When only   ```     at Program.<DelayedAsync>d__2.MoveNext()  ```  Is useful in diagnosing the exception.    A way is needed to discard these post-error helper stacks; to make the stack-trace more useful and less noise.    ## Proposed Api    Adds extra .ctor overload + param to `DebuggerNonUserCodeAttribute`    ```csharp  [Flags]  public enum StackTraceFormattingOptions  {      None                   = 0,      StackTraceHidden       = 1 << 0      ...  }  ```  ```csharp  public partial class DebuggerNonUserCodeAttribute  {      /// <summary>Initializes the <see cref=""DebuggerNonUserCodeAttribute""/>.</summary>      /// <param name=""stackTraceOptions"">The <see cref=""StackTraceFormattingOptions""/> hint.</param>      public DebuggerNonUserCodeAttribute(StackTraceFormattingOptions stackTraceOptions)      {          StackTraceOptions = stackTraceOptions;      }        /// <summary>Gets the <see cref=""StackTraceFormattingOptions""/>.</summary>      internal StackTraceFormattingOptions StackTraceOptions { get; }  }  ```  Adds StackTrace formatting configuration (which can be switched at runtime; if more detailed traces are needed)  ```csharp  [Flags]  public enum StackTraceFormatting  {      None = 0,      ExcludeStackTraceHidden   = 1 << 0, // DebuggerNonUserCode /w StackTraceHidden      ExcludeDispatchBoundaries = 1 << 1,      ExcludeNonUserCode        = 1 << 2  // DebuggerNonUserCode      ...  }  ```  ```csharp  public partial class StackTrace  {      public static StackTraceFormatting FormattingOptions { get; set; }  }  ```      **Related:**  * ""Make stack traces readable"" https://github.com/dotnet/corefx/issues/24627  * ""Improved formatting for async stack traces"" https://github.com/dotnet/coreclr/issues/2813  * ""Provide an API for traversing/reasoning about async call stacks"" https://github.com/dotnet/corefx/issues/1370  * ""BuilderMethodAttribute"" https://github.com/dotnet/corefx/issues/24795"
24798	area-System.IO	Change lifetime of Socket used in NamedPipeServerStream on Unix	We currently create and destroy the unix domain socket each time WaitForConnection{Async} is called, and it lives until the client connects.  This causes problems when multiple clients try to connect before WaitForConnection{Async} is called; any number that's under the min listen limit applied by the OS will have their connections completed, even though Accept hasn't been called, and then when the socket is closed, the connections will all fail.  This change moves the UDS creation to when the NamedPipeServerStream is created, deleting it when the NPSS is disposed.    cc: @pjanotti, @JeremyKuhne, @jaredpar, @khyperia
24799	area-System.Net	SSLStream Fixing GC Hole	
24800	area-System.Net	Remove dead code from System.Net.NetworkInformation	PR addresses issue #17905, project **System.Net.NetworkInformation**.    Most of the red things in the [diff file](http://tempcoverage.blob.core.windows.net/report2/System.Net.NetworkInformation.diff.html) are in `src\Common` folder.
24801	area-System.Net	Remove dead code from System.Net.Primitives	PR addresses issue #17905, project **System.Net.Primitives**.
24802	area-System.Net	Port WinRT WebSockets Client fix (#21600) to UWP servicing (netcore50) branch	As as been reported [here](https://github.com/dotnet/corefx/issues/17317), if the connection of a `ClientWebSocket` in NETStandard16 is terminated, the process will crash because the exception cannot be handled.    This issue has been adressed in NETStandard20/UWP6.0 and the FCU, and it works if you target W10 build 16299 on a desktop. However, on W10M devices like the Lumia 640, the build and thus NETStandard20 is unavailable and everytime a connection is disrupted the app will crash.    Could a fix for this be made available, preferably in the near future? Seeing your app being killed without anything you can do for several months because of a known and identified issue is tiresome.
24803	area-Meta	Adjust link fit to other URLs	
24804	area-System.Net	Test failure: System.Net.Sockets.Tests.TimeoutTest / SendTimesOut_Throws	## Types of failures    ```  Assert.InRange()   Failure  Range:  (1000 -   4000)  Actual: 4846.0518    at System.Net.Sockets.Tests.TimeoutTest.SendTimesOut_Throws(Boolean forceNonBlocking) in /root/corefx-1079585/src/System.Net.Sockets/tests/FunctionalTests/TimeoutTest.cs:line 130  ```    ## History of failures    Day | Build | OS | Error message  -- | -- | -- | --  8/16 | 20170816.01 | Debian90 | Range: (1500 - 3000), Actual: 3276.4603  8/16 | 20170816.01 | Debian90 | Range: (1500 - 3000), Actual: 726.4583  8/28 | 20170828.01 | Ubuntu14.04 | Range: (1500 - 3000), Actual: 1428.4429  10/23 | 20171023.01 | Suse42.2 | Range: (1000 - 4000), Actual: 4846.0518 - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171023.01/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.TimeoutTest~2FSendTimesOut_Throws(forceNonBlocking:%20False))  
24805	area-System.Security	Test failure: System.Security.Cryptography.Csp.Tests.RSACryptoServiceProviderTests/Verify_InvalidPaddingMode_Throws	Opened on behalf of @Jiayili1  The test `System.Security.Cryptography.Csp.Tests.RSACryptoServiceProviderTests/Verify_InvalidPaddingMode_Throws` has failed.  $BlockedFromReflection_5_22711b8a : A device attached to the system is not functioning          Stack Trace:             at Internal.NativeCrypto.CapiHelper.SignValue($SafeProvHandle hProv, $SafeKeyHandle hKey, Int32 keyNumber, Int32 calgKey, Int32 calgHash, Byte[] hash) in E:\A\_work\1190\s\corefx\src\System.Security.Cryptography.Csp\src\System\Security\Cryptography\CapiHelper.Windows.cs:line 1223        at System.Security.Cryptography.RSACryptoServiceProvider.SignData(Byte[] buffer, Object halg) in E:\A\_work\1190\s\corefx\src\System.Security.Cryptography.Csp\src\System\Security\Cryptography\RSACryptoServiceProvider.Windows.cs:line 420        at System.Security.Cryptography.Csp.Tests.RSACryptoServiceProviderTests.Verify_InvalidPaddingMode_Throws() in E:\A\_work\1190\s\corefx\src\System.Security.Cryptography.Csp\tests\RSACryptoServiceProviderTests.cs:line 373        at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetV(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall)        at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean isTargetThisCall)        at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566      Build : Master - 20171023.01 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64-arm   - Debug  Detail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Filc~2F/build/20171023.01/workItem/System.Security.Cryptography.Csp.Tests.Execution/analysis/xunit/System.Security.Cryptography.Csp.Tests.RSACryptoServiceProviderTests~2FVerify_InvalidPaddingMode_Throws
24807	area-System.Net	System.Net.Mail.Tests.LoggingTest.EventSource_EventsRaisedAsExpected failed in CI	Failed test: System.Net.Mail.Tests.LoggingTest.EventSource_EventsRaisedAsExpected     Detail: https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_release/3401/testReport/System.Net.Mail.Tests/LoggingTest/EventSource_EventsRaisedAsExpected/    Configuration: osx10.12_release    MESSAGE:  ~~~  Exit code was 131 but it should have been 42\nExpected: True\nActual: False  ~~~  STACK TRACE:  ~~~  at System.Diagnostics.RemoteExecutorTestBase.RemoteInvokeHandle.Dispose()   in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_release/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 189  ~~~
24809	area-System.Net	Improve SO_REUSE{ADDR,PORT} xplat behavior for TCP	Fixes #24562    The test cases added would fail on Unix and pass on Windows.    The ProtocolType is passed to Bind, GetSockOpt and SetSockOpt to change the behavior for TCP in pal_networking.cpp.    CC @wfurt @geoffkizer @Priya91 @halter73 @stephentoub 
24812	area-System.Diagnostics	Add PerformanceCounters Testing	
24815	area-System.Net	Remove dead code from System.Net.Requests	PR addresses issue #17905, project **System.Net.Requests**.
24816	area-System.Net	Remove dead code from System.Net.Security	PR addresses issue #17905, project **System.Net.Security**.
24817	area-System.IO	FileSystemWatcher misleading exception message	"I encountered an exception being thrown in an ASP.NET Core 2.0 project which said ""The directory name {0} is invalid."" and it was misleading. [`FileSystemWatcher`](https://github.com/dotnet/corefx/blob/724ddb8fc95a5b1f639cfa508a32b9a8c50c1949/src/System.IO.FileSystem.Watcher/src/System/IO/FileSystemWatcher.cs#L108) throws an exception with this message, and in my case the path was valid but the directory did not exist.    ""The directory name {0} does not exist."" would be a more helpful message for me."
24818	area-System.Net	Socket.SendAsync not firing SocketAsyncEventArgs Completed event	I noticed that with `netcoreapp2.0` the `SocketAsyncEventArgs.Completed` event is not fired when data is sent using the socket `SendAsync` method. This causes some issues when we implement a sending queue along with an `AutoResetEvent`.    Since it's the first time I open an issue here, should I provide samples? Just let me know if you need more informations.    I am finding this issue only with `netcoreapp2.0`. Doesn't have this issue with `netcoreapp1.0`.    You can find here an implementation of my tcp socket client with `SocketAsyncEventArgs` : https://github.com/Eastrall/Ether.Network/blob/develop/src/Ether.Network/Client/NetClient.cs
24819	area-System.Net	WinHttpHandler throws exception for redirect when there's no location header	The .NET Framework does not.
24820	area-System.Net	Fix a few ManagedHandler issues	cc: @geoffkizer, @Tratcher 
24821	area-System.Net	ClientWebSocket produces malloc exception in multi-threaded environments.	Running a .NET Core 2.0 CLI app on macOS 10.12.6. ClientWebSocket version is the latest I believe.    When operating in a multi-threaded environment, I receive what looks like a C++ malloc exception.    This appears to be happening when the remote host terminates the connection unexpectedly. I have locks on reads + writes so there is never more than one of each happening at once. When I make a call to either `SendAsync` or `ReceiveAsync` and the connection has been terminated unexpectedly, I receive the following error:    ```  dotnet(75902,0x700010355000) malloc: *** error for object 0x7fe5669dbf20: pointer being freed was not allocated  *** set a breakpoint in malloc_error_break to debug  ```    I can't say for certain whether or not the remote host has terminated the connection because I don't have a stack trace, but it is my suspicion as I know there is a rate limit on the web socket endpoint, and this issue only happens shortly after sustained requests exceed rate limit threshold.    I can't think of any way of preventing this issue in user code (other than a rate limiter but that only stops a certain type of unexpected termination.)  Adding a lock won't solve it because the the connection could be terminated between when I call ReceiveAsync and when ReceiveAsync reaches the point in native code where it breaks.
24822	area-System.IO	Internal relative relationships for System.IO.Packaging.Package fail to load on Mono	"Uri parsing on Mono has a quirk when parsing a Uri that if you pass `UriKind.RelativeOrAbsolute`, a forward slash `/` is treated as absolute while in .NET Framework this would be parsed as relative. This causes packaging to break when reading a package file (for a real example, see OfficeDev/Open-XML-SDK#249 where DocumentFormat.OpenXml fails to load documents on Xamarin) where internal relationships are managed by relative Uris.    There are a few workarounds available (see www.mono-project.com/docs/faq/known-issues/urikind-relativeorabsolute/ for details):    1. Use a special `UriKind` defined by Mono when run on that runtime; ie `(UriKind)300`  2. Set an environment variable to force all Uri instances that start with a forward slash to be parsed as relative (`export MONO_URI_DOTNETRELATIVEORABSOLUTE=true`)    ## Potential Fix  There is a single instance of `UriKind.RelativeOrAbsolute` and it is while parsing internal relationships: https://source.dot.net/#System.IO.Packaging/System/IO/Packaging/InternalRelationshipCollection.cs,357. A potential fix to not require the environment variable would be to use `UriKind.Relative` when target mode is internal.    ## Repro    ```csharp  using (var ms = new MemoryStream())  {      using (var package = Package.Open(ms, FileMode.OpenOrCreate, FileAccess.ReadWrite))      {          package.CreateRelationship(new Uri(""/target"", UriKind.Relative), TargetMode.Internal, ""type"");      }        ms.Position = 0;        using (var package = Package.Open(ms, FileMode.OpenOrCreate, FileAccess.ReadWrite))      {          var relationships = package.GetRelationships();            var relationship = Assert.Single(relationships);            Assert.Equal(new Uri(""/"", UriKind.Relative), relationship.SourceUri);          Assert.Equal(new Uri(""/target"", UriKind.Relative), relationship.TargetUri);          Assert.Equal(TargetMode.Internal, relationship.TargetMode);      }  }  ```    ## Expected    Successfully retrieve relationships and have asserts pass    ## Observed    ```  Unhandled Exception when attempting to call `package.GetRelationships()`:    System.ArgumentException: PackageRelationship target must be relative URI if TargetMode is Internal.  Parameter name: targetUri  ```    "
24823	area-System.Threading	Tracking System.Threading.Channels Remaining Cleanup	Tracking item for moving  [System.Threading.Tasks.Channels](https://github.com/dotnet/corefxlab/commit/a7da3bc0a7eba50c345b21296f036989e92f949a) to corefx.    Related #24174
24824	area-Meta	System.IO.Pipelines Epic	Tracking item for productizing [System.IO.Pipelines](https://github.com/dotnet/corefxlab/tree/master/src/System.IO.Pipelines)  Related #24174
24825	area-System.Text	System.Text.Encodings.Web.Utf8 Epic	Tracking item for [System.Text.Encodings.Web.Utf8](https://github.com/dotnet/corefxlab/tree/master/src/System.Text.Encodings.Web.Utf8)  Related #24174
24826	area-System.IO	System.IO.Compression.Brotli Epic	Tracking item for [System.IO.Compression.Brotli](https://github.com/dotnet/corefxlab/tree/master/src/System.IO.Compression.Brotli)  Related #24174
24829	area-System.Diagnostics	System.Diagnostics.TraceSource doesn't read configuration from App.config in .NET Core?	"The following code outputs ""Hello, world!"" as a trace message to the console when in a .NET Framework console application. When the same code is used in a .NET Core console application, it outputs nothing.     Program.cs  ```  using System.Diagnostics;    namespace ConsoleApp5  {      class Program      {          private readonly static TraceSource traceSource = new TraceSource(""ConsoleApp5"", SourceLevels.All);            static void Main(string[] args)          {              traceSource.TraceEvent(TraceEventType.Information, 0, ""Hello, world!"");          }      }  }  ```    App.config    ```  <?xml version=""1.0"" encoding=""utf-8"" ?>  <configuration>    <system.diagnostics>      <trace autoflush=""true"">        <listeners>          <add name=""consoleTraceListener"" />          <add name=""textWriterTraceListener"" />        </listeners>      </trace>      <sharedListeners>        <add name=""consoleTraceListener"" type=""System.Diagnostics.ConsoleTraceListener"" traceOutputOptions=""DateTime,ThreadId"" />        <add name=""textWriterTraceListener"" type=""System.Diagnostics.TextWriterTraceListener"" traceOutputOptions=""DateTime,ThreadId"" initializeData=""Trace.log"" />      </sharedListeners>      <sources>        <source name=""ConsoleApp5"" switchValue=""Verbose"">          <listeners>            <add name=""consoleTraceListener"" />            <add name=""textWriterTraceListener"" />          </listeners>        </source>      </sources>    </system.diagnostics>  </configuration>    ```    Also, I found that if I try to read a connection string using System.Configuration.ConfigurationManager and I have the system.diagnostics section in the App.config, I receive the following error. I'm assuming that .NET Core doesn't have a machine.config where the system.diagnostics section would normally be defined?    ```  Unhandled Exception: System.Configuration.ConfigurationErrorsException: Configuration system failed to initialize ---> System.Configuration.ConfigurationErrorsException: Unrecognized configuration section system.diagnostics. (C:\Users\jemiller\Documents\Visual Studio 2017\Projects\Library2\LibraryConsoleApplication\bin\Debug\netcoreapp2.0\LibraryConsoleApplication.dll.config line 6)     at System.Configuration.ConfigurationSchemaErrors.ThrowIfErrors(Boolean ignoreLocal)     at System.Configuration.BaseConfigurationRecord.ThrowIfParseErrors(ConfigurationSchemaErrors schemaErrors)     at System.Configuration.ClientConfigurationSystem.EnsureInit(String configKey)     --- End of inner exception stack trace ---     at System.Configuration.ClientConfigurationSystem.EnsureInit(String configKey)     at System.Configuration.ClientConfigurationSystem.PrepareClientConfigSystem(String sectionName)     at System.Configuration.ClientConfigurationSystem.System.Configuration.Internal.IInternalConfigSystem.GetSection(String sectionName)     at System.Configuration.ConfigurationManager.GetSection(String sectionName)     at System.Configuration.ConfigurationManager.get_ConnectionStrings()     at LibraryLibrary.LibraryContext..ctor(String name) in C:\Users\jemiller\Documents\Visual Studio 2017\Projects\Library2\LibraryLibrary\LibraryContext.cs:line 43     at LibraryLibrary.LibraryContext..ctor() in C:\Users\jemiller\Documents\Visual Studio 2017\Projects\Library2\LibraryLibrary\LibraryContext.cs:line 39     at LibraryConsoleApplication.Program.Main(String[] args) in C:\Users\jemiller\Documents\Visual Studio 2017\Projects\Library2\LibraryConsoleApplication\Program.cs:line 13  ```    Is there I way I could specify the section similar to the following to get it to work? That is how it is defined in machine.config for .NET Framework.    ```    <configSections>      <section name=""system.diagnostics"" type=""System.Diagnostics.SystemDiagnosticsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089""/>    </configSections>  ```    Is there some other way in .NET Core to specify that configuration settings for system.diagnostics?  "
24833	area-System.Net	Add locking to SecureTransport P/Invokes	"Makes the macOS version of SslStream capable of doing one read and one write ""at the same time"" without taking down the process.    Fixes #24821 (and perhaps others).  Best tested by #24759 (TBD)"
24839	area-System.Memory	Add SpanExtensions.LastIndexOf	SpanExtensions have several IndexOf overloads. We should add similar LastIndexOf overloads:    ```c#  public static int LastIndexOf<T>(this Span<T> span, T value) where T: IEquatable<T>  { throw null; }  public static int LastIndexOf<T>(this Span<T> span, ReadOnlySpan<T> value) where T : IEquatable<T>  { throw null; }    public static int LastIndexOf<T>(this ReadOnlySpan<T> span, T value) where T : IEquatable<T>  { throw null; }  public static int LastIndexOf<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> value) where T : IEquatable<T> { throw null; }    public static int LastIndexOfAny<T>(this Span<T> span, T value0, T value1) where T : IEquatable<T> { throw null; }  public static int LastIndexOfAny<T>(this Span<T> span, T value0, T value1, T value2) where T : IEquatable<T> { throw null; }  public static int LastIndexOfAny<T>(this Span<T> span, ReadOnlySpan<T> values) where T : IEquatable<T> { throw null; }    public static int LastIndexOfAny<T>(this ReadOnlySpan<T> span, T value0, T value1) where T : IEquatable<T> { throw null; }  public static int LastIndexOfAny<T>(this ReadOnlySpan<T> span, T value0, T value1, T value2) where T : IEquatable<T> { throw null; }  public static int LastIndexOfAny<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> values) where T : IEquatable<T> { throw null; }  ```    
24840	area-System.Memory	Add SpanExtensions.EndsWith	SpanExtensions have StartsWith overloads. We should add EndsWith counterparts:    ```c#  public static bool EndsWith<T>(this Span<T> span, ReadOnlySpan<T> value) where T : IEquatable<T>;  public static bool EndsWith<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> value) where T : IEquatable<T>;  ```
24842	area-System.Net	ManagedHandler: Must clear auth header on redirect	"This overlaps with https://github.com/dotnet/corefx/issues/24387.    RE:  https://github.com/dotnet/corefx/blob/6d3804c5d9edec46c85797701834bbb135c8500f/src/System.Net.Http/src/System/Net/Http/Managed/AuthenticationHandler.cs#L48-L54    This code checks for redirects and clears the credentials field. However, it does not clear the Authorization header so the redirected request will contain the original credentials.  The original credentials may have been scoped to a specific host/url, but theres no check on where the redirect will send those credentials to. The Authorization header needs to be cleared.    Considering this request flow:    1. Initial request  Get http://example.com/  -> 401, www-Authenticate: Basic    2. Resubmitted for auth  Get http://example.com/  Authorization: Basic foo <-- Added by AuthenticationHandler  -> 301, Location: http://microsoft.com/    3. Resubmitted for redirect  Get http://microsoft.com/  Authorization: Basic foo <-- Left over from the prior request    The Authorization header needs to be cleared after step 2 so that it doesnt get forwarded to the redirect destination. This code block could be used to clear the header, but it would need to be moved to the bottom of the method to run after the auth resubmits.  https://github.com/dotnet/corefx/blob/6d3804c5d9edec46c85797701834bbb135c8500f/src/System.Net.Http/src/System/Net/Http/Managed/AuthenticationHandler.cs#L48-L54    Compare to the desktop stack:  https://github.com/Microsoft/referencesource/blob/7de0d30c7c5ef56ab60fee41fcdb50005d24979a/System/net/System/Net/HttpWebRequest.cs#L5840  https://github.com/Microsoft/referencesource/blob/7de0d30c7c5ef56ab60fee41fcdb50005d24979a/System/net/System/Net/_AuthenticationState.cs#L318    Repro:  Dotnet version:  2.1.0-preview1-007228    Output for Non-ManagedHandler: Auth header after redirect:   Output for ManagedHandler: Auth header after redirect: Basic Zm9vOmJhcg==  ```  using System;  using System.Net;  using System.Net.Http;  using System.Text;  using System.Threading.Tasks;    namespace ConsoleApp16  {      class Program      {          static void Main(string[] args)          {              var listener = new HttpListener();              listener.Prefixes.Add(""http://localhost:5001/"");              listener.Start();                RunServer(listener);                RunClient().Wait();          }            private static async Task RunClient()          {              var handler = new HttpClientHandler();              handler.Credentials = new NetworkCredential(""foo"", ""bar"");              var client = new HttpClient(handler);              var response = await client.GetStringAsync(""http://localhost:5001/basic"");              Console.WriteLine(response);          }            private static async void RunServer(HttpListener listener)          {              while (true)              {                  var context = await listener.GetContextAsync();                  if (context.Request.Url.AbsolutePath.Equals(""/basic""))                  {                      var authHeader = context.Request.Headers[""Authorization""];                      if (!string.IsNullOrEmpty(authHeader) && authHeader.StartsWith(""Basic ""))                      {                          // Authenticated, redirect.                          context.Response.Redirect(""/other"");                      }                      else                      {                          // Not authenticated                          context.Response.StatusCode = 401;                          context.Response.Headers[HttpResponseHeader.WwwAuthenticate] = ""Basic"";                      }                  }                  else if (context.Request.Url.AbsolutePath.Equals(""/other""))                  {                      var authHeader = context.Request.Headers[""Authorization""];                      var bytes = Encoding.UTF8.GetBytes($""Auth header after redirect: {authHeader}"");                      await context.Response.OutputStream.WriteAsync(bytes, 0, bytes.Length);                  }                  else                  {                      context.Response.StatusCode = 404;                  }                  context.Response.Close();              }          }      }  }  ```  Note this repro will break differently on .NET Framework where HttpListener is more restrictive about what headers you can set."
24844	area-System.Net	Increase tolerance on SendTimesOut_Throws	Fixes https://github.com/dotnet/corefx/issues/24804    (assuming it's just because the machine is slow)
24846	area-System.Net	Add `Memory<byte>` support to WebSockets	This is split into several commits as there are multiple related but distinct changes:  1. First, I moved ManagedWebSocket from being based on `ArraySegment<byte>` internally to being based on `Memory<byte>` internally.  That then allows it to be used with either `ArraySegment<byte>` or `Memory<Byte>`, as the former is convertible to the latter.  2. Then I added the new `CreateFromStream` method to WebSocket; this requires the `Memory<byte>` support in ManagedWebSocket because `CreateFromStream`'s scratch buffer is a `Memory<byte>`.  3. Then I used that new `CreateFromStream` method in both System.Net.WebSockets.Client and System.Net.HttpListener; ManagedWebSocket.cs now is only built into System.Net.WebSockets rather than into all three assemblies.  4. Then I added the new `Memory<byte>`-based Send/ReceiveAsync virtuals to WebSocket.  5. Then I overrode these on ManagedWebSocket, providing decent implementations for them.  6. And finally I overrode the `Memory<byte>`-based `ReceiveAsync` on WinHttpWebSocket.  I didn't bother with `SendAsync` for now as the base implementation should be reasonable for common cases, and if we want to optimize this implementation, there are other things that can and should be done, too.    cc: @geoffkizer, @davidsh, @anurse, @benaadams, @Priya91   Fixes https://github.com/dotnet/corefx/issues/22610  Contributes to https://github.com/dotnet/corefx/issues/21537 (we still need to expose it through an OOB)
24847	area-Infrastructure	.NET Framework 4.7.1 compatibility issue with reflection-only loading	"Now that netstandard.dll is in the GAC, this can cause failures when attempting to use reflection-only loading.    For example, given the following:  ```c#  class Program  {      static void Main(string[] args)      {          var path = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);            Console.WriteLine(""Scanning assemblies"");            foreach (var file in Directory.EnumerateFiles(path, ""*.dll""))          {              Console.WriteLine($""Found {file}"");              var assembly = Assembly.ReflectionOnlyLoadFrom(file);                foreach (var referencedAssembly in assembly.GetReferencedAssemblies())              {                  Console.WriteLine($""    Reference: {referencedAssembly}"");                    try                  {                      var reference = Assembly.ReflectionOnlyLoad(referencedAssembly.FullName);                  }                  catch { }              }          }      }  }  ```  If that project targets net461 and includes a reference to a project that targets netstandard2.0, then the behavior of this program will vary based on whether 4.7.1 is installed or not.    If run on a machine that does not have 4.7.1 installed, then it will complete successfully.     If run on a machine that does have 4.7.1 installed, then it it will fail with the following exception:  ```  System.IO.FileLoadException: API restriction: The assembly 'file:///C:\LoadingRepro\LoadingRepro\bin\Debug\net461\netstandard.dll' has already loaded from a different location. It cannot be loaded from a new location within the same appdomain.  ```    I've included a full repro solution: [LoadingRepro.zip](https://github.com/dotnet/corefx/files/1412644/LoadingRepro.zip)    ATTN: @karelz @AlexGhiondea     [EDIT] Added C# syntax by @karelz"
24848	area-System.IO	Change IO to use CreateFileFromApp2 etc when in UWP	Related to [this issue](https://github.com/dotnet/corefx/issues/18405). Pretty much all the System.IO.File functions won't work when used from UWP due to permission issues. I guess I shouldn't have been surprised, but it would be nice if somehow we could make those 2 APIs work together.
24849	area-System.Net	Implement cancellation policy on sslstream.	cc @stephentoub @Tratcher @geoffkizer @wfurt @karelz 
24850	area-System.Net	[ManagedHandler] Investigate other options for concurrent connection limits and allocations	"The connection limit and connection allocation strategy are some of the most frequently hit problems for the prior .NET managed stack. This is one aspect of the new stack that warrants quite a bit of up-front scrutiny. There have already been design improvements here with the central queue vs the old queue-per-connection strategy, but the limits also need to be redesigned.    Im not aware of any consistent connection management behavior across stacks or good publicized algorithms. Interviewing the WinHttp team would be one starting point.    The RFC has removed the old limit of two connections per host, it now says:  https://tools.ietf.org/html/rfc7230#section-6.4  ""...this specification does not mandate a particular maximum     number of connections but, instead, encourages clients to be     conservative when opening multiple connections.  ...     Note that a server might reject traffic that it deems abusive or     characteristic of a denial-of-service attack, such as an excessive     number of open connections from a single client.""    There is nothing conservative about the current allocation algorithm. MaxConnectionsPerServer defaults to int.MaxValue and there is no throttling on the rate at which new connections will be established. The old ServicePointManager.DefaultConnectionLimit started at 2 but also had no allocation throttle. A burst of requests will cause new connections to be established for every request up to the limit. This is likely more expensive and slower than queueing some of those requests to reuse existing connections as they become available.    Customers regularly run into the DefaultConnectionLimit bottleneck and ask what the correct value should be. There is no good answer to this question, nor even an easy way for the user to work it out for a specific application. This implies that the limit concept and allocation strategy themselves are flawed. The new stack isn't much different in this respect except that the default is MaxValue. This will manifest as a series of less obvious problems like added latency per request when they create extra new connections, added memory and CPU usage creating and maintaining idle connections, more sporadic failures when a request gets assigned to an idle connection that has been dropped, etc..    So what would a new design look like? It would need avoid being an app bottleneck like DefaultConnectionLimit, and also throttle bursts to avoid wasting resources like MaxConnectionsPerServer.    The .NET thread pool has these mechanics and would be an interesting design to test. Threads are analogous to connections except that connections are even more expensive to create and maintain. Work items are analogous to requests though requests can be assigned to connections a lot longer. The thread pool injects new threads at a throttled rate and only slowly approaches its configurable limit. Similarly the connection pool should explore only injecting new connections at a throttled rate to prevent bursts from wasting resources. The thread pool also has a configurable min thread limit to avoid bottlenecks at startup."
24852	area-System.Diagnostics	Support System.Diagnostics.Eventing on Linux/Mac	Port `System.Diagnostics.Eventing` to Linux & Mac -- for Windows Event Log parsing purposes. I created a [SO post here](https://stackoverflow.com/questions/46915998/eventing-namespace-does-not-exist-in-system-diagnostics-in-net-core-and-mon) documenting the issue I currently have with `dotnet` and `mono`.
24853	area-System.Net	ALPN No matching protocol tests fail	On Windows they seem to hang and timeout  On Linux they don't throw an exception but return an empty protocol
24854	area-System.Memory	Provide IEnumerable<T> support for Memory<T>	## Rationale  Users should be able to pass `Memory<T>` to methods that take in `IEnumerable<T>` similar to array. Currently, this requires calling ToArray() to copy the contents of the `Memory<T>` into an array for it to work, and is unnecessary.    For example (from @eerhardt):  https://github.com/dotnet/corefxlab/blob/master/src/System.Numerics.Tensors/System/Numerics/DenseTensor.cs#L10  ```C#  public void SomeMethod(DenseTensor<float> tensor)  {     Memory<float> memory = tensor.Buffer;     var value = CreateBatch<T>(..., memory.ToArray(), ...);  }  ```    https://github.com/Microsoft/CNTK/blob/master/bindings/csharp/CNTKLibraryManagedDll/ShimApiClasses/ValueShim.cs#L104    ```C#  public static Value CreateBatch<T>(NDShape sampleShape, IEnumerable<T> batch, DeviceDescriptor device, bool readOnly = false)  {      T[] batchAsArray = batch.ToArray();      return CreateBatch<T>(sampleShape, batchAsArray, 0, batchAsArray.Count(), device, readOnly);  }  ```    If `Memory<T>` implemented `IEnumerable<T>`, then the ToArray() call would not be required. However, this would cause applications that reference System.Memory and `Memory<T>` for any scenario to be larger (when compiled AOT). Furthermore, if `Memory<T>` was an `IEnumerable<T>`, it might result in a pit of failure as it could lead to users unintentionally using the enumerator to iterate over the data rather than the more performant indexer on Memory.Span (especially for primitive types like `Memory<byte>`). To discourage unnecessary use of the enumerator but still provide support for the scenarios where you need an IEnumerable, the proposed solution is to add an adapter class and a ToEnumerable extension method on `Memory<T>`.    As an FYI, `Span<T>` cannot implement `IEnumerable<T>` since it is a stack-only, byref type, and casting it to an interface would cause boxing. The compiler will throw and error: `'Span<T>': ref structs cannot implement interfaces`    ## Proposed API  ```C#  namespace System  {     public static class MemoryExtensions {       public static IEnumerable<T> ToEnumerable(this Memory<T> memory);     }  }  ```    ## Usage  Taking the above example, it would look as follows:  ```C#  public void SomeMethod(DenseTensor<float> tensor)  {     Memory<float> memory = tensor.Buffer;     var value = CreateBatch<T>(..., memory.ToEnumerable(), ...);  }  ```    ## Partial Implementation  ```C#  public static IEnumerable<T> ToEnumerable(this Memory<T> memory) => new MemoryEnumerable<T>(memory);    internal class MemoryEnumerable<T> : IEnumerable<T>  {      ReadOnlyMemory<T> _memory;        public MemoryEnumerable(ReadOnlyMemory<T> memory) => _memory = memory;        public IEnumerator<T> GetEnumerator() => new MemoryEnumerator<T>(_memory);        IEnumerator IEnumerable.GetEnumerator() => new MemoryEnumerator<T>(_memory);  }    internal class MemoryEnumerator<T> : IEnumerator<T>  {      ReadOnlyMemory<T> _memory;      int _index;        public MemoryEnumerator(ReadOnlyMemory<T> memory) => _memory = memory;        public T Current => _memory.Span[_index];        object IEnumerator.Current => _memory.Span[_index];        public void Dispose()      {          throw new NotImplementedException();      }        public bool MoveNext()      {          _index++;          return _index <_memory.Length;      }        public void Reset()      {          _index = 0;      }  }    ```    cc @eerhardt, @KrzysztofCwalina, @stephentoub, @jkotas, @terrajobst, @karelz, @ericstj 
24855	area-System.ComponentModel	CultureInfoConverter added	CultureInfoConverter is added to list of IntrinsicTypeConvertersList to make deserialization of newtonsoft possible in .net core    Fixes #24755
24856	area-Infrastructure	Need to add Ubuntu 17.10 to the RID graph	
24857	area-System.Net	Implement cancellation token for SslStream new AuthenticateAs*Async methods	also fixes #24853     cc @stephentoub @Tratcher @Drawaes 
24861	area-System.Net	Registered i/o	We need interop delarations for RIO in the corefx repo  
24862	area-System.Net	WinHttpHandler is not using Host header in SSL handshake	The .NET Framework does.
24863	area-System.Memory	DO NOT MERGE, DO NOT REVIEW	I only care what CI has to say at this time.
24865	area-Meta	Memory problem	My procedure is very simple, through the socket to accept the connection and then through the sslstream forward data to the back-end server, a simple socket proxy, but soon after the start of the system memory is exhausted, I guess there may be a memory leak, how should I find the problem The
24866	area-System.Net	ALPN Failing Success on Debian	All three tests SslStream_StreamToStream_Alpn_Success fail on Debian 90
24868	area-System.Net	[release/2.0.0] Add locking to SecureTransport P/Invokes	"Makes the macOS version of SslStream capable of doing one read and one write  ""at the same time"" without taking down the process.    release/2.0.0 port of #24833  Fixes #24821  Fixes #24142"
24869	area-System.Net	IndexOutOfRangeException from Socket.MultipleAddressConnectAsyncResult.get_RemoteEndPoint	https://mc.dot.net/#/user/Drawaes/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/3cac46b196961558ff0ddf1858e8a3429a7d643e/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.DnsEndPointTest~2FSocket_BeginConnectDnsEndPoint_Failure  ```  Unhandled Exception of Type Xunit.Sdk.ThrowsException  Message :  Assert.Throws() Failure  Expected: typeof(System.Net.Sockets.SocketException)  Actual:   typeof(System.IndexOutOfRangeException): Index was outside the bounds of the array.  Stack Trace :     at System.Net.Sockets.Socket.MultipleAddressConnectAsyncResult.get_RemoteEndPoint() in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_true_prtest/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs:line 5127     at System.Net.Sockets.Socket.EndConnect(IAsyncResult asyncResult) in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_true_prtest/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs:line 2458     at System.Net.Sockets.Tests.DnsEndPointTest.<>c__DisplayClass8_0.<Socket_BeginConnectDnsEndPoint_Failure>b__1() in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_true_prtest/src/System.Net.Sockets/tests/FunctionalTests/DnsEndPointTest.cs:line 164  ```
24871	area-System.Data	SqlBulkCopy can fail with a null ref exception for some IDataReader implementations	SqlBulkCopy.WriteToServer accepts an IDataReader parameter. If the following two condition are met, the call will fail with a NullReferenceException:  1.  The passed implementation of IDataReader does not inherit from DbDataReader  2. A column mapping is specified    In the implementation of SqlBulkCopy.WriteToServer, the code attempts to cast the passed parameter to an DbDataReader, which is result in _DbDataReaderRowSource always being null.     Attached is a zipped up .cs file with a repro: [Program.zip](https://github.com/dotnet/corefx/files/1415532/Program.zip)
24873	area-System.Net	Add ManagedHandler support for canceling connect operations	Logically two parts:  - Passes the cancellation token down into the connect helper and uses it to cancel the connect.  The connect is changed from using the instance Socket.ConnectAsync to using the static Socket.ConnectAsync with SocketAsyncEventArgs as it supports Socket.CancelConnectAsync.  - Passes the cancellation token down into the pool and uses it to remove waiters from the queue.    Fixes https://github.com/dotnet/corefx/issues/23151  cc: @geoffkizer, @Priya91, @koenigst 
24874	area-System.Diagnostics	EventLogEntryCollectionTests.CheckingEntryEqualityAndIndex failed with ArgumentException	https://mc.dot.net/#/user/stephentoub/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/94474b7e9325802a019eace4ffce5cb6add96b0b/workItem/System.Diagnostics.EventLog.Tests/analysis/xunit/System.Diagnostics.Tests.EventLogEntryCollectionTests~2FCheckingEntryEqualityAndIndex  ```  Unhandled Exception of Type System.ArgumentException  Message :  System.ArgumentException : Index -1 is out of bounds.  Stack Trace :     at System.Diagnostics.EventLogInternal.GetEntryAt(Int32 index)     at System.Diagnostics.EventLogEntryCollection.get_Item(Int32 index)     at System.Diagnostics.Tests.EventLogEntryCollectionTests.CheckingEntryEqualityAndIndex()  ```
24875	area-System.Net	ServicePointManager_SecurityProtocolDefault_Ok failed Assert.Equal	https://mc.dot.net/#/user/stephentoub/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/98d53f272c58b4df9ce997d816d853ddff43e7d8/workItem/System.Net.ServicePoint.Tests/analysis/xunit/System.Net.Tests.TlsSystemDefault~2FServicePointManager_SecurityProtocolDefault_Ok  ```  Unhandled Exception of Type Xunit.Sdk.EqualException  Message :  Assert.Equal() Failure  Expected: SystemDefault  Actual:   Tls11  Stack Trace :     at System.Net.Tests.TlsSystemDefault.ServicePointManager_SecurityProtocolDefault_Ok() in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_true_prtest/src/System.Net.ServicePoint/tests/TlsSystemDefault.cs:line 14  ```    The test is reading a static property.  Most likely there's another test in the project that's modifying that property and either it's not resetting it or they happened to run concurrently.
24876	area-Infrastructure	Enable official builds for Alpine Linux	This change enables official builds for Alpine 3.6. It doesn't enable  tests since we don't have a way to create Alpine queue.
24877	area-Infrastructure	[Question] Has anybody run xunit tests on linux-arm?	I am trying to build a test project on windows and run the tests on linux-arm. I have a shared framework installed on the linux-arm hardware, but I do not have a full SDK installed on linux-arm because there is not one available. Because there is no cli, I cannot simply run 'dotnet test' on the project.     I had hoped that I would be able to create a [Self Contained Deployment](https://docs.microsoft.com/en-us/dotnet/core/deploying/) from the test project and it would include the test runner in the published output, but this is not the case.     I hacked together a deployment of vstest.console.dll and it's dependencies that runs on the shared framework on my linux-arm hardware. When I invoked 'dotnet vstest.console.dll mytest.dll' however, no tests are run. Example output:  ```  pi@chuckr-pi:~/vstest $ dotnet --fx-version 2.0.4-servicing-25824-03 vstest.console.dll ../test/scratch.dll  Microsoft (R) Test Execution Command Line Tool Version 15.6.0-dev  Copyright (c) Microsoft Corporation.  All rights reserved.    Starting test execution, please wait...  pi@chuckr-pi:~/vstest $  ```    In this example ../test/scratch.dll contains one xunit test that should fail. This is the contents of the test dir:  ```  pi@chuckr-pi:~/test $ ls  scratch.deps.json  scratch.pdb                     scratch.runtimeconfig.json                xunit.runner.utility.netstandard15.dll  scratch.dll        scratch.runtimeconfig.dev.json  xunit.runner.reporters.netstandard15.dll  xunit.runner.visualstudio.dotnetcore.testadapter.dll  ```    Has anybody on the corefx team tried to do something similar?
24880	area-System.Memory	Complete MemoryExtensions Feature	- [x] Parity with Array APIs #25850  - [x] Move MemoryExtensions down to CoreLib #25182  - [x] MemoryExtensions.SequenceCompare #16878  - [x] ReadOnlySpan<char> string-like extension methods #21395    P2  - [x] String slice operations #24072    cc: @ahsonkhan, @joshfree 
24883	area-System.Net	Fix matching algo	This removes the need for a pinned buffer, or a buffer at all on linux. It should give a consistent match across distros. This needs to be attached to the SslHandle because the SslCtxHandle is freed early (I am not sure that is correct openssl use but it's how it's been for a while so we will ignore that for now).   
24884	area-Infrastructure	Fix offical Alpine build - sync arguments	It turns out that the sync.sh command needs to be passed the -BuildTests=false  option too so that it doesn't try to sync core-setup packages that  are used only for running tests. Since there are no core-setup packages  for Alpine yet, the sync was failing.  I have also noticed that there was a recent change in the sync arguments  that I have not discovered after rebase of my changes to master. So I  have added the new option there.
24885	area-System.Drawing	Add XunitShowProgress as a temp workaround to find crashing tests in S.Drawing	cc: @stephentoub @danmosemsft 
24886	area-System.Net	"WinHttp exception ""The handle is in the wrong state for the requested operation"" in GetAsync_AllowedSSLVersion_Succeeds test on Win7"	https://mc.dot.net/#/user/stephentoub/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/5ecea8ff47c03a073a77916a9c7d1d806f8c7ce3/workItem/System.Net.Http.Functional.Tests/wilogs  ```  2017-10-26 00:34:29,598: INFO: proc(54): run_and_log_output: Output:    System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test.GetAsync_AllowedSSLVersion_Succeeds(acceptedProtocol: Tls, requestOnlyThisProtocol: True) [FAIL]  2017-10-26 00:34:29,598: INFO: proc(54): run_and_log_output: Output:       System.Net.Http.HttpRequestException : An error occurred while sending the request.  2017-10-26 00:34:29,614: INFO: proc(54): run_and_log_output: Output:       ---- System.Net.Http.WinHttpException : The handle is in the wrong state for the requested operation  2017-10-26 00:34:29,614: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:             at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext()  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:          --- End of stack trace from previous location where exception was thrown ---  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:             at System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test.<>c__DisplayClass4_1.<<GetAsync_AllowedSSLVersion_Succeeds>b__0>d.MoveNext()  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:          --- End of stack trace from previous location where exception was thrown ---  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:             at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass3_0.<CreateServerAsync>b__0(Task t)  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:             at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:             at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:          --- End of stack trace from previous location where exception was thrown ---  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:             at System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test.<GetAsync_AllowedSSLVersion_Succeeds>d__4.MoveNext()  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:          --- End of stack trace from previous location where exception was thrown ---  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:          --- End of stack trace from previous location where exception was thrown ---  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:          --- End of stack trace from previous location where exception was thrown ---  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:          ----- Inner Stack Trace -----  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:             at System.Environment.get_StackTrace()  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:             at System.Runtime.ExceptionServices.ExceptionStackTrace.AddCurrentStack(Exception exception)  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:             at System.Net.Http.WinHttpException.CreateExceptionUsingError(Int32 error)  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:             at System.Net.Http.WinHttpRequestCallback.OnRequestError(WinHttpRequestState state, WINHTTP_ASYNC_RESULT asyncResult)  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:             at System.Net.Http.WinHttpRequestCallback.RequestCallback(IntPtr handle, WinHttpRequestState state, UInt32 internetStatus, IntPtr statusInformation, UInt32 statusInformationLength)  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:             at System.Net.Http.WinHttpRequestCallback.WinHttpCallback(IntPtr handle, IntPtr context, UInt32 internetStatus, IntPtr statusInformation, UInt32 statusInformationLength)  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:             at Interop.WinHttp.WinHttpReceiveResponse(SafeWinHttpHandle requestHandle, IntPtr reserved)  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:             at Interop.WinHttp.WinHttpReceiveResponse(SafeWinHttpHandle requestHandle, IntPtr reserved)  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:             at System.Net.Http.WinHttpHandler.InternalReceiveResponseHeadersAsync(WinHttpRequestState state)  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:             at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext()  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:             at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:             at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext()  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:             at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:             at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:             at System.Threading.ThreadPoolWorkQueue.Dispatch()  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:          --- End of stack trace from AddCurrentStack ---  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:             at System.Threading.Tasks.RendezvousAwaitable`1.GetResult()  2017-10-26 00:34:29,677: INFO: proc(54): run_and_log_output: Output:             at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext()  ```
24890	area-System.Net	Make ServicePointManager tests run out of proc	Fixes https://github.com/dotnet/corefx/issues/24875    Also allows RemoteExec() to accept delegates that do not return a value. If an exception (such as an assert failure) occurs within the delegate, the RemoteExec() infrastructure will cause the test to fail. There is no need to return an error code if it would be redundant.    Depends on https://github.com/dotnet/buildtools/pull/1759    
24891	area-System.Security	Segfault in libcrypto.so.1.0.0	I'm getting this somewhere in my app (I suspect it's from a `HttpClient` call to a site that uses HTTPS):  ```  #0  0x00007fc4a0e32d5d in ?? () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.0  #1  0x00007fc4a0e2dc7b in X509_verify_cert () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.0  #2  0x00007fc4a45770d6 in ?? ()  #3  0x00007fc3792d0d90 in ?? ()  #4  0x00007fc50c10a4b0 in ?? ()  #5  0x0000000021dfe8a3 in ?? ()  #6  0x00007fc51b3a7488 in vtable for InlinedCallFrame () from /var/www/dan.cx/staging/site/libcoreclr.so  #7  0x00007fc3792d1688 in ?? ()  #8  0x00007fc4a495c918 in ?? ()  #9  0x00007fc4a495c918 in ?? ()  #10 0x00007fc3792d0d90 in ?? ()  #11 0x00007fc4a45770d6 in ?? ()  #12 0x00007fc3792d0e20 in ?? ()  #13 0x00007fc4a495c918 in ?? ()  #14 0x00007fc38474f960 in ?? ()  #15 0x0000000000000001 in ?? ()  #16 0x00007fc384741da8 in ?? ()  #17 0x00007fc38474f9d0 in ?? ()  #18 0x00007fc38474f960 in ?? ()  #19 0x00007fc38474f960 in ?? ()  #20 0x00007fc50c100ff0 in ?? ()  #21 0x00007fc3792d0e90 in ?? ()  #22 0x00007fc4a2d6ce57 in ?? ()  #23 0x00007fc3792d0e30 in ?? ()  #24 0x00007fc38474f960 in ?? ()  #25 0x00007fc384741da8 in ?? ()  #26 0x0000000000000000 in ?? ()  ```    ASP.NET Core 2.0 on .NET Core 2.0, running on Debian Linux  ```  $ dotnet --info  .NET Command Line Tools (2.0.0)    Product Information:   Version:            2.0.0   Commit SHA-1 hash:  cdcd1928c9    Runtime Environment:   OS Name:     debian   OS Version:   OS Platform: Linux   RID:         debian-x64   Base Path:   /usr/share/dotnet/sdk/2.0.0/    Microsoft .NET Core Shared Framework Host      Version  : 2.0.0    Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d    $ dpkg -S /usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.0  libssl1.0.0:amd64: /usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.0    $ dpkg -s  libssl1.0.0 | grep Version  Version: 1.0.1t-1+deb8u5    $ ls /usr/lib/x86_64-linux-gnu/libssl* -lah  -rw-r--r-- 1 root root 305K Sep 28 14:49 libssl3.so  -rw-r--r-- 1 root root 721K Aug  8 07:13 libssl.a  lrwxrwxrwx 1 root root   13 Aug  8 07:13 libssl.so -> libssl.so.1.1  -rw-r--r-- 1 root root 386K Sep 23  2016 libssl.so.1.0.0  -rw-r--r-- 1 root root 422K Jun  4 10:15 libssl.so.1.0.2  -rw-r--r-- 1 root root 429K Aug  8 07:13 libssl.so.1.1    ```
24892	area-System.ComponentModel	Result string of Win32Exception.ToString() method missing Win32Exception.NativeErrorCode	"When we working with Win API via P/Invoke, it is common practice to check the result of called function and throw new [Win32Exception()](https://github.com/dotnet/corefx/blob/9eafffc6054c8f039d788465621bcfd49a379ca1/src/Microsoft.Win32.Primitives/src/System/ComponentModel/Win32Exception.cs#L21). We can pass error code explicitly, or the default constructor will catch the last one using [Marshal.GetLastWin32Error()](https://github.com/dotnet/coreclr/blob/da8b7181dbe362fbfe64c7ef72ff3a4a7db68f24/src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs#L839). When we log the exception, the result string does not contain root *Win32Exception.NativeErrorCode*:    ```csharp  var winError = new System.ComponentModel.Win32Exception(0x35);  /*  winError.ToString() provides:  ""System.ComponentModel.Win32Exception (0x80004005): The network path was not found""  */  ```    The *0x80004005* referes to the common HResult.E_FAIL, which is _Unspecified error_ in winerror.h; That's wrong (IMHO)! We have provided exact error code, it is well specified.    Expected result:    ```csharp  /*  winError.ToString() provides:  ""System.ComponentModel.Win32Exception (0x80070035): The network path was not found""  OR  ""System.ComponentModel.Win32Exception (0x00000035): The network path was not found""  */  ```    The last one logs the number we passed, the first one is the result of [Marshal.GetHRForLastWin32Error()](https://github.com/dotnet/coreclr/blob/da8b7181dbe362fbfe64c7ef72ff3a4a7db68f24/src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs#L852)"
24895	area-System.Net	System.Net.Mime.MediaTypeNames missing types	"https://github.com/dotnet/corefx/blob/3f0bd5d8c3d019ad8b1561395030a58bc38ddfe9/src/System.Net.Mail/ref/System.Net.Mime.cs#L44    I tried using `System.Net.Mime.MediaTypeNames` in my asp net core api to remove ""magic strings""    ```c#  [Consumes(System.Net.Mime.MediaTypeNames.Application...)]  public IActionResult Post(...)  { ... }  ```    But it's missing quite a few MIME types.    These come to mind:    > text/css  > text/javascript  >   > application/json  > application/json-patch+json  > application/xml  > application/javascript  > application/x-www-form-urlencoded  >   > multipart/form-data  > multipart/byteranges  >   > image/png  > image/bmp  > image/webp  > image/svg+xml  >   > audio/midi  > audio/mpeg  > audio/webm  > audio/ogg  > audio/wav  >   > video/webm  > video/ogg"
24896	area-Infrastructure	Add retry logic for setup of dotnet cli	Fixes intermittent build issues where curl returns: curl: (56) GnuTLS recv error (-54): Error in the pull function.   Retry added to re-download if the tar command fails to extract.
24897	area-System.Runtime	Port System.Memory performance improvements to Convert.TryFromBase64Chars	From https://github.com/dotnet/corefx/pull/24888#issuecomment-339646430    cc @jkotas, @stephentoub, @KrzysztofCwalina 
24898	area-Infrastructure	Disable alpine official tests build	
24900	area-System.Runtime	Nullable<T> must be a readonly struct	`Nullable<T>` is known to be an immutable struct with sideeffect-free methods.  C# compiler certainly relies on the implied purity for the soundness of null-propagating math as well as in various optimizations.    Basically - while for other structs `readonly` is a good thing to have, if possible. I think the spec for `Nullable<T>` should _demand_  that `Nullable<T>` is formally `readonly`.    In particular we consider methods like `HasValue` not mutating and therefore callable directly on references to readonly fields (which is currently unverifiable). When verification rules are updated to understand readonly references, we would need to special case `Nullable<T>` methods. - Unless the type is `readonly` by the spec, then the behavior would be subsumed by the general treatment or `readonly` structs.      
24901	area-System.IO	Check that long relative paths work on Windows	We should check that long relative paths work on Windows.  It appears (from looking at the source) that they do not.    Problem is in [PathInternal.Windows.cs][1]: `EnsureExtendedPrefixOverMaxPath` simply returns if the path is relative, rather than calling `GetFullPathNameW` and then adding the extended prefix.  As a result, the underlying Windows API function will fail.    This is a rather simple fix, though I dont have a Windows machine to test it with.     [1]: https://github.com/dotnet/corefx/blob/f2e440450e8b52317f08c21fe66f70141c9e933c/src/Common/src/System/IO/PathInternal.Windows.cs#L117
24902	area-System.Runtime	Remove Artificial Object Graph Limit in BinaryFormatter	Since issue #16991 is solved we now can deserialize bigger object graphs with up to 12 million objects.   As I have found since a long time ago: https://aloiskraus.wordpress.com/2017/04/23/the-definitive-serialization-performance-guide/  there are issues with the max object count BinaryFormatter can cope with because it contains a hard coded prime number table which ends at 6584983 objects.     Please remove this artifical limit and do the same thing like e.g. in Dictionary which also needs prime numbers.       
24903	area-Infrastructure	Need a way to ignore build configurations when library is inbox	For libraries like DirectoryServices which are inbox on a framework (https://github.com/dotnet/corefx/blob/master/src/System.DirectoryServices/pkg/System.DirectoryServices.pkgproj#L10) and only have a netstandard configuration without a netfx configuration because it shares the same identity as desktop, we need a way to tell our build system to ignore the netstandard configuration when building the netfx vertical. Without that we will end up selecting the netstandard asset and building and testing that when doing our netfx vertical testing.     We can probably add a new property called something like IgnoreBuildConfigurations or InboxOnFramework and teach our configuration system (likely somewhere in https://github.com/dotnet/corefx/blob/master/buildvertical.targets#L70) to filter out and skip such configurations. 
24904	area-System.Net	Remove dead code from System.Net.Sockets	PR addresses issue #17905, project **System.Net.Sockets**.
24907	area-System.IO	Path.GetFullPath difference between Windows and Linux	@YvonneArnoldus commented on [Thu Oct 26 2017](https://github.com/dotnet/coreclr/issues/14707)  I have written some code that uses Path.GetFullPath().  I have found some different results for the same paths between Windows and Linux in my Docker image.    Windows:   input:  a\b\\..\\..\c.\ -> output: C:\code\fontoxml-sdk-schemacompiler\test\FontoXml.Server.Utils.XmlCatalog.Tests\bin\Debug\netcoreapp2.0\c\    Linux:  a/b/../../c./ -> output: /app/test/FontoXml.Server.Utils.XmlCatalog.Tests/bin/Release/netcoreapp2.0/c./    It seems the current directory indicator isn't resolved on Linux as it is on Windows while the parent directory indicator is.  
24909	area-Meta	Ship .NET Framework compatibility pack	A meta package to include all the libraries released from CoreFX in 2.0 that aren't already included in the [Microsoft.NETCore.App package](https://dotnet.myget.org/feed/dotnet-core/package/nuget/Microsoft.NETCore.App) (aka the shared framework) plus a series of new ports and necessary facades. Some are Windows only currently. Aim to release at least a complete preview in November.    ## Spec    https://github.com/dotnet/designs/pull/16    ## Previously shipped packages:  Package ID | Link | Windows   Only  -- | -- | --  Microsoft.Win32.Registry | NuGet | Yes  Microsoft.Win32.Registry.AccessControl | NuGet | Yes  System.CodeDom | NuGet |    System.Configuration.ConfigurationManager | NuGet |    System.Data.SqlClient | NuGet |    System.Drawing.Common | NuGet | No  System.IO.FileSystem.AccessControl | NuGet | Yes  System.IO.Packaging | NuGet |    System.IO.Pipes.AccessControl | NuGet | Yes  System.IO.Ports | NuGet |    System.Reflection.Context | NuGet |    System.Security.AccessControl | NuGet | Yes  System.Security.Cryptography.Cng | NuGet | Yes  System.Security.Cryptography.Pkcs | NuGet | Yes  System.Security.Cryptography.ProtectedData | NuGet | Yes  System.Security.Cryptography.Xml | NuGet | Yes  System.Security.Permissions | NuGet |    System.Security.Principal.Windows | NuGet | Yes  System.ServiceModel.Duplex | NuGet |    System.ServiceModel.Http | NuGet |    System.ServiceModel.NetTcp | NuGet |    System.ServiceModel.Primitives | NuGet |    System.ServiceModel.Security | NuGet |    System.ServiceProcess.ServiceController | NuGet |    System.Text.Encoding.CodePages | NuGet | No  System.Threading.AccessControl | NuGet | Yes    ## New Packages:    ID |   | Remaining work | UWP? | Unix?  -- | -- | -- | -- | --    | Updated Shims   package | Authoring |   |    14529 | System.Runtime.Caching | Test, Pkg | not yet | not yet  14762 | System.Management   (WMI) | Tests, Pkg | no | not yet  3906 | System.Diagnostics.PerformanceCounter | PR | no | no  2089 | System.DirectoryServices | Pkg | no | no  2089 | System.DirectoryServices.Protocols | Pkg | no | not yet  2089 | System.DirectoryServices.AccountManagement | Pkg | no | no    | System.ServiceModel.Syndication | Tests, Pkg | ? | yes  6913 | System.Diagnostics.EventLog | DONE | no | no  11545 | System.Drawing | DONE | no | yes  11857 | System.ComponentModel.Composition   (MEF1) | Test, Pkg | ? | yes  13035 | System.Data.Odbc | DONE | no | yes  19771 | System.Data.DatasetExtensions | DONE | yes | yes  6024 | System.ServiceProcess.ServiceController   & ServiceBase | DONE | no | no  5766 | System.Xaml | No plans | -- | --  8723 | System.ServiceModel   (WCF) Message Security | No plans | -- | --  6920 | System.Addin | No plans | -- | --  2394 | System.Activities   (WF) | No plans | -- | --    
24910	area-System.Memory	Using latest System.Memory with old S.N.V causes NU1605 package downgrade error	"Since @weshaggard fixed https://github.com/dotnet/corefx/issues/24606 with https://github.com/dotnet/corefx/pull/24645, we have an issue where if we have an app targeting netcoreapp2.0 that references both System.Memory and an older version of System.Numerics.Vectors, we get a package downgrade error.  `D:\Debugger\Template.csproj : error NU1605: Detected package downgrade: System.Numerics.Vectors from 4.5.0-preview1-25825-08 to 4.3.0. Reference the package directly from the project to select a different version.  D:\Debugger\Template.csproj : error NU1605:  Template -> System.Memory 4.5.0-preview1-25825-08 -> System.Numerics.Vectors (>= 4.5.0-preview1-25825-08)  D:\Debugger\Template.csproj : error NU1605:  Template -> System.Numerics.Vectors (>= 4.3.0)`    This issue is reproducible for netcoreapp2.0 (but not for netcoreapp2.1).    ```csproj  <Project Sdk=""Microsoft.NET.Sdk"">      <PropertyGroup>      <OutputType>Exe</OutputType>      <TargetFramework>netcoreapp2.0</TargetFramework>     </PropertyGroup>      <ItemGroup>      <PackageReference Include=""System.Memory"" Version=""4.5.0-preview1-25825-08"" />      <PackageReference Include=""System.Runtime.CompilerServices.Unsafe"" Version=""4.5.0-preview1-25825-08"" />      <PackageReference Include=""System.Numerics.Vectors"" Version=""4.3.0"" />    </ItemGroup>    </Project>  ```    - One workaround would be to update the application to target netcoreapp2.1. Why exactly does that resolve the package dependency issue?    - Another workaround would be to explicitly reference the latest version of System.Numerics.Vectors (that System.Memory was built against). This shouldn't be required.    **One solution for this issue would be to do the following (from https://github.com/dotnet/corefxlab/pull/1861#issuecomment-337747682):**  >  One thing to consider with System.Memory: shouldn't the netcoreapp2.0 implementation use the *inbox* version of System.Numerics.Vectors?  If it did so we wouldn't emit a package dependency.    How would we be able to do this? Any ideas how to resolve this issue?    > You need to investigate how System.Memory is building for netcoreapp2.0 and where it is getting the System.Numerics.Vectors that it is building against.    cc @KrzysztofCwalina, @ericstj, @weshaggard "
24913	area-System.Xml	XPathNavigable.PrependChild/AppendChild not working for netcoreapp2.0	## Description  XPathNavigable.AppendChild and XPathNavigable.PrependChild are not behaving as expected for netcoreapp2.0 when the logic is present in ClassLibrary targetting netstandard1.4  [ConsoleApp7.zip](https://github.com/dotnet/corefx/files/1421267/ConsoleApp7.zip)      ## Repro Steps   1. Unzip the attached project and open ConsoleApp7.sln  2. Run ConsoleApp7 project. ConsoleApp7 project refers ClassLibrary1 which as the logic to create xml file.  3. You will get this output  ```xml  <RunSettings>    <DataCollectionRunSettings>      <DataCollectors />    </DataCollectionRunSettings>  </RunSettings>  ```    4. Run ConsoleApp1 project. ConsoleApp1 project has the same code that is present in ClassLibrary1.   5. You will get this output  ```xml  <RunSettings>    <MSTest>      <SettingsFile>C:\temp\r.testsettings</SettingsFile>      <ForcedLegacyMode>true</ForcedLegacyMode>    </MSTest>    <DataCollectionRunSettings>      <DataCollectors />    </DataCollectionRunSettings>  </RunSettings>  ```    ## Observation  If you notice, there is a difference in the output of ConsoleApp7 and ConsoleApp1, even though same code is used.  `navigator.PrependChild(settingsNode);`, PrependChild is not behaving as expected and is not appending setttingsNode.    cc:@codito  
24914	area-Serialization	XmlSerializer generates list of empty values for attribute including whitespace character.	"## Description  While using `System.Xml.Serialization.XmlSerializer` with `XmlSerializer.Deserialize()` method, the output for an attribute which is supposed to be mapped to a List<string> outputs empty values if there is only a whitespace character in the attribute,    Is this the intended behaviour?    ## Reproduction Steps  1) Create a .NET Core 2.0.2 console application.  2) Copy the following code to `Program.cs` file.  ```c#  using System;  using System.Collections.Generic;  using System.IO;  using System.Xml;  using System.Xml.Serialization;    namespace XmlTest  {      internal class Program      {          private static void Main()          {              string xml = ""<Test list=\"" \"" />"";                List<string> outputList = new List<string>();                using (XmlReader reader = XmlReader.Create(new StringReader(xml)))              {                  XmlSerializer serializer = new XmlSerializer(typeof(Test));                    outputList = ((Test)serializer.Deserialize(reader)).List;              }                Console.WriteLine($""Input XML: {xml}"");                Console.WriteLine($""Generated list's length: {outputList.Count}"");                Console.WriteLine(""Listing the list contents:"");                foreach (string output in outputList)              {                  Console.WriteLine($""Content:'{output}', content length:{output.Length}"");              }                Console.WriteLine(""End of process. Press enter to exit..."");                Console.ReadLine();          }      }        public class Test      {          [XmlAttribute(""list"")]          public List<string> List { get; set; }      }  }  ```  3) Run the code and read the console outputs.    ## Observation    The output seems like the result of code similar to the following:  ```c#  string test = "" "";    string[] parts = test.Split(' ');    List<string> output = new List<string>(parts);  ```  I couldn't find the spot where the serialization is happening in the code though, however if it's really something like this _and it is not the intended behaviour_, changing the `test.Split(' ')` piece to `test.Split(' ', StringSplitOptions.RemoveEmptyEntries)` should be fixing the issue."
24915	area-System.Runtime	Update System.ObsoleteAttribute targets to include assembly	## Rationale    Currently, `ObsoleteAttribute` can be used with types and members only which is very inconvenient when you need to obsolete the whole assembly. We already have quite a few cases in Xamarin but .NET is having the same problem with assemblies like System.Data.OracleClient which has been fully deprecated.    ## Proposed API    Add `AttributeTargets.Assembly` to existing list of AttributeUsage values    ```csharp      [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Delegate, Inherited = false)]      public sealed class ObsoleteAttribute : Attribute  ```    ## Details  This change will also require C# compiler change to update the logic used to track ObsoleteAttribute.    ## Related Issues    ## Updates    * Used the template as requested by @joperezr 
24916	area-System.Runtime	Investigate shim assembly load errors for exception serialization support in uap/uapaot configuration	Related: https://github.com/dotnet/corefx/issues/24424    ```  (uapaot) Unable to find assembly 'System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a':  - System.Configuration.ConfigurationErrorException  - System.Configuration.ConfigurationErrorsException  - System.Configuration.Provider.ProviderException    (uapaot) Unable to find assembly 'System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089':  - System.Runtime.Serialization.InvalidDataContractException    (uapaot) Unable to find assembly 'System.Transactions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089':  - System.Transactions.TransactionAbortedException  - System.Transactions.TransactionException  - System.Transactions.TransactionInDoubtException  - System.Transactions.TransactionManagerCommunicationException  - System.Transactions.TransactionPromotionException    (uap & uapaot) Unable to find assembly 'System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35':  - System.ComponentModel.DataAnnotations.ValidationException    (uapaot) Unable to find assembly 'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089':  - System.Xml.XPath.XPathException  - System.Xml.XmlException  - System.Xml.Schema.XmlSchemaException  - System.Xml.Schema.XmlSchemaInferenceException  - System.Xml.Schema.XmlSchemaValidationException  - System.Xml.Xsl.XsltCompileException  - System.Xml.Xsl.XsltException  ```
24918	area-System.Net	How to debug the source code of ServiceModel.Http (4.4.0) using Visual Studio 2017	"@SCKlausZ commented on [Thu Oct 26 2017](https://github.com/dotnet/core/issues/1048)  Visual Studio 15.3.4  .net core 2.0.0  System.ServiceModel.Http NuGet package 4.4.0    I'm having a strange transient error when calling a web service and I would like to step into WinHttpHandler (and WinHttpRequestCallback) to get more information, but I just get an ""Source Not Available"".    I have cloned both the coreclr and corefx repositories, I have setup VS2017 according to [Visual Studio Doc](https://docs.microsoft.com/en-us/visualstudio/debugger/specify-symbol-dot-pdb-and-source-files-in-the-visual-studio-debugger) and [issue 897](https://github.com/dotnet/core/issues/897), and I can step into things like System.Private.CoreLib.dll.    In the Modules window, I can see that the System.ServiceModel.Http.pdb is loaded. I can find the source code in ...\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs. I can open the source file, and if I set a breakpoint it is brown (red?) as if it is enabled. But execution doesn't break at the breakpoint.    I can set a breakpoint in ExceptionDispatchInfo, but when I try to switch to a frame in WinHttpHandler/WinHttpRequestCallback I get ""Source Not Available (see screendump).    ![debugwinhttphandler](https://user-images.githubusercontent.com/33118160/32053847-c028aa3a-ba5c-11e7-94bf-06090700899c.png)    Can I do something so that I can step into the source code for the System.ServiceModel.Http NuGet package?    "
24919	area-System.Data	System.Data.SQLClient throws an Exceoption by calling open Method	@Martin-Stein commented on [Wed Oct 25 2017](https://github.com/dotnet/core/issues/1045)  Hi folks,    Its great to have direct SQL access, but my UWP Application, with target Fall Creators Update, runs into an IO Exception when I call open-Method on my SQLConnection object:     System.IO.FileNotFoundException  occurred.    HResult=0x80070002    Message= Could not load file or assembly 'System.Threading.Thread, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. File not found     at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)     bei System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)     bei System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)     bei System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)     bei System.Data.SqlClient.SqlConnection.Open()     bei SQLDBDiagrammGenerator.UWP.MainPage.connect_Click(Object sender, RoutedEventArgs e)     I have loaded System.data.common version 4.3.0  System.Data.SQLClient 4.4.0  Microsoft.NETCore.UniversalWindowsPlatform Ver. 6.0.1 via Nuget.    What can it be, how can it be solved?    Best regards,    Martin   
24920	area-System.IO	GZipStream not working as expected on compress.	@jgauffin commented on [Thu Oct 26 2017](https://github.com/dotnet/standard/issues/556)  I'm using .NET standard and had ported some code from .NET 4.5.2.    ## Expected outcome:    `Dispose()` **_or_** `Flush()` should be enough for the compressed contents to get copied to the inner stream.    ## Actual outcome    ***Both*** Flush and Dispose are required to get the correct amount of bytes back from the gzipstream:    ```  using (var gzip = new GZipStream(ms, CompressionLevel.Optimal, true))  {      gzip.Write(jsonBytes, 0, jsonBytes.Length);      gzip.Flush();  }  buffer = ms.ToArray();  ```    With just flush, I get 190 instead of 200 bytes:    ```csharp  using (var gzip = new GZipStream(ms, CompressionLevel.Optimal))  {      gzip.Write(jsonBytes, 0, jsonBytes.Length);      gzip.Flush();      buffer = ms.ToArray();  }  ```    With only Dispose i get 194 of the 200 expected bytes:    ```csharp  using (var gzip = new GZipStream(ms, CompressionLevel.Optimal, true))  {      gzip.Write(jsonBytes, 0, jsonBytes.Length);  }  buffer = ms.ToArray();  ```    ---  @Petermarcu commented on [Fri Oct 27 2017](https://github.com/dotnet/standard/issues/556#issuecomment-340018033)  I am assuming you are trying to run the library on .NET Core? We need to get this bug to whichever implementation of .NET Standard you are running on.  ---  @jgauffin commented on [Fri Oct 27 2017](https://github.com/dotnet/standard/issues/556#issuecomment-340019795)  The .NET library is compiled as .NET standard. I discovered the error in a .NET ASP.NET Core MVC application and reproduced it in a .NET Core console application.  ---  @Petermarcu commented on [Fri Oct 27 2017](https://github.com/dotnet/standard/issues/556#issuecomment-340022551)  Great. Yeah, it will be compiled against .NET Standard but will run on an implementation of .NET Standard in one of the implementations. Sounds like this one is in .NET Core. I'm going to move this issue to the repo that has the Compression code for .NET Core.  
24921	area-System.ComponentModel	Adding System.ComponentModel.Composition	Ports MEF1 sources    cc: @danmosemsft @safern 
24922	area-Infrastructure	Update BuildTools, Standard to prerelease-02127-10, preview1-25827-06, respectively (master)	
24923	area-System.ComponentModel	Allow DisplayAttribute on Class declarations	Contributes to #8123   cc: @divega 
24924	area-Infrastructure	Add blob feed as a restore source	@jcagme @chcosta @weshaggard 
24925	area-System.IO	WIP: Move OpenCommPort to api set	It will fail until changes in buildtools (https://github.com/dotnet/buildtools/pull/1766) reach corefx.
24929	area-System.Memory	ReadOnlySpan indexer now returns ref readonly	Fixes https://github.com/dotnet/corefx/issues/24105    Related PR: https://github.com/dotnet/coreclr/pull/14727    cc @ektrah, @VSadov, @jkotas, @KrzysztofCwalina 
24930	area-System.Net	Remove dead code from System.Net.WebClient	PR addresses issue #17905, project **System.Net.WebClient**.
24931	area-Meta	Performance improvements (CoreFX) Epic	This sub epic is to track specific investments to improve performance in CoreFX functionality - other than networking performance which is tracked [elsewhere](https://github.com/dotnet/corefx/issues/24742).    We plan to use data - such as Azure profiler; customer traces; CLBG, TechEmpower - to target performance improvements where they matter most, generally in widely-used existing API. Candidate areas include: Timers, Async methods, Cancellation, Synchronization, Linq, Regex, Collections, Strings. Often changes will be candidates for porting to .NET Framework.    Performance improvements are made all the time they do not necessarily need to be linked to this. This is to track specific focus areas.
24932	area-System.Net	Remove dead code from System.Net.WebSocket.Client	PR addresses issue #17905, project **System.Net.WebSocket.Client**.
24936	area-Serialization	Remove dead code from System.Private.DataContractSerialization	PR addresses issue #17905, project **System.Private.DataContractSerialization**.    **Notes**    Some of the red issues in [diff file](http://tempcoverage.blob.core.windows.net/report2/System.Private.DataContractSerialization.diff.html) are already used somewhere, so they were not deleted. For example `Write*` methods in `XmlNodeWriter`, which take `byte[]` as first argument.    Some of the issues are used in conditional compilation, so I did not remove them: `IDataNode`, `NMTOKENSDataContract`, `JsonReadWriteDelegates`, `XmlFormatGeneratorStatics`.    I deleted `NamespaceManager.NamespaceBoundary` property because it is not used anywhere. But it sets `_nsTop` field. This field is used in some `for` loops, but now it is never set, so its value is always 0. So maybe here somebody with greater understanding shoud decide what to do with it.
24937	area-System.Net	Remove dead code from System.Private.Uri	PR addresses issue #17905, project **System.Private.Uri**.
24938	area-System.Runtime	[Binary serialization] Dictionary<string,string> does not roundtrip with full .NET Framework	"Run this on .NET Core:    ```  using System;  using System.IO;  using System.Collections.Generic;  using System.Runtime.Serialization.Formatters.Binary;    class Program  {      static void Main(string[] args)      {          var d = new Dictionary<string,string>();          d.Add(""Hello"", ""World"");            using (var fs = new FileStream(""DataFile.dat"", FileMode.Create))          {              BinaryFormatter formatter = new BinaryFormatter();              formatter.Serialize(fs, d);          }      }  }  ```    Then run this on .NET Framework:    ```  using System;  using System.IO;  using System.Collections.Generic;  using System.Runtime.Serialization.Formatters.Binary;    class Program  {      static void Main(string[] args)      {          using (var fs = new FileStream(""DataFile.dat"", FileMode.Open))          {              BinaryFormatter formatter = new BinaryFormatter();              var d = (Dictionary<string,string>)formatter.Deserialize(fs);              foreach (var e in d) Console.WriteLine($""{e.Key} {e.Value}"");          }      }  }  ```    Result: Deserialization on .NET Framework fails with:    ```  Unhandled Exception: System.InvalidCastException: Object must implement IConvertible.     at System.Convert.ChangeType(Object value, Type conversionType, IFormatProvider provider)     at System.Runtime.Serialization.SerializationInfo.GetValue(String name, Type type)     at System.Collections.Generic.Dictionary`2.OnDeserialization(Object sender)     at System.Runtime.Serialization.ObjectManager.RaiseDeserializationEvent()     at System.Runtime.Serialization.Formatters.Binary.ObjectReader.Deserialize(HeaderHandler handler, __BinaryParser serParser, Boolean fCheck, Boolean isCrossAppDomain, IMethodCallMessage methodCallMessage)     at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream serializationStream, HeaderHandler handler, Boolean fCheck, Boolean isCrossAppDomain, IMethodCallMessage methodCallMessage)     at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream serializationStream)     at Program.Main(String[] args)  ```"
24939	area-System.Collections	Delete unnecessary internal forwarders	The optimized enum comparers used can never show up in the binary serialization payload. We do not need the internal forwarders for them.
24940	area-System.Security	Assistance with making first pull request	I have implemented RIPE160 hashing as documented in the .NET 4.7.1 API reference by porting Antoon Bosselaers's C implementation to C#. As with most security algorithms, it is a bit messy, however I've tested it quite thoroughly.    Is there anyone here who would like to hand-hold me while performing my first pull request? SSH.NET does not compile with .NET Core from the development branch because of lack of RIPE160 support. I considered making better #ifdefs in the SSH.NET code to detect and disable the feature, but reconsidered that adding RIPE160 was in fact the better solution.    Thank you in advance... my repository is : https://github.com/darrenstarr/RIPEMD160.net and I believe I'm most of the way there.    There is a single unit test which I don't understand well enough yet to provide the correct value as the result. I suppose once I properly get the code checked out and ready, it should be pretty easy to sort out.
24941	area-System.Diagnostics	Segfault when calling Dispose() on a socket asynchronously accepting connections in AssemblyLoadContext.Default.Unloading	Operating system: Debian Stretch  Tested with both dotnet-runtime-2.0.0 debian package and git master (coreclr SHA 67a66156d0307b49522a13618522d289268bc1f9 and corefx SHA 389d7ee0630e71ff868b4d9ebcdcf8111d5acee3)    Reproduction code: https://gist.github.com/LHCGreg/e2e044ae28f6cb5f786de742378c66ed    Reproduction steps:    ```  dotnet AsyncSocketStopTest.dll  (from another terminal, replace 1008 with actual PID of program) kill -SIGTERM 1008  ```    Output:    ```  Starting listening socket  Started listening  Registering SIGTERM handler  Registering SIGINT handler  Socket is accepting asynchronously. Kill this process with kill -SIGTERM 1008  In SIGTERM handler.  Unregistered SIGTERM and SIGINT handlers in SIGTERM handler  Signalling socket to stop accepting connections.  Disposing of listening socket  Caught OperationCanceledException from waiting on AcceptAsync(), good  Unregistered SIGTERM and SIGINT handlers in Main  Sleeping for 5 seconds.  Segmentation fault  ```    A stack trace from lldb:    ```  OS Thread Id: 0x3ba (5)          Child SP               IP Call Site  00007FFFEF7FB6D0 00007ffff627ee40 [InlinedCallFrame: 00007fffef7fb6d0] System.Diagnostics.Tracing.EventPipeInternal.CreateProvider(System.Guid, EtwEnableCallback)  00007FFFEF7FB6D0 00007fff7cc753c1 [InlinedCallFrame: 00007fffef7fb6d0] System.Diagnostics.Tracing.EventPipeInternal.CreateProvider(System.Guid, EtwEnableCallback)  00007FFFEF7FB6C0 00007FFF7CC753C1 DomainNeutralILStubClass.IL_STUB_PInvoke(System.Guid, EtwEnableCallback)  00007FFFEF7FB780 00007FFF7CD00DBE System.Diagnostics.Tracing.EventPipeEventProvider.System.Diagnostics.Tracing.IEventProvider.EventRegister(System.Guid ByRef, EtwEnableCallback, Void*, Int64 ByRef)  00007FFFEF7FB7C0 00007FFF7CC3EE08 System.Diagnostics.Tracing.EventProvider.Register(System.Guid)  00007FFFEF7FB800 00007FFF7CC129E9 System.Diagnostics.Tracing.EventSource.Initialize(System.Guid, System.String, System.String[])  00007FFFEF7FB890 00007FFF7CC4DA8C System.Diagnostics.Tracing.FrameworkEventSource..cctor()  00007FFFEF7FBBE0 00007ffff6344f07 [GCFrame: 00007fffef7fbbe0]  00007FFFEF7FC510 00007ffff6344f07 [HelperMethodFrame: 00007fffef7fc510]  00007FFFEF7FC650 00007FFF7CC1D3E4 System.Threading.ThreadPoolWorkQueue..ctor()  00007FFFEF7FC680 00007FFF7CD0BDCE System.Threading.ThreadPoolGlobals..cctor()  00007FFFEF7FCA40 00007ffff6344f07 [GCFrame: 00007fffef7fca40]  00007FFFEF7FD370 00007ffff6344f07 [HelperMethodFrame: 00007fffef7fd370]  00007FFFEF7FD4B0 00007FFF7CC1CD03 System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback, System.Object)  00007FFFEF7FD4F0 00007FFF7D27FC96 System.Net.Sockets.SocketAsyncContext+AsyncOperation.TryCompleteOrAbortAsync(System.Net.Sockets.SocketAsyncContext, Boolean)  00007FFFEF7FD520 00007FFF7D280836 System.Net.Sockets.SocketAsyncContext+OperationQueue`1[[System.__Canon, System.Private.CoreLib]].StopAndAbort()  00007FFFEF7FD570 00007FFF7D27CB3C System.Net.Sockets.SocketAsyncContext.Close()  00007FFFEF7FD5A0 00007FFF7D27B832 System.Net.Sockets.SafeCloseSocket.ReleaseHandle()  00007FFFEF7FD680 00007ffff6344f07 [GCFrame: 00007fffef7fd680]  00007FFFEF7FD7F8 00007ffff6344f07 [GCFrame: 00007fffef7fd7f8]  00007FFFEF7FD890 00007ffff6344f07 [HelperMethodFrame_1OBJ: 00007fffef7fd890] System.Runtime.InteropServices.SafeHandle.InternalDispose()  00007FFFEF7FD9C0 00007FFF7D27B900 System.Net.Sockets.SafeCloseSocket.CloseAsIs()  00007FFFEF7FD9F0 00007FFF7D26C07F System.Net.Sockets.Socket.Dispose(Boolean)  00007FFFEF7FDAD0 00007FFF7D26C5EF System.Net.Sockets.Socket.Dispose()  00007FFFEF7FDB00 00007FFF7D169F27 AsyncSocketStopTest.Program.SigtermHandler(System.Runtime.Loader.AssemblyLoadContext) [D:\documents\Visual Studio 2017\Projects\SocketStoptest\AsyncSocketStopTest\Program.cs @ 29]  00007FFFEF7FDC30 00007ffff6344f07 [GCFrame: 00007fffef7fdc30]  00007FFFEF7FDCE8 00007ffff6344f07 [GCFrame: 00007fffef7fdce8]  ```      The segfault only occurs when Disposing the socket in a handler for AssemblyLoadContext.Default.Unloading (SIGTERM). Disposing in a handler for Console.CancelKeyPress (SIGINT) does not segfault and works as expected, as does Disposing in response to user input.
24942	area-System.Net	Memory leak when HttpClient.GetByteArrayAsync() is used	"There is no this problem with memory when using HttpClient.GetStreamAsync() and getting byte array manually.    After research of source code I've found HttpClient.GetByteArrayAsyncCore() and here some code from this method:    ```  if (contentLength.HasValue)  {      // If we got a content length, then we assume that it's correct and create a MemoryStream      // to which the content will be transferred.  That way, assuming we actually get the exact      // amount we were expecting, we can simply return the MemoryStream's underlying buffer.        buffer = new HttpContent.LimitMemoryStream(_maxResponseContentBufferSize, (int)contentLength.GetValueOrDefault());        await responseStream.CopyToAsync(buffer).ConfigureAwait(false);        if (buffer.Length > 0)      {          return ((HttpContent.LimitMemoryStream)buffer).GetSizedBuffer();      }  }  ```    As you can see _buffer_ is not disposed after the method returned. May it is a reason of memory leak?    To continue a theme of used memory I run this small program targeting .Net Framework 4.7 and .Net Core 2.0.    ```  using System;  using System.IO;  using System.Net.Http;  using System.Threading.Tasks;    namespace TestCsharp  {      internal class Program      {          private static void Main()          {              HttpClient client = new HttpClient();                Parallel.For(0, 100, i =>              {                  using (Stream stream = client.GetStreamAsync(""https://music.nashe.com.ua/ANEBO_-_Holos_za_pochuttia.mp3"").Result)                  using (MemoryStream memory = new MemoryStream())                  {                      stream.CopyTo(memory);                      byte[] b = memory.ToArray();                  }              });                Console.ReadKey();          }      }  }  ```    Using Diagnostic Tools I've noticed different GC behaviour (in .Net Framework it calls frequently and memory releasings are larger after it). During work .Net Core uses up to 1 GB (.Net Framework no more than 400 MB) and when tasks are done Process Memory in .Net Core is near 500 MB whereas .Net Framework program uses near 50 MB.    How to achive the same usage of memory in .Net Core? (Except of targeting .Net Framework)."
24943	area-System.Net	Calling Dispose() on a socket inside a synchronous Accept() on Linux hangs	"Operation System: Debian Stretch  Tested with git master (coreclr SHA 67a66156d0307b49522a13618522d289268bc1f9 and corefx SHA 389d7ee)    Reproduction code: https://gist.github.com/LHCGreg/a8a144da68d59f225a4b2c4bd1cbd05d    This program takes three arguments. First argument is 'async' or 'sync' for whether to call Accept() or AcceptAsync(). Second argument is 'shutdown' to try to stop listening socket by calling Shutdown(SocketShutdown.Both), then Dispose(), or 'dispose' to just call Dispose(). Third argument is 'signal' to register signal handlers for SIGINT (or ctrl+c on windows) and SIGTERM (netcore only), or 'auto' to automatically try to stop the listening socket after 3 seconds.    Reproduction steps:    On Linux, run    ```  dotnet SocketStopTest.dll sync dispose auto  ```    Expected result: A SocketException is thrown from the Accept() call and the program terminates.    Actual result: The program hangs inside Socket.Dispose().    On Windows, both full framework and .net core, calling Dispose() on a Socket that is in a synchronous Accept() call will break it out of the Accept() call with a SocketException. On Linux, it hangs inside the Dispose(). On Linux, calling Shutdown(SocketShutdown.Both) before calling Dispose() works and causes a SocketException to be thrown from the Accept(), although the exception message is a little weird: ""Invalid argument"". But on Windows, whether full framework or .net core, calling Shutdown(SocketShutdown.Both) apparently hangs when called from regular code or throws a SocketException on the Shutdown (and does not interrupt the Accept) when called from a ctrl+c handler with a message of ""A request to send or receive data was disallowed because the socket is not connected and (when sending on a datagram socket using a sendto call) no address was supplied""    With AcceptAsync(), Dispose() generally works as expected on Windows full framework, Windows .net core, and Linux .net core, with the small exception of Windows full framework raising ObjectDisposedException from the accept task instead of SocketException.    See outcome.txt in the gist for outcomes of all combinations of Windows net47 vs Windows netcore vs Linux netcore, Accept() vs. AsyncAccept(), Shutdown(SocketShutdown.Both) + Dispose() vs. just Dispose(), and socket stopped from delayed Task vs. ctrl+c/SIGINT handler vs. SIGTERM handler.    It's also far from clear from documentation what the correct way of interrupting an Accepting socket is. One might guess to call Dispose() on it, but calling Shutdown would be another reasonable guess and works on Linux but not Windows."
24945	area-System.Linq	Remove private reflection agaist RuntimeWrappedException constructor	RuntimeWrappedException constructor is public in CoreLib now. It can be called directly.
24946	area-System.Runtime	Expose RuntimeWrappedException constructor	High-fidelity interpreters need to create RuntimeWrappedException. There is no public constructor for RuntimeWrappedException today.    # Proposed API  ```C#  public class RuntimeWrappedException  {      public RuntimeWrappedException(object thrownObject);  }  ```    # Details  The constructor is public in the CoreLib implementation already. It is used by our own `System.Linq.Expression` interpreter (see #24945). This issue is about exposing it in the contract so that 3rd party libraries have access to it as well, and do not have to resort to private reflection.  
24947	area-System.Net	"Test: System.Net.Http.Functional.Tests.HttpClientHandlerTest/SendAsync_GetWithInvalidHostHeader_ThrowsException failed with ""Xunit.Sdk.ThrowsException"""	Opened on behalf of @Jiayili1  The test `System.Net.Http.Functional.Tests.HttpClientHandlerTest/SendAsync_GetWithInvalidHostHeader_ThrowsException` has failed.  Assert.Throws() Failure\r     Expected: typeof(System.Net.Http.HttpRequestException)\r     Actual:   (No exception was thrown)          Stack Trace:          --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\ExceptionServices\ExceptionDispatchInfo.cs:line 63        at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\CompilerServices\TaskAwaiter.cs:line 182        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\CompilerServices\TaskAwaiter.cs:line 150        at System.Runtime.CompilerServices.TaskAwaiter$1<System.__Canon>.GetResult() in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\CompilerServices\TaskAwaiter.cs:line 483        at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<SendAsync_GetWithInvalidHostHeader_ThrowsException>d__34.MoveNext() in E:\A\_work\1598\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.cs:line 327     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\ExceptionServices\ExceptionDispatchInfo.cs:line 63        at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\CompilerServices\TaskAwaiter.cs:line 182        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\CompilerServices\TaskAwaiter.cs:line 150     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\ExceptionServices\ExceptionDispatchInfo.cs:line 63        at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\CompilerServices\TaskAwaiter.cs:line 182        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\CompilerServices\TaskAwaiter.cs:line 150     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\ExceptionServices\ExceptionDispatchInfo.cs:line 63        at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\CompilerServices\TaskAwaiter.cs:line 182        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\CompilerServices\TaskAwaiter.cs:line 150      Build : Master - 20171030.01 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x86   - Release - Windows.10.Amd64.ClientRS3-x64   - Release  Detail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Filc~2F/build/20171030.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandlerTest~2FSendAsync_GetWithInvalidHostHeader_ThrowsException
24948	area-System.Runtime	"Tests under: System.Runtime.Serialization.Formatters.Tests.BinaryFormatterTests failed with ""System.Runtime.Serialization.SerializationException"""	Opened on behalf of @Jiayili1  The test `System.Runtime.Serialization.Formatters.Tests.BinaryFormatterTests/RoundtripManyObjectsInOneStream` has failed.  System.Runtime.Serialization.SerializationException : Type 'System.Diagnostics.Tracing.EventSourceException' in Assembly 'System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' is not marked as serializable.          Stack Trace:             at System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo.InitSerialize(Object obj, $ISurrogateSelector surrogateSelector, StreamingContext context, $SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, $ObjectWriter objectWriter, $SerializationBinder binder) in E:\A\_work\1598\s\corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectInfo.cs:line 106        at System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo.Serialize(Object obj, $ISurrogateSelector surrogateSelector, StreamingContext context, $SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, $ObjectWriter objectWriter, $SerializationBinder binder) in E:\A\_work\1598\s\corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectInfo.cs:line 70        at System.Runtime.Serialization.Formatters.Binary.ObjectWriter.Serialize(Object graph, $BinaryFormatterWriter serWriter, Boolean fCheck) in E:\A\_work\1598\s\corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectWriter.cs:line 92        at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(Stream serializationStream, Object graph, Boolean check) in E:\A\_work\1598\s\corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryFormatter.cs:line 87        at System.Runtime.Serialization.Formatters.Tests.BinaryFormatterTests.RoundtripManyObjectsInOneStream()        at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetV(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall)        at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtrForDynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState)        at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566      Build : Master - 20171030.01 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x86   - Release   - Debug - Windows.10.Amd64.ClientRS3-x64   - Debug   - Release  Detail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Filc~2F/build/20171030.01/workItem/System.Runtime.Serialization.Formatters.Tests/analysis/xunit/System.Runtime.Serialization.Formatters.Tests.BinaryFormatterTests~2FRoundtripManyObjectsInOneStream
24949	area-System.Threading	"Test: System.Threading.Channels.Tests.AsyncMultiReaderUnboundedChannelTests/ValidateDebuggerAttributes failed with ""System.InvalidOperationException"""	Opened on behalf of @Jiayili1  The test `System.Threading.Channels.Tests.AsyncMultiReaderUnboundedChannelTests/ValidateDebuggerAttributes` has failed.  System.InvalidOperationException : Expected one DebuggerDisplayAttribute on EETypeRva:0x00063A00.          Stack Trace:             at System.Diagnostics.DebuggerAttributes.ValidateDebuggerDisplayReferences(Object obj) in E:\A\_work\1598\s\corefx\src\System.Threading.Channels\tests\DebuggerAttributes.cs:line 60        at System.Threading.Channels.Tests.ChannelTestBase.ValidateDebuggerAttributes() in E:\A\_work\1598\s\corefx\src\System.Threading.Channels\tests\ChannelTestBase.cs:line 27        at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetV(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall)        at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean isTargetThisCall)        at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566      Build : Master - 20171030.01 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x86   - Release   - Debug - Windows.10.Amd64.ClientRS3-x64   - Debug   - Release  Detail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Filc~2F/build/20171030.01/workItem/System.Threading.Channels.Tests/analysis/xunit/System.Threading.Channels.Tests.AsyncMultiReaderUnboundedChannelTests~2FValidateDebuggerAttributes
24950	area-System.Threading	"Test: System.Threading.Channels.Tests.AsyncSingleReaderUnboundedChannelTests/ValidateInternalDebuggerAttributes failed with ""System.NullReferenceException"""	Opened on behalf of @Jiayili1  The test `System.Threading.Channels.Tests.AsyncSingleReaderUnboundedChannelTests/ValidateInternalDebuggerAttributes` has failed.  System.NullReferenceException : Object reference not set to an instance of an object.          Stack Trace:             at System.Threading.Channels.Tests.SingleReaderUnboundedChannelTests.ValidateInternalDebuggerAttributes() in E:\A\_work\1598\s\corefx\src\System.Threading.Channels\tests\UnboundedChannelTests.cs:line 148        at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetV(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall)        at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean isTargetThisCall)        at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566      Build : Master - 20171030.01 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x86   - Release   - Debug - Windows.10.Amd64.ClientRS3-x64   - Debug   - Release  Detail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Filc~2F/build/20171030.01/workItem/System.Threading.Channels.Tests/analysis/xunit/System.Threading.Channels.Tests.AsyncSingleReaderUnboundedChannelTests~2FValidateInternalDebuggerAttributes
24951	area-System.Data	"SqlClient doesn't support ""always encrypt"" (column encryption setting=enabled)"	"SqlClient from .NET 4.6+ supports SQL Server 2016's ""always encrypted"" option using the connection string option ""column encryption setting=enabled"". This allows application code to transparently read/write data from columns such that it is automatically encrypted before sending to the database server, in such a way that it cannot be decrypted from other systems without access to the relevant keys.  Unfortunately it's not yet supported under .NET Core, which limits the use of this feature in security-conscious platforms (e.g. payment systems)."
24952	area-System.Net	System.Net.Http.CurlException: SSL connect error	I have an n-tier dynamic-ish application that currently builds its elastic indexes I'm app startup, while this was ok to get things going, I'd prefer to have a small CLI application/util that I can later re-use in some scripts and or run ad hoc if i need to do things like, creating a new instance, seeding mock data etc.    When I use the exact same code that worked in my dotnetcore web apps startup, in my console app. I get the following issue.        Invalid NEST response built from a unsuccessful low level call on PUT: /jobs-ng      # Audit trail of this API call:       - [1] BadRequest: Node: https://localhost:9200/ Took: 00:00:01.3948230      # OriginalException: System.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.Net.Http.CurlException: SSL connect error         at System.Net.Http.CurlHandler.ThrowIfCURLEError(CURLcode error)         at System.Net.Http.CurlHandler.MultiAgent.FinishRequest(StrongToWeakReference`1 easyWrapper, CURLcode messageResult)         --- End of inner exception stack trace ---         at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()         at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)         at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)         at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()         at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext()      --- End of stack trace from previous location where exception was thrown ---         at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()         at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)         at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)         at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()         at Elasticsearch.Net.HttpConnection.Request[TReturn](RequestData requestData) in C:\Users\russ\source\elasticsearch-net-5.x\src\Elasticsearch.Net\Connection\HttpConnection-CoreFx.cs:line 78      # Request:      <Request stream not captured or already read to completion by serializer. Set DisableDirectStreaming() on ConnectionSettings to force it to be set on the response.>      # Response:      <Response stream not captured or already read to completion by serializer. Set DisableDirectStreaming() on ConnectionSettings to force it to be set on the response.>    So far my best guess is that the native console app is missing something that the default AspNetCore web app projects provide, but as to what, I dont know?     I have set `DisableDirectStreaming()` as per the error log, but still no change.    I believe this might be a bug within dotnetcore, but I'm hoping someone knows of a work around, or way around this issue for the time being (other that having this code be part of the we apps startup?)
24953	area-System.Data	System.Data.Odbc support of SQL Server datetime2, time, date, datetimeoffset types	"According to [ODBC documentation](https://docs.microsoft.com/en-us/sql/relational-databases/native-client-odbc-date-time/data-type-support-for-odbc-date-and-time-improvements), ODBC supports the SQL 2008+ types like `datetime2`, `date`, `time` and `datetimeoffset`.    But it seems impossible to use them with `System.Data.Odbc` available on MyGet since #13035, excepted `Date`. They look unsupported by this ODBC client, although I have the ""ODBC Driver 13 for SQL Server"" and its ""SQL Server Native Client 11.0"" driver:     - Trying to read a `Time` column with a `System.Data.Odbc` reader `GetValue`     yields:            System.ArgumentException : Unknown SQL type - SS_TIME_EX.             at System.Data.Odbc.TypeMap.FromSqlType(SQL_TYPE sqltype)             at System.Data.Odbc.OdbcDataReader.GetSqlType(Int32 i)             at System.Data.Odbc.OdbcDataReader.GetValue(Int32 i)     - Trying to read a `Time` column with a `System.Data.Odbc` reader `GetTime` cuts fractional seconds.   - Trying to set a `Time` parameter on an `OdbcCommand` cuts its fractional seconds.   - Trying to set a `DateTime2` parameter on an `OdbcCommand` yields:            System.ArgumentException : No mapping exists from DbType DateTime2 to a known          OdbcType.             at System.Data.Odbc.TypeMap.FromDbType(DbType dbType)             at System.Data.Odbc.OdbcParameter.set_DbType(DbType value)     - Setting a `DateTimeOffset` parameter yields the same error with just the db-type name accordingly changed.   - Trying to read a `DateTimeOffset` column with a `System.Data.Odbc` reader `GetValue`     yields:            System.ArgumentException : Unknown SQL type - -155.             at System.Data.Odbc.TypeMap.FromSqlType(SQL_TYPE sqltype)             at System.Data.Odbc.OdbcDataReader.GetSqlType(Int32 i)             at System.Data.Odbc.OdbcDataReader.GetValue(Int32 i)     - Trying to read a `DateTimeOffset` column with a `System.Data.Odbc` reader `GetDateTime` cuts offset (but preserves fractional seconds (all 7 digits)).   - Checking [`OdbcType`](https://github.com/dotnet/corefx/blob/master/src/System.Data.Odbc/src/System/Data/Odbc/OdbcType.cs) enumeration, it does not have types for `datetimeoffset` or `datetime2`.   - Trying to dodge the trouble for `datetime2` by using `DbType.DateTime` instead for parameter:    - Requires to set the parameter scale, otherwise fails with:                System.Data.Odbc.OdbcException : ERROR [22008]              [Microsoft][SQL Server Native Client 11.0]Datetime field overflow.              Fractional second precision exceeds the scale specified in the parameter binding.                 at System.Data.Odbc.OdbcCommand.ExecuteReaderObject(CommandBehavior behavior, String method, Boolean needReader, Object[] methodArguments, SQL_API odbcApiMethod)                 at System.Data.Odbc.OdbcCommand.ExecuteReaderObject(CommandBehavior behavior, String method, Boolean needReader)                 at System.Data.Odbc.OdbcCommand.ExecuteScalar()      - When setting the parameter scale to 7, cuts fractional milliseconds even if the column in database is `datetime2`. This gives the one millisecond precision (compared to SQL Server `datetime` ten thirds of ms precision), but `datetime2` can go down to 100ns. Catching the query with SQL Server Profiler, we can see this:                exec sp_executesql N'select count(*) from Types2008 where [DateTime2] = @P1',              N'@P1 datetime2','2017-10-26 20:01:55.1630000'           So the value is `datetime2` typed but has its fractional milliseconds zeroed out (yes my original value was not having them already zeroed).           By the way this `datetime2` typing causes issues when the underlying table column is `datetime` instead, because it occurs in this case too. It causes `where` equality conditions to fail matching on two thirds of `datetime` values. Those ending with `3` or `7` milliseconds are not considered equal to the ""same"" value when typed `datetime2` with four trailing zero. Only those ending with 0 millisecond match.    Those results were obtained with .Net Core 2.0, System.Data.Odbc 4.5.0-preview1-25829-02, a SQL Server Express 2016, and as connection string:        Driver={SQL Server Native Client 11.0};      Server=.\sql_express;      Database=test;      Trusted_Connection=yes;      Mars_Connection=yes;    Here is a complete [gist](https://gist.github.com/fredericDelaporte/e1563b1510ce31a01e7d9dc9e9387e6d) of tests reproducing those issues.    Those troubles exist with .Net Framework too, and are reported [here](https://connect.microsoft.com/VisualStudio/feedback/details/3143192)."
24954	area-System.Net	" When calling web service in parallel: ""The server returned an invalid or unrecognized response"""	Visual Studio 15.3.4  .net core 2.0.0  dotnet-svcutil 0.5.0.0  System.ServiceModel.Http NuGet package 4.4.0    I have created a console app calling a 3rd party web service, using dotnet-svcutil to generate the client.    When I call the server asynchronously in parallel I sometimes get an        HttpRequestException: An error occurred while sending the request.  with an inner exception:      WinHttpException (0x80072F78): The server returned an invalid or unrecognized response          (NativeErrorCode: 12152)    I can see that it's the HEAD call that fails. Using WireShark I can see that the server returns an HTTP 405 Method Not Allowed, with a body containing a soap envelope with a fault.    If I create a client app in .net framework 4.7, I don't get the error.    I think the server is a self-hosted wcf service - but I'm not sure.    (If I look in System.ServiceModel.Channels.HttpChannelFactory.cs line 996, an exception during the head pre-auth request, should be ignored (but maybe I'm looking in the wrong place).)  
24955	area-System.Threading	Address System.Threading.Channels PR feedback	Addressing a few pieces of feedback on the previous PR, plus some auto-cleanup.
24957	area-Infrastructure	Adding required libraries to the net471 support package.	cc: @weshaggard @AlexGhiondea @ericstj     Adding the required libraries to the net471 support package.
24958	area-Infrastructure	Add information on myget feed and local SDK	Does anything else need updating here?
24960	area-Infrastructure	Symbols publishing broken 	"I do not know why (apparently) this assembly does not have a PDB. Could symbols publishing have previously ignored this? @vancem it may be best to change this to a warning until the issue is solved.    https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1096440    fyi @Anipik     ```  2017-10-30T13:06:59.0898179Z            Converting portable PDB 'E:\A\_work\1491\b\pipelineRepository\bin\obj\SymbolsRequest\ExtractedPackages\10\lib\net461\Microsoft.Win32.Registry.AccessControl.dll'...  2017-10-30T13:06:59.0898179Z          E:\A\_work\1491\b\pipelineRepository\Tools\Symbols.targets(508,5): error MSB4018: The ""ConvertPortablePdbsToWindowsPdbs"" task failed unexpectedly. [E:\A\_work\1491\b\pipelineRepository\build.proj]  2017-10-30T13:06:59.0898179Z          E:\A\_work\1491\b\pipelineRepository\Tools\Symbols.targets(508,5): error MSB4018: System.IO.InvalidDataException: Specified PE file doesn't have any PDB associated with it [E:\A\_work\1491\b\pipelineRepository\build.proj]  2017-10-30T13:06:59.0898179Z          E:\A\_work\1491\b\pipelineRepository\Tools\Symbols.targets(508,5): error MSB4018:    at Microsoft.DiaSymReader.Tools.PdbConverterPortableToWindows.Convert(PEReader peReader, MetadataReader pdbReader, SymUnmanagedWriter pdbWriter, PdbConversionOptions options) [E:\A\_work\1491\b\pipelineRepository\build.proj]  2017-10-30T13:06:59.0898179Z          E:\A\_work\1491\b\pipelineRepository\Tools\Symbols.targets(508,5): error MSB4018:    at Microsoft.DiaSymReader.Tools.PdbConverter.ConvertPortableToWindows(PEReader peReader, MetadataReader pdbReader, SymUnmanagedWriter pdbWriter, PdbConversionOptions options) [E:\A\_work\1491\b\pipelineRepository\build.proj]  2017-10-30T13:06:59.0898179Z          E:\A\_work\1491\b\pipelineRepository\Tools\Symbols.targets(508,5): error MSB4018:    at Microsoft.DiaSymReader.Tools.PdbConverter.ConvertPortableToWindows(PEReader peReader, MetadataReader pdbReader, Stream targetPdbStream, PdbConversionOptions options) [E:\A\_work\1491\b\pipelineRepository\build.proj]  2017-10-30T13:06:59.0898179Z          E:\A\_work\1491\b\pipelineRepository\Tools\Symbols.targets(508,5): error MSB4018:    at Microsoft.DiaSymReader.Tools.PdbConverter.ConvertPortableToWindows(PEReader peReader, Stream sourcePdbStream, Stream targetPdbStream, PdbConversionOptions options) [E:\A\_work\1491\b\pipelineRepository\build.proj]  2017-10-30T13:06:59.0898179Z          E:\A\_work\1491\b\pipelineRepository\Tools\Symbols.targets(508,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.ConvertPortablePdbsToWindowsPdbs.Execute() [E:\A\_work\1491\b\pipelineRepository\build.proj]  2017-10-30T13:06:59.0898179Z          E:\A\_work\1491\b\pipelineRepository\Tools\Symbols.targets(508,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [E:\A\_work\1491\b\pipelineRepository\build.proj]  2017-10-30T13:06:59.0898179Z          E:\A\_work\1491\b\pipelineRepository\Tools\Symbols.targets(508,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext() [E:\A\_work\1491\b\pipelineRepository\build.proj]  2017-10-30T13:06:59.0898179Z          Done executing task ""ConvertPortablePdbsToWindowsPdbs"" -- FAILED.  2017-10-30T13:06:59.0898179Z          Done building target ""CreateWindowsPdbsFromPortablePdbs"" in project ""build.proj"" -- FAILED.  2017-10-30T13:06:59.0898179Z          Done Building Project ""E:\A\_work\1491\b\pipelineRepository\build.proj"" (CreateWindowsPdbsFromPortablePdbs target(s)) -- FAILED.  2017-10-30T13:06:59.0898179Z            ```"
24962	area-System.Runtime	Fix UpdateBlobs regression, reenabling ValueTuple tests on Core, add Dictionary<string,string> serialization test case	Related https://github.com/dotnet/corefx/pull/24962    The UpdateBlobs method which is manually triggered requires the netfx conditioned test cases to be at the end of the MemberData method. Otherwise it will replace wrong blobs.
24963	area-System.Net	File URI cannot be parsed with @ sign	The DocumentFormat.OpenXml library uses System.IO.Packaging to open office related documents. A user posted an issue where one of the package relationships uses a legacy URI format that fails to be parsed. This document opens fine in PowerPoint and would like to be able to open it with the .NET library. The URI in question has the form:    ```  file:///\\contoso.com@SSL\user\content\path\projects\blank.xlsx  ```  
24966	area-System.Data	Connections from the pool are not reused when using async methods in parallel	"Moved from https://github.com/aspnet/EntityFrameworkCore/issues/10169 reported by @wertzui    Whem I'm using async methods (like `FirstOrDefaultAsync`) to get a result from the Database inside a `Parallel.For`, the connections are not correctly reused from the connection pool.    The connections will rise to the configured `Max Pool Size` and after some time (around 1-2 minutes on my machine using localdb), exceptions will be thrown.    Using either async methods and a normal for-loop or non-async methods an a Parallel.For-loop, the connections are properly reused and I can observe that a normal for-loop uses 1 connection and a Parallel.For-loop uses 4 connections which corresponds to MaxDegreeOfParallelism.    ```  Exception message:  System.InvalidOperationException occurred    HResult=0x80131509    Message=Timeout expired.  The timeout period elapsed prior to obtaining a connection from the pool.  This may have occurred because all pooled connections were in use and max pool size was reached.  Stack trace:     at System.Data.Common.ADP.ExceptionWithStackTrace(Exception e)     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.<OpenAsync>d__31.MoveNext()     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable.AsyncEnumerator.<BufferlessMoveNext>d__9.MoveNext()     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.<ExecuteImplementationAsync>d__33`2.MoveNext()     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.<ExecuteImplementationAsync>d__33`2.MoveNext()     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable.AsyncEnumerator.<MoveNext>d__8.MoveNext()     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.SelectAsyncEnumerable`2.SelectAsyncEnumerator.<MoveNext>d__4.MoveNext()     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.<_FirstOrDefault>d__82`1.MoveNext()     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable`1.Enumerator.<MoveNext>d__3.MoveNext()     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.SelectAsyncEnumerable`2.SelectAsyncEnumerator.<MoveNext>d__4.MoveNext()     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.<MoveNext>d__5.MoveNext()     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()     at EfPoolingTest.UnitTest1.<>c.<NormalContextParallel>b__4_0(Int32 i) in C:\Users\xxx\documents\visual studio 2017\Projects\EfPoolingTest\EfPoolingTest\UnitTest1.cs:line 70     at System.Threading.Tasks.Parallel.<>c__DisplayClass19_0`1.<ForWorker>b__1(RangeWorker& currentWorker, Int32 timeout, Boolean& replicationDelegateYieldedBeforeCompletion)  ```    ### Steps to reproduce  - Clone https://github.com/wertzui/EfPoolingTest and open the project  - Run the ""ViewConnections.sql"" script to see that there are no connections open (beside the 2 used for the script)  - Run the test ""NormalContextParallelAsyncConfigureAwaitFalse"" (I suggest running in Debug mode, so you can see the output)  - Run the ""ViewConnections.sql"" script multiple times to see the connections increase.  - After some time you will also get an exception  - Run the other tests and observe the connection count      ### Further technical details  EF Core version: 2.0.0 (also tested with 1.1.3)  Database Provider: Microsoft.EntityFrameworkCore.SqlServer/localdb  Operating system: Windows 10 FCU  IDE: Visual Studio 2017 15.4.1  "
24967	area-Infrastructure	Add Microsoft.Windows.Compatibility.Shims package and rename compat pack	Also fix package versions in compat pack to be 4.5.0-preview-* as some of the new packages have dependencies to the preview versions of the already shipped packages.    cc: @weshaggard @danmosemsft @terrajobst 
24968	area-Infrastructure	init-tools.cmd hangs when running out of disk space	After open the cmd file,I just get the following info.  Installing dotnet cli...      I have checked the log file    > Running init-tools.cmd   > Installing 'https://dotnetcli.azureedge.net/dotnet/Sdk/2.0.0/dotnet-sdk-2.0.0-win-x64.zip' to 'D:\ChuckLu\Git\GitHub\dotnet\corefx\Tools\dotnetcli\dotnet-sdk-2.0.0-win-x64.zip'   > 
24969	area-System.Net	"Test: System.Net.WebSockets.Client.Tests.CancelTest/ConnectAsync_Cancel_ThrowsWebSocketExceptionWithMessage failed with ""Xunit.Sdk.ThrowsException"""	Opened on behalf of @Jiayili1  The test `System.Net.WebSockets.Client.Tests.CancelTest/ConnectAsync_Cancel_ThrowsWebSocketExceptionWithMessage(server: ws://corefx-net.cloudapp.net/WebSocket/EchoWebSocket.ashx)` has failed.  Assert.Throws() Failure     Expected: typeof(System.Net.WebSockets.WebSocketException)     Actual:   (No exception was thrown)          Stack Trace:          --- End of stack trace from previous location where exception was thrown ---        at System.Net.WebSockets.Client.Tests.CancelTest.<ConnectAsync_Cancel_ThrowsWebSocketExceptionWithMessage>d__1.MoveNext() in /Users/buildagent/agent/_work/30/s/corefx/src/System.Net.WebSockets.Client/tests/CancelTest.cs:line 28     --- End of stack trace from previous location where exception was thrown ---     --- End of stack trace from previous location where exception was thrown ---     --- End of stack trace from previous location where exception was thrown --- Build : Master - 20171031.01 (Core Tests) Failing configurations: - OSX.1012.Amd64-x64   - Release - RedHat.69.Amd64-x64   - Release - fedora.25.amd64-x64   - Release - Fedora.26.Amd64-x64   - Release - Ubuntu.1710.Amd64-x64   - Release - SLES.12.Amd64-x64   - Release - suse.422.amd64-x64   - Release - Ubuntu.1704.Amd64-x64   - Release - Ubuntu.1604.Amd64-x64   - Release - Debian.87.Amd64-x64   - Release - Debian.90.Amd64-x64   - Release - RedHat.73.Amd64-x64   - Release - RedHat.72.Amd64-x64   - Release - Ubuntu.1404.Amd64-x64   - Release - Centos.73.Amd64-x64   - Release  Detail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171031.01/workItem/System.Net.WebSockets.Client.Tests/analysis/xunit/System.Net.WebSockets.Client.Tests.CancelTest~2FConnectAsync_Cancel_ThrowsWebSocketExceptionWithMessage(server:%20ws:~2F~2Fcorefx-net.cloudapp.net~2FWebSocket~2FEchoWebSocket.ashx)
24970	area-Meta	StackExchange.Redis.StrongName, Version=1.2.4.0	The type 'ConnectionMultiplexer' exists in both 'StackExchange.Redis.StrongName, Version=1.2.4.0, Culture=neutral, PublicKeyToken=c219ff1ca8c2ce46' and 'StackExchange.Redis, Version=1.2.6.0, Culture=neutral, PublicKeyToken=null' Hunter.Authorization.ApiCommandServer    ![image](https://user-images.githubusercontent.com/13499426/32214320-66e0c128-be59-11e7-8b7b-656c0ae00ea2.png)  
24977	area-System.Security	Add asynchronous overload of WindowsIdentity.RunImpersonated 	https://github.com/dotnet/corefx/issues/9996#issuecomment-307870746  https://github.com/aspnet/Home/issues/1805#issuecomment-339442334    ASP.NET Core is getting many requests for users that want to impersonate the authenticated user of the request and perform actions on their behalf. The main problem is that many of these actions are asynchronous, such as database access, but RunImpersonated is synchronous. Users have repeatedly made the mistake of starting an asynchronous operation within RunImpersonated and then returning the Task. Exiting RunImpersonated revokes the impersonation and can cause errors or reverting to the base identity in the Task.    Proposal:  `public static Task RunImpersonatedAsync(SafeAccessTokenHandle safeAccessTokenHandle, Func<Task> func)`  `public static Task<T> RunImpersonatedAsync<T>(SafeAccessTokenHandle safeAccessTokenHandle, Func<Task<T>> func)`    @brentschmaltz 
24978	area-Infrastructure	We should point to the release/2.0.0 version of standard	We are not planning to ship a new stable version of the NETStandard.Library package in the 2.1 timeframe so we need to stick with what is currently shipping from the release/2.0.0 branch in standard repo. 
24980	area-System.Memory	Add Overlaps extension method to SpanExtensions	Resolves #24103    API Review: https://github.com/dotnet/corefx/issues/24103#issuecomment-340856211    Previous PR with some details on the implementation: https://github.com/dotnet/corefx/pull/18731#issuecomment-296856781
24984	area-System.ComponentModel	CultureInfoConverter added	* Culture Converter added    * space formatting    * Expected and actual argument reordered    * Removed to string    * Reference Converter and its test added    * fixing reference Converter    * Skipping test on framework    * CultureInfo added with others    * Removed Reference Connverter    Porting PR #24855 from master to release/2.0.0 branch  Fixes #24755  Related: https://github.com/JamesNK/Newtonsoft.Json/issues/1457
24985	area-System.Memory	Operations on default(Memory<T>) throw argument null exceptions	e.g.  ```C#  private Memory<byte> _buffer;  ...  _buffer.TryGetArray(out ArraySegment<byte> s);  ```  throws an `ArgumentNullException`, due to the implementation passing `null` to `ArraySegment`'s ctor.  How do I know whether I can use `_buffer` or not?  Should `TryGetArray` in this case return `false`?  What about accessing `_buffer.Span`... it similarly throws, but should it just return an empty span?  Or do we need a new property on it that tells me whether it's valid for use with various methods?  I can do `_buffer.Equals(default)`, but that adds multiple unnecessary checks.    cc: @ahsonkhan, @KrzysztofCwalina, @terrajobst 
24986	area-System.Memory	UTF8Parser parsing integers with 'N' format not implemented.	Left-over debt from productizing Utf8Parser.    Some questions need to be resolved (be compatible with .NET or actually insist that you know, commas appear only every third digit?)    This affects at least 8 overloads (U/Int8/16/32/64).    
24987	area-System.Memory	UTF8Parser parsing TimeSpan not implemented.	Left over debt from productizing Utf8Parser.    Left undone for time reasons.  
24990	area-System.Net	TcpClient bug in branch release/1.1.0 (Unix)	https://github.com/dotnet/corefx/blob/release/1.1.0/src/System.Net.Sockets/src/System/Net/Sockets/TCPClient.Unix.cs  and  https://github.com/dotnet/corefx/blob/release/1.1.0/src/System.Net.Sockets/src/System/Net/Sockets/TCPClient.cs    ConnectAsync(string, int) will call ConnectAsyncCore(host, port);  ConnectAsync(IPAddress[], int) will call ConnectAsyncCore(IPAddress[], int);  ConnectAsync(IPAddress, int) will call BeginConnect    In ConnectAsyncCore(host, port) and ConnectAsyncCore(IPAddress[], int) will do this  if (_clientSocket != null)  {  throw new PlatformNotSupportedException(SR.net_sockets_connect_multiaddress_notsupported);  }    TcpClient.Client will call TcpClient.ClientCore  TcpClient.ClientCore will set _clientSocket;  So once we call TcpClient.Client, _clientSocket is not null, then ConnectAsyncCore(host, port) and ConnectAsyncCore(IPAddress[], int) will throw a wrong PlatformNotSupportedException
24994	area-System.IO	Multi-server System.IO.Pipes tests hanging on OSX	
24996	area-System.Security	Remove dead code from System.Security.Cryptography.Cng	PR addresses issue #17905, project **System.Security.Cryptography.Cng**.
24997	area-Meta	 Mark applicable structs as readonly	Fixes #24900  Related to https://github.com/dotnet/coreclr/pull/14789  Related to https://github.com/dotnet/corert/pull/4855    cc: @jkotas, @jaredpar, @VSadov, @tmat for System.Reflection.Metadata (which has the bulk of the changes)
24998	area-System.Reflection	Enhance System.Type.FullName to return non-null for open generic types.	"Consider    ```csharp    class Foo<A,B> { }    class H<T> { }    class Bar<X> : Foo<Int, H<X>> { }  ```    Currently `typeof (Bar<>).BaseType.FullName` returns `null`, as documented here https://docs.microsoft.com/en-us/dotnet/api/system.type.fullname?view=netcore-2.0#System_Type_FullName):    > The fully qualified name of the type, including its namespace but not its assembly; or null if the current instance represents a generic type parameter, an array type, pointer type, or byref type based on a type parameter, or a generic type that is not a generic type definition but contains unresolved type parameters.    I propose that instead `Type.FullName` is changed on .NET Core, .NET Framework and Xamarin to return a sensible string representation of open generic types.  For the example above, for example, a reasonable result may be: `""Foo<Int, H<X>>""`    "
25000	area-System.Security	Remove dead code from System.Security.Cryptography.Csp.	PR addresses issue #17905, project **System.Security.Cryptography.Csp**.
25002	area-Infrastructure	How to build CoreFX for x86 Linux	Hallo there im looking for a guide or a way to build the CoreFX project for an x86 Linux based Project.  I have already sucessfully build coreclr for x86 following these  [CoreCLR build guide](https://github.com/dotnet/coreclr/issues/13192#issuecomment-320188913).  Now i need something like that for CoreFX,  Im thankful for help.    Greetings from Germany    Philipp    [EDIT] Fix link by @karelz
25003	area-System.Net	Clean UdpReceiveResult	- Deleted unnecesary check in GetHashCode()  - Deleted unnecesary variables  - Added Docs
25005	area-Meta	System.Json bugs and perf issues	"We're using `System.Json` quite extensively and have run into a couple of issues. Some looks like design (inconsistency) issues, some may be code bugs.     1. **Possible design bug**: Inconsistent handling of `null` array members:    This works as expected:     ```C#      var a = new JsonArray(new JsonValue[] { ""abc"", 123, null }); // Note 3rd item is null    ```    This alternative pattern `throws` inside `Add` due to an explicit `null` guard:    ```C#    var b = new JsonArray(new JsonValue[] { ""abc"", 123 }); b.Add(null); // ArgumentNullException    ```    I see that the units support this behavior, but it seems to be an inconsistent design. Adding a `null` member to an array should be acceptable?    2. **Possible code bug**: `JsonType` derivation on `JsonPrimitive` seems faulty:  ```C#     var p = new JsonPrimitive(Guid.NewGuid()); // Guid     var t = p.JsonType; // Expected: JsonType.String. Actual: JsonType.Number  ```    (The nested conditionals here may be iffy: [JsonPrimitive.cs](https://github.com/dotnet/corefx/blob/master/src/System.Json/src/System/Json/JsonPrimitive.cs#L118-L120))    This case does not seem to be covered by any units.    ```C#    public override JsonType JsonType =>      _value == null || _value.GetType() == typeof(char) || _value.GetType() == typeof(string)      || _value.GetType() == typeof(DateTime)       || _value.GetType() == typeof(object)      ? JsonType.String // DateTimeOffset || Guid || TimeSpan || Uri // <=========      : _value.GetType() == typeof(bool)       ? JsonType.Boolean :      JsonType.Number;  ```    3. **Possible design bug**: `JsonPrimitive.ToString()` throws for some primitives.    The following throws; I would expect to return the `Guid` in `string` form. Note that this is _not_ one of the expected errors that are explicitly `thrown` for some types (see notes on stack trace).    I see that the units support this behavior, but it seems to be an inconsistent design.  ```C#    var p = new JsonPrimitive(Guid.NewGuid());    var t = p.JsonType;    var s = p.ToString(); // FormatException      // Note that GetFormattedString explicitly throws for some types    // But that's not happening here, since it's making it all the way to Guid.ToString()    System.FormatException      Message=Format String can be only ""D"", ""d"", ""N"", ""n"", ""P"", ""p"", ""B"", ""b"", ""X"" or ""x"".      Source=System.Private.CoreLib      StackTrace:       at System.Guid.ToString(String format, IFormatProvider provider)       at System.Json.JsonPrimitive.GetFormattedString()       at System.Json.JsonValue.SaveInternal(TextWriter w)       at System.Json.JsonValue.ToString()  ```    4. **Perf: Equals is Expensive**:    The straight-forward way to compare two `JsonValue` instances is to `ToString()` them both and then use a `StringComparer.Ordinal` comparer. But this is unnecessarily expensive considering the number of `string` allocs that need to happen internally while walking the tree. A better way would be to walk the tree regardless, but compare each individual `JsonObject`, `JsonArray` and `JsonPrimitive`.    Something similar to this: [JsonValueComparer.cs](https://github.com/k2workflow/Clay/blob/master/src/SourceCode.Clay.Json/JsonValueComparer.cs)    [Benchmark](https://github.com/k2workflow/Clay/blob/master/src/SourceCode.Clay.Json.Bench/JsonEqualsBench.cs) (**2x improvement in both time & memory**)  ```C#            Method |      Mean |     Error |    StdDev | Scaled | ScaledSD |    Gen 0 |    Gen 1 |   Gen 2 | Allocated |  ---------------- |----------:|----------:|----------:|-------:|---------:|---------:|---------:|--------:|----------:|    ToStringEquals | 13.998 ms | 0.2782 ms | 0.5807 ms |   1.00 |     0.00 | 809.3750 | 434.3750 | 90.6250 | 6267600 B |  NewtonDeepEquals |  2.729 ms | 0.0514 ms | 0.0456 ms |   0.20 |     0.01 |        - |        - |       - |       0 B |       SmartEquals |  6.817 ms | 0.1334 ms | 0.1638 ms |   0.49 |     0.02 | 789.0625 |        - |       - | 3323776 B |  ```    5. **Perf: Clone is Expensive**:     Similar reasoning to the previous bullet: `ToString` works but is expensive due to allocations on the way out and redundant parsing on the way back in.     Here's an alternative approach that walks the tree and clones each node explicitly: [JsonClone.cs](https://github.com/k2workflow/Clay/blob/master/src/SourceCode.Clay.Json/JsonExtensions.cs#L304-L430)    (Unfortunately even it isn't as memory-efficient as it could be, since `SortedDictionary` does not expose an `initialCapacity` parameter in order to pre-allocate an exact-sized map.)    [Benchmark](https://github.com/k2workflow/Clay/blob/master/src/SourceCode.Clay.Json.Bench/JsonCloneBench.cs) (**2-3x improvement in both time & memory**)  ```           Method |     Mean |     Error |    StdDev | Scaled | ScaledSD |     Gen 0 |    Gen 1 |   Gen 2 | Allocated |  --------------- |---------:|----------:|----------:|-------:|---------:|----------:|---------:|--------:|----------:|    ToStringClone | 29.21 ms | 0.5792 ms | 0.5948 ms |   1.00 |     0.00 | 1562.5000 | 812.5000 | 62.5000 |   9.92 MB |  NewtonDeepClone | 19.16 ms | 0.3727 ms | 0.5101 ms |   0.66 |     0.02 | 1218.7500 | 562.5000 | 62.5000 |   7.02 MB |       SmartClone | 10.14 ms | 0.1964 ms | 0.4311 ms |   0.35 |     0.02 |  671.8750 | 312.5000 |       - |   3.94 MB |  ```  "
25006	area-Infrastructure	Update build definitions	cc @karajas @dagood @mmitche     
25008	area-System.IO	Should Directory.GetDirectories (and related methods) take a StringComparison overload?	This matters less on Windows, but it's more significant on platforms where case-sensitive filesystems are more common.
25009	area-System.Memory	Add null checks in Memory<T> APIs to support default	Fixes https://github.com/dotnet/corefx/issues/24985    Related PR: https://github.com/dotnet/coreclr/pull/14816    Also, applying the optimization from https://github.com/dotnet/coreclr/pull/14309    cc: @stephentoub, @KrzysztofCwalina
25010	area-System.Net	Fix a few WebSocketHandle.Managed issues	- At least until socket send/receives respect cancellation, we need to poll for cancellation after the handler's SendAsync completes.  - We're unnecessarily allocating another CTS if no external cancellation was provided.  - We're not disposing of the response object in the case of an error after SendAsync completes.    Fixes https://github.com/dotnet/corefx/issues/24969
25011	area-System.Collections	[API] Array and List have BinarySearch, but SortedList does not. This seems illogical.	Binary search should be performed on an ordered list of items.  Thus it's a natural operation for SortedList and not so natural for Array or List as they may be non-ordered causing BinarySearch to return incorrect answer.    BCL should either add BinarySearch to SortedList or better yet make am extension method for IList<T>.
25012	area-Infrastructure	Facades, PermissionSets and RedistList are missing from Microsoft.TargetingPack.NETFramework.* nuget packages.	I really don't know if these packages are still in use but I cannot find any other nuget packages closer to the .NET Framework developer packs than these. My use-case is to build CPS projects targeting net* TFMs on a Windows machine without Visual Studio and on \*NIX systems without mono. Referencing a single nuget with an assistance of `<FrameworkPathOverride>` makes this a simple task. As far as I know these missing directories are required for dotnet to build projects targeting net\* TFMs and to run tests for them.    Is there any chance to get the packages updated or is there any other approach that should be taken for my use-case?  I already know that [aspnet/BuildTools](https://github.com/aspnet/BuildTools) is using https://aspnetcore.blob.core.windows.net/buildtools/netfx/4.6.1/netfx.4.6.1.tar.gz But I found no out-of-the-box way of unpacking tar.gz files on Windows. In addition this archive contains targeting packs for all previous version of .NET Framework.
25013	area-System.Numerics	HashCode based on xxHash32	"Fixes #14354    ## Description    Works by maintaining the xxHash32 state variables (v1 -> v4, length) as well as a queue of values that fall outside of the block size (16 bytes/4 ints). Seed is assumed to be zero as there is no ctor in the proposal - however, it is possible to add a seed without changing the structure.    It's possible to do this without `unsafe`, but the code is much more messy. This can be changed if adding `AllowUnsafeBlocks` to System.Runtime is a problem.    Tests against known xxHash32 vectors are provided. The hashes were calculated by providing chunks from `""abcd0123efgh4567ijkl8901mnop2345qrst6789uvwx0123yzab""` (increasing in length 4) to [this site](https://asecuritysite.com/encryption/xxHash). The integers are hard-coded in the tests because System.Text.Encoding.ASCII is not available.    ## [Performance](https://github.com/jcdickinson/Benchmarks/tree/corefx-hashcode)    ``` ini    BenchmarkDotNet=v0.10.9, OS=Windows 10 Redstone 2 (10.0.15063)  Processor=Intel Core i7-4800MQ CPU 2.70GHz (Haswell), ProcessorCount=8  Frequency=2630627 Hz, Resolution=380.1375 ns, Timer=TSC  .NET Core SDK=2.0.2    [Host]     : .NET Core 2.0.0 (Framework 4.6.00001.0), 64bit RyuJIT    DefaultJob : .NET Core 2.0.0 (Framework 4.6.00001.0), 64bit RyuJIT      ```   |                  Method |     Mean |     Error |    StdDev | Scaled |   |------------------------ |---------:|----------:|----------:|-------:|   |                  Unsafe | 79.98 ns | 1.4723 ns | 1.3772 ns |   1.00 |   |    'Calls, No Inlining' | 40.34 ns | 0.1778 ns | 0.1576 ns |   0.50 |   | 'Unrolled, No Inlining' | 12.19 ns | 0.0433 ns | 0.0384 ns |   0.15 |   |       'Calls, Inlining' | 34.55 ns | 0.1372 ns | 0.1216 ns |   0.43 |   |    'Unrolled, Inlining' | 12.22 ns | 0.0885 ns | 0.0785 ns |   0.15 |    ### Updates [(staged)](https://github.com/jcdickinson/corefx/tree/feature-system-hashcode-staged)    The test vectors are now normally disabled due to the per-AppDomain seed randomization, define `SYSTEM_HASHCODE_TESTVECTORS` to enable them (which will disable the seed randomization, setting it to 0).    NB: this has been excluded from netfx builds in the tests csproj.    ## Deviations from xxHash32    * Length is stored as the number of hashed fields (not bytes). It is multiplied at the end by 4 so that it behaves exactly like xxHash32.  * Due to the lazy state initialization (a necessity because HashCode is a struct), it is possible that the structure will re-initialize at field 4,294,967,300 (and multiples thereof) only if the xxHash32 state variables are somehow all zero. This could be deferred by changing the length field to a `ulong` (but would make the struct larger than a cache line). 4,294,967,300 fields ought to be enough for anyone; you have bigger problems if you are creating hash codes based on that much data (15GB).  * The code that mixes in individual bytes is omitted - this struct only accepts `int`.    I'll be online in a few hours for feedback and to sign the CLA.    ## 3rd Party Code    Submission containing materials of a third party:      | Author | Project | License | Comments |   |------- |--------:|--------:|---------:|   | Cyan4973 | [xxHash](https://github.com/Cyan4973/xxHash) | MIT | Reference, not copied code |    cc: @stephentoub, @KrzysztofCwalina "
25014	area-System.Security	Fix incorrect HAVE_OPENSSL_ALPN testing	This define is incorrectly tested using #ifdef instead of #if, so build  on e.g. Ubuntu 14.04 where this symbol is set to zero fails.
25015	area-Serialization	Area-Serialization Sprint 126	The issue is for tracking issues to be done in sprint 126 (due by 11/10/2017)
25016	area-System.Net	Stopping HttpListener doesn't free up address in use for some time on macOS (System.Net.HttpListenerException: Address already in use)	"I'm receiving the following error:    ```  Unhandled Exception: System.Net.HttpListenerException: Address already in use     at System.Net.HttpEndPointManager.GetEPListener(String host, Int32 port, HttpListener listener, Boolean secure)     at System.Net.HttpEndPointManager.AddPrefixInternal(String p, HttpListener listener)     at System.Net.HttpEndPointManager.AddListener(HttpListener listener)     at System.Net.HttpListener.Start()     at TestHttpListener.TestHttpListener.<SimpleListenerExample>d__3.MoveNext() in /Users/tylerleonhardt/Desktop/CompSci/DotNET/Core/TestHttpListener/TestHttpListener.cs:line 29  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at TestHttpListener.TestHttpListener.<>c__DisplayClass1_0.<<Start>b__0>d.MoveNext() in /Users/tylerleonhardt/Desktop/CompSci/DotNET/Core/TestHttpListener/TestHttpListener.cs:line 13  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)     at System.Threading.ThreadPoolWorkQueue.Dispatch()  ```    I am writing an http server using HttpListener (I need to use HttpListener) and I run into this exception after starting and stoping and starting the server.    Here is my (watered down) library:  ```c#  using System;  using System.Net;  using System.Threading;  using System.Threading.Tasks;    namespace TestHttpListener  {      public class TestHttpListener      {          public bool KeepGoing = true;          public void Start(int Port)          {              Thread listenerThread = new Thread(async () => { await SimpleListenerExample(Port); });              listenerThread.Start();          }            public void Stop()          {              KeepGoing = false;          }            public async Task SimpleListenerExample(int Port)          {              // Create a listener.              HttpListener listener = new HttpListener();              // Add the prefixes.              listener.Prefixes.Add(""http://localhost:"" + Port + ""/"");                listener.Start();              Console.WriteLine(""Listening..."");                while (KeepGoing)              {                  // Note: The GetContext method blocks while waiting for a request.                  HttpListenerContext context = await listener.GetContextAsync();                  HttpListenerRequest request = context.Request;                  // Obtain a response object.                  HttpListenerResponse response = context.Response;                    // Construct a response.                  string responseString = ""<HTML><BODY> Hello world!</BODY></HTML>"";                  byte[] buffer = System.Text.Encoding.UTF8.GetBytes(responseString);                  // Get a response stream and write the response to it.                  response.ContentLength64 = buffer.Length;                  System.IO.Stream output = response.OutputStream;                  output.Write(buffer,0,buffer.Length);                  // You must close the output stream.                  output.Close();              }                listener.Stop();          }      }  }    ```  I've also tried this with `listener.Close()`    And the file I'm using to verify this behavior is:  ```c#  using System;  using System.Net.Http;  using System.Threading.Tasks;    namespace TestHttpListener  {      class Program      {          private static readonly HttpClient client = new HttpClient();          static void Main(string[] args)          {              Run().Wait();          }            static async Task Run()          {              var app = new TestHttpListener();              app.Start(8081);              await Task.Delay(TimeSpan.FromSeconds(2));              var response = await client.GetAsync(""http://localhost:8081"");              app.Stop();              // need second GetAsync becuase HttpListener GetContextAsync does not take a cancellation token              response = await client.GetAsync(""http://localhost:8081"");              await Task.Delay(TimeSpan.FromSeconds(2));              app.Start(8081);              Console.ReadLine();          }      }  }  ```    I noticed there was [this issue](https://github.com/dotnet/corefx/issues/24562) with ""Address already in use"" issues but it seemed unrelated to HttpListener class so I opened this.    This is using the .NET Command Line Tools - 2.0.0  macOS - v10.12.6 (16G29) aka Sierra    Please let me know if there's any additional info I can provide."
25018	area-Meta	System.Json: JsonArray does not handle null consistently	"Inconsistent handling of `null` array members:    This works as expected:     ```C#      var a = new JsonArray(new JsonValue[] { ""abc"", 123, null }); // Note 3rd item is null    ```  This alternative pattern `throws` inside `Add` due to an explicit `null` guard:    ```C#    var b = new JsonArray(new JsonValue[] { ""abc"", 123 }); b.Add(null); // ArgumentNullException    new JsonArray().Add(null); // Minimum repro    ```  I see that the units support this behavior, but it seems to be an inconsistent design.   Adding a `null` member to an array should be acceptable?    _See original issue summary [here](https://github.com/dotnet/corefx/issues/25005), @karelz suggested I submit separately_  "
25019	area-Meta	System.Json: JsonPrimitive.JsonType returns incorrect value	 `JsonType` derivation on `JsonPrimitive` seems faulty:  ```C#     var p = new JsonPrimitive(Guid.NewGuid()); // Guid     var t = p.JsonType; // Expected: JsonType.String. Actual: JsonType.Number  ```    I am fairly certain that `Guid` should not return `JsonType == Number`    This case does not appear to be covered by any units, so it may be that the issue was never picked up.    The nested conditionals here may be iffy: [JsonPrimitive.cs](https://github.com/dotnet/corefx/blob/master/src/System.Json/src/System/Json/JsonPrimitive.cs#L118-L120))    ```C#    public override JsonType JsonType =>      _value == null || _value.GetType() == typeof(char) || _value.GetType() == typeof(string)      || _value.GetType() == typeof(DateTime)       || _value.GetType() == typeof(object)      ? JsonType.String // DateTimeOffset || Guid || TimeSpan || Uri // <=========      : _value.GetType() == typeof(bool)       ? JsonType.Boolean :      JsonType.Number;  ```    _See original issue summary [here](https://github.com/dotnet/corefx/issues/25005), @karelz suggested I submit separately_  
25020	area-Meta	System.Json: JsonPrimitive.ToString() throws unexpectedly	"The following throws; I would expect to return the `Guid` in `string` form. Note that this is _not_ one of the expected errors that are explicitly `thrown` for some types (see notes on stack trace).    I see that the units support this behavior, but it seems to be an inconsistent design.    ```C#    var p = new JsonPrimitive(Guid.NewGuid());    var t = p.JsonType;    var s = p.ToString(); // FormatException      // Note that GetFormattedString explicitly throws for some types    // But that's not happening here, since it's making it all the way to Guid.ToString()    System.FormatException      Message=Format String can be only ""D"", ""d"", ""N"", ""n"", ""P"", ""p"", ""B"", ""b"", ""X"" or ""x"".      Source=System.Private.CoreLib      StackTrace:       at System.Guid.ToString(String format, IFormatProvider provider)       at System.Json.JsonPrimitive.GetFormattedString()       at System.Json.JsonValue.SaveInternal(TextWriter w)       at System.Json.JsonValue.ToString()  ```    _See original issue summary [here](https://github.com/dotnet/corefx/issues/25005), @karelz suggested I submit separately_"
25021	area-Meta	System.Json: JsonValue.Equals() is expensive	"Comparing two `JsonValue` instances for equality is a common operation. The current idiom is expensive compared to the alternatives. The provided prototype shows a micro-bench result of **2-3x** improvement.    # Rationale and Usage  The straight-forward way to compare two `JsonValue` instances is to `ToString()` them both and then use a `StringComparer.Ordinal` comparer. But this is unnecessarily expensive considering the number of internal `string` allocs that need to happen internally while walking the tree.     ```C#  var json1 = new JsonObject(...);  var json2 = new JsonObject(...);    // Current idiom for equality  var str1 = json1.ToString(); // Many internal string allocs  var str2 = json2.ToString();  var equal = StringComparer.Ordinal.Equals(str1, str2);    // Proposed method  var equal = JsonValueComparer.Strict.Equals(json1, json2);  ```    An alternatively approach is to migrate to `Newtonsoft.Linq.JValue` which has similar semantics and performs adequately.    # Proposed API  ```C#  public abstract class JsonValueComparer : IEqualityComparer<JsonValue>  {      /// <summary>      /// Gets a <see cref=""JsonValueComparer""/> that compares all fields of a <see cref=""JsonValue""/>      /// value in a strict manner (ordinal string comparisons, deterministic ordering of members).      /// </summary>      public static JsonValueComparer Strict { get; } = new JsonStrictComparer();        protected JsonValueComparer()      { }        /// <summary>      /// Determines whether the specified objects are equal.      /// </summary>      /// <param name=""x"">The first object to compare.</param>      /// <param name=""y"">The second object to compare.</param>      /// <returns>      /// true if the specified objects are equal; otherwise, false.      /// </returns>      public abstract bool Equals(JsonValue x, JsonValue y);        /// <summary>      /// Returns a hash code for this instance.      /// </summary>      /// <param name=""obj"">The object.</param>      /// <returns>      /// A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.      /// </returns>      public abstract int GetHashCode(JsonValue obj);        private sealed class JsonStrictComparer : JsonValueComparer      {...}  }  ```    # Details  A less expensive way would be to walk the internal tree and directly compare each individual member directly, without converting to a `string`.  Ideally this requires the introduction of a new `JsonValueComparer` class, similar to this prototype: [JsonValueComparer.cs](https://github.com/k2workflow/Clay/blob/master/src/SourceCode.Clay.Json/JsonValueComparer.cs)  We'd need to decide on comparison semantics.   For example the `Strict` comparer enforces ordinal string rules and co-located members. Perhaps there are other comparers.    # Open Questions  * Since `JsonValue` is `abstract`, end users may have inherited from it. Not sure how to handle equality in those cases, perhaps just using a traditional `object.Equals` check as the final fallback?  * Do we need other comparers that (say) allow different orderings of members.    # Pull Request  I am happy to PR myself, given a finalized design.    # Benchmarks  _Per recommendation from @danmosemsft, included `Newtonsoft` in benchmark_    [Benchmark](https://github.com/k2workflow/Clay/blob/master/src/SourceCode.Clay.Json.Bench/JsonEqualsBench.cs) (**2-3x improvement in both time & memory**)  ```C#             Method |      Mean |     Error |    StdDev | Scaled |    Gen 0 |    Gen 1 |   Gen 2 | Allocated |  ----------------- |----------:|----------:|----------:|-------:|---------:|---------:|--------:|----------:|     ToStringEquals | 13.818 ms | 0.3012 ms | 0.3347 ms |   1.00 | 808.4677 | 435.9879 | 89.7177 | 6267582 B |   NewtonDeepEquals |  3.028 ms | 0.0657 ms | 0.1854 ms |   0.22 |        - |        - |       - |       0 B |         JsonEquals |  5.940 ms | 0.1109 ms | 0.1187 ms |   0.43 | 531.2500 |        - |       - | 2258560 B |  ```      _[See original issue summary [here](https://github.com/dotnet/corefx/issues/25005), @karelz suggested I submit separately]_"
25022	area-Meta	System.Json: Clone() is expensive	Cloning a `JsonValue` instance is expensive compared to the alternatives.   Add new `Clone` method to `JsonValue` that operates efficiently in terms of memory/GC.   The provided prototype shows a micro-bench result of **2-3x** improvement.     # Rationale and Usage  There is no existing `Clone` method on `JsonValue`, but it's not an uncommon operation. The workaround is to roundtrip the value via `ToString` and `Parse`. But this is unnecessarily expensive considering the number of `string` allocs that need to happen on the way out and expensive, redundant parsing on the way back in.    ```C#  var json = new JsonObject(...);    // Current idiom for cloning  var str = JsonValue.ToString(); // Lots of string allocs  var clone = (JsonObject)JsonValue.Parse(str); // Wasteful parsing    // Proposed method  var clone = (JsonObject)json.Clone();  ```    An alternatively approach is to migrate to `Newtonsoft.Linq.JValue` which has similar semantics, and though it's heavier in terms of memory (and api surface) it performs adequately.    # Proposed API  ```C#  public class JsonValue : ICloneable // See open questions  {    // Existing interface unchanged          // New method    public JsonValue Clone(this JsonValue json)     { ... }  }  ```    # Details  This requires the introduction of a new `Clone` method on `JsonValue`, similar to this prototype: [JsonClone.cs](https://github.com/k2workflow/Clay/blob/master/src/SourceCode.Clay.Json/JsonExtensions.cs#L306-L444).   This code walks the internal tree and clones each node explicitly.   (Unfortunately even it isn't as memory-efficient as it could be, since the `internal SortedDictionary` does not expose an `initialCapacity` parameter in order to pre-allocate an exact-sized map.)    # Open Questions  * Should we implement `Clone` directly or utilize `ICloneable.Clone`. If the former, the return type would be polymorphic over `JsonValue` which means it's more strongly-typed than the latter, which would of course return `object`.  * Since JsonValue is abstract, end users may have inherited from it. Not sure how to handle equality in those cases, perhaps just using a traditional object.Equals check as the final fallback?    # Pull Request  I am happy to PR myself, given the go-ahead.    # Benchmarks  _Per recommendation from @danmosemsft, included `Newtonsoft` in benchmark_    [Benchmark](https://github.com/k2workflow/Clay/blob/master/src/SourceCode.Clay.Json.Bench/JsonCloneBench.cs) (**2-3x improvement in both time & memory**)  ```           Method |     Mean |     Error |    StdDev | Scaled | ScaledSD |     Gen 0 |    Gen 1 |   Gen 2 | Allocated |  --------------- |---------:|----------:|----------:|-------:|---------:|----------:|---------:|--------:|----------:|    ToStringClone | 29.21 ms | 0.5792 ms | 0.5948 ms |   1.00 |     0.00 | 1562.5000 | 812.5000 | 62.5000 |   9.92 MB |  NewtonDeepClone | 19.16 ms | 0.3727 ms | 0.5101 ms |   0.66 |     0.02 | 1218.7500 | 562.5000 | 62.5000 |   7.02 MB |       SmartClone | 10.14 ms | 0.1964 ms | 0.4311 ms |   0.35 |     0.02 |  671.8750 | 312.5000 |       - |   3.94 MB |  ```  
25023	area-System.Collections	System.Collections: Dictionary.Empty<K, V>()	"Concrete implementations of `IDictionary<K, V>` and `IReadOnlyDictionary<K, V>` do not provide `Empty` singletons, per those for `Array.Empty` and `Enumerable.Empty`.   This proposal would permit the same idiom to be available for `Dictionary`.    # Rationale and Usage    This is a nice-to-have, but helps in environments where resources are constrained. The current idiom is to create a `new Dictionary<K, V>(0)` but that incurs not-insignificant private state, and the semantics of 'immutably empty' are different to those for 'empty but not populated yet'.     There are several data structures that build up maps of maps, for example `System.Json`. In scenarios where datasets are large, the cost and semantics of `pseudo-empty` add up.    For scenarios where we have lists instead of maps, we already use `Array.Empty<T>` or `Enumerable.Empty<T>`. It would be consistent to provide the same facility for maps.    ```C#      var empty = Dictionary.Empty<string, Foo>();       empty.Count; // 0      empty.IsReadOnly; // true      empty[""hi""]; // KeyNotFound or InvalidOperation (?)      empty.Add(...); // InvalidOperation      Keys; // Array.Empty<K>  ```    # Proposed API  ```C#      public static class Dictionary // See open questions      {          /// <summary>          /// Returns an empty dictionary that is immutable.          /// </summary>          /// <typeparam name=""TKey"">The type of keys in the dictionary.</typeparam>          /// <typeparam name=""TValue"">The type of values in the dictionary.</typeparam>          /// <returns>Returns an empty <see cref=""IDictionary{TKey, TValue}"".</returns>          public static IDictionary<TKey, TValue> Empty<TKey, TValue>() => <singleton impl>;      }        public static class ReadOnlyDictionary      {          /// <summary>          /// Returns an empty dictionary that is immutable.          /// </summary>          /// <typeparam name=""TKey"">The type of keys in the dictionary.</typeparam>          /// <typeparam name=""TValue"">The type of values in the dictionary.</typeparam>          /// <returns>Returns an empty <see cref=""IReadOnlyDictionary{TKey, TValue}"".</returns>          public static IReadOnlyDictionary<TKey, TValue> ReadOnlyEmpty<TKey, TValue>() => <singleton impl>;      }  ```    # Details  The singletons would return sensible defaults where possible for getters, though indexers would need to throw. Since `IsReadOnly==true`, mutators should throw too.   All errors should align with those used when a traditional `Dictionary` has 'IsReadOnly=true`.      # Open Questions  * I am not sure what namespace & class name to use, since the chance of conflict (in user code) is high if we used `public static class Dictionary` to host the `Empty` singleton. Ditto for `ReadOnlyDictionary`.  * I initially thought that the immutable nature of `Dictionary.Empty` might surprise or confuse users, but if we set `IsReadOnly=true` then it should cause less friction. `ReadOnlyDictionary.Empty` is already expected to be immutable, so it should not have the same problem.  * Not sure exactly what errors to throw in the indexers and mutators. See previous bullet.    Prototype comprises 3 classes; [ReadOnlyDictionary class](https://github.com/k2workflow/Clay/blob/master/src/SourceCode.Clay.Collections/Generic/ReadOnlyDictionary.cs), [Dictionary class](https://github.com/k2workflow/Clay/blob/master/src/SourceCode.Clay.Collections/Generic/Dictionary.cs) and [Singleton implementation](https://github.com/k2workflow/Clay/blob/master/src/SourceCode.Clay.Collections/Generic/EmptyDictionaryImpl.cs).     # Pull Request  I am happy to contribute the PR, when/if we gain consensus    # Updates      Happy to PR, but would especially need guidance on namespace, naming, decision on immutability.  "
25024	area-System.Memory	System.Memory doesn't work on UWP	"Create a new blank UWP app.  Ensure you set Target version and Min Version to ""Windows 10 Fall Creators Update (10.0; Build 16299)""  Add System.Memory Version=""4.5.0-preview1-25831-01"" nuget package.    Write some code  ```  Span<int> foo = new int[5];  ```  Build.    This doesn't compile, saying there is no ""Span"" type.    Now add a reference to the latest UWP package:    ```      <PackageReference Include=""Microsoft.NETCore.UniversalWindowsPlatform"">        <Version>6.1.0-preview1-25902-01</Version>      </PackageReference>  ```    which has the ref type for Span.    Build.    You get an error:    ```  Payload contains two or more files with the same destination path 'System.Memory.dll'. Source files: C:\Users\eerhardt\.nuget\packages\runtime.win10-x64.microsoft.netcore.universalwindowsplatform\6.1.0-preview1-25902-01\runtimes\win10-x64\lib\uap10.0.15138\System.Memory.dllC:\Users\eerhardt\.nuget\packages\system.memory\4.5.0-preview1-25831-01\runtimes\win\lib\uap10.0.15138\System.Memory.dll  ```    /cc @ahsonkhan @KrzysztofCwalina "
25025	area-System.Net	Networking - SocketsHttpHandler Epic	
25026	area-System.Threading	[suggestion] add api to read/write multiple values from System.Threading.Channels	right now im using buffered channel and the overhead of locking is currently limiting throughput. i limit the buffer to 10000 items and most of the time the buffer is full so i i guess i could read more than one item at a time to improve. 
25027	area-System.Xml	Some Xml tests projects do not run tests with /t:BuildAndTest	"Issue found here: https://github.com/dotnet/corefx/issues/16646#issuecomment-341535914  I have confirmed this on my box and found that the issue is that many tests folders are missing Configuration.props    cc: @WinCPP    I'll send PR with the fix shortly. @WinCPP to unblock yourself you can add Configuration.props next to the csproj with content    ```  <?xml version=""1.0"" encoding=""utf-8""?>  <Project ToolsVersion=""14.0"" DefaultTargets=""Build"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">    <PropertyGroup>      <BuildConfigurations>        netstandard;      </BuildConfigurations>    </PropertyGroup>  </Project>  ```"
25029	area-System.Diagnostics	System.Diagnostics.Tracing.Tests: BasicEventSourceTests.TestEventCounter: Test_Write_Metric_EventListener	"Failed on Ubuntu 16.04.    `Unhandled Exception of Type BasicEventSourceTests.EventTestHarness+EventTestHarnessException`    https://mc.dot.net/#/user/krwq/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/12f35b6c1d977d376e10916e883c49c8ffa8fbc4/workItem/System.Diagnostics.Tracing.Tests/analysis/xunit/BasicEventSourceTests.TestEventCounter~2FTest_Write_Metric_EventListener    <details>  <summary>Log</summary    ```  BasicEventSourceTests.EventTestHarness+EventTestHarnessException : Error Detected in EventTestHarness.RunTest  FAILURE IN SUBTEST: \""EventCounter: Log multiple events in multiple periods\""  ************* EXCEPTION INFO ***************  Xunit.Sdk.TrueException: FAILURE: 12.80718 < 2  Expected: True  Actual:   False     at Xunit.Assert.True(Nullable`1 condition, String userMessage)     at BasicEventSourceTests.TestEventCounter.<>c__DisplayClass2_2.<Test_Write_Metric>b__7(List`1 evts) in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/src/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestEventCounter.cs:line 228     at BasicEventSourceTests.EventTestHarness.<>c__DisplayClass2_0.<RunTests>b__0(Event data) in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/src/System.Diagnostics.Tracing/tests/BasicEventSourceTest/Harness/EventTestHarness.cs:line 77     at System.Diagnostics.Tracing.EventSource.DispatchToAllListeners(Int32 eventId, Guid* childActivityID, EventWrittenEventArgs eventCallbackArgs) in /root/coreclr/src/mscorlib/shared/System/Diagnostics/Tracing/EventSource.cs:line 2271  *********** END EXCEPTION INFO *************  ************* LOGGING MESSAGES ***************  35:04.544 : STARTING Sub-Test EventCounter: Log multiple events in multiple periods  35:04.545 : Sending command MyEventSource to EventSource Enable Options <Options Keywords='ffffffffffffffff' Level'Verbose' ArgsCount='1'  35:04.545 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:1E-06})  35:04.545 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:1E-06})  35:04.646 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1006436})  35:04.646 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1006436})  35:04.646 : Tick  35:04.744 : Tick  35:04.744 : Received Event MyEventSource/EventCounters({Name:Request,Mean:1,StandardDeviation:0,Count:1,Min:1,Max:1,IntervalSec:0.0977184})  35:04.744 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.0977184})  35:04.844 : Tick  35:04.844 : Received Event MyEventSource/EventCounters({Name:Request,Mean:2,StandardDeviation:0,Count:1,Min:2,Max:2,IntervalSec:0.1002754})  35:04.844 : Received Event MyEventSource/EventCounters({Name:Error,Mean:1,StandardDeviation:0,Count:1,Min:1,Max:1,IntervalSec:0.1002754})  35:12.417 : Tick  35:12.417 : Received Event MyEventSource/EventCounters({Name:Request,Mean:6,StandardDeviation:2,Count:2,Min:4,Max:8,IntervalSec:7.572985})  35:12.417 : Received Event MyEventSource/EventCounters({Name:Error,Mean:1,StandardDeviation:0,Count:1,Min:1,Max:1,IntervalSec:7.572985})  35:05.044 : Tick  35:05.044 : Received Event MyEventSource/EventCounters({Name:Request,Mean:16,StandardDeviation:0,Count:1,Min:16,Max:16,IntervalSec:-7.373084})  35:05.044 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:-7.373084})  35:05.145 : Tick  35:05.145 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1011484})  35:05.145 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1011484})  35:05.245 : Tick  35:05.245 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002009})  35:05.245 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002009})  35:05.341 : Tick  35:05.342 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.0961988})  35:05.342 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.0961988})  35:05.442 : Tick  35:05.442 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002006})  35:05.442 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002006})  35:05.542 : Tick  35:05.542 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002689})  35:05.542 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002689})  35:05.642 : Tick  35:05.642 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002006})  35:05.642 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002006})  35:05.742 : Tick  35:05.742 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001882})  35:05.742 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001882})  35:05.843 : Tick  35:05.843 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002072})  35:05.843 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002072})  35:05.943 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002359})  35:05.943 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002359})  35:05.943 : Tick  35:06.043 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001861})  35:06.043 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001861})  35:06.043 : Tick  35:06.143 : Tick  35:06.143 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.10023})  35:06.143 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.10023})  35:06.243 : Tick  35:06.243 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002741})  35:06.244 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002741})  35:06.344 : 35:06.344 : Tick  Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001985})  35:06.344 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001985})  35:06.444 : Tick  35:06.444 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001943})  35:06.444 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001943})  35:06.544 : Tick  35:06.544 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002554})  35:06.544 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002554})  35:06.644 : Tick  35:06.644 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001697})  35:06.644 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001697})  35:06.744 : Tick  35:06.744 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001996})  35:06.745 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001996})  35:06.845 : Tick  35:06.845 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001964})  35:06.845 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001964})  35:06.945 : Tick  35:06.945 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002522})  35:06.945 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002522})  35:07.041 : Tick  35:07.041 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.0961904})  35:07.041 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.0961904})  35:07.141 : Tick  35:07.141 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002233})  35:07.141 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002233})  35:07.242 : Tick  35:07.242 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001743})  35:07.242 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001743})  35:07.342 : Tick  35:07.342 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001687})  35:07.342 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001687})  35:07.442 : Tick  35:07.442 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001594})  35:07.442 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001594})  35:07.542 : Tick  35:07.542 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.100151})  35:07.542 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.100151})  35:07.642 : Tick  35:07.642 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.100154})  35:07.642 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.100154})  35:07.742 : Tick  35:07.742 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001557})  35:07.742 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001557})  35:07.842 : Tick  35:07.843 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001545})  35:07.843 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001545})  35:07.943 : Tick  35:07.943 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001534})  35:07.943 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001534})  35:08.043 : Tick  35:08.043 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001488})  35:08.043 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001488})  35:08.143 : Tick  35:08.143 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001554})  35:08.143 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001554})  35:08.243 : Tick  35:08.243 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001545})  35:08.243 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001545})  35:08.343 : Tick  35:08.343 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001576})  35:08.343 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001576})  35:08.443 : Tick  35:08.443 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001515})  35:08.443 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001515})  35:08.544 : Tick  35:08.544 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001516})  35:08.544 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001516})  35:08.644 : Tick  35:08.644 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001572})  35:08.644 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001572})  35:08.745 : Tick  35:08.745 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1013167})  35:08.745 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1013167})  35:08.845 : 35:08.845 : Tick  Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002308})  35:08.845 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002308})  35:08.942 : 35:08.942 : Tick  Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.0962678})  35:08.942 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.0962678})  35:09.042 : Tick  35:09.042 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002529})  35:09.042 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002529})  35:09.142 : Tick  35:09.142 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002762})  35:09.142 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002762})  35:09.242 : Tick  35:09.242 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.100278})  35:09.242 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.100278})  35:09.343 : Tick  35:09.343 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.100288})  35:09.343 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.100288})  35:09.443 : Tick  35:09.443 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001785})  35:09.443 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001785})  35:09.543 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001921})  35:09.543 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1001921})  35:09.543 : Tick  35:09.643 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002047})  35:09.643 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002047})  35:09.643 : Tick  35:09.743 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002076})  35:09.743 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002076})  35:09.743 : Tick  35:09.844 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002079})  35:09.844 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:0.1002079})  35:09.844 : Tick  35:17.352 : Sending command MyEventSource to EventSource Enable Options <Options Keywords='ffffffffffffffff' Level'Verbose' ArgsCount='1'  35:17.353 : Received Event MyEventSource/EventCounters({Name:Request,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:7.508971})  35:17.353 : Received Event MyEventSource/EventCounters({Name:Error,Mean:0,StandardDeviation:0,Count:0,Min:8,Max:-8,IntervalSec:7.508971})  35:17.358 : Validating: Count=110 RequestSum=31.000 TimeSum=12.807   35:17.360 : Exception thrown: FAILURE: 12.80718 < 2  Expected: True  Actual:   False    *********** END LOGGING MESSAGES *************  Version of Runtime 4.0.30319.42000  Version of OS Unix 4.4.0.47  **********************************************    ---- FAILURE: 12.80718 < 2  Expected: True  Actual:   False  ```  </details>    <details>  <summary>Stack trace</summary>    ```     at BasicEventSourceTests.EventTestHarness.RunTests(List`1 tests, Listener listener, EventSource source, FilteringOptions options) in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/src/System.Diagnostics.Tracing/tests/BasicEventSourceTest/Harness/EventTestHarness.cs:line 167     at BasicEventSourceTests.TestEventCounter.Test_Write_Metric(Listener listener) in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/src/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestEventCounter.cs:line 275     at BasicEventSourceTests.TestEventCounter.Test_Write_Metric_EventListener() in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/src/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestEventCounter.cs:line 59  ----- Inner Stack Trace -----     at BasicEventSourceTests.TestEventCounter.<>c__DisplayClass2_2.<Test_Write_Metric>b__7(List`1 evts) in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/src/System.Diagnostics.Tracing/tests/BasicEventSourceTest/TestEventCounter.cs:line 228     at BasicEventSourceTests.EventTestHarness.<>c__DisplayClass2_0.<RunTests>b__0(Event data) in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/src/System.Diagnostics.Tracing/tests/BasicEventSourceTest/Harness/EventTestHarness.cs:line 77     at System.Diagnostics.Tracing.EventSource.DispatchToAllListeners(Int32 eventId, Guid* childActivityID, EventWrittenEventArgs eventCallbackArgs) in /root/coreclr/src/mscorlib/shared/System/Diagnostics/Tracing/EventSource.cs:line 2271  ```  </details>"
25032	area-Meta	Start switching System.Native from C++ to C	Motivation: Sharing code between .NET Core and Mono.
25033	area-System.Net	"Test: System.Net.Security.Tests.SslStreamAlpnTests/SslStream_StreamToStream_Alpn_Success failed with ""Xunit.Sdk.EqualException"""	Opened on behalf of @Jiayili1  The test `System.Net.Security.Tests.SslStreamAlpnTests/SslStream_StreamToStream_Alpn_Success(clientProtocols: [http/1.1, h2], serverProtocols: [h2], expected: h2)` has failed.  Assert.Equal() Failure     Expected: h2     Actual:   (null)          Stack Trace:             at System.Net.Security.Tests.SslStreamAlpnTests.SslStream_StreamToStream_Alpn_Success(List`1 clientProtocols, List`1 serverProtocols, SslApplicationProtocol expected) in /root/corefx-1108295/src/System.Net.Security/tests/FunctionalTests/SslStreamAlpnTests.cs:line 113 Build : Master - 20171103.01 (Core Tests) Failing configurations: - RedHat.69.Amd64-x64   - Debug   - Release  Detail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171103.01/workItem/System.Net.Security.Tests/analysis/xunit/System.Net.Security.Tests.SslStreamAlpnTests~2FSslStream_StreamToStream_Alpn_Success(clientProtocols:%20%5Bhttp~2F1.1,%20h2%5D,%20serverProtocols:%20%5Bh2%5D,%20expected:%20h2)
25034	area-Meta	Please support a modern very high performance version of System.IO.Log	I'm looking for an very high performance version Algorithms for Recovery and Isolation Exploiting Semantics (ARIES) like .net standard/core namspace.  It does not need to be exactly ARIES but would need to be sufficent to be the start of a number of different data oriented projects that choose .NET.  I would use this and I think others would use this to start a new eco system of databases, no sql, messaging, streaming and data oriented .NET core open source projects.
25036	area-System.Console	Implement an async version of the blocking System.Console.ReadKey	In the PowerShell extension for Visual Studio Code, we have an async REPL loop where we'd love to be able to `await Console.ReadKeyAsync()` rather than blocking on `Console.ReadKey()`.       The current implementation is problematic because we need cancellation support.  We have tried to work around the blocking ReadKey() call by using KeyAvailable() but there is a known issue with KeyAvailable() causing the characters to be echo'd to the screen on Linux which is not desirable when you're asking for a user's password.
25037	area-System.IO	System.IO.MemoryMappedFiles.Tests.CrossProcessTests.DataShared failed in CI	Failed test: System.IO.MemoryMappedFiles.Tests.CrossProcessTests.DataShared    Configuration: osx10.12_release    Detail: https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_release/3498/testReport/System.IO.MemoryMappedFiles.Tests/CrossProcessTests/DataShared/    MESSAGE:  ~~~  Exit code was 131 but it should have been 42\nExpected: True\nActual: False  ~~~  STACK TRACE:  ~~~  at System.Diagnostics.RemoteExecutorTestBase.RemoteInvokeHandle.Dispose() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_release/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 203   at System.IO.MemoryMappedFiles.Tests.CrossProcessTests.DataShared() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_release/src/System.IO.MemoryMappedFiles/tests/MemoryMappedFile.CrossProcess.cs:line 33  ~~~
25039	area-Infrastructure	Add validation of contract/implementation consistency for readonly structs, parameters and returns	readonliness is part of the contract. We need to add validation for this to our contract tooling to ensure consistency between reference assembly and implementation.    From @weshaggard : It should be easy enough to add for anyone that wants to verify it. The code lives in Microsoft.Cci.Extensions in Buildtools.    https://github.com/dotnet/coreclr/pull/14789#issuecomment-341579931
25040	area-System.Net	Implement portable support for TCP_KEEPCNT, TCP_KEEPIDLE and TCP_KEEPINTVL socket options	Allow for configuring TCP Keepalive in a portable manner.    # Rationale    TCP Keepalive is an optional feature of TCP that is implemented in most widely used OSes and the feature can already be enabled in .NET by using `SocketOptionName.KeepAlive`.  However, it is not possible, as of now, to set the various keepalive options using a standard .NET API.    Most platforms, more than simply allowing TCP keepalive, provide a subset of the following three options:   * Keepalive Time   * Keepalive Interval   * Keepalive Retry Count    Since Windows 2000, it has been possible to set both Keepalive Time and Keepalive Interval by using `SIO_KEEPALIVE_VALS` with Winsock IOCTL (Exposed via `Socket.IOControl` and `IOControlCode.KeepAliveValues` in .NET)  Under Linux, TCP Keepalive can be configured with `setsockopt` under the `SOL_TCP` level. The allowed parameters are `TCP_KEEPCNT`, `TCP_KEEPIDLE` and `TCP_KEEPINTVL`.    It seems OSX also has some good support for the feature since OSX Lion, only using slightly different names than Linux:  https://lists.apple.com/archives/macnetworkprog/2012/Jul/msg00005.html    From the docs, since Windows 10 version 1703 and 1709, settings that are code-compatible with Linux and OSX were introduced:  https://msdn.microsoft.com/en-us/library/windows/desktop/ms738596(v=vs.85).aspx    As explained in https://github.com/dotnet/corefx/issues/14237, it is impossible today to configure TCP keepalive on platforms other than Windows, where `Socket.IOControl` can do the trick.    # Proposed API    ```csharp  enum SocketOptionName  {  //   #region SocketOptionLevel.Tcp  //   // TCP KeepAlive options   TcpKeepAliveRetryCount = 16, // TCP_KEEPCNT value from Ws2ipdef.h   TcpKeepAliveTime = 3, // TCP_KEEPIDLE = TCP_KEEPALIVE value from Ws2ipdef.h   TcpKeepAliveInterval = 17, // TCP_KEEPINTVL value from Ws2ipdef.h   #endregion  //  }  ```    # Example    ```csharp  void EnableKeepAlive(Socket socket, byte retryCount, int keepAliveTimeInSeconds, int keepAliveIntervalInSeconds)  {   socket.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);   socket.SetSocketOption(SocketOptionLevel.Tcp, SocketOptionName.TcpKeepAliveRetryCount, (int)retryCount);   socket.SetSocketOption(SocketOptionLevel.Tcp, SocketOptionName.TcpKeepAliveTime, keepAliveTimeInSeconds);   socket.SetSocketOption(SocketOptionLevel.Tcp, SocketOptionName.TcpKeepAliveInterval, keepAliveIntervalInSeconds);  }  ```    # Details    The PAL for each supported platform would translate the call to `Socket.SetSocketOption(SocketOptionLevel.Tcp, SocketOptionName.TcpKeepAlive*, *)` into the appropriate call for the platform.  * On Linux, and OSX = 10.7, .NET enumeration values would be translated to corresponding system values for `setsockopt()`.  * On Windows 10 version 1709 and newer, the flags would be transferred as-is to the underlying Winsock API, as they already are today.  * Ideally, `TcpKeepAliveTime` and `TcpKeepAliveInterval` would be marshalled to `socket.IOControl(IOControlCode.KeepAliveValues, KeepAliveValues, null)` for previous versions of windows, while `TcpKeepAliveRetryCount` would be simply ignored.    ?? Beware that commonly used socket option names `TCP_KEEPIDLE` (or `TCP_KEEPALIVE`) and `TCP_KEEPINTVL` are expressed in seconds, while `SIO_KEEPALIVE_VALS` expresses durations in milliseconds.    # Questions    The TCP keepalive feature being optional, it is not required that all platforms support it or provide any specific way of configuring the feature.   * Should a call to a non supported TCP keepalive option throw an exception ?   * How should a caller determine if a given option is indeed supported on the current platform ?   * Should an additional socket property, similar to `Socket.LingerState` be also added (e.g. `KeepAliveState` of type `KeepAliveOption`), in order to group the various options and handle everything at one place ?     * The feature could be used with something like `socket.KeepAliveState = new KeepAliveOption(true, 15, 7200, 1)`     * This would also be more consistent with the way the feature is configured on legacy Windows system.  
25041	area-Microsoft.CSharp	Remove some redundances from Microsoft.CSharp	* Remove dead path from `CheckAccessCore`.    If `aggWhere` was null we return, otherwise last for must happen at least once. Within that if `atsThru` is null we return, therefore later path for `atsThru` being null cannot be hit.    * Remove dead test from `TryReportLvalueFailure`    If `!isNested` we are on the first loop so if `pObject != null` and `!(expr is ExprField)` then we know statically that `expr is ExprProperty` as only paths for it being `ExprField` or `ExprProperty` set `pObject`, so remove redundant test.    * Remove parameter from `bindFloatOp` that is always overwritten.    * Remove parameter from `LScalar` that is always overwritten.    * Reduce duplication in `BindIncOpCore`.    * Remove some unused assignments.
25042	area-Microsoft.CSharp	MS.CSharp: Remove checks for locals as possible source of lvalue errors.	Demonstrable as unreachable two ways:    Firstly it is impossible to represent the sort of expression that cause CS1604 or CS1605 in dynamic code.    Secondly as `ExprLocal` have Flags set to `EXPRFLAG.EXF_LVALUE` and that flag never removed, the paths for `expr.isLvalue` within both `checkLvalue` and `TryReportLvalueFailure` (just before it loops) will mean an `ExprLocal` is never examined within `TryReportLvalueFailure`, and so `ReportLocalError` can never be called.    Entails removal of `ERR_RefReadonlyLocal` and `ERR_AssgReadonlyLocal`, contributes to #22470    Edit: Building on that:    * Remove `CheckLvalueKind.OutParameter`    Tested for, but never passed as a value.    Entails removal of `ERR_RefReadonlyLocalCause`, `ERR_RefProperty`, `ERR_RefLvalueExpected`, `ERR_RefReadonly`, `ERR_RefReadonlyStatic`, `ERR_RefReadonly2` & `ERR_RefReadonlyStatic2`. Contributes to #22470    * Tidy up ReportReadOnlyError    Remove no-longer-used `CheckLvalueKind` parameter. Store `field.FieldWithType` in local rather than calling twice. Since the index value lookup is not as useful with fewer possibilities, just pick the values to use in branches within the method.
25046	area-Infrastructure	Port back improvements made to PlatformDetection related to version detection	Changes: https://github.com/dotnet/corefx/pull/24340/files  This is already in PR: https://github.com/dotnet/corefx/pull/24531  
25047	area-Meta	Release/2.0.0 - Make corefx exceptions serializable and add typeforwards	Related https://github.com/dotnet/corefx/issues/24424    The cleanup code commit is need as otherwise the code would have diverged too much and cherry-picking would have been too bothersome.
25050	area-System.Net	How to use System.Net.Http 4.3.3 with .NET 4.6.0	  Two questions:    1. How can I ***force*** framework 4.6.0 to use System.Net.Http from the Reference package?  2. (if binding redirect is the only way) how can I add binding redirect in new csproj format?
25052	area-System.Net	Cleanup Windows 10 version detection	"Windows 10 Version 1709 (""Fall Creators Update"") has been released. This  PR cleans up the version detection to use the latest RTM build numbers  and removes obsolete InsiderPreview detection for those tests.    Also, removed ActiveIssue for tests that are now fixed due to Windows 10  fixes.    Fixes #22187"
25054	area-System.Xml	Add xunit trait to xslt tests depending on xsltc.exe	Fixes: https://github.com/dotnet/corefx/issues/25053  Unblocks: https://github.com/dotnet/coreclr/issues/14810
25056	area-System.Diagnostics	Process.WaitForExit should validate the range of its input	`Process.WaitForExit(int)` does not validate its parameter `milliseconds`, but passes it on:    https://github.com/dotnet/corefx/blob/1100d8faa87656f447bfe8944686d13e7b3af5e9/src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs#L1287-L1295    On Windows, it's then passed onto `WaitHandle.WaitOne(int)`:    https://github.com/dotnet/corefx/blob/1fc008a7e174345826e658672b74aa449fb3573f/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Windows.cs#L144-L156    This means that if the value of the parameter is invalid value for `WaitOne()`:    * The thrown `System.ArgumentOutOfRangeException` has the wrong `ParamName` (`WaitOne`'s `millisecondsTimeout` instead of `WaitForExit`'s `milliseconds`).  * If the handle is invalid, the parameter is not validated at all. (Though I haven't been able to reproduce this.)    On Unix, it's passed onto `ProcessWaitState.WaitForExit(int)`:    https://github.com/dotnet/corefx/blob/1fc008a7e174345826e658672b74aa449fb3573f/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs#L120-L122    Which then has a special case for -1 (`Timeout.Infinite`), but not other negative values:    https://github.com/dotnet/corefx/blob/1fc008a7e174345826e658672b74aa449fb3573f/src/System.Diagnostics.Process/src/System/Diagnostics/ProcessWaitState.Unix.cs#L362-L379    As far as I can tell, this means that on Unix `process.WaitForExit(-2)` behaves effectively the same as `process.WaitForExit(0)`: it doesn't wait at all, it just returns whether the process already exited.    The options I can see are:    1. Do nothing.  2. Validate the input only on Windows. This would fix the `ParamName` on Windows, and wouldn't cause a breaking change on Unix. But it would mean Windows and Unix are going to stay inconsistent.  3. Always validate the input. This would fix the `ParamName` on Windows and it would mean the behavior on Unix would be deliberate, not accidental. But it would also be a breaking change: code that didn't throw before would start throwing.    What do you think is the best approach here? Personally, I prefer 3.
25057	area-Infrastructure	Rename PlatformDetection.OSXKernelVersion to PlatformDetection.OSXVersion	This is addressing feedback which was missed in https://github.com/dotnet/corefx/pull/24531    Background: My previous PR has changed underlying implementation of OSXKernelVersion to use core-setup implementation which uses OSX versioning system instead of OSX kernel versioning system. I've changed tests to use new numbers but did not update the name of the property    cc: @tarekgh
25060	area-System.IO	Compability of GZipStream between core and framework	I`ve tried to port popular library for http requests called xNet and faced interesing issue. Library compiled for standart 2.0 works fine when it`s used in Windows Console project and falls with errow when used in Core Console Project (both test projects in my repo).   Problem appiers when you try to download http content coded with gzip. Problem located to this line:  https://github.com/Fedorus/xNetStandart/blob/master/~Http/HttpResponse.cs#L1487  ` int bytesRead = stream.Read(buffer, 0, bufferSize);`  where   int bufferSize = ~65k  buffer = new byte[bufferSize]  and real stream content is less.    On such circumstances code will fail becouse stream will wait for data.   I`ve tried fixing it but failed. Looks like there is something deeper but I haven`t located it yet.    There is original repo of xNet and my modified version with 2 test projects (windows and core console)  origin: https://github.com/X-rus/xNet   ported: https://github.com/Fedorus/xNetStandart    Thanks for atention. I hope someone will point me in my mistake or helps solving this issue.
25061	area-System.Threading	Add test for setting min worker threads in thread pool to 0	Related to https://github.com/dotnet/coreclr/issues/14239  Depends on https://github.com/dotnet/coreclr/pull/14864
25062	area-System.Net	How can I send some requests from authenticated proxy server ?	Hi,    I have an application wants to send some of outbound requests from an authenticated proxy server.  I have `schema` `host` `port` `username` and `password` of my proxy server.    I have 2 problem:     1. how can I implement for specific outbound addresses not all.  2.  how can send this requests from proxy server!    I just find [this](http://josephwoodward.co.uk/2016/07/proxying-http-requests-asp-net-core-using-kestrel) pkg, but it doesn't help me!    thank
25063	area-Meta	Build breaks when targetting UWP SDK 16299 (DotNet core) along with Microsoft advertising	"The UWP app build in Release mode breaks when targeting the latest UWP SDK that uses dotnet core toolchain along with Microsoft advertising sdk.    Environment:   Visual Studio 2017 (15.4.1)   UWP SDK 16299   Microsoft Advertising SDK 10.0.7   UWP App project ( Target Version 10.0.16299.0, Min Version 10.0.16299.0)  Microsoft.NETCore.UniversalWindowsPlatform  6.0.1  NetStandard 2.0.0    Error Details:  1>  Task ""ResolveToolchainRequiredAssemblyRoots""  1>  Done executing task ""ResolveToolchainRequiredAssemblyRoots"".  1>  Task ""ILTransformAssemblyClosure""  1>C:\Users\shubh\.nuget\packages\microsoft.net.native.compiler\2.0.0\tools\Microsoft.NetNative.targets(726,5): error : ILT1307: Assemblies 'D:\Next Applications\Near Me\SourceCode\Source Code-10.0\NextApps.MapsPlus.Universal\obj\x64\Release\ilc\in\WinMetadata\Microsoft.Advertising.winmd' and 'C:\Program Files (x86)\Microsoft SDKs\Windows Kits\10\ExtensionSDKs\Microsoft.Advertising.Xaml\10.0\References\CommonConfiguration\neutral\Microsoft.Advertising.winmd' have conflicting simple names.  1>  Done executing task ""ILTransformAssemblyClosure"" -- FAILED.  1>  Done building target ""ConstructILTransformAssemblyClosure"" in file ""Preparation"" -- FAILED.  1>  Done building project ""Preparation"" -- FAILED.  1>  Compilation failed  1>    1>  The command exited with code 1201.    Problem is in Release mode only, debug builds are fine. Release mode has Compile with .Net native tool chain flag On.      "
25064	area-System.Security	X509Certificate2: Unclear error message when permission denied to file	If the user running an ASP.NET Core app on Linux does not have permission to access the PFX file, this confusing error message is thrown:  ```  Unhandled Exception: Interop+Crypto+OpenSslCryptographicException: error:2006D002:BIO routines:BIO_new_file:system lib     at Interop.Crypto.CheckValidOpenSslHandle(SafeHandle handle)     at Internal.Cryptography.Pal.CertificatePal.FromFile(String fileName, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags)     at System.Security.Cryptography.X509Certificates.X509Certificate..ctor(String fileName, String password, X509KeyStorageFlags keyStorageFlags)     at System.Security.Cryptography.X509Certificates.X509Certificate2..ctor(String fileName, String password)     at Microsoft.AspNetCore.Hosting.ListenOptionsHttpsExtensions.UseHttps(ListenOptions listenOptions, String fileName, String password)     at SecureSign.Web.Program.<>c__DisplayClass1_0.<BuildWebHost>b__2(ListenOptions listenOptions) in C:\src\SecureSign\src\SecureSign.Web\Program.cs:line 53     at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions.Listen(IPEndPoint endPoint, Action`1 configure)     at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions.Listen(IPAddress address, Int32 port, Action`1 configure)     at Microsoft.Extensions.Options.OptionsFactory`1.Create(String name)     at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)     at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)     at System.Lazy`1.CreateValue()     at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.CreateServiceContext(IOptions`1 options, ILoggerFactory loggerFactory)     at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer..ctor(IOptions`1 options, ITransportFactory transportFactory, ILoggerFactory loggerFactory)  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider)     at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)     at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)     at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider provider)     at Microsoft.AspNetCore.Hosting.Internal.WebHost.EnsureServer()     at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()     at Microsoft.AspNetCore.Hosting.WebHostBuilder.Build()     at SecureSign.Web.Program.Main(String[] args) in C:\src\SecureSign\src\SecureSign.Web\Program.cs:line 20  ```    Can this be improved to explain what the error actually is?
25065	area-System.Runtime	Correct unit tests for Environment.SetEnvironmentVariable	Fix #16766
25066	area-System.IO	ARM/Linux: unable to cancel async read of /dev/input/input0 file	Im using System.IO.FileStream to read touch screen events. More specifically, I have an endless loop that calls `await stream.ReadAsync()` API on that file.    It works OK and Im getting my touch events (well, almost, because no multi-touch, but I dont think .NET is responsible for that).    Im having problems implementing graceful shutdown.    Ive tried closing and disposing the stream, I.ve tried passing CancellationToken to ReadAsync() call, the result is the same, ReadAsync() only cancels with an exception when the next touch event becomes available. Which is kinda later than Id like it to.    I dont have much experience with Linux, but it looks like theres a bug in CoreFX here?
25067	area-Microsoft.CSharp	NullReferenceException on unary operators on nullable enums in Microsoft.CSharp	Given:    ```C#  CSharpArgumentInfo x = CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, null);  CallSiteBinder binder =   Binder.UnaryOperation(    CSharpBinderFlags.None, ExpressionType.OnesComplement,    GetType(), new[] { x });  CallSite<Func<CallSite, StringComparison?, object>> site = CallSite<Func<CallSite, StringComparison?, object>>.Create(binder);  Func<CallSite, StringComparison?, object> targ = site.Target;  object result = targ(site, StringComparison.InvariantCulture);  ```    The invocation of `targ` will throw a `NullReferenceException`.    The immediate problem is it hitting a path that assumes it is dealing with an `AggregateType` when it is dealing with a `NullableType`, but it seems a bit more than just a spot fix there will be needed to make it handle the combination of both lifting and between enumerable types and their underlying types.    Code using `dynamic` will likely never hit this as nullable types will never be inferred from a single `dynamic` argument, but it'd be safer to have this work correctly, as well as it ideally being workable for explicit use as in the example above.
25069	area-System.Diagnostics	Test failure: System.Diagnostics.Tests.EventLogEntryCollectionTests/CheckingEntryEqualityAndIndex	Opened on behalf of @Sunny-pu  The test `System.Diagnostics.Tests.EventLogEntryCollectionTests/CheckingEntryEqualityAndIndex` has failed.  Assert.Equal() Failure\r     Expected: 1\r     Actual:   0          Stack Trace:             at System.Diagnostics.Tests.Helpers.WaitForEventLog(EventLog eventLog, Int32 entriesExpected) in E:\A\_work\1586\s\corefx\src\System.Diagnostics.EventLog\tests\Helpers.cs:line 69        at System.Diagnostics.Tests.EventLogEntryCollectionTests.CheckingEntryEqualityAndIndex() in E:\A\_work\1586\s\corefx\src\System.Diagnostics.EventLog\tests\EventLogEntryCollectionTests.cs:line 85 Build : Master - 20171106.02 (Core Tests) Failing configurations: - Windows.81.Amd64-x86   - Release - Windows.7.Amd64-x86   - Release 
25070	area-Infrastructure	When I try to build the corefx in my local with VS2017 enterprise, it always point to community.	![image](https://user-images.githubusercontent.com/33082483/32431896-4087655c-c310-11e7-90f2-b265f5938287.png)    Actually I have installed an enterprise version of VS2017.
25072	area-System.Net	Client cert auth doesn't work in HttpClientHandler	"We have a Nginx server that lives behind a Barracuda Web Application Firewall. We configure the firewall to only allow request with specific client cert. I am writing code leveraging on `HttpClient` to access Nginx.    With the following .Net Core 2.0 code, I always get `System.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.Net.Http.WinHttpException: A security error occurred`  ```                  var cert = FindCertificateByThumbprint(""1A7201E21CA93CAFED9FDCD1736716F606A22651"");                    using (var handler = HttpMessageHandlerFactory.Create(cert))                  using (var client = new HttpClient(handler))                  {                      client.BaseAddress = new Uri(""https://release.sample.com"");                      client.DefaultRequestHeaders.Host = ""release.sample.com"";                        var postString = ...  // some json data                        using (var postContent = new StringContent(postString, Encoding.UTF8, ""application/json""))                      using (var response = await client.PostAsync(""/some_api"", postContent))                      {                          var responseContent = await response.Content.ReadAsStringAsync();                            Console.WriteLine(responseContent);                      }                  }  ```  ```          public static HttpMessageHandler Create(X509Certificate2 cert)          {              var handler = new HttpClientHandler();              handler.ClientCertificateOptions = ClientCertificateOption.Manual;              handler.ClientCertificates.Add(cert);              return handler;          }  ```    But if I switch to .Net Framework 4.6.1 with the following code change (1 line only), it works:  ```              var handler = new WebRequestHandler();  ```    I have no ideas about this. What's the difference between .Net Core `HttpClientHandler` and .Net Framework `WebRequestHandler`?How can I make it work in .Net Core 2.0? Can anyone help me? Thanks in advance!    My application is an Asp.Net Core 2.0 web app based on .Net Core 2.0 running on Windows 10 x64, and is deployed as an Azure WebApp    Here is the simplest code that reproduces the issue, it is a console app: https://github.com/kchanlee/HttpMessageHandlerIssue  "
25077	area-System.Memory	Utf8Formatter.TryFormat(Double/Single) allocates a String.	As it's a thin wrapper around the classic BCL api. The algorithm is extremely complex and we don't have a C# version and porting the C++ from CoreCLR would be time-consuming and it's not clear whether the engineering result would be to our pleasing. For now, this overload is more for completeness than a cloud need so for now, this issue is for tracking.  
25078	area-System.Memory	Productize Utf8Parser and Utf8Formatter	"Fixes https://github.com/dotnet/corefx/issues/24607    Remaining debt (cut for time):    Parsing Intgers with the ""N"" format      https://github.com/dotnet/corefx/issues/24986      Some questions to be resolved as to whether to be compatible    (BCL doesn't care where you put the commas) or correct.    Format of floating point is still a wrapper hack      https://github.com/dotnet/corefx/issues/25077      The portable DoubleToNumber() code was never ported    to C# (though the big block comment advertising it    was)."
25079	area-System.Linq	Improve Enumerable.SingleOrDefault(predicate) Logic	"@seanfisher commented on [Sun Nov 05 2017](https://github.com/dotnet/core/issues/1061)  # Improve Enumerable.SingleOrDefault logic     This improves performance for the case where more than one element is found that matches the predicate, especially in large data sets.    # General    Hi, I ran across the [reference source for Enumerable.cs](https://github.com/Microsoft/referencesource/blob/b31308b03e8bd5bf779fb80fda71f31eb959fe0b/System.Core/System/Linq/Enumerable.cs#L1204-L1220) and was surprised to see an improvement opportunity. I was about to open an issue over there but then read a closed issue where they recommended opening new issues over here instead.    In the current reference source it appears that there is needless looping over the entire enumerable even if the count of elements that match the predicate is greater than one. Here's a quick one-liner example of a short-circuit exit improvement (notice the added line right after `checked { count++; }`), although I'm sure it could be improved even further:        public static TSource SingleOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)      {          if (source == null) throw Error.ArgumentNull(""source"");          if (predicate == null) throw Error.ArgumentNull(""predicate"");          TSource result = default(TSource);          long count = 0;          foreach (TSource element in source)          {              if (predicate(element))              {                  result = element;                  checked { count++; }                  if (count == 2) { break; }              }          }          switch (count)          {              case 0: return default(TSource);              case 1: return result;          }          throw Error.MoreThanOneMatch();      }    Let me know if this is the appropriate place for this issue. It could also be that the reference source doesn't reflect exactly what the implementation is doing, because I would expect something like the Enumerable methods would have long-since been hand-tuned for performance.  ---  @benaadams commented on [Sun Nov 05 2017](https://github.com/dotnet/core/issues/1061#issuecomment-342066802)  It seems to be fixed in corefx?  https://github.com/dotnet/corefx/blob/master/src/System.Linq/src/System/Linq/Single.cs    However, for a performance improvement, you should be able to just open and Issue in the repository that has the source or open a PR change.    Although what reference source shows is the code for full framework/desktop so it could probably still do with this change (or to pick up corefx's Linq code)  ---  @Petermarcu commented on [Mon Nov 06 2017](https://github.com/dotnet/core/issues/1061#issuecomment-342217436)  I'm going to move this issue to corefx. The outcome here is probably to add a ref count to get this on the list of things to consider porting to .NET Framework.  "
25081	area-System.Net	ARM/Linux: NetworkChange.NetworkAddressChanged crashes	"Here's a program:  ```  using System;  using System.Net.NetworkInformation;    class Program  {   static void Main( string[] args )   {    printAll();    NetworkChange.NetworkAddressChanged += addressChanged;    Console.ReadLine();   }     static void addressChanged( object sender, EventArgs e )   {    printAll();   }     static void printAll()   {    NetworkInterface[] all = NetworkInterface.GetAllNetworkInterfaces();    foreach( var i in all )     Console.WriteLine( ""{0}, status {1}"", i.Description, i.OperationalStatus );   }  }  ```  Here's the output when I unplug Ethernet cable from the device:  ```  lo, status Unknown  sit0, status Down  eth0, status Up  wlan0, status Down  lo, status Unknown  sit0, status Down  eth0, status Down  wlan0, status Down    Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.     at System.Net.NetworkInformation.NetworkChange.OnSocketEvent(NetworkChangeKind kind)     at System.Net.NetworkInformation.NetworkChange.ProcessEvent(Int32 socket, NetworkChangeKind kind)     at System.Net.NetworkInformation.NetworkChange.LoopReadSocket(Int32 socket)     at System.Net.NetworkInformation.NetworkChange.<>c.<CreateSocket>b__17_0(Object s)     at System.Threading.Tasks.Task.InnerInvoke()     at System.Threading.Tasks.Task.<>c.<.cctor>b__276_1(Object obj)     at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)  ```"
25082	area-Infrastructure	Run tests on non-en-US culture	Right now our CI and official runs all use en-US. When contributors run tests locally on a machine with different culture settings, they sometimes get failures - which we fix, but it would be nice to prevent this upstream especially as sometimes they are product bugs.
25083	area-Infrastructure	Promote netcoreapp tests to netstandard as possible	Tests that run only against .NET Standard surface area should run in the netstandard configuration so they can be reused against other netstandard implementations. It is likely that we currently have some tests running in the netcoreapp configuration that could be run in netstandard. We should do a pass through in order to beef up our netstandard coverage.
25084	area-Infrastructure	Share .NET Standard test bed	We already have good tools to ensure that .NET Standard implementations fulfil the .NET Standard API surface area. We should now also share tests in order to minimize functional differences. In CoreFX we have a attempted to separate out tests for .NET Standard. In discussion with @marek-safar and @luhenry of Xamarin it likely makes sense to make this test bed reuseable so we can run it against Xamarin as well.    We expect this to also help us drive standardization/documentation of the behavior of .NET Standard API's, where it's not already clear. Wed like to establish principles (with examples) for which behavior wed like to prescribe. There is inherent tension between making .NET behavior consistent across all platforms and making .NET behavior self-consistent on a given platform. Sharing tests will help map this out, and prevent divergence.    Longer term we may want to run Mono tests against .NET Core, and run .NET Core (ie., full netcoreapp) tests against Mono where appropriate: these may have value but are not in scope of this epic.    @marek-safar @luhenry @terrajobst 
25085	area-System.Memory	Add String support to ReadOnlyMemory<char>	Today `ReadOnlySpan<char>` can reference a `System.String` (via `AsReadOnlySpan()`), but `ReadOnlyMemory<char>` can't.  We should fix that so that `ReadOnlyMemory<char>` can be used as a way to slice strings where the slices can live on the heap.    To me that means:  1. Allowing `ReadOnlyMemory<T>` to wrap a `string` in addition to wrapping a `T[]` and an `OwnedMemory<T>`.  This will mean an extra type check on operations like `ReadOnlyMemory<T>.Span`, but it can be guarded behind a `typeof(T) == typeof(char)` check such that the additional branch and few additional instructions will only impact `T==char`, and `string` will end up being a very common case for `T==char`, making it worth it.  2. Adding an `AsReadOnlyMemory()` extension method for`string` just as there's an `AsReadOnlySpan()` extension.  3. Adding a `TryGetString` method on `MemoryMarshal` or some similar place that enables getting the string/offset/count out of a `ReadOnlyMemory<char>` if it's wrapping one.  4. Whatever string operation methods we want exposed added as extension methods for `ReadOnlyMemory<char>`, related to https://github.com/dotnet/corefx/issues/20378 and https://github.com/dotnet/corefx/issues/21395    cc: @KrzysztofCwalina, @ahsonkhan, @terrajobst, @jkotas    Replaces https://github.com/dotnet/corefx/issues/20378?
25088	area-System.Net	Socket.Listen() does not support UNIX Domain Socket	"According to https://github.com/dotnet/corefx/issues/10981, I copied the implementation from corefx/src/System.Net.Sockets/tests/FunctionalTests/UnixDomainSocketTest.cs  and use it locally like below. (I'm using dotnet core 2.0.0 on Ubuntu)    ```C#  Socket s = new Socket(AddressFamily.Unix, SocketType.Dgram, ProtocolType.Unspecified);  Console.WriteLine(s.SendBufferSize);  Console.WriteLine(s.ReceiveBufferSize);    var unixSocket = ""./my.sock.1"";  var ep = new UnixDomainSocketEndPoint(unixSocket);  Console.WriteLine(ep.AddressFamily);    try  {      System.IO.File.Delete(unixSocket);      s.Bind(ep);        s.Listen(5);  //// **Operation not supported**        while(true)      {          var newS = s.Accept();            byte[] content = new byte[1000];          var result = s.Receive(content);          Console.WriteLine(result);          Console.WriteLine(Encoding.Default.GetString(content));          newS.Close();      }  }  catch(Exception e)  {      Console.WriteLine(e.Message);      Console.WriteLine(e.StackTrace);      s.Close();  }  ```    The exception is something like below:    ```  Operation not supported     at System.Net.Sockets.Socket.UpdateStatusAfterSocketErrorAndThrowException(SocketError error, String callerName)     at System.Net.Sockets.Socket.Listen(Int32 backlog)     at test01.Program.Main(String[] args) in /home/klein/code/temp/test01/Program.cs:line 106  ```    Is there any solution or workaround to let dotnet core build a domain socket server in Linux? Thanks!"
25089	area-System.Runtime	Add methods for getting the current time in a specific time zone	"We presently have `DateTime.Now` and `DateTimeOffset.Now` for getting the current time in the computer's local time zone.  We also have `DateTime.UtcNow` and `DateTimeOffset.UtcNow` for getting the current time in UTC.  However, we don't have a property or method to get the time in a *specific* time zone.  To achieve that, one currently has to first get the UTC time, then get a specific time zone (if one doesn't have it already), and then convert the time to that time zone.  This proposal is to add an API to make that one step instead of two or three.    ## Proposed API  ```diff  namespace System {       public class TimeZoneInfo {  +        public DateTimeOffset Now { get; }       }   }  ```    ## Example Usage  ```csharp  DateTimeOffset now = TimeZoneInfo.FindSystemTimeZoneById(""Eastern Standard Time"").Now;  ```      Note that the above has been edited based on the conversation in this thread.  The original proposal was to add `NowInTimeZone` methods for `DateTime` and `DateTimeOffset`.    Other alternatives to consider would be to have `.GetCurrentTime()` as a method instead of the `.Now` property, or to introduce a `ZonedDateTime` type."
25090	area-System.Net	Reset auth settings on the request during redirect on managedhandler.	cc @stephentoub @Tratcher     fixes #24842 #24387    Update: In the latest rebased commit, I've combined the authentication and redirect handlers, to maintain the state as local information in SendAsync, as discussed internally with @stephentoub 
25094	area-System.Runtime	Proposal: String.Contains(char)	## Rationale and Usage    Finding a character in a string is a fairly common primitive operation. Unfortunately we lead users to the pit of failure because `mystring.Contains(char)` will bind to the Linq version, which can easily be 20x slower than `mystring.IndexOf(char) != -1`. By adding these to string, the next recompile will give a performance improvement.    ## Proposed API    ```c#      public sealed partial class String : System.Collections.Generic.IEnumerable<char>, System.Collections.IEnumerable, System.IComparable, System.IComparable<string>, System.IConvertible, System.IEquatable<string>, System.ICloneable      {          public bool Contains(char value) { throw null; }          public bool Contains(char value, StringComparison comparisonType) { throw null; }          public bool Contains(string value) { throw null; }  // already exists           public bool Contains(string value, StringComparison comparisonType) { throw null; } // already exists          public int IndexOf(char value, StringComparison comparisonType) { throw null; } // to implement above      }  ```    the implementations will simply be    ```c#  public bool Contains(char value)  {      return IndexOf(value) != -1;  }    public bool Contains(char value, StringComparison comparisonType)  {      return IndexOf(value, comparisonType) != -1;  }  ```    ## Microbenchmark    Searching in 10 and 1000 character strings:  ```      Method |       Mean |     Error |    StdDev |  ---------- |-----------:|----------:|----------:|   LinqShort | 142.750 ns | 0.4997 ns | 0.4430 ns |    LinqLong | 180.121 ns | 0.4741 ns | 0.3428 ns |   FastShort |   7.575 ns | 0.0196 ns | 0.0174 ns |    FastLong |   8.508 ns | 0.0403 ns | 0.0377 ns |  ```    ## Variations    The StringComparison overload is in order to search case insensitively if desired. The IndexOf overload is needed to implement it. These could be discarded as the 90% case I would expect to not take a comparison.
25098	area-Serialization	DCSerialization CriticalHelper.WriteMembers cleanup	Name params (were comments)  Check `List.Count` once  Reduce calls to `Load` and `Call` by once each (to reduce inline bloat https://github.com/dotnet/coreclr/pull/14850#issuecomment-342256447)    @stephentoub PTAL
25099	area-Meta	Webpack failure on dot net core 2 gives wrong message.	"DotNet Core 2.0 with Angular 5  If angular is updated to angular 5 and ngtools is not latest, then following error comes during runtime.  Error: Version of @angular/compiler-cli needs to be 2.3.1 or greater.   Current version is ""5.0.0"".    Error message is clearly misleading."
25102	area-System.Drawing	System.Drawing on CentOS: Unable to load DLL 'libdl'	"Any code which uses System.Drawing fails on CentOS 7.4 with the following exception:    ```  Unhandled Exception: System.TypeInitializationException: The type initializer for 'Gdip' threw an exception. ---> System.DllNotFoundException: Unable to load DLL 'libdl': The specified module or one of its dependencies could not be found.   (Exception from HRESULT: 0x8007007E)     at Interop.Libdl.dlopen(String fileName, Int32 flag)     at System.Drawing.SafeNativeMethods.Gdip.LoadNativeLibrary()     at System.Drawing.SafeNativeMethods.Gdip..cctor()     --- End of inner exception stack trace ---     at System.Drawing.SafeNativeMethods.Gdip.GdipCreateBitmapFromFile(String filename, IntPtr& bitmap)     at System.Drawing.Bitmap..ctor(String filename, Boolean useIcm)     at gdiplus.Program.Main(String[] args) in /root/gdiplus/Program.cs:line 12  ```    This is because by default `libdl.so` doesn't exist on CentOS whereas `libdl.so.2` does exist.    As a workaround you can symlink `/lib64/libdl.so.2` to `/lib64/libdl.so`.    ```  ln -s /lib64/libdl.so.2 /lib64/libdl.so  ```    Program.cs:  ```csharp  using System;  using System.Drawing;    namespace gdiplus  {      class Program      {          static void Main(string[] args)          {              Console.WriteLine(""Hello World!"");                var bitmap = new Bitmap(""test.bmp"");          }      }  }  ```    Project file:  ```xml  <Project Sdk=""Microsoft.NET.Sdk"">      <PropertyGroup>      <OutputType>Exe</OutputType>      <TargetFramework>netcoreapp2.0</TargetFramework>    </PropertyGroup>      <ItemGroup>      <PackageReference Include=""System.Drawing.Common"" Version=""4.5.0-preview1-25718-03""/>    </ItemGroup>  </Project>  ```"
25105	area-System.Memory	Productize System.Collections.Sequences	Tracking item for [System.Collections.Sequences](https://github.com/dotnet/corefxlab/tree/master/src/System.Collections.Sequences)    Related #24174
25110	area-System.Runtime	Add methods for manipulating date and time with respect to a particular time zone	"There currently is not an easy way to manipulate date and time values with respect to a particular time zone.  For example, the US went through a DST transition recently.  Using methods such as `AddDays` and similar do not reflect that correctly - even on the `DateTimeOffset` versions.    I suggest adding the following:    ## Proposed API  ```diff  namespace System {       public struct DateTimeOffset {  +        public static DateTimeOffset AddYears(int years, TimeZoneInfo timeZone)  +        public static DateTimeOffset AddMonths(int months, TimeZoneInfo timeZone)  +        public static DateTimeOffset AddDays(int days, TimeZoneInfo timeZone)  +        public static DateTimeOffset AddHours(double hours, TimeZoneInfo timeZone)  +        public static DateTimeOffset AddMinutes(double minutes, TimeZoneInfo timeZone)  +        public static DateTimeOffset AddSeconds(double seconds, TimeZoneInfo timeZone)  +        public static DateTimeOffset AddMilliseconds(double milliseconds, TimeZoneInfo timeZone)  +        public static DateTimeOffset AddTicks(long ticks, TimeZoneInfo timeZone)  +        public static DateTimeOffset Add(TimeSpan timeSpan, TimeZoneInfo timeZone)  +        public static DateTimeOffset Subtract(TimeSpan timeSpan, TimeZoneInfo timeZone)       }       public struct DateTime {  +        public static DateTime AddYears(int years, TimeZoneInfo timeZone)  +        public static DateTime AddMonths(int months, TimeZoneInfo timeZone)  +        public static DateTime AddDays(int days, TimeZoneInfo timeZone)  +        public static DateTime AddHours(double hours, TimeZoneInfo timeZone)  +        public static DateTime AddMinutes(double minutes, TimeZoneInfo timeZone)  +        public static DateTime AddSeconds(double seconds, TimeZoneInfo timeZone)  +        public static DateTime AddMilliseconds(double milliseconds, TimeZoneInfo timeZone)  +        public static DateTime AddTicks(long ticks, TimeZoneInfo timeZone)  +        public static DateTime Add(TimeSpan timeSpan, TimeZoneInfo timeZone)  +        public static DateTime Subtract(TimeSpan timeSpan, TimeZoneInfo timeZone)       }  }  ```    ## Example Usage  ```csharp  // setup  TimeZoneInfo tz = TimeZoneInfo.FindSystemTimeZoneById(""Eastern Standard Time"");  DateTimeOffset dto = DateTimeOffset.Parse(""2017-11-05T00:00:00-04:00"");    // example of using AddDays in existing API  DateTimeOffset result1 = dto.AddDays(1);        // 2017-11-06T00:00:00-04:00    // example of using AddDays with respect to time zone in proposed API  DateTimeOffset result2 = dto.AddDays(1, tz);    // 2017-11-06T00:00:00-05:00    // example of using AddHours in existing API  DateTimeOffset result3 = dto.AddHours(24);      // 2017-11-06T00:00:00-04:00    // example of using AddHours with respect to time zone in proposed API  DateTimeOffset result4 = dto.AddHours(24, tz);  // 2017-11-05T23:00:00-05:00  ```    Note that in this context, `AddDays` is intended to manipulate a calendar day, not an elapsed 24-hour duration.  Thus its argument is an `int` rather than a `double`.  `AddMonths` and `AddYears` already behave similarly.    Also, if #24555 goes through, then we'd also need `AddMicroseconds` versions of the above.    For discussion: We could also include overloads that allow the user to supply a delegate to control how ambiguous results are handled, and how invalid or ambiguous `DateTime` inputs are resolved.  Or we could default that behavior to existing behaviors present in the framework already, or to something more sensible for these scenarios.  "
25111	area-Infrastructure	NetCore package description commit hash could use some explanation?	Microsoft.NETCore.App has the following description in its nuspec:  ```      <description>A set of .NET API's that are included in the default .NET Core application model.   e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d   When using NuGet 3.x this package requires at least version 3.4.</description>  ```    I just got a question asking if this was a NuGet.org or NuGet client bug...    Perhaps changing that to something like the following would make it more helpful to more people?  ```      <description>A set of .NET API's that are included in the default .NET Core application model.   Commit hash: e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d   When using NuGet 3.x this package requires at least version 3.4.</description>  ```  
25112	area-System.Drawing	Support loading libgdiplus from NuGet packages	"This PR updates System.Drawing.Common so that it uses a logic very similar to that of `DllImport` when loading the `libgdiplus` native library.    This allows NuGet packages to ship native versions of `libgdiplus` which can then be distributed as part of a self-contained application.    We currently use this approach for `libgdiplus.dylib` on macOS, lifting the requirement for users to do `brew install mono-libgdiplus`. If we ever manage to create a portable version of `libgdiplus.so`, this approach could also work for Linux.    With this change, `GdiplusNative.LoadNativeLibrary` will first attempt to open `libgdiplus.so` and  `libgdiplus.so.0`.     If neither of those two files are found in the default search path, it iterates over all directories in `AppContext.GetData(""NATIVE_DLL_SEARCH_DIRECTORIES"")` and will attempt to load `libgdiplus.so` from those directories.    Fixes #24213"
25114	area-Meta	"Consider writing analyzers to steer people towards ""Try"" variants of API's instead of using exceptions for control flow."	
25115	area-System.Net	Unsupported raw socket programming	"@jakubaleksanderpolkowski commented on [Thu Nov 02 2017](https://github.com/dotnet/core/issues/1059)  # Unsupported raw socket programming      # Unable to create new raw socket using .net core and C# on armhf hardware under linux    As above i can't create raw socket in any way.   It seems like .net core does not support raw socket programming yet.      Hardware: Raspberry Pi3  CPU: armhf  OS: Raspbian  Runtime: 2.0.0-preview1-001887-00    Language: C#    Published on x64 Linux with sdk 2.0.0    Received error:    > "" Unhandled Exception: System.Net.Sockets.SocketException: Protocol not supported  > at System.Net.Sockets.Socket..ctor(AddressFamily addressFamily, SocketType socketType, ProtocolType > protocolType) ""    Code that whrows error:  `mainSocket = new Socket(AddressFamily.InterNetwork,SocketType.Raw, ProtocolType.IP);`    ---  @stephentoub commented on [Thu Nov 02 2017](https://github.com/dotnet/core/issues/1059#issuecomment-341410072)  What happens if you run with sudo?    Are you able to write/run a C program that creates a raw socket successfully?  ---  @jakubaleksanderpolkowski commented on [Fri Nov 03 2017](https://github.com/dotnet/core/issues/1059#issuecomment-341716434)  I all ready run this as sudo, I even gave CAP_NET_RAW capability to this program  ---  @stephentoub commented on [Fri Nov 03 2017](https://github.com/dotnet/core/issues/1059#issuecomment-341716808)  And what about a C program... you have a program in C that runs successfully opening a raw socket on the same machine?  ---  @wfurt commented on [Fri Nov 03 2017](https://github.com/dotnet/core/issues/1059#issuecomment-341777728)  https://stackoverflow.com/questions/19732145/python-raw-socket-protocol-not-supported    You need to use AF_PACKET (17 on Linux) but that does not seems to be defined for .net.    Try Cprogram as @stephentoub suggested and check it with strace.   "
25116	area-System.Runtime	ObfuscationAttribute and ObfuscateAssemblyAttribute have wrong definitions in System.Runtime assembly	"@hrumhurum commented on [Mon Oct 30 2017](https://github.com/dotnet/core/issues/1054)  # System.Runtime assembly provides wrong definitions of obfuscation attributes    _System.Reflection.ObfuscationAttribute_ and _System.Reflection.ObfuscateAssemblyAttribute_ are defined without _AttributeUsage_ declarations. This breaks the expected attribute usage semantics.    # General    .NET Core version: 2.0  OS version: Windows 10 1702 15063.674  Visual Studio version: 15.4.1    Related assembly:  **System.Runtime,** Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a  located at _C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.0.0\ref\netcoreapp2.0\System.Runtime.dll_    Please note that provided sample compiles and works as expected in .NET and .NET Standard 2.0 platforms.    ## Steps to reproduce    Try to compile the following .NET Core 2.0 console app:    ```c#  using System;  using System.Reflection;    [assembly: Obfuscation(Feature = ""Feat 1"")]  [assembly: Obfuscation(Feature = ""Feat 2"")]    namespace MyApp  {      class Program      {          static void Main(string[] args)          {              Console.WriteLine(""Hello World!"");          }      }  }    ```  ## Expected results  Assembly successfully compiles.    ## Actual results  Program.cs(5,12,5,23): error CS0579: Duplicate 'Obfuscation' attribute    "
25117	area-System.IO	FileSystemWatcher events raise more than once	This issue was filed here and has some more detailed discussions there.     https://github.com/Microsoft/dotnet/issues/347    We should see if it repro's on .NET Core and then figure out if we need a fix or if there is an existing fix we can port to .NET Framework.
25118	area-System.Net	Add sni implementation for client sslstream.	fixes #23731     cc @stephentoub @Tratcher   fyi @Drawaes 
25121	area-System.Threading	System.Threading.Channels is not compatible with .NETStandard 1.3	I was using [System.Threading.Tasks.Channels](https://www.nuget.org/packages/System.Threading.Tasks.Channels/) package for project with .NETStandard 1.3 target and was very excited it is on its way to become stable (by moving from corefxlab to corefx repo).  But today I got frustrated that it suddenly dropped support for .NETStandard 1.3 and min possible target is set to .NETStandard 2.0  `Package System.Threading.Channels 4.5.0-preview1-25907-04 is not compatible with netstandard1.3 (.NETStandard,Version=v1.3). Package System.Threading.Channels 4.5.0-preview1-25907-04 supports: netstandard2.0 (.NETStandard,Version=v2.0)  `  If there is no reason please support lowest possible version of .net standard.
25122	area-System.Threading	Asp.Net Core App restarts when controller return type is void on Exception	"Use the the below code as a controller action.  ```   [HttpGet(""Test"")]   public async void Test()   {           await _mgr.HttpContext.Request.ReadFormAsync(); //just to use an async method           throw new Exception(""Test"");   }  ```    Ideally async method should return Task but returning void should not bring the application down."
25123	area-System.Security	Make SignedXml.XmlDsigRSASHA256Url etc. public	In the full framework the constants for the algorithm names (`XmlDsigRSASHA256Url` et. al) are public: http://referencesource.microsoft.com/#System.Security/system/security/cryptography/xml/signedxml.cs,83    In .NET Core they are `internal`: https://github.com/dotnet/corefx/blob/7b7da40c0b509fd902814529cbbd840da7698017/src/System.Security.Cryptography.Xml/src/System/Security/Cryptography/Xml/SignedXml.cs#L71     Is there any specific reason to why? If they are available to use the constants should be public.
25128	area-System.ComponentModel	Provide localization for default error messages in System.ComponentModel.Annotations	"Currently, using attributes like `[Required]` or `[Range(1, 20)]` in ASP.NET Core only gives you english error messages, no matter what culture you set. That is because .NET Core currently only has [one ](https://github.com/dotnet/corefx/tree/master/src/System.ComponentModel.Annotations/src/Resources)(english) resource file. In this [issue ](https://github.com/aspnet/Localization/issues/286), @ryanbrandenburg suggested to create a issue here instead of aspnet/Localization to see if this could get resolved, so this is what I'm doing.    I wish I could just write, for example, `[Required]` and get localized error messages, without the need to write `[Required(ErrorMessage = ""bla bla bla"")]` all the time, or creating a lot of resource files, or creating a single big resource file for _every_ annotation... All of these options introduce a lot of hassle for anyone developing applications in any language other than english. It's especially frustrating when all the Annotations you use are the default ones."
25130	area-System.Memory	Unroll loop for Utf8Parser unsigned integer parsers	"This optimizes the Byte/UInt16/UInt32 parsers in the same  way that their signed counterparts already were.    Also, tuned up the signed counterparts before copy-pasting them:    - Just subtract the '0' once rather than doing it once in IsDigit()    and then again to add to the accumulator.    - Eliminate the pre-overflow checks in the case where    the accumulator is already a larger sized int than the value    being parsed. The accumulator will never overflow as long    we're under the digit count limit for the type.    - Fix the Int32 parser's potential overflow comparison    from ""int.MaxValue/10 - 1"" to ""int.MaxValue/10"" (the older    value works with an unsigned accumulator but in a ""by accident"" type    of way.)      Perf improvement:      +2.6% Int32  (int.MaxValue)    +7.0% UInt32 (uint.MaxValue)"
25132	area-System.Data	Tech Empower Fortunes System.Data perf improvements	https://www.techempower.com/benchmarks/#section=data-r14&hw=ph&test=fortune    Tracking issue for :   1. (~10%) Fix system.data.sqlclient!System.Data.ProviderBase.DbConnectionPoolIdentity.GetCurrent on windows to cache the windows identity, or to mimic what Linux does  2. (~4%) There are hot locks in system.data.sqlclient   a. (2.7%) system.data.sqlclient!System.Data.ProviderBase.DbConnectionPool.PrepareConnection  b. (.3%) system.data.sqlclient!System.Data.SqlClient.SqlConnection+OpenAsyncRetry.Retry  c. (.5%) system.private.corelib!System.Threading.TimerQueueTimer.Change    @vancem @mikeharder      
25133	area-System.Xml	XPathNavigator returns incorrect Name and LocalName for attribute node after call to ReadAttributeValue method	"Consider the following XML:    ```XML  <root xmlns:x='urn:foo' xmlns='urn:default'></root>  ```  Load the XML string into an `XmlDocument` to obtain an `XPathNavigator`, in turn to obtain `XmlReader`. Navigate to the attribute `xmlns:x` using `XmlReader.MoveToAttribute` API. The `XmlReader` properties `Name`, `Prefix`, `LocalName` respectively return `xmlns:x`, `xmlns` and `x`, which is correct.    While the reader is positioned at the attribute, call `ReadAttributeValue`. Now, the `XmlReader` respectively returns values `xmlns:`, `xmlns` and `<Empty>` for the same attribute, This doesn't appear to be intuitive. Looks like this is because the `reader` is internally positioned at the attribute value node which is of type text and hence the `LocalName` property returns `<Empty>` as per the definition of the property. However, the end user would typically expect same values for `Name`, `Prefix` and 'LocalName` properties as from the user point of view, the reader is really not positioned at the ""text node"" that represents the _value of the attribute_.    Opening this issue as per [this](https://github.com/dotnet/corefx/issues/16646#issuecomment-341919304) discussion in #16646 to know if this behavior is expected or is a bug. Appreciate your inputs.    ```C#          static void Main(string[] args)          {              string xml = ""<root xmlns:x='urn:foo' xmlns='urn:default'></root>"";                var xmlDoc = new XmlDocument();              xmlDoc.LoadXml(xml);                XPathNavigator nav = xmlDoc.CreateNavigator();              nav.MoveToRoot();              nav.MoveToFirstChild();              var reader = nav.ReadSubtree();              reader.Read();              if (!reader.MoveToAttribute(""xmlns:x""))              {                  Console.WriteLine(""Failed to move to attribute xmlns:x"");              }              Console.WriteLine(""Moving to attribute---------"");              Console.WriteLine(""Name: "" + reader.Name);              Console.WriteLine(""Prefix: "" + reader.Prefix);              Console.WriteLine(""LocalName: "" + reader.LocalName);              Console.WriteLine();                if (!reader.ReadAttributeValue())              {                  Console.WriteLine(""failed to read attribute value"");              }              Console.WriteLine(""Reading attribute---------"");              Console.WriteLine(""Name: "" + reader.Name);    // Returns 'xmlns:' instead of 'xmlns:x'              Console.WriteLine(""Prefix: "" + reader.Prefix);    // Correctly returns 'xmlns'              Console.WriteLine(""LocalName: "" + reader.LocalName); // string.Empty instead of 'x'              Console.WriteLine();          }  ```    Output:  ```  Moving to attribute---------  Name: xmlns:x  Prefix: xmlns  LocalName: x    Reading attribute---------  Name: xmlns:  Prefix: xmlns  LocalName:  ```"
25134	area-System.Drawing	Move dlopen and dlsym to PAL	System.Drawing P/Invokes into `dlopen` and `dlsym` to load the various libgdiplus/GDI+ functions.    It currently assumes that `libdl.so` exists and contains `dlopen` and `dlsym`. This is not always the case - for example on CentOS you have `libdl.so.2` but not `libdl.so` and on FreeBSD `dlopen` does not live in `libdl` at all.    Instead of trying figure out where `dlopen` lives at runtime, add `dlopen` and `dlsym` to the PAL and resolve it at compile time.
25135	area-System.Net	Implementation of SecureChannel.cs in .NET Core does not verify client cert issuers	Problem description:    A Web Api (.NET Core 2.0) is hosted via Kestrel on Windows 10, MobiLinux and Docker.   It's configured in the code to request a client certificate.  Kestrel is configured with a CA issued server certificate and exposes port 443.    Testing  1. A client application written in .NET 4.5-6 uses a self-signed client certificate (using makecert)  2. A client application written in .NET Core 1.1 and 2.0 uses the same self-signed client certificate (using makecert).    In a case of .NET 4.5X, the code seems to verify the list of cert issuers from the server against the client certificate it's trying to send. It finds no matching CA and fails to send the cert to the server and closes the connection as expected by TLS spec.    In a case of .NET Core, the code seems to not perform the same comparison and just sends the client cert to the server and allows the connection to remain open.  A potential security vulnerability is seems.  A support case  [REG:117102516555348] with Microsoft has been opened previously to explore this issue.  
25136	area-System.Net	Add some basic Socket SendAsync/ReceiveAsync perf tests	Microbenchmarks around SendAsync/ReceiveAsync    cc: @wfurt, @geoffkizer 
25137	area-System.Net	ManagedHandler: move Debug.Assert(_writeOffset == 0) after code trying to handle that case	There is code in ReturnConnectionToPool() to finish pending write.   However the assert was executed before that.     With this change I could run HTTP unit tests for while without hitting the assert.   Before the change, I would hit this every 1-2 hours.   
25138	area-Serialization	Introducing Xml Serializer Generator for .NET Core 	# Introducing Xml Serializer Generator for .NET Core  Like the Xml Serializer Generator (sgen.exe) on desktop, Microsoft.XmlSerializer.Generator NuGet package is the solution for .NET Core and .NET Standard Libraries. It creates an Xml serialization assembly for types contained in an assembly in order to improve the startup performance of Xml serialization when serializing or de-serializing objects of those types using XmlSerializer.     You can start using the tool today by following the [instructions](https://github.com/dotnet/core/blob/master/samples/xmlserializergenerator-instructions.md).     ## Details  When the Xml Serializer Generator is not used, an XmlSerializer generates serialization code for each type every time when an application runs. You can improve the startup performance of Xml serialization by simply adding the reference of Microsoft.XmlSerializer.Generator NuGet package to your project. Xml Serializer Generator will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application.     Please create an issue with your feedback at [dotnet/corefx](https://github.com/dotnet/corefx/issues). We are actively looking to improve the tool and your input is a valuable part of the process. 
25142	area-System.Data	Add UDT support to System.Data.SqlClient.	
25144	area-System.Threading	Fix some tests after https://github.com/dotnet/coreclr/pull/14864	Fix for some test failures in https://github.com/dotnet/corefx/pull/25131
25145	area-Infrastructure	Question: How do we do performance test?	I had a small conversation with @karelz on the Gitter Coreclr channel. Here is the chat transcript    Hi,  Just wondering how the performance test is done for the core clr    Karel Zikmund @karelz Nov 08 23:05  We have a perf lab with perf test cases. The perf lab and its results is internal only at this moment.  What exactly are you interested in?    @karelz I am more interested in how its done. What OS? And what parameters we are monitoring?. Knowing OS is important because in my office we have guy coming from a well know anti virus software company and he said that his company has profiled that Windows 7 is much better than Windows 10 for doing perf tests and it's stats because windows 10 has lot of background services running which hinders the stats. Its hard to believe for me. So thought of knowing how your team does and what's the rational    Karel Zikmund @karelz 06:46  @sherry-ummen our perf lab removes all noise from machines - disables all kind of background services and OS features (PreFetcher, etc.), which could interfere with our measurements and introduce noise. Key thing for performance is to focus on things which matter and remove noise/variance of the environment.  For micro-benchmarks we measure time and memory. .NET Core perf tests use xunit-performance harness (see Microsoft/xunit-performance) and we are discussing merging it with BenchmarkDotNet.  However, it does not contain all the perf lab scripts to set up the machines, etc.    Sherry Ummen @sherry-ummen 06:52  So then I assume you are using windows OS for perf test? Which OS? And do you have some scripts to disable all the background noise? Any plans to share those?    Karel Zikmund @karelz 08:55  We run perf on Linux and Mac as well. Windows is just something we run for 10+ years  ...I am not sure if the infra scripts are open or not (I know that few years ago the perf test harness was way too involved to be open-sourced). It would be best to ask on GH - I can loop in perf team if you tag me (I haven't been involved in perf team work for last 2 years)    Sherry Ummen @sherry-ummen 09:07  I assume GH means Github? And which Repo in Github I should ask?  Coreclr Repo?    Karel Zikmund @karelz 09:11  coreclr or corefx will both work fine    ------------------------------------------------------  So in short I am interested in the said infra scripts which are used to setup a machine. In my case a Windows machine. Whether its open sourced if not then any plans to open source it?    
25148	area-System.Reflection	IndexOutOfRangeExceptions on multiple System.Reflection.Metadata tests in CI on macOS	https://mc.dot.net/#/user/benaadams/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/80f4db8dc2ef1b73a0dbccc693c0d05b22bcf4eb/workItem/System.Reflection.Metadata.Tests/wilogs  ```  2017-11-09 08:30:15,600: INFO: proc(54): run_and_log_output: Output:    System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateNamespaceFunctionality [FAIL]  2017-11-09 08:30:15,602: INFO: proc(54): run_and_log_output: Output:       System.IndexOutOfRangeException : Index was outside the bounds of the array.  2017-11-09 08:30:15,607: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-09 08:30:15,715: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(398,0): at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)  2017-11-09 08:30:15,715: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(248,0): at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)  2017-11-09 08:30:15,716: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(89,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetPinnedPEImage(Byte[] peImage)  2017-11-09 08:30:15,716: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(78,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Int32& metadataStartOffset, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:15,716: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(73,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:15,717: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(1093,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateNamespaceFunctionality()  2017-11-09 08:30:15,718: INFO: proc(54): run_and_log_output: Output:    System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateConstantTable [FAIL]  2017-11-09 08:30:15,718: INFO: proc(54): run_and_log_output: Output:       System.IndexOutOfRangeException : Index was outside the bounds of the array.  2017-11-09 08:30:15,718: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-09 08:30:15,718: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(398,0): at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)  2017-11-09 08:30:15,718: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(248,0): at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)  2017-11-09 08:30:15,719: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(89,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetPinnedPEImage(Byte[] peImage)  2017-11-09 08:30:15,719: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(78,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Int32& metadataStartOffset, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:15,719: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(73,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:15,720: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(2310,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateConstantTable()  2017-11-09 08:30:15,720: INFO: proc(54): run_and_log_output: Output:    System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateGenericParamTable [FAIL]  2017-11-09 08:30:15,720: INFO: proc(54): run_and_log_output: Output:       System.IndexOutOfRangeException : Index was outside the bounds of the array.  2017-11-09 08:30:15,720: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-09 08:30:15,720: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(398,0): at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)  2017-11-09 08:30:15,721: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(248,0): at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)  2017-11-09 08:30:15,721: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(89,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetPinnedPEImage(Byte[] peImage)  2017-11-09 08:30:15,721: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(78,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Int32& metadataStartOffset, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:15,722: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(73,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:15,722: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(1878,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateGenericParamTable()  2017-11-09 08:30:15,722: INFO: proc(54): run_and_log_output: Output:    System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateTypeRefTableMod [FAIL]  2017-11-09 08:30:15,722: INFO: proc(54): run_and_log_output: Output:       System.IndexOutOfRangeException : Index was outside the bounds of the array.  2017-11-09 08:30:15,723: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-09 08:30:15,723: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(398,0): at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)  2017-11-09 08:30:15,723: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(248,0): at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)  2017-11-09 08:30:15,723: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(89,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetPinnedPEImage(Byte[] peImage)  2017-11-09 08:30:15,724: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(78,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Int32& metadataStartOffset, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:15,724: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(73,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:15,725: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(706,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateTypeRefTableMod()  2017-11-09 08:30:15,743: INFO: proc(54): run_and_log_output: Output:    System.Reflection.Metadata.Tests.MetadataReaderTests.GetCustomAttributes [FAIL]  2017-11-09 08:30:15,744: INFO: proc(54): run_and_log_output: Output:       System.IndexOutOfRangeException : Index was outside the bounds of the array.  2017-11-09 08:30:15,744: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-09 08:30:15,744: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(398,0): at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)  2017-11-09 08:30:15,744: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(248,0): at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)  2017-11-09 08:30:15,744: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(89,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetPinnedPEImage(Byte[] peImage)  2017-11-09 08:30:15,745: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(78,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Int32& metadataStartOffset, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:15,745: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(73,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:15,746: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(2150,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetCustomAttributes()  2017-11-09 08:30:15,769: INFO: proc(54): run_and_log_output: Output:    System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateMethodSemanticsTable [FAIL]  2017-11-09 08:30:15,770: INFO: proc(54): run_and_log_output: Output:       System.IndexOutOfRangeException : Index was outside the bounds of the array.  2017-11-09 08:30:15,770: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-09 08:30:15,770: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(398,0): at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)  2017-11-09 08:30:15,771: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(248,0): at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)  2017-11-09 08:30:15,771: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(89,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetPinnedPEImage(Byte[] peImage)  2017-11-09 08:30:15,772: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(78,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Int32& metadataStartOffset, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:15,772: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(73,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:15,773: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(2177,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateMethodSemanticsTable()  2017-11-09 08:30:15,801: INFO: proc(54): run_and_log_output: Output:    System.Reflection.Metadata.Tests.MetadataReaderTests.CanCustomizeReaderUtf8Fallback [FAIL]  2017-11-09 08:30:15,802: INFO: proc(54): run_and_log_output: Output:       System.IndexOutOfRangeException : Index was outside the bounds of the array.  2017-11-09 08:30:15,802: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-09 08:30:15,802: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(398,0): at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)  2017-11-09 08:30:15,802: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(248,0): at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)  2017-11-09 08:30:15,803: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(89,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetPinnedPEImage(Byte[] peImage)  2017-11-09 08:30:15,803: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(78,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Int32& metadataStartOffset, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:15,803: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(144,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.CanCustomizeReaderUtf8Fallback()  2017-11-09 08:30:15,827: INFO: proc(54): run_and_log_output: Output:    System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateFieldMarshal [FAIL]  2017-11-09 08:30:15,827: INFO: proc(54): run_and_log_output: Output:       System.IndexOutOfRangeException : Index was outside the bounds of the array.  2017-11-09 08:30:15,827: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-09 08:30:15,827: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(398,0): at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)  2017-11-09 08:30:15,828: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(248,0): at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)  2017-11-09 08:30:15,828: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(89,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetPinnedPEImage(Byte[] peImage)  2017-11-09 08:30:15,828: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(78,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Int32& metadataStartOffset, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:15,829: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(73,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:15,829: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(1976,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateFieldMarshal()  2017-11-09 08:30:15,845: INFO: proc(54): run_and_log_output: Output:    System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateUserStringStream [FAIL]  2017-11-09 08:30:15,845: INFO: proc(54): run_and_log_output: Output:       System.IndexOutOfRangeException : Index was outside the bounds of the array.  2017-11-09 08:30:15,845: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-09 08:30:15,846: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(398,0): at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)  2017-11-09 08:30:15,846: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(248,0): at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)  2017-11-09 08:30:15,846: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(89,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetPinnedPEImage(Byte[] peImage)  2017-11-09 08:30:15,847: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(78,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Int32& metadataStartOffset, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:15,847: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(73,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:15,847: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(2381,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateUserStringStream()  2017-11-09 08:30:15,858: INFO: proc(54): run_and_log_output: Output:    System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateCustomAttribute [FAIL]  2017-11-09 08:30:15,858: INFO: proc(54): run_and_log_output: Output:       System.IndexOutOfRangeException : Index was outside the bounds of the array.  2017-11-09 08:30:15,858: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-09 08:30:15,859: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(398,0): at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)  2017-11-09 08:30:15,859: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(248,0): at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)  2017-11-09 08:30:15,859: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(89,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetPinnedPEImage(Byte[] peImage)  2017-11-09 08:30:15,860: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(78,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Int32& metadataStartOffset, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:15,860: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(73,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:15,860: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(2102,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateCustomAttribute()  2017-11-09 08:30:15,870: INFO: proc(54): run_and_log_output: Output:    System.Reflection.Metadata.Tests.MetadataReaderTests.Bug17109 [FAIL]  2017-11-09 08:30:15,870: INFO: proc(54): run_and_log_output: Output:       System.IndexOutOfRangeException : Index was outside the bounds of the array.  2017-11-09 08:30:15,870: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-09 08:30:15,870: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(398,0): at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)  2017-11-09 08:30:15,871: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(248,0): at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)  2017-11-09 08:30:15,872: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(89,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetPinnedPEImage(Byte[] peImage)  2017-11-09 08:30:15,872: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(78,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Int32& metadataStartOffset, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:15,873: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(73,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:15,873: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(2416,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.Bug17109()  2017-11-09 08:30:16,345: INFO: proc(54): run_and_log_output: Output:    System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateSignature [FAIL]  2017-11-09 08:30:16,345: INFO: proc(54): run_and_log_output: Output:       System.IndexOutOfRangeException : Index was outside the bounds of the array.  2017-11-09 08:30:16,346: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-09 08:30:16,346: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(398,0): at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)  2017-11-09 08:30:16,346: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(248,0): at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)  2017-11-09 08:30:16,346: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(89,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetPinnedPEImage(Byte[] peImage)  2017-11-09 08:30:16,347: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(78,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Int32& metadataStartOffset, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,347: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(73,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,348: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(2219,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateSignature()  2017-11-09 08:30:16,356: INFO: proc(54): run_and_log_output: Output:    System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateModuleRefTableMod [FAIL]  2017-11-09 08:30:16,357: INFO: proc(54): run_and_log_output: Output:       System.IndexOutOfRangeException : Index was outside the bounds of the array.  2017-11-09 08:30:16,357: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-09 08:30:16,357: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(398,0): at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)  2017-11-09 08:30:16,357: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(248,0): at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)  2017-11-09 08:30:16,357: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(89,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetPinnedPEImage(Byte[] peImage)  2017-11-09 08:30:16,358: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(78,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Int32& metadataStartOffset, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,358: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(73,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,359: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(553,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateModuleRefTableMod()  2017-11-09 08:30:16,388: INFO: proc(54): run_and_log_output: Output:    System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateClassLayoutTable [FAIL]  2017-11-09 08:30:16,388: INFO: proc(54): run_and_log_output: Output:       System.IndexOutOfRangeException : Index was outside the bounds of the array.  2017-11-09 08:30:16,388: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-09 08:30:16,388: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(398,0): at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)  2017-11-09 08:30:16,388: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(248,0): at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)  2017-11-09 08:30:16,389: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(89,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetPinnedPEImage(Byte[] peImage)  2017-11-09 08:30:16,389: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(78,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Int32& metadataStartOffset, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,389: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(73,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,389: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(1912,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateClassLayoutTable()  2017-11-09 08:30:16,393: INFO: proc(54): run_and_log_output: Output:    System.Reflection.Metadata.Tests.MetadataReaderTests.MemberCollections_TypeMembers_LastTypeDef [FAIL]  2017-11-09 08:30:16,393: INFO: proc(54): run_and_log_output: Output:       System.IndexOutOfRangeException : Index was outside the bounds of the array.  2017-11-09 08:30:16,393: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-09 08:30:16,394: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(398,0): at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)  2017-11-09 08:30:16,394: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(248,0): at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)  2017-11-09 08:30:16,394: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(89,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetPinnedPEImage(Byte[] peImage)  2017-11-09 08:30:16,394: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(78,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Int32& metadataStartOffset, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,395: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(73,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,395: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(2621,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.MemberCollections_TypeMembers_LastTypeDef()  2017-11-09 08:30:16,399: INFO: proc(54): run_and_log_output: Output:    System.Reflection.Metadata.Tests.MetadataReaderTests.EmptyType [FAIL]  2017-11-09 08:30:16,399: INFO: proc(54): run_and_log_output: Output:       System.IndexOutOfRangeException : Index was outside the bounds of the array.  2017-11-09 08:30:16,400: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-09 08:30:16,400: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(398,0): at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)  2017-11-09 08:30:16,400: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(248,0): at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)  2017-11-09 08:30:16,400: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(89,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetPinnedPEImage(Byte[] peImage)  2017-11-09 08:30:16,400: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(78,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Int32& metadataStartOffset, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,401: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(73,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,401: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(2394,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.EmptyType()  2017-11-09 08:30:16,404: INFO: proc(54): run_and_log_output: Output:    System.Reflection.Metadata.Tests.MetadataReaderTests.MemberCollections_AllMembers [FAIL]  2017-11-09 08:30:16,405: INFO: proc(54): run_and_log_output: Output:       System.IndexOutOfRangeException : Index was outside the bounds of the array.  2017-11-09 08:30:16,405: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-09 08:30:16,405: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(398,0): at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)  2017-11-09 08:30:16,405: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(248,0): at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)  2017-11-09 08:30:16,405: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(89,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetPinnedPEImage(Byte[] peImage)  2017-11-09 08:30:16,406: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(78,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Int32& metadataStartOffset, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,406: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(73,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,406: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(2486,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.MemberCollections_AllMembers()  2017-11-09 08:30:16,411: INFO: proc(54): run_and_log_output: Output:    System.Reflection.Metadata.Tests.MetadataReaderTests.MemberCollections_TypeMembers_FirstTypeDef [FAIL]  2017-11-09 08:30:16,411: INFO: proc(54): run_and_log_output: Output:       System.IndexOutOfRangeException : Index was outside the bounds of the array.  2017-11-09 08:30:16,411: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-09 08:30:16,411: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(398,0): at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)  2017-11-09 08:30:16,411: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(248,0): at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)  2017-11-09 08:30:16,412: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(89,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetPinnedPEImage(Byte[] peImage)  2017-11-09 08:30:16,412: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(78,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Int32& metadataStartOffset, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,412: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(73,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,412: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(2551,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.MemberCollections_TypeMembers_FirstTypeDef()  2017-11-09 08:30:16,415: INFO: proc(54): run_and_log_output: Output:    System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateMethodImplTable [FAIL]  2017-11-09 08:30:16,415: INFO: proc(54): run_and_log_output: Output:       System.IndexOutOfRangeException : Index was outside the bounds of the array.  2017-11-09 08:30:16,416: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-09 08:30:16,416: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(398,0): at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)  2017-11-09 08:30:16,416: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(248,0): at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)  2017-11-09 08:30:16,416: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(89,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetPinnedPEImage(Byte[] peImage)  2017-11-09 08:30:16,416: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(78,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Int32& metadataStartOffset, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,417: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(73,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,417: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(2039,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateMethodImplTable()  2017-11-09 08:30:16,424: INFO: proc(54): run_and_log_output: Output:    System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateInterfaceImplTableMod [FAIL]  2017-11-09 08:30:16,424: INFO: proc(54): run_and_log_output: Output:       System.IndexOutOfRangeException : Index was outside the bounds of the array.  2017-11-09 08:30:16,424: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-09 08:30:16,424: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(398,0): at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)  2017-11-09 08:30:16,424: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(248,0): at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)  2017-11-09 08:30:16,425: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(89,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetPinnedPEImage(Byte[] peImage)  2017-11-09 08:30:16,425: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(78,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Int32& metadataStartOffset, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,425: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(73,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,425: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(1807,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateInterfaceImplTableMod()  2017-11-09 08:30:16,430: INFO: proc(54): run_and_log_output: Output:    System.Reflection.Metadata.Tests.MetadataReaderTests.CannotInstantiateReaderWithNonUtf8Decoder [FAIL]  2017-11-09 08:30:16,430: INFO: proc(54): run_and_log_output: Output:       Assert.Throws() Failure  2017-11-09 08:30:16,430: INFO: proc(54): run_and_log_output: Output:       Expected: typeof(System.ArgumentException)  2017-11-09 08:30:16,430: INFO: proc(54): run_and_log_output: Output:       Actual:   typeof(System.IndexOutOfRangeException): Index was outside the bounds of the array.  2017-11-09 08:30:16,430: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-09 08:30:16,430: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(398,0): at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)  2017-11-09 08:30:16,430: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(248,0): at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)  2017-11-09 08:30:16,431: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(89,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetPinnedPEImage(Byte[] peImage)  2017-11-09 08:30:16,431: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(78,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Int32& metadataStartOffset, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,431: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(73,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,431: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(133,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.<>c__DisplayClass8_0.<CannotInstantiateReaderWithNonUtf8Decoder>b__0()  2017-11-09 08:30:16,436: INFO: proc(54): run_and_log_output: Output:    System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateFieldLayoutTable [FAIL]  2017-11-09 08:30:16,436: INFO: proc(54): run_and_log_output: Output:       System.IndexOutOfRangeException : Index was outside the bounds of the array.  2017-11-09 08:30:16,436: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-09 08:30:16,436: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(398,0): at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)  2017-11-09 08:30:16,436: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(248,0): at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)  2017-11-09 08:30:16,437: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(89,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetPinnedPEImage(Byte[] peImage)  2017-11-09 08:30:16,437: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(78,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Int32& metadataStartOffset, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,437: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(73,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,437: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(1943,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateFieldLayoutTable()  2017-11-09 08:30:16,449: INFO: proc(54): run_and_log_output: Output:    System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateInterfaceImplTable [FAIL]  2017-11-09 08:30:16,449: INFO: proc(54): run_and_log_output: Output:       System.IndexOutOfRangeException : Index was outside the bounds of the array.  2017-11-09 08:30:16,449: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-09 08:30:16,450: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(398,0): at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)  2017-11-09 08:30:16,450: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(248,0): at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)  2017-11-09 08:30:16,450: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(89,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetPinnedPEImage(Byte[] peImage)  2017-11-09 08:30:16,450: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(78,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Int32& metadataStartOffset, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,451: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(73,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,451: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(2009,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.ValidateInterfaceImplTable()  2017-11-09 08:30:16,459: INFO: proc(54): run_and_log_output: Output:    System.Reflection.Metadata.Tests.MetadataReaderTests.MemberCollections_TypeMembers_MiddleTypeDef [FAIL]  2017-11-09 08:30:16,459: INFO: proc(54): run_and_log_output: Output:       System.IndexOutOfRangeException : Index was outside the bounds of the array.  2017-11-09 08:30:16,459: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-09 08:30:16,459: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(398,0): at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)  2017-11-09 08:30:16,460: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(248,0): at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)  2017-11-09 08:30:16,460: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(89,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetPinnedPEImage(Byte[] peImage)  2017-11-09 08:30:16,460: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(78,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Int32& metadataStartOffset, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,460: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(73,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,460: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(2576,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.MemberCollections_TypeMembers_MiddleTypeDef()  2017-11-09 08:30:16,463: INFO: proc(54): run_and_log_output: Output:    System.Reflection.Metadata.Tests.MetadataReaderTests.OtherAccessors [FAIL]  2017-11-09 08:30:16,463: INFO: proc(54): run_and_log_output: Output:       System.IndexOutOfRangeException : Index was outside the bounds of the array.  2017-11-09 08:30:16,463: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-09 08:30:16,463: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(398,0): at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)  2017-11-09 08:30:16,463: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/128/s/src/mscorlib/src/System/Collections/Generic/Dictionary.cs(248,0): at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)  2017-11-09 08:30:16,463: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(89,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetPinnedPEImage(Byte[] peImage)  2017-11-09 08:30:16,464: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(78,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Int32& metadataStartOffset, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,464: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(73,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder)  2017-11-09 08:30:16,464: INFO: proc(54): run_and_log_output: Output:          /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs(2436,0): at System.Reflection.Metadata.Tests.MetadataReaderTests.OtherAccessors()  ```
25149	area-System.Data	SqlException: Cannot access Kerberos ticket. Ensure Kerberos has been initialized with 'kinit'.	I am trying to connect to mssql using integrated security credential, dotnet core 2.0 runtime/sdk, running on Macox 10.12.6, dot net core version 2.0.2  tried setting up kinit, i also see klist - list the credential. tried to  set up open ssl.    got following exception, any pointers    `SqlException: Cannot access Kerberos ticket. Ensure Kerberos has been initialized with 'kinit'. ErrorCode=InternalError, Exception=Interop+NetSecurityNative+GssApiException: GSSAPI operation failed with error - An unsupported mechanism was requested (unknown mech-code 0 for mech unknown). at System.Net.Security.NegotiateStreamPal.GssInitSecurityContext(SafeGssContextHandle& context, SafeGssCredHandle credential, Boolean isNtlm, SafeGssNameHandle targetName, GssFlags inFlags, Byte[] buffer, Byte[]& outputBuffer, UInt32& outFlags, Int32& isNtlmUsed) at System.Net.Security.NegotiateStreamPal.EstablishSecurityContext(SafeFreeNegoCredentials credential, SafeDeleteContext& context, String targetName, ContextFlagsPal inFlags, SecurityBuffer inputBuffer, SecurityBuffer outputBuffer, ContextFlagsPal& outFlags) at System.Data.SqlClient.SNI.SNIProxy.GenSspiClientContext(SspiClientContextStatus sspiClientContextStatus, Byte[] receivedBuff, Byte[]& sendBuff, Byte[] serverName) at System.Data.SqlClient.SNI.TdsParserStateObjectManaged.GenerateSspiClientContext(Byte[] receivedBuff, UInt32 receivedLength, Byte[]& sendBuff, UInt32& sendLength, Byte[] _sniSpnBuffer) at System.Data.SqlClient.TdsParser.SNISSPIData(Byte[] receivedBuff, UInt32 receivedLength, Byte[]& sendBuff, UInt32& sendLength)`    -vimal
25153	area-Serialization	Area-Serialization Sprint 127	The issue is for tracking issues to be done in sprint 127 (due by 11/30/2017)
25154	area-System.Threading	Document that CancellationToken in Stream.ReadAsync() is advisory	At https://docs.microsoft.com/en-us/dotnet/api/system.io.stream.readasync?view=netframework-4.7.1 I read:    > If the operation is canceled before it completes, the returned task contains the [`Canceled`](https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.taskstatus.canceled?view=netframework-4.7.1) value for the [`Status`](https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.status?view=netframework-4.7.1) property.    As described in #15033, this is not true in actual practice. Especially because `NetworkStream.ReadAsync()` ignores the `CancellationToken` altogether.    Thus, I think the documentation for `Stream.ReadAsync()` should be changed to indicate that the parameter is advisory. For code accepting a `Stream`, there is no way (without reflection which should not be required of consumersand, even with reflection, one may be consuming a stream which wraps `NetworkStream`) to tell if the `CancellationToken` will be ignored or not. So such code always needs to be written in such a way as to support streams with uncancellable read (and write?) operations.
25157	area-System.Diagnostics	System.DllNotFoundException: Unable to load DLL 'libproc':	"_From @livarcocc on October 6, 2017 16:16_  _From @Petermarcu on October 6, 2017 16:3_  @m2b commented on [Thu Apr 20 2017](https://github.com/dotnet/core/issues/599)  **Here is the simple test project code**    using System;  using Xunit;    namespace ITVizion.ActionBoard.RepositoryInMemory  {      public class Test      {          [Fact]          public void Test1()          {              Assert.Equal(1,1);          }      }  }      =========================================================================  **Here is the command window output.  dotnet crashes!**    blackielanetMBP:actionboard.git blackie$ dotnet test ITVizion.ActionBoard.RepositoryInMemory.Test/ITVizion.ActionBoard.RepositoryInMemory.Test.csproj    Welcome to .NET Core!  ---------------------  Learn more about .NET Core @ https://aka.ms/dotnet-docs. Use dotnet --help to see available commands or go to https://aka.ms/dotnet-cli-docs.    Telemetry  --------------  The .NET Core tools collect usage data in order to improve your experience. The data is anonymous and does not include command-line arguments. The data is collected by Microsoft and shared with the community.  You can opt out of telemetry by setting a DOTNET_CLI_TELEMETRY_OPTOUT environment variable to 1 using your favorite shell.  You can read more about .NET Core tools telemetry @ https://aka.ms/dotnet-cli-telemetry.    Configuring...  -------------------  A command is running to initially populate your local package cache, to improve restore speed and enable offline access. This command will take up to a minute to complete and will only happen once.  Decompressing 100% 5896 ms  Expanding 100% 7278 ms  Failed to create prime the NuGet cache. restore failed with: 134    Unhandled Exception: System.DllNotFoundException: Unable to load DLL 'libproc': The specified module could not be found.   (Exception from HRESULT: 0x8007007E)     at Interop.libproc.proc_pidpath(Int32 pid, Byte* buffer, UInt32 bufferSize)     at Interop.libproc.proc_pidpath(Int32 pid)     at System.Diagnostics.Process.ResolvePath(String filename)     at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo)     at System.Diagnostics.Process.Start()     at Microsoft.DotNet.Cli.ForwardingApp.Execute()     at Microsoft.DotNet.Tools.MSBuild.MSBuildForwardingApp.Execute()     at Microsoft.DotNet.Tools.Test.TestCommand.<>c__DisplayClass0_0.<Run>b__0()     at Microsoft.DotNet.Cli.CommandLine.CommandLineApplication.Execute(String[] args)     at Microsoft.DotNet.Tools.Test.TestCommand.Run(String[] args)     at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)     at Microsoft.DotNet.Cli.Program.Main(String[] args)  Abort trap: 6    =========================================================================  **Here is the Mac Problem Report**    Process:               dotnet [26183]  Path:                  /usr/local/share/dotnet/dotnet  Identifier:            dotnet  Version:               0  Code Type:             X86-64 (Native)  Parent Process:        dotnet [26170]  Responsible:           dotnet [26183]  User ID:               501    Date/Time:             2017-04-20 17:28:26.552 -0700  OS Version:            Mac OS X 10.12.4 (16E195)  Report Version:        12  Anonymous UUID:        E3FC06FA-F158-98C8-DDAD-74F8F018A97A    Sleep/Wake UUID:       ECCEF7E0-8ED4-4B9C-9EF0-00E0D60B0BBE    Time Awake Since Boot: 470000 seconds  Time Since Wake:       5600 seconds    System Integrity Protection: disabled    Crashed Thread:        0  Dispatch queue: com.apple.main-thread    Exception Type:        EXC_CRASH (SIGABRT)  Exception Codes:       0x0000000000000000, 0x0000000000000000  Exception Note:        EXC_CORPSE_NOTIFY    Application Specific Information:  abort() called    Thread 0 Crashed:: Dispatch queue: com.apple.main-thread  0   libsystem_kernel.dylib         0x00007fffa33bed42 __pthread_kill + 10  1   libsystem_pthread.dylib        0x00007fffa34ac5bf pthread_kill + 90  2   libsystem_c.dylib              0x00007fffa3324420 abort + 129  3   libcoreclr.dylib               0x0000000104dc1312 PROCEndProcess(void*, unsigned int, int) + 226  4   libcoreclr.dylib               0x00000001050928c1 UnwindManagedExceptionPass1(PAL_SEHException&, _CONTEXT*) + 833  5   libcoreclr.dylib               0x0000000105092979 DispatchManagedException(PAL_SEHException&, bool) + 73  6   libcoreclr.dylib               0x0000000104f1c6c9 PreStubWorker + 937  7   libcoreclr.dylib               0x00000001050a0579 ThePreStub + 92  8   ???                            0x000000010c1cad79 0 + 4498173305  9   ???                            0x000000010c1c66b1 0 + 4498155185  10  ???                            0x000000010c1c6181 0 + 4498153857  11  ???                            0x000000010c1c51cb 0 + 4498149835  12  ???                            0x000000010bc5cabd 0 + 4492479165  13  ???                            0x000000010bc574b2 0 + 4492457138  14  ???                            0x000000010bc6271b 0 + 4492502811  15  ???                            0x000000010bc5f21f 0 + 4492489247  16  ???                            0x000000010bc55bc2 0 + 4492450754  17  ???                            0x000000010bc5d4df 0 + 4492481759  18  ???                            0x000000010bc5cf8d 0 + 4492480397  19  libcoreclr.dylib               0x000000010509f9a1 CallDescrWorkerInternal + 124  20  libcoreclr.dylib               0x0000000104f8bb43 MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 707  21  libcoreclr.dylib               0x0000000104e59fc4 RunMain(MethodDesc*, short, int*, PtrArray**) + 932  22  libcoreclr.dylib               0x0000000104e5a18d Assembly::ExecuteMainMethod(PtrArray**, int) + 221  23  libcoreclr.dylib               0x0000000104e9762a CorHost2::ExecuteAssembly(unsigned int, char16_t const*, int, char16_t const**, unsigned int*) + 442  24  libcoreclr.dylib               0x0000000104dca4f3 coreclr_execute_assembly + 259  25  libhostpolicy.dylib            0x0000000104d027e8 coreclr::execute_assembly(void*, unsigned int, int, char const**, char const*, unsigned int*) + 152  26  libhostpolicy.dylib            0x0000000104cf1388 run(arguments_t const&) + 20568  27  libhostpolicy.dylib            0x0000000104cf1d0d corehost_main + 1405  28  libhostfxr.dylib               0x0000000104c3c90e execute_app(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, corehost_init_t*, int, char const**) + 446  29  libhostfxr.dylib               0x0000000104c52679 fx_muxer_t::read_config_and_execute(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > > > > const&, int, char const**, host_mode_t) + 8441  30  libhostfxr.dylib               0x0000000104c504a9 fx_muxer_t::parse_args_and_execute(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, int, char const**, bool, host_mode_t, bool*) + 8425  31  libhostfxr.dylib               0x0000000104c53a09 fx_muxer_t::execute(int, char const**) + 4537  32  libhostfxr.dylib               0x0000000104c3c985 hostfxr_main + 53  33  dotnet                         0x0000000104b707ac run(int, char const**) + 1420  34  dotnet                         0x0000000104b708ee main + 158  35  libdyld.dylib                  0x00007fffa3290235 start + 1    Thread 1:  0   libsystem_kernel.dylib         0x00007fffa33b734a mach_msg_trap + 10  1   libsystem_kernel.dylib         0x00007fffa33b6797 mach_msg + 55  2   libcoreclr.dylib               0x0000000104dc761a MachMessage::Receive(unsigned int) + 74  3   libcoreclr.dylib               0x0000000104dc6539 SEHExceptionThread(void*) + 105  4   libsystem_pthread.dylib        0x00007fffa34a99af _pthread_body + 180  5   libsystem_pthread.dylib        0x00007fffa34a98fb _pthread_start + 286  6   libsystem_pthread.dylib        0x00007fffa34a9101 thread_start + 13    Thread 2:  0   libsystem_kernel.dylib         0x00007fffa33c019e poll + 10  1   libcoreclr.dylib               0x0000000104db9afe CorUnix::CPalSynchronizationManager::ThreadPrepareForShutdown() + 30  2   libcoreclr.dylib               0x0000000104dbb729 CorUnix::CPalSynchronizationManager::WorkerThread(void*) + 1177  3   libcoreclr.dylib               0x0000000104dc3e48 CorUnix::CPalThread::ThreadEntry(void*) + 328  4   libsystem_pthread.dylib        0x00007fffa34a99af _pthread_body + 180  5   libsystem_pthread.dylib        0x00007fffa34a98fb _pthread_start + 286  6   libsystem_pthread.dylib        0x00007fffa34a9101 thread_start + 13    Thread 3:  0   libsystem_kernel.dylib         0x00007fffa33bea3e __open + 10  1   libcoreclr.dylib               0x0000000104e36b0f TwoWayPipe::WaitForConnection() + 31  2   libcoreclr.dylib               0x0000000104e2e8c1 DbgTransportSession::TransportWorker() + 145  3   libcoreclr.dylib               0x0000000104e2d4e9 DbgTransportSession::TransportWorkerStatic(void*) + 9  4   libcoreclr.dylib               0x0000000104dc3e48 CorUnix::CPalThread::ThreadEntry(void*) + 328  5   libsystem_pthread.dylib        0x00007fffa34a99af _pthread_body + 180  6   libsystem_pthread.dylib        0x00007fffa34a98fb _pthread_start + 286  7   libsystem_pthread.dylib        0x00007fffa34a9101 thread_start + 13    Thread 4:  0   libsystem_kernel.dylib         0x00007fffa33bebf2 __psynch_cvwait + 10  1   libsystem_pthread.dylib        0x00007fffa34aa86e _pthread_cond_wait + 712  2   libcoreclr.dylib               0x0000000104db97a2 CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 306  3   libcoreclr.dylib               0x0000000104db93f6 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 390  4   libcoreclr.dylib               0x0000000104dbe3e8 CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int) + 1912  5   libcoreclr.dylib               0x0000000104e2bc73 DebuggerRCThread::MainLoop() + 755  6   libcoreclr.dylib               0x0000000104e2b927 DebuggerRCThread::ThreadProc() + 263  7   libcoreclr.dylib               0x0000000104e2b5d4 DebuggerRCThread::ThreadProcStatic(void*) + 132  8   libcoreclr.dylib               0x0000000104dc3e48 CorUnix::CPalThread::ThreadEntry(void*) + 328  9   libsystem_pthread.dylib        0x00007fffa34a99af _pthread_body + 180  10  libsystem_pthread.dylib        0x00007fffa34a98fb _pthread_start + 286  11  libsystem_pthread.dylib        0x00007fffa34a9101 thread_start + 13    Thread 5:  0   libsystem_kernel.dylib         0x00007fffa33bebf2 __psynch_cvwait + 10  1   libsystem_pthread.dylib        0x00007fffa34aa86e _pthread_cond_wait + 712  2   libcoreclr.dylib               0x0000000104db9785 CorUnix::CPalSynchronizationManager::ThreadNativeWait(CorUnix::_ThreadNativeWaitData*, unsigned int, CorUnix::ThreadWakeupReason*, unsigned int*) + 277  3   libcoreclr.dylib               0x0000000104db93f6 CorUnix::CPalSynchronizationManager::BlockThread(CorUnix::CPalThread*, unsigned int, bool, bool, CorUnix::ThreadWakeupReason*, unsigned int*) + 390  4   libcoreclr.dylib               0x0000000104dbe3e8 CorUnix::InternalWaitForMultipleObjectsEx(CorUnix::CPalThread*, unsigned int, void* const*, int, unsigned int, int) + 1912  5   libcoreclr.dylib               0x0000000104dbe636 WaitForSingleObjectEx + 70  6   libcoreclr.dylib               0x000000010507b340 CLREventBase::WaitEx(unsigned int, WaitMode, PendingSync*) + 176  7   libcoreclr.dylib               0x0000000104fd0e6f FinalizerThread::WaitForFinalizerEvent(CLREvent*) + 31  8   libcoreclr.dylib               0x0000000104fd0fe3 FinalizerThread::FinalizerThreadWorker(void*) + 115  9   libcoreclr.dylib               0x0000000104f4b15a ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) + 378  10  libcoreclr.dylib               0x0000000104f4b859 ManagedThreadBase::FinalizerBase(void (*)(void*)) + 73  11  libcoreclr.dylib               0x0000000104fd13cc FinalizerThread::FinalizerThreadStart(void*) + 204  12  libcoreclr.dylib               0x0000000104dc3e48 CorUnix::CPalThread::ThreadEntry(void*) + 328  13  libsystem_pthread.dylib        0x00007fffa34a99af _pthread_body + 180  14  libsystem_pthread.dylib        0x00007fffa34a98fb _pthread_start + 286  15  libsystem_pthread.dylib        0x00007fffa34a9101 thread_start + 13    Thread 6:  0   libsystem_kernel.dylib         0x00007fffa33b734a mach_msg_trap + 10  1   libsystem_kernel.dylib         0x00007fffa33b6797 mach_msg + 55  2   libclrjit.dylib                0x0000000105bb174a MachMessage::Receive(unsigned int) + 74  3   libclrjit.dylib                0x0000000105bb0669 SEHExceptionThread(void*) + 105  4   libsystem_pthread.dylib        0x00007fffa34a99af _pthread_body + 180  5   libsystem_pthread.dylib        0x00007fffa34a98fb _pthread_start + 286  6   libsystem_pthread.dylib        0x00007fffa34a9101 thread_start + 13    Thread 7:  0   libsystem_kernel.dylib         0x00007fffa33bf44e __workq_kernreturn + 10  1   libsystem_pthread.dylib        0x00007fffa34a9695 _pthread_wqthread + 1426  2   libsystem_pthread.dylib        0x00007fffa34a90f1 start_wqthread + 13    Thread 0 crashed with X86 Thread State (64-bit):    rax: 0x0000000000000000  rbx: 0x0000000000000006  rcx: 0x00007fff5b0927c8  rdx: 0x0000000000000000    rdi: 0x0000000000000307  rsi: 0x0000000000000006  rbp: 0x00007fff5b0927f0  rsp: 0x00007fff5b0927c8     r8: 0x00007faa1b8088f8   r9: 0x00000000007a682f  r10: 0x0000000008000000  r11: 0x0000000000000206    r12: 0x00007fff5b092e30  r13: 0x0000000000000000  r14: 0x00007fffac1f43c0  r15: 0x0000000000000000    rip: 0x00007fffa33bed42  rfl: 0x0000000000000206  cr2: 0x00007fffac1d6128      Logical CPU:     0  Error Code:      0x02000148  Trap Number:     133      Binary Images:         0x104b65000 -        0x104b81ff3 +dotnet (0) <3D909F9D-70EC-3599-8378-D1E3D3F3C4C2> /usr/local/share/dotnet/dotnet         0x104bbf000 -        0x104c62ff7 +libhostfxr.dylib (0) <C0FDA7FE-45E6-3289-8926-3DA0A4901323> /usr/local/share/dotnet/host/fxr/1.1.0/libhostfxr.dylib         0x104c8c000 -        0x104d48ff3 +libhostpolicy.dylib (0) <BFE7338C-2137-3433-A8F8-FEB0390BAF83> /usr/local/share/dotnet/shared/Microsoft.NETCore.App/1.1.1/libhostpolicy.dylib         0x104d79000 -        0x10529cfff +libcoreclr.dylib (0) <40FA6CB2-53C9-3176-8516-FE40B2D8F3C8> /usr/local/share/dotnet/shared/Microsoft.NETCore.App/1.1.1/libcoreclr.dylib         0x1055cc000 -        0x105609dc7  dyld (433.5) <8239D0D7-66F6-3C44-A77F-586F74525DA3> /usr/lib/dyld         0x1059f4000 -        0x105bf6fff +libclrjit.dylib (0) <C4B9490D-6AC6-3CEE-9A9C-90495E36699C> /usr/local/share/dotnet/shared/Microsoft.NETCore.App/1.1.1/libclrjit.dylib         0x105cc0000 -        0x105cc8fff +System.Globalization.Native.dylib (0) <60FCF655-55BA-37A9-924C-157C9E8E7AC1> /usr/local/share/dotnet/shared/Microsoft.NETCore.App/1.1.1/System.Globalization.Native.dylib         0x10759d000 -        0x1075a4ffb +System.Native.dylib (0) <5F1F2A95-1960-379D-A897-AF4F76F06D11> /usr/local/share/dotnet/shared/Microsoft.NETCore.App/1.1.1/System.Native.dylib      0x7fff8a057000 -     0x7fff8a057fff  com.apple.Accelerate (1.11 - Accelerate 1.11) <D7745BB9-42FD-3443-9265-151413E4C8AD> /System/Library/Frameworks/Accelerate.framework/Versions/A/Accelerate      0x7fff8a070000 -     0x7fff8a6b0fe3  com.apple.vImage (8.1 - ???) <B1786726-6477-327E-83F4-8EFF4D15DFAC> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vImage.framework/Versions/A/vImage      0x7fff8a6b1000 -     0x7fff8a878fef  libBLAS.dylib (1185.50.4) <7AF8DB9A-E33B-30EB-8767-87AFB951E231> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib      0x7fff8a879000 -     0x7fff8a890fff  libBNNS.dylib (15) <26F32264-148E-35E5-A280-CA035CB3D6F0> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBNNS.dylib      0x7fff8a891000 -     0x7fff8ac9cfff  libLAPACK.dylib (1185.50.4) <51B2BABA-F736-3663-885A-65A8991D3560> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib      0x7fff8ac9d000 -     0x7fff8acb3fff  libLinearAlgebra.dylib (1185.50.4) <0EC25E70-05DC-3615-85B6-81721566CF1D> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLinearAlgebra.dylib      0x7fff8acb4000 -     0x7fff8acbafff  libQuadrature.dylib (3) <EF56C8E6-DE22-3C69-B543-A8648F335FDD> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libQuadrature.dylib      0x7fff8acbb000 -     0x7fff8acceff7  libSparseBLAS.dylib (1185.50.4) <0BDCF6A7-0228-3719-81C7-B6EBC7911320> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libSparseBLAS.dylib      0x7fff8accf000 -     0x7fff8ae1cff7  libvDSP.dylib (600) <9D9CFF97-2A64-341A-AB35-DC0C76068B9C> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvDSP.dylib      0x7fff8ae1d000 -     0x7fff8aed4fff  libvMisc.dylib (600) <661B825D-274E-3B85-B160-89873AD65A62> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvMisc.dylib      0x7fff8aed5000 -     0x7fff8aed5fff  com.apple.Accelerate.vecLib (3.11 - vecLib 3.11) <B8F2814E-0927-3905-A394-EFEB5636DE76> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/vecLib      0x7fff8bf7f000 -     0x7fff8bf7ffff  com.apple.ApplicationServices (48 - 48) <847E54B5-DEA4-3B50-93CE-4FC67789F179> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices      0x7fff8bf80000 -     0x7fff8bfeeff7  com.apple.ApplicationServices.ATS (377 - 422.2) <012ACEE0-9A90-3998-8495-734E105117C0> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/ATS      0x7fff8c088000 -     0x7fff8c1b7ff7  libFontParser.dylib (194.11) <635DF6EF-18DF-3D06-90AA-88C509B43068> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontParser.dylib      0x7fff8c1b8000 -     0x7fff8c202fff  libFontRegistry.dylib (196.4) <EA96AE47-3369-3DEA-BB82-98348ADBD85B> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontRegistry.dylib      0x7fff8c2fe000 -     0x7fff8c3a8ff7  com.apple.ColorSync (4.12.0 - 502.2) <ACA4001E-A0E3-33F6-9CD6-EEC2AA15E322> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSync.framework/Versions/A/ColorSync      0x7fff8c3a9000 -     0x7fff8c3f9ff7  com.apple.HIServices (1.22 - 591) <D16A5699-F3A2-3AF5-93B1-9E2F487F1577> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/HIServices      0x7fff8c3fa000 -     0x7fff8c409ff3  com.apple.LangAnalysis (1.7.0 - 1.7.0) <2CBE7F61-2056-3F96-99A1-0D527796AFA6> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LangAnalysis.framework/Versions/A/LangAnalysis      0x7fff8c40a000 -     0x7fff8c457fff  com.apple.print.framework.PrintCore (12 - 491) <5027FD58-F0EE-33E4-8577-934CA06CD2AF> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/PrintCore      0x7fff8c458000 -     0x7fff8c493fff  com.apple.QD (3.12 - 313) <B339C41D-8CDF-3342-8414-F9717DCCADD4> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/QD.framework/Versions/A/QD      0x7fff8c494000 -     0x7fff8c49fff7  com.apple.speech.synthesis.framework (6.3.3 - 6.3.3) <5808F070-8199-36C9-B3C9-F9B98D5AA359> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/SpeechSynthesis.framework/Versions/A/SpeechSynthesis      0x7fff8c4a0000 -     0x7fff8c6acfff  com.apple.audio.toolbox.AudioToolbox (1.14 - 1.14) <6EEF498D-8233-3622-B34B-49FDD9D4DF14> /System/Library/Frameworks/AudioToolbox.framework/Versions/A/AudioToolbox      0x7fff8c816000 -     0x7fff8cbf0ff7  com.apple.CFNetwork (811.4.18 - 811.4.18) <9CE329E8-6177-3474-976D-F5C63FC875CD> /System/Library/Frameworks/CFNetwork.framework/Versions/A/CFNetwork      0x7fff8d20c000 -     0x7fff8d299fff  com.apple.audio.CoreAudio (4.3.0 - 4.3.0) <184D9C49-248F-3374-944C-FD1A99A6B32E> /System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio      0x7fff8d2ae000 -     0x7fff8d5adff3  com.apple.CoreData (120 - 754.2) <C9933C8C-85D5-3FB9-8D6D-DB80AB3F496B> /System/Library/Frameworks/CoreData.framework/Versions/A/CoreData      0x7fff8d65b000 -     0x7fff8daeefff  com.apple.CoreFoundation (6.9 - 1349.65) <2B7C4BA4-D69E-3651-93DF-3930880B5084> /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation      0x7fff8daef000 -     0x7fff8e192ff7  com.apple.CoreGraphics (2.0 - 1070.22) <1676F5EC-AEE3-3C52-97C4-43CBF705EA2A> /System/Library/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics      0x7fff8e53b000 -     0x7fff8e53bfff  com.apple.CoreServices (775.19 - 775.19) <8AA95E32-AB13-3792-B248-FA150D8E6583> /System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices      0x7fff8e53c000 -     0x7fff8e58dfff  com.apple.AE (712.5 - 712.5) <F0B36ABC-C0D4-370E-8257-11A7F351EC7F> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/AE.framework/Versions/A/AE      0x7fff8e58e000 -     0x7fff8e869ff7  com.apple.CoreServices.CarbonCore (1159.6 - 1159.6) <08AC074C-965B-3EDF-8E45-0707C8DE9EAD> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CarbonCore.framework/Versions/A/CarbonCore      0x7fff8e86a000 -     0x7fff8e89dfff  com.apple.DictionaryServices (1.2 - 274) <D23866E2-F7C8-3984-A9D4-96552CCDE573> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/DictionaryServices.framework/Versions/A/DictionaryServices      0x7fff8e89e000 -     0x7fff8e8a6ff3  com.apple.CoreServices.FSEvents (1230.50.1 - 1230.50.1) <2AD1B0E5-7214-37C4-8D11-A27C9CAC0F74> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/FSEvents.framework/Versions/A/FSEvents      0x7fff8e8a7000 -     0x7fff8ea13ff7  com.apple.LaunchServices (775.19 - 775.19) <1CF81B5F-BA1A-3FC6-B4F9-E0A319AE94D0> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices      0x7fff8ea14000 -     0x7fff8eac4ffb  com.apple.Metadata (10.7.0 - 1075.40) <F205A001-250D-3D9A-8375-0F7A834C46E6> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/Metadata.framework/Versions/A/Metadata      0x7fff8eac5000 -     0x7fff8eb24fff  com.apple.CoreServices.OSServices (775.19 - 775.19) <724312AC-5CE8-333C-BC35-BC5AB1583D9A> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/OSServices.framework/Versions/A/OSServices      0x7fff8eb25000 -     0x7fff8eb95fff  com.apple.SearchKit (1.4.0 - 1.4.0) <7A6DDA2B-03F1-3137-BA9E-1CC211973E26> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SearchKit.framework/Versions/A/SearchKit      0x7fff8eb96000 -     0x7fff8ebdbff7  com.apple.coreservices.SharedFileList (38 - 38) <DA096678-93AB-3291-BDE2-482F1D544589> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SharedFileList.framework/Versions/A/SharedFileList      0x7fff8ec64000 -     0x7fff8edb0ff3  com.apple.CoreText (352.0 - 544.12) <1ED17C4A-9E2D-3537-8C5F-FB675492A002> /System/Library/Frameworks/CoreText.framework/Versions/A/CoreText      0x7fff8ef56000 -     0x7fff8ef5bfff  com.apple.DiskArbitration (2.7 - 2.7) <A4DCD470-D8EA-37E9-BDCA-A2B469754C12> /System/Library/Frameworks/DiskArbitration.framework/Versions/A/DiskArbitration      0x7fff8f0ed000 -     0x7fff8f493ff3  com.apple.Foundation (6.9 - 1349.64) <49C8DA40-9E5B-33F9-B092-F50115B59E95> /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation      0x7fff8f4bf000 -     0x7fff8f4f0ff7  com.apple.GSS (4.0 - 2.0) <6FADED0B-0425-3567-A75A-040C5A4638EB> /System/Library/Frameworks/GSS.framework/Versions/A/GSS      0x7fff8f654000 -     0x7fff8f6e9fff  com.apple.framework.IOKit (2.0.2 - 1324.50.21) <BA7DC917-35A9-3D1B-BBEC-ADF4495A166D> /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit      0x7fff8f6ea000 -     0x7fff8f6f0ffb  com.apple.IOSurface (159.6 - 159.6) <661BFCC0-85AB-3343-853E-3797932871D4> /System/Library/Frameworks/IOSurface.framework/Versions/A/IOSurface      0x7fff8f743000 -     0x7fff8f8a5fff  com.apple.ImageIO.framework (3.3.0 - 1599.7) <EFABDE90-A1B0-3211-978B-FF1414355087> /System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO      0x7fff8f8a6000 -     0x7fff8f8aafff  libGIF.dylib (1599.7) <6004F3A9-A9F3-3287-A105-72870ED4537A> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libGIF.dylib      0x7fff8f8ab000 -     0x7fff8f99cff7  libJP2.dylib (1599.7) <447C19DA-1EC7-3145-9C03-392084CEC012> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJP2.dylib      0x7fff8f99d000 -     0x7fff8f9c0fff  libJPEG.dylib (1599.7) <CA292CD5-38A5-33B2-B84C-185E46ABDD85> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJPEG.dylib      0x7fff8f9c1000 -     0x7fff8f9e7fff  libPng.dylib (1599.7) <5EFC9938-CA0F-3AAD-AB70-210089939A74> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libPng.dylib      0x7fff8f9e8000 -     0x7fff8f9eaff3  libRadiance.dylib (1599.7) <AE2355C1-1C5F-3F41-A156-3D0CE09FBF6D> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libRadiance.dylib      0x7fff8f9eb000 -     0x7fff8fa39ff7  libTIFF.dylib (1599.7) <5CE8FC45-4B15-355F-AF40-8A98F0ADC9CF> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libTIFF.dylib      0x7fff907a0000 -     0x7fff907b9ff7  com.apple.Kerberos (3.0 - 1) <B9D242EB-E325-3A21-9812-C77CBBFB0D51> /System/Library/Frameworks/Kerberos.framework/Versions/A/Kerberos      0x7fff918dc000 -     0x7fff918e4fff  com.apple.NetFS (6.0 - 4.0) <14A24D00-5673-330A-959D-87F72040DEFF> /System/Library/Frameworks/NetFS.framework/Versions/A/NetFS      0x7fff91cdb000 -     0x7fff91cf4ffb  com.apple.CFOpenDirectory (10.12 - 194) <2D856BB1-4865-3B54-A39A-CCBB25A4A935> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/Frameworks/CFOpenDirectory.framework/Versions/A/CFOpenDirectory      0x7fff91cf5000 -     0x7fff91d00ff7  com.apple.OpenDirectory (10.12 - 194) <D5977817-7507-3005-8DDC-AB059672BEA0> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/OpenDirectory      0x7fff93d19000 -     0x7fff9401afff  com.apple.security (7.0 - 57740.51.3) <E8E40839-4F2C-3954-9870-9F9BA185BC81> /System/Library/Frameworks/Security.framework/Versions/A/Security      0x7fff9401b000 -     0x7fff94090fff  com.apple.securityfoundation (6.0 - 55132.50.7) <2A013E36-EEB5-3E9A-AAA7-8E10EC49E75C> /System/Library/Frameworks/SecurityFoundation.framework/Versions/A/SecurityFoundation      0x7fff940bb000 -     0x7fff940beffb  com.apple.xpc.ServiceManagement (1.0 - 1) <00B5C305-37B4-378A-BCAE-5EC441A889C8> /System/Library/Frameworks/ServiceManagement.framework/Versions/A/ServiceManagement      0x7fff94445000 -     0x7fff944b4ff7  com.apple.SystemConfiguration (1.14 - 1.14) <A4B97859-CB45-3910-9785-0CAF015B46BC> /System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration      0x7fff96e54000 -     0x7fff96edf97f  com.apple.AppleJPEG (1.0 - 1) <B9E9570D-04A4-34E4-B756-D200043B25B8> /System/Library/PrivateFrameworks/AppleJPEG.framework/Versions/A/AppleJPEG      0x7fff98966000 -     0x7fff9896fffb  com.apple.CommonAuth (4.0 - 2.0) <216950CB-269F-3476-BA17-D6363AC49FBC> /System/Library/PrivateFrameworks/CommonAuth.framework/Versions/A/CommonAuth      0x7fff990b7000 -     0x7fff990c7fff  com.apple.CoreEmoji (1.0 - 40.3.3) <E9A28301-2D79-3A97-A046-028258A6ABE5> /System/Library/PrivateFrameworks/CoreEmoji.framework/Versions/A/CoreEmoji      0x7fff9c14c000 -     0x7fff9c1c2ff3  com.apple.Heimdal (4.0 - 2.0) <8F9C9041-66D5-36C9-8A4C-1658035C311D> /System/Library/PrivateFrameworks/Heimdal.framework/Versions/A/Heimdal      0x7fff9c903000 -     0x7fff9cabafff  com.apple.LanguageModeling (1.0 - 123.2.5) <E7EDBA2B-8B97-3EC8-BDB1-232287E07581> /System/Library/PrivateFrameworks/LanguageModeling.framework/Versions/A/LanguageModeling      0x7fff9d5d8000 -     0x7fff9d600fff  com.apple.MultitouchSupport.framework (368.14 - 368.14) <930109A4-6949-377F-AD30-F9B542CBAE1C> /System/Library/PrivateFrameworks/MultitouchSupport.framework/Versions/A/MultitouchSupport      0x7fff9d6b2000 -     0x7fff9d6bdfff  com.apple.NetAuth (6.2 - 6.2) <97F487D6-8089-31A8-B68C-6C1EAC6ED1B5> /System/Library/PrivateFrameworks/NetAuth.framework/Versions/A/NetAuth      0x7fffa0515000 -     0x7fffa051bff7  com.apple.TCC (1.0 - 1) <911B534B-4AC7-34E4-935E-E42ECD008CBC> /System/Library/PrivateFrameworks/TCC.framework/Versions/A/TCC      0x7fffa1924000 -     0x7fffa1926ffb  com.apple.loginsupport (1.0 - 1) <F3140B97-12C3-35A7-9D3D-43DA2D13C113> /System/Library/PrivateFrameworks/login.framework/Versions/A/Frameworks/loginsupport.framework/Versions/A/loginsupport      0x7fffa197b000 -     0x7fffa1996ff7  libCRFSuite.dylib (34) <F78B7F5F-0B4F-35C6-AA2F-84EE9CB22137> /usr/lib/libCRFSuite.dylib      0x7fffa1997000 -     0x7fffa19a2fff  libChineseTokenizer.dylib (21) <0886E908-A825-36AF-B94B-2361FD8BC2A1> /usr/lib/libChineseTokenizer.dylib      0x7fffa1a34000 -     0x7fffa1a35ff3  libDiagnosticMessagesClient.dylib (102) <84A04D24-0E60-3810-A8C0-90A65E2DF61A> /usr/lib/libDiagnosticMessagesClient.dylib      0x7fffa1c6d000 -     0x7fffa1c6dfff  libOpenScriptingUtil.dylib (172) <90743888-C1E8-34E3-924E-1A754B2B63B9> /usr/lib/libOpenScriptingUtil.dylib      0x7fffa1c73000 -     0x7fffa1c74ffb  libSystem.B.dylib (1238.51.1) <D9B20A4F-87BC-36CB-9405-80E105666725> /usr/lib/libSystem.B.dylib      0x7fffa1ce0000 -     0x7fffa1d0bff3  libarchive.2.dylib (41.50.2) <B4F507BC-B24E-3BE7-B658-94D798E2CD81> /usr/lib/libarchive.2.dylib      0x7fffa1e05000 -     0x7fffa1e05ff3  libauto.dylib (187) <34388D0B-C539-3C1B-9408-2BC152162E43> /usr/lib/libauto.dylib      0x7fffa1e06000 -     0x7fffa1e16ff3  libbsm.0.dylib (34) <20084796-B04D-3B35-A003-EA11459557A9> /usr/lib/libbsm.0.dylib      0x7fffa1e17000 -     0x7fffa1e25ff7  libbz2.1.0.dylib (38) <25D9FACF-5583-348A-80A0-2B51DCE37680> /usr/lib/libbz2.1.0.dylib      0x7fffa1e26000 -     0x7fffa1e7cff7  libc++.1.dylib (307.5) <0B43BB5D-E6EB-3464-8DE9-B41AC8ED9D1C> /usr/lib/libc++.1.dylib      0x7fffa1e7d000 -     0x7fffa1ea7fff  libc++abi.dylib (307.3) <30199352-88BF-30BD-8CFF-2A4FBE247523> /usr/lib/libc++abi.dylib      0x7fffa1ea8000 -     0x7fffa1eb8ffb  libcmph.dylib (6) <2B5D405E-2D0B-3320-ABD6-622934C86ABE> /usr/lib/libcmph.dylib      0x7fffa1eb9000 -     0x7fffa1ecfff7  libcompression.dylib (39) <BDAA8CC7-0BFC-36EC-9E75-58BDC15AC3B6> /usr/lib/libcompression.dylib      0x7fffa1ed0000 -     0x7fffa1ed0ff7  libcoretls.dylib (121.50.4) <64B1001E-10F6-3542-A3B2-C4B49F51817F> /usr/lib/libcoretls.dylib      0x7fffa1ed1000 -     0x7fffa1ed2ff3  libcoretls_cfhelpers.dylib (121.50.4) <1A10303E-5EB0-3C7C-9165-021FCDFD934D> /usr/lib/libcoretls_cfhelpers.dylib      0x7fffa220f000 -     0x7fffa2262ff7  libcups.2.dylib (450) <F7AC4FF1-9755-3CFF-8CE3-F4FFACC43BEC> /usr/lib/libcups.2.dylib      0x7fffa22dd000 -     0x7fffa22ddfff  libenergytrace.dylib (15) <A1B040A2-7977-3097-9ADF-34FF181EB970> /usr/lib/libenergytrace.dylib      0x7fffa22ed000 -     0x7fffa22f2ff7  libheimdal-asn1.dylib (498.50.8) <A40E3196-235E-34CE-AD9A-8D1AFC5DE004> /usr/lib/libheimdal-asn1.dylib      0x7fffa22f3000 -     0x7fffa23e5ff7  libiconv.2.dylib (50) <42125B35-81D7-3FC4-9475-A26DBE10884D> /usr/lib/libiconv.2.dylib      0x7fffa23e6000 -     0x7fffa260bffb  libicucore.A.dylib (57163.0.1) <325E1C97-1C45-3A7E-9AFB-D1328E31D879> /usr/lib/libicucore.A.dylib      0x7fffa2611000 -     0x7fffa2612fff  liblangid.dylib (126) <2085E7A7-9A34-3735-87F4-F174EF8EABF0> /usr/lib/liblangid.dylib      0x7fffa2613000 -     0x7fffa262cffb  liblzma.5.dylib (10) <44BD0279-99DD-36B5-8A6E-C11432E2098D> /usr/lib/liblzma.5.dylib      0x7fffa262d000 -     0x7fffa2643ff7  libmarisa.dylib (5) <9030D214-5D0F-30CB-AC03-902C63909362> /usr/lib/libmarisa.dylib      0x7fffa2644000 -     0x7fffa28ecff7  libmecabra.dylib (744.8) <D429FCC9-42A4-38B3-8784-44024BC859EF> /usr/lib/libmecabra.dylib      0x7fffa291f000 -     0x7fffa2999ff3  libnetwork.dylib (856.50.56) <021B3FCF-6CFC-359D-845A-8A6AD7C54D73> /usr/lib/libnetwork.dylib      0x7fffa299a000 -     0x7fffa2d6fbc7  libobjc.A.dylib (709) <54CD8D1A-5C98-3559-B13A-932B3D3DD338> /usr/lib/libobjc.A.dylib      0x7fffa2d72000 -     0x7fffa2d76fff  libpam.2.dylib (21.30.1) <71EB0D88-DE84-3C8D-A2C5-58AA282BC5BC> /usr/lib/libpam.2.dylib      0x7fffa2d77000 -     0x7fffa2da8ff7  libpcap.A.dylib (67.50.2) <D4A7EFB6-15FE-3C9C-A47C-1CA3CB75D06C> /usr/lib/libpcap.A.dylib      0x7fffa2dc5000 -     0x7fffa2de1ffb  libresolv.9.dylib (64) <A244AE4C-00B0-396C-98FF-97FE4DB3DA30> /usr/lib/libresolv.9.dylib      0x7fffa2e31000 -     0x7fffa2f77fff  libsqlite3.dylib (254.5) <71E9B5E9-67D8-329E-86A6-894B885A542E> /usr/lib/libsqlite3.dylib      0x7fffa306c000 -     0x7fffa3079fff  libxar.1.dylib (357) <69547C64-E811-326F-BBED-490C6361BDCB> /usr/lib/libxar.1.dylib      0x7fffa307a000 -     0x7fffa3169ffb  libxml2.2.dylib (30.15) <99A58C37-98A2-3430-942A-D6038C1A198C> /usr/lib/libxml2.2.dylib      0x7fffa316a000 -     0x7fffa3193fff  libxslt.1.dylib (15.9) <71FFCDFF-4AAF-394C-8452-92F301FB1A46> /usr/lib/libxslt.1.dylib      0x7fffa3194000 -     0x7fffa31a5ff3  libz.1.dylib (67) <46E3FFA2-4328-327A-8D34-A03E20BFFB8E> /usr/lib/libz.1.dylib      0x7fffa31b4000 -     0x7fffa31b8ff7  libcache.dylib (79) <093A4DAB-8385-3D47-A350-E20CB7CCF7BF> /usr/lib/system/libcache.dylib      0x7fffa31b9000 -     0x7fffa31c3fff  libcommonCrypto.dylib (60092.50.5) <BE8380C5-C09D-3F48-A502-AEBB58231067> /usr/lib/system/libcommonCrypto.dylib      0x7fffa31c4000 -     0x7fffa31cbfff  libcompiler_rt.dylib (62) <55D47421-772A-32AB-B529-1A46C2F43B4D> /usr/lib/system/libcompiler_rt.dylib      0x7fffa31cc000 -     0x7fffa31d4fff  libcopyfile.dylib (138) <819BEA3C-DF11-3E3D-A1A1-5A51C5BF1961> /usr/lib/system/libcopyfile.dylib      0x7fffa31d5000 -     0x7fffa3258fdf  libcorecrypto.dylib (442.50.19) <8A39EE06-121C-3731-A9E9-35847064B3EE> /usr/lib/system/libcorecrypto.dylib      0x7fffa3259000 -     0x7fffa328afff  libdispatch.dylib (703.50.37) <D122E712-9593-31CA-BAC4-4A54410BF4A0> /usr/lib/system/libdispatch.dylib      0x7fffa328b000 -     0x7fffa3290ffb  libdyld.dylib (433.5) <129D3B44-FB21-3750-9A68-48B5C3DC632B> /usr/lib/system/libdyld.dylib      0x7fffa3291000 -     0x7fffa3291ffb  libkeymgr.dylib (28) <7AA011A9-DC21-3488-BF73-3B5B14D1FDD6> /usr/lib/system/libkeymgr.dylib      0x7fffa3292000 -     0x7fffa329effb  libkxld.dylib (3789.51.2) <0BD544C8-A376-3F91-8426-564B4F7FE7E6> /usr/lib/system/libkxld.dylib      0x7fffa329f000 -     0x7fffa329ffff  liblaunch.dylib (972.50.27) <037D198D-9B02-3EF9-A8E9-6F43EA555A9E> /usr/lib/system/liblaunch.dylib      0x7fffa32a0000 -     0x7fffa32a5ff3  libmacho.dylib (898) <17D5D855-F6C3-3B04-B680-E9BF02EF8AED> /usr/lib/system/libmacho.dylib      0x7fffa32a6000 -     0x7fffa32a8ff3  libquarantine.dylib (85.50.1) <7B32EA91-AB8B-32A4-8E52-9D3ED46CAC8E> /usr/lib/system/libquarantine.dylib      0x7fffa32a9000 -     0x7fffa32aaffb  libremovefile.dylib (45) <38D4CB9C-10CD-30D3-8B7B-A515EC75FE85> /usr/lib/system/libremovefile.dylib      0x7fffa32ab000 -     0x7fffa32c3ff7  libsystem_asl.dylib (349.50.5) <096E4228-3B7C-30A6-8B13-EC909A64499A> /usr/lib/system/libsystem_asl.dylib      0x7fffa32c4000 -     0x7fffa32c4ff7  libsystem_blocks.dylib (67) <10DC5404-73AB-35B3-A277-A8AFECB476EB> /usr/lib/system/libsystem_blocks.dylib      0x7fffa32c5000 -     0x7fffa3352fef  libsystem_c.dylib (1158.50.2) <B03F8915-1E9B-3C84-AED5-68E2E0031630> /usr/lib/system/libsystem_c.dylib      0x7fffa3353000 -     0x7fffa3356ffb  libsystem_configuration.dylib (888.51.2) <872C8A42-0871-3424-830B-84E587A75D27> /usr/lib/system/libsystem_configuration.dylib      0x7fffa3357000 -     0x7fffa335afff  libsystem_coreservices.dylib (41.4) <FD0915E8-9C43-3FCB-94E0-33C45DF028CD> /usr/lib/system/libsystem_coreservices.dylib      0x7fffa335b000 -     0x7fffa3373fff  libsystem_coretls.dylib (121.50.4) <EC6FCF07-DCFB-3A03-9CC9-6DD3709974C6> /usr/lib/system/libsystem_coretls.dylib      0x7fffa3374000 -     0x7fffa337afff  libsystem_dnssd.dylib (765.50.9) <FF02A197-7CEF-3684-8155-E5E225051E44> /usr/lib/system/libsystem_dnssd.dylib      0x7fffa337b000 -     0x7fffa33a4ff7  libsystem_info.dylib (503.50.4) <611DB84C-BF70-3F92-8702-B9F28A900920> /usr/lib/system/libsystem_info.dylib      0x7fffa33a5000 -     0x7fffa33c7ff7  libsystem_kernel.dylib (3789.51.2) <FC51D7B0-8292-3F6A-9231-64340B237EB7> /usr/lib/system/libsystem_kernel.dylib      0x7fffa33c8000 -     0x7fffa340ffe7  libsystem_m.dylib (3121.6) <A790C9A5-DD24-32F5-8FD7-33BFCE79AC87> /usr/lib/system/libsystem_m.dylib      0x7fffa3410000 -     0x7fffa342eff7  libsystem_malloc.dylib (116.50.8) <48D1BBA3-914E-3C65-AF70-C33B4A1B5233> /usr/lib/system/libsystem_malloc.dylib      0x7fffa342f000 -     0x7fffa3488ffb  libsystem_network.dylib (856.50.56) <FDE14243-4328-3EFD-824C-C0D314D7B540> /usr/lib/system/libsystem_network.dylib      0x7fffa3489000 -     0x7fffa3492ff3  libsystem_networkextension.dylib (563.50.32) <D5381DA9-529C-3588-BE16-A2245DE93423> /usr/lib/system/libsystem_networkextension.dylib      0x7fffa3493000 -     0x7fffa349cff3  libsystem_notify.dylib (165.20.1) <B8160190-A069-3B3A-BDF6-2AA408221FAE> /usr/lib/system/libsystem_notify.dylib      0x7fffa349d000 -     0x7fffa34a5fe7  libsystem_platform.dylib (126.50.8) <5940EAB7-84D6-34DC-9B38-111648B2B589> /usr/lib/system/libsystem_platform.dylib      0x7fffa34a6000 -     0x7fffa34b0ff7  libsystem_pthread.dylib (218.51.1) <62A84A68-431D-3B54-A7B6-31367CCF2884> /usr/lib/system/libsystem_pthread.dylib      0x7fffa34b1000 -     0x7fffa34b4ff7  libsystem_sandbox.dylib (592.50.47) <87A2327D-B7A1-3E4C-A85D-D3D9484003DB> /usr/lib/system/libsystem_sandbox.dylib      0x7fffa34b5000 -     0x7fffa34b6ff3  libsystem_secinit.dylib (24.50.4) <F78B847B-3565-3E4B-98A6-F7AD40392E2D> /usr/lib/system/libsystem_secinit.dylib      0x7fffa34b7000 -     0x7fffa34beffb  libsystem_symptoms.dylib (532.50.47) <9CF6A47C-8343-3E85-9C27-A8D98E726A8B> /usr/lib/system/libsystem_symptoms.dylib      0x7fffa34bf000 -     0x7fffa34d2ff7  libsystem_trace.dylib (518.51.1) <E1D540D8-CC88-3901-92BA-FC4B802FE0E8> /usr/lib/system/libsystem_trace.dylib      0x7fffa34d3000 -     0x7fffa34d8ffb  libunwind.dylib (35.3) <3D50D8A8-C460-334D-A519-2DA841102C6B> /usr/lib/system/libunwind.dylib      0x7fffa34d9000 -     0x7fffa3502ff7  libxpc.dylib (972.50.27) <ABC45890-DA23-3A4A-B50B-1384BD4CBBDF> /usr/lib/system/libxpc.dylib    External Modification Summary:    Calls made by other processes targeting this process:      task_for_pid: 0      thread_create: 0      thread_set_state: 0    Calls made by this process:      task_for_pid: 0      thread_create: 0      thread_set_state: 0    Calls made by all processes on this machine:      task_for_pid: 317840      thread_create: 0      thread_set_state: 0    VM Region Summary:  ReadOnly portion of Libraries: Total=204.7M resident=0K(0%) swapped_out_or_unallocated=204.7M(100%)  Writable regions: Total=97.1M written=0K(0%) resident=0K(0%) swapped_out=0K(0%) unallocated=97.1M(100%)                                     VIRTUAL   REGION   REGION TYPE                        SIZE    COUNT (non-coalesced)   ===========                     =======  =======   Dispatch continuations            16.0M        2   Kernel Alloc Once                    8K        2   MALLOC                            65.0M       12   MALLOC guard page                   16K        4   MALLOC_LARGE (reserved)           1168K        3         reserved VM address space (unallocated)  STACK GUARD                       56.0M        9   Stack                             11.6M        9   VM_ALLOCATE                        2.3G       77   VM_ALLOCATE (reserved)              64K        2         reserved VM address space (unallocated)  __DATA                            9928K      145   __LINKEDIT                       116.5M       10   __TEXT                            88.2M      149   __UNICODE                          556K        2   mapped file                       40.3M      130   shared memory                        8K        3   ===========                     =======  =======   TOTAL                              2.7G      544   TOTAL, minus reserved VM space     2.7G      544     Model: MacBookPro10,1, BootROM MBP101.00EE.B12, 4 processors, Intel Core i7, 2.3 GHz, 16 GB, SMC 2.3f35  Graphics: Intel HD Graphics 4000, Intel HD Graphics 4000, Built-In  Graphics: NVIDIA GeForce GT 650M, NVIDIA GeForce GT 650M, PCIe, 1024 MB  Memory Module: BANK 0/DIMM0, 8 GB, DDR3, 1600 MHz, 0x802C, 0x384B54463531323634485A2D314736453120  Memory Module: BANK 1/DIMM0, 8 GB, DDR3, 1600 MHz, 0x802C, 0x384B54463531323634485A2D314736453120  AirPort: spairport_wireless_card_type_airport_extreme (0x14E4, 0xEF), Broadcom BCM43xx 1.0 (7.21.171.124.1a2)  Bluetooth: Version 5.0.4f18, 3 services, 27 devices, 1 incoming serial ports  Network Service: Thunderbolt Ethernet, Ethernet, en4  PCI Card: Apple 57762-A0, Ethernet Controller, Thunderbolt@195,0,0  Serial ATA Device: APPLE SSD SM512E, 500.28 GB  USB Device: USB 2.0 Bus  USB Device: Hub  USB Device: FaceTime HD Camera (Built-in)  USB Device: USB 2.0 Bus  USB Device: Hub  USB Device: Hub  USB Device: Apple Internal Keyboard / Trackpad  USB Device: BRCM20702 Hub  USB Device: Bluetooth USB Host Controller  USB Device: USB 3.0 Bus  Thunderbolt Bus: MacBook Pro, Apple Inc., 23.4  Thunderbolt Device: Thunderbolt to Gigabit Ethernet Adapter, Apple Inc., 3, 5.5      ---  @Petermarcu commented on [Wed Jun 14 2017](https://github.com/dotnet/core/issues/599#issuecomment-308614973)  @m2b , Any chance you can share more about which version of everything you are running and how you installed it? Through the installer or from the tar.gz?  ---  @Petermarcu commented on [Wed Jun 28 2017](https://github.com/dotnet/core/issues/599#issuecomment-311856464)  I'm going to close this because we need more info. Please reopen if you have more info you can share. Thanks!  ---  @jpcarrascal commented on [Sun Jul 09 2017](https://github.com/dotnet/core/issues/599#issuecomment-313953236)  I have exactly the same problem.  I am running OS X El Capitan (10.11.6).  dotnet --version output is 1.0.4.  I tried both the installer and running the binary from the tar.gz and the result is the same. The only difference is that in the former case I also get a ""dotnet quit unexpectedly"" window.    I'd appreciate any help and I'll be happy to provide more diagnostics information if needed.    Thanks!    JP  ---  @richlander commented on [Sun Jul 09 2017](https://github.com/dotnet/core/issues/599#issuecomment-313994521)  /cc @livarcocc     _Copied from original issue: dotnet/cli#7777_  _Copied from original issue: dotnet/core-setup#3279_"
25159	area-System.Drawing	Remove forced GC during System.Drawing.Common shutdown	System.Drawing.Common is forcing GC and waiting for pending finalizers during shutdown: https://github.com/dotnet/corefx/blob/7d3cd2adff8272efcf1bc6e0bf1902de6fd9e8e9/src/System.Drawing.Common/src/System/Drawing/GdiplusNative.Unix.cs#L95    This is potential reliability and performance and problem. This sequence is only going to collect unreachable objects, and so it is not providing any sort of guarantees that there are no outstanding GDI references.    If this is really necessary for some reason, the code needs to have a good comment describing why.
25162	area-System.Threading	Improve Diagnose Api of (Buffered)Channel	_From @JanEggers on September 23, 2017 9:39_  hi there,    im currently experimenting with System.Threading.Tasks.Channels.Channel.    for perfromance analysis it would be really great if BoundedChannel would be a public type and has properties that express the current buffer fill level.    Right now im using reflection to get that Info but i wonder why you make that an internal. (the info is there via debugview but neither toString or any public api can be used to get that information)    im using that information to determine performance bottlenecks in my app. I know that consumers of buffers with growing fill level have to be optimized.       _Copied from original issue: dotnet/corefxlab#1782_
25163	area-System.Net	[ManagedHandler] Do not change the request object provided by the user	It is general implementation policy in other handlers in System.Net.Http, to not modify the HttpRequestMessage object provided by the user through the SendAsync method. In managed handler implementation, this object is modified in several places, revisit this design to minimize altering the request object from user. For more information refer to the conversation in PR #25090 
25168	area-System.Runtime	Refactor S.R.Caching ObjectCache.Host tests to be able to run without creating a separate AppDomain	A handful of tests for System.Runtime.Caching borrowed from Mono are using a separate app domains to test ObjectCache.Host extensibility points. They would need some refactoring before we can run them in Core.     One simple option would be to put each of them into a separate project; another is to combine them all to run once. In my preliminary tests they would add about 2-3% of additional code coverage.
25169	area-System.Runtime	Adding tests for System.Runtime.Caching	Also adding a solution file for all System.Runtime.Caching projects  
25171	area-Infrastructure	System.Threading.Tasks.Dataflow 4.8.0 requires too many packages to install in VS 2015	We use System.Threading.Tasks.Dataflow library 4.7.0 in VS 2015 project. It is a single library for .NET 4.5    When we upgrade to 4.8.0, it requires a lot of other libraries. This makes is painful to upgrade and to create new deployment and installer for our project because we must now include many unnecessary libraries.    ```  Attempting to gather dependency information for package 'System.Threading.Tasks.Dataflow.4.8.0' with respect to project 'src\Project1', targeting '.NETFramework,Version=v4.6.2'  Gathering dependency information took 5,32 sec  Attempting to resolve dependencies for package 'System.Threading.Tasks.Dataflow.4.8.0' with DependencyBehavior 'Lowest'  One or more unresolved package dependency constraints detected in the existing packages.config file. All dependency constraints must be resolved to add or update packages. If these packages are being updated this message may be ignored, if not the following error(s) may be blocking the current package operation: 'System.Threading.Tasks.Dataflow 4.7.0'  Resolving dependency information took 0 ms  Resolving actions to install package 'System.Threading.Tasks.Dataflow.4.8.0'  Resolved actions to install package 'System.Threading.Tasks.Dataflow.4.8.0'  Found package 'Microsoft.NETCore.Platforms 1.1.0' in 'C:\dev\Project1\packages'.  Found package 'NETStandard.Library 1.6.1' in 'C:\dev\Project1\packages'.  Found package 'Microsoft.Win32.Primitives 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.AppContext 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Collections 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Collections.Concurrent 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Console 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Diagnostics.Debug 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Diagnostics.DiagnosticSource 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Diagnostics.Tools 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Diagnostics.Tracing 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Dynamic.Runtime 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Globalization 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Globalization.Calendars 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.IO 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.IO.Compression 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.IO.Compression.ZipFile 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.IO.FileSystem.Primitives 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.IO.FileSystem 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Linq 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Linq.Expressions 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Net.Primitives 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Net.Sockets 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.ObjectModel 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Reflection 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Reflection.Extensions 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Reflection.Primitives 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Resources.ResourceManager 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Runtime 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Runtime.Extensions 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Runtime.Handles 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Runtime.InteropServices 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Runtime.InteropServices.RuntimeInformation 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Runtime.Numerics 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Security.Cryptography.Encoding 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Security.Cryptography.Primitives 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Security.Cryptography.Algorithms 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Security.Cryptography.X509Certificates 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Net.Http 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Text.Encoding 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Text.Encoding.Extensions 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Text.RegularExpressions 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Threading 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Threading.Tasks 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Threading.Timer 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Xml.ReaderWriter 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Xml.XDocument 4.3.0' in 'C:\dev\Project1\packages'.  Found package 'System.Threading.Tasks.Dataflow 4.8.0' in 'C:\dev\Project1\packages'.  Removed package 'System.Threading.Tasks.Dataflow.4.7.0' from 'packages.config'  Successfully uninstalled 'System.Threading.Tasks.Dataflow.4.7.0' from Project1  Package 'Microsoft.NETCore.Platforms.1.1.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'Microsoft.NETCore.Platforms.1.1.0' to 'packages.config'  Successfully installed 'Microsoft.NETCore.Platforms 1.1.0' to Project1  Package 'Microsoft.Win32.Primitives.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'Microsoft.Win32.Primitives.4.3.0' to 'packages.config'  Successfully installed 'Microsoft.Win32.Primitives 4.3.0' to Project1  Package 'System.AppContext.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.AppContext.4.3.0' to 'packages.config'  Successfully installed 'System.AppContext 4.3.0' to Project1  Package 'System.Collections.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Collections.4.3.0' to 'packages.config'  Successfully installed 'System.Collections 4.3.0' to Project1  Package 'System.Collections.Concurrent.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Collections.Concurrent.4.3.0' to 'packages.config'  Successfully installed 'System.Collections.Concurrent 4.3.0' to Project1  Package 'System.Console.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Console.4.3.0' to 'packages.config'  Successfully installed 'System.Console 4.3.0' to Project1  Package 'System.Diagnostics.Debug.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Diagnostics.Debug.4.3.0' to 'packages.config'  Successfully installed 'System.Diagnostics.Debug 4.3.0' to Project1  Package 'System.Diagnostics.DiagnosticSource.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Diagnostics.DiagnosticSource.4.3.0' to 'packages.config'  Successfully installed 'System.Diagnostics.DiagnosticSource 4.3.0' to Project1  Package 'System.Diagnostics.Tools.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Diagnostics.Tools.4.3.0' to 'packages.config'  Successfully installed 'System.Diagnostics.Tools 4.3.0' to Project1  Package 'System.Diagnostics.Tracing.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Diagnostics.Tracing.4.3.0' to 'packages.config'  Successfully installed 'System.Diagnostics.Tracing 4.3.0' to Project1  Package 'System.Dynamic.Runtime.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Dynamic.Runtime.4.3.0' to 'packages.config'  Successfully installed 'System.Dynamic.Runtime 4.3.0' to Project1  Package 'System.Globalization.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Globalization.4.3.0' to 'packages.config'  Successfully installed 'System.Globalization 4.3.0' to Project1  Package 'System.Globalization.Calendars.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Globalization.Calendars.4.3.0' to 'packages.config'  Successfully installed 'System.Globalization.Calendars 4.3.0' to Project1  Package 'System.IO.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.IO.4.3.0' to 'packages.config'  Successfully installed 'System.IO 4.3.0' to Project1  Package 'System.IO.Compression.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.IO.Compression.4.3.0' to 'packages.config'  Successfully installed 'System.IO.Compression 4.3.0' to Project1  Package 'System.IO.Compression.ZipFile.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.IO.Compression.ZipFile.4.3.0' to 'packages.config'  Successfully installed 'System.IO.Compression.ZipFile 4.3.0' to Project1  Package 'System.IO.FileSystem.Primitives.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.IO.FileSystem.Primitives.4.3.0' to 'packages.config'  Successfully installed 'System.IO.FileSystem.Primitives 4.3.0' to Project1  Package 'System.IO.FileSystem.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.IO.FileSystem.4.3.0' to 'packages.config'  Successfully installed 'System.IO.FileSystem 4.3.0' to Project1  Package 'System.Linq.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Linq.4.3.0' to 'packages.config'  Successfully installed 'System.Linq 4.3.0' to Project1  Package 'System.Linq.Expressions.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Linq.Expressions.4.3.0' to 'packages.config'  Successfully installed 'System.Linq.Expressions 4.3.0' to Project1  Package 'System.Net.Primitives.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Net.Primitives.4.3.0' to 'packages.config'  Successfully installed 'System.Net.Primitives 4.3.0' to Project1  Package 'System.Net.Sockets.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Net.Sockets.4.3.0' to 'packages.config'  Successfully installed 'System.Net.Sockets 4.3.0' to Project1  Package 'System.ObjectModel.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.ObjectModel.4.3.0' to 'packages.config'  Successfully installed 'System.ObjectModel 4.3.0' to Project1  Package 'System.Reflection.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Reflection.4.3.0' to 'packages.config'  Successfully installed 'System.Reflection 4.3.0' to Project1  Package 'System.Reflection.Extensions.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Reflection.Extensions.4.3.0' to 'packages.config'  Successfully installed 'System.Reflection.Extensions 4.3.0' to Project1  Package 'System.Reflection.Primitives.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Reflection.Primitives.4.3.0' to 'packages.config'  Successfully installed 'System.Reflection.Primitives 4.3.0' to Project1  Package 'System.Resources.ResourceManager.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Resources.ResourceManager.4.3.0' to 'packages.config'  Successfully installed 'System.Resources.ResourceManager 4.3.0' to Project1  Package 'System.Runtime.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Runtime.4.3.0' to 'packages.config'  Successfully installed 'System.Runtime 4.3.0' to Project1  Package 'System.Runtime.Extensions.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Runtime.Extensions.4.3.0' to 'packages.config'  Successfully installed 'System.Runtime.Extensions 4.3.0' to Project1  Package 'System.Runtime.Handles.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Runtime.Handles.4.3.0' to 'packages.config'  Successfully installed 'System.Runtime.Handles 4.3.0' to Project1  Package 'System.Runtime.InteropServices.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Runtime.InteropServices.4.3.0' to 'packages.config'  Successfully installed 'System.Runtime.InteropServices 4.3.0' to Project1  Package 'System.Runtime.InteropServices.RuntimeInformation.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Runtime.InteropServices.RuntimeInformation.4.3.0' to 'packages.config'  Successfully installed 'System.Runtime.InteropServices.RuntimeInformation 4.3.0' to Project1  Package 'System.Runtime.Numerics.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Runtime.Numerics.4.3.0' to 'packages.config'  Successfully installed 'System.Runtime.Numerics 4.3.0' to Project1  Package 'System.Security.Cryptography.Encoding.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Security.Cryptography.Encoding.4.3.0' to 'packages.config'  Successfully installed 'System.Security.Cryptography.Encoding 4.3.0' to Project1  Package 'System.Security.Cryptography.Primitives.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Security.Cryptography.Primitives.4.3.0' to 'packages.config'  Successfully installed 'System.Security.Cryptography.Primitives 4.3.0' to Project1  Package 'System.Security.Cryptography.Algorithms.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Security.Cryptography.Algorithms.4.3.0' to 'packages.config'  Successfully installed 'System.Security.Cryptography.Algorithms 4.3.0' to Project1  Package 'System.Security.Cryptography.X509Certificates.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Security.Cryptography.X509Certificates.4.3.0' to 'packages.config'  Successfully installed 'System.Security.Cryptography.X509Certificates 4.3.0' to Project1  Package 'System.Net.Http.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Net.Http.4.3.0' to 'packages.config'  Successfully installed 'System.Net.Http 4.3.0' to Project1  Package 'System.Text.Encoding.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Text.Encoding.4.3.0' to 'packages.config'  Successfully installed 'System.Text.Encoding 4.3.0' to Project1  Package 'System.Text.Encoding.Extensions.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Text.Encoding.Extensions.4.3.0' to 'packages.config'  Successfully installed 'System.Text.Encoding.Extensions 4.3.0' to Project1  Package 'System.Text.RegularExpressions.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Text.RegularExpressions.4.3.0' to 'packages.config'  Successfully installed 'System.Text.RegularExpressions 4.3.0' to Project1  Package 'System.Threading.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Threading.4.3.0' to 'packages.config'  Successfully installed 'System.Threading 4.3.0' to Project1  Package 'System.Threading.Tasks.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Threading.Tasks.4.3.0' to 'packages.config'  Successfully installed 'System.Threading.Tasks 4.3.0' to Project1  Package 'System.Threading.Timer.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Threading.Timer.4.3.0' to 'packages.config'  Successfully installed 'System.Threading.Timer 4.3.0' to Project1  Package 'System.Xml.ReaderWriter.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Xml.ReaderWriter.4.3.0' to 'packages.config'  Successfully installed 'System.Xml.ReaderWriter 4.3.0' to Project1  Package 'System.Xml.XDocument.4.3.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Xml.XDocument.4.3.0' to 'packages.config'  Successfully installed 'System.Xml.XDocument 4.3.0' to Project1  Adding package 'NETStandard.Library.1.6.1', which only has dependencies, to project 'Project1'.  Package 'NETStandard.Library.1.6.1' already exists in folder 'C:\dev\Project1\packages'  Added package 'NETStandard.Library.1.6.1' to 'packages.config'  Successfully installed 'NETStandard.Library 1.6.1' to Project1  Package 'System.Threading.Tasks.Dataflow.4.8.0' already exists in folder 'C:\dev\Project1\packages'  Added package 'System.Threading.Tasks.Dataflow.4.8.0' to 'packages.config'  Successfully installed 'System.Threading.Tasks.Dataflow 4.8.0' to Project1  Removing package 'System.Threading.Tasks.Dataflow.4.7.0' from folder 'C:\dev\Project1\packages'  Removed package 'System.Threading.Tasks.Dataflow.4.7.0' from folder 'C:\dev\Project1\packages'  Executing nuget actions took 29,5 sec  ========== Finished ==========  Time Elapsed: 00:01:19.7792723  ```
25172	area-System.Collections	[API] Stack constructed from another Stack is not the same as the original.	`Stack<T>` has only only  one copy constructor and it accepts `IEnumerable<T>`.    The constructor does not try to check whether the given collection is another `Stack<T>`. The constructor just enumerates the source stack (in the `Pop()` order) and pushes all values in the new stack.    The result is that the new stack is actually reversed.    I consider this behavior unexpected and an example of bad API.    http://referencesource.microsoft.com/#System/compmod/system/collections/generic/stack.cs,66  
25173	area-Microsoft.CSharp	Simplify Microsoft.CSharp's NameManager and root namespace symbol	"Now that it's static a few further simplifications are possible.    * Remove `NameTable.Lookup(key, length)`    No longer used.    * Make ""void"" and the empty string predefined names.    Use `GetPredefinedName` rather than Lookup to retrieve them.    * Remove `NameManager.Lookup` and `NameTable.Lookup`    Former no longer used after the above. Latter only used in an assertion that another assertion duplicates.    * Make root namespace's `NamespaceSymbol` singleton in `NamespaceSymbol`    Since it has no parent and isn't stored in the symbol table, and since name management is now static, it need no longer hang off `BSYMMGR`.    "
25174	area-Microsoft.CSharp	Merge CheckedConstant & CheckedNormal in MS.CSharp's BindingContext	Always set to the same value (and indeed the distinction isn't meaningful in dynamic code), so just have one such property.
25177	area-Infrastructure	Referencing a standard 2 library with enums from 4.7.1 app doesn't work.	"Create a console app targeting 4.7.1 (you can start with a windows app or a netcore 2 app template. Just make sure you target 4.7.1 on both)    Create a helper assembly targeting standard 2.0  reference helper assembly from console app 4.7.1  add a public enum in helper assembly targeting standard 2.0  use public enum in console ap 4.7.1    you will receive error:  2>Program.cs(10,13,10,21): error CS0012: The type 'Enum' is defined in an assembly that is not   referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.  2>Program.cs(10,26,10,34): error CS0012: The type 'Enum' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.  2>Program.cs(10,35,10,38): error CS0012: The type 'Enum' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.  2>Done building project ""ConsoleOne.csproj"" -- FAILED.    Switch target of console app from 4.7.1 to 4.6.1  Error goes away. Everything works.    Adding package from nuget to 4.7.1 app doesn't seem to do anything to fix the problem.    See attached.  [LibStandard.zip](https://github.com/dotnet/corefx/files/1461883/LibStandard.zip)  "
25178	area-Serialization	Update the link of the instruction and use fwlink.	@shmao @zhenlan @mconnew 
25180	area-System.Net	HttpClient throws 'The server returned an invalid or unrecognized response' error	When connecting to an SSE stream and in chunked mode, the HttpClient will throw an 'The server returned an invalid or unrecognized response' error every single time.    To see the issue, try to connect to [This API Call ](https://horizon-testnet.stellar.org/accounts/GAZHWW2NBPDVJ6PEEOZ2X43QV5JUDYS3XN4OWOTBR6WUACTUML2CCJLI/transactions?limit=50)and use the header Accept: text/event-stream, HttpClient will throw an exception every single time. It's easy to reproduce, Fiddler seems to return back the results just fine.
25182	area-System.Memory	Add MemoryExtensions to CoreLib and type forward for .NET Core	>  A larger concern for me around the extension method isn't that they're exposed from System.Memory.dll, but that they're not available for use inside corelib, such that we've had to duplicate some of the functionality in order to implement various things in corelib, and those duplicated implementations aren't as good / efficient / complex as the ones in System.Memory.dll.  https://github.com/dotnet/coreclr/blob/master/src/mscorlib/shared/System/StringSpanHelpers.cs, for example the trivial IndexOf implementation here versus the optimized implementation in https://github.com/dotnet/corefx/blob/master/src/System.Memory/src/System/SpanExtensions.cs  This is a good reason why to move SpanExtensions into CoreLib.    From thread (for context): https://github.com/dotnet/corefx/pull/25120#discussion_r149837741    cc @KrzysztofCwalina, @jkotas, @stephentoub 
25183	area-Microsoft.CSharp	MS.CSharp: Avoid allocation in AllocParams(int, TypeArray, int)	This is called to split the type arguments for nested classes between those for the type itself and those for the outer type.    The most common case will return the empty array or the source array (only really splitting for a type both within a generic type, that also adds further type parameters), but getting there will allocate an array and possibly do a lookup.    Catch and short-circuit on these cases.
25184	area-Meta	PowerShell v6.0.0-beta.7 xml save on Linux and MacOS X has an additional [] in DOCTYPE	"[xml]$XmlDoc = get-content 'Info.plist'    $XmlDoc.Save('def.plist')    The two lines above work correctly in PowerShell 5.1 on Windows 10 but incorrectly with PowerShell v6 on Linux and MacOSX.    Notice the [] just before the end in DOCTYPE.    <!DOCTYPE plist PUBLIC ""-//Apple//DTD PLIST 1.0//EN"" ""http://www.apple.com/DTDs/PropertyList-1.0.dtd""[]>"
25187	area-System.Net	[WIP] SslStream Throttle	This would satisfy the throttling.    I will test the perf on windows and linux and see if it makes any difference on windows. If it does then I will need to push the semaphore down into the PAL.     I am submitting the PR to check the outerloop.
25188	area-Infrastructure	Infra: Sync the sources of {ReadOnly}Memory and friends between corefx and corelib	> I'd suggest someone compares the files in the two repos and gets them to be as close as possible. I noticed there are various discrepancies between them that make diff'ing harder, like differences in XML comments, differences in the ordering of members, etc.    Use ifdefs for small differences    From https://github.com/dotnet/coreclr/pull/14906#discussion_r149799699 (for context)    Also figure out and setup a source mirroring strategy between the two repos.    cc @stephentoub, @KrzysztofCwalina, @jkotas, @brianrob, @safern
25189	area-Meta	ItemRef - Ref element accessor for types that already have an indexer.	"We have a number of  **existing** indexable types that could benefit from a ref-returning element accessor. For example `ImmutableArray`.    A typical problem is that such types already have a get/set indexer, so the only way to add an indexed byref access to elements is to add a ref returning method.  I believe this will happen one way or another, since there is a motivation. So, I think we should standardize on the name of such method.    Here I want to propose the following convention:    ```C#          // when container is readonly - I.E. ImmutableArray<T>          public ref readonly T ItemRef(int index);            // when container is writeable - I.E. List<T>          public ref T ItemRef(int index);  ```    The alternatives could be     - ElementAt  often already taken  - Item            clashes with the underlying name of the indexer  -  Address    - could work too, but I think ItemRef reads a lot better.  - ItemAt         original proposed name, ""ItemRef"" still seems better    Examples of uses:    ```C#      public class Program      {          static void Main(string[] args)          {              var o = new MyCollection<int>();                // use for assignment              o.ItemRef(1) = 42;                // bind to a ref local              ref var first = ref o.ItemRef(1);              first = 42;                // read indirectly. (assume the API takes ""in"" parameter)              Print(o.ItemRef(1));          }      }        class MyCollection<T>      {          public ref T ItemRef(int index) => throw null;      }    ```    Once we agree on the name/pattern we can enter separate bugs for particular APIs.    "
25190	area-Microsoft.CSharp	Microsoft.CSharp should allow operations on identically-named types	"In the rare case that two types have exactly the same type name, dynamic operations will fail:    ```C#  dynamic x = Activator.CreateInstance(   AssemblyBuilder    .DefineDynamicAssembly(new AssemblyName(""TestAssembly""), AssemblyBuilderAccess.Run)    .DefineDynamicModule(""TestModule"")    .DefineType(""TestType"", TypeAttributes.Public)    .CreateType());  dynamic y = Activator.CreateInstance(   AssemblyBuilder    .DefineDynamicAssembly(new AssemblyName(""TestAssembly""), AssemblyBuilderAccess.Run)    .DefineDynamicModule(""TestModule"")    .DefineType(""TestType"", TypeAttributes.Public)    .CreateType());  x.Equals(y); // This or any other operation with both objects fails.  ```    #23021 changed the exception thrown in this case from `RuntimeBinderInternalCompilerException` to `RuntimeBinderException`; pretty much a change from ""sorry, we got this wrong"" to ""sorry, you can't do that"".    Ideally such cases should succeed. While the case is extremely rare:    1. It's always better to allow users to do something that prohibit.  2. By the very nature of dynamic binding, there's no theoretical justification for disallowing it.  3. Handling the exception requires resetting a lot of state. Allowing this reset means a lot of objects being passed around so that the type manager, symbol manager, etc. can be accessed by those objects that need them, tying those objects to each other, in order to deal with this rare case.    While the first two points relate to what is an obscure edge case, the third is a greater motivation for allowing this IMO.    CC: @VSadov @OmarTawfik "
25191	area-Microsoft.CSharp	Allow dynamic use objects of different, identically-named, types.	Fixes #25190    * Remove `ResetBindException`    No longer used.    * Cache types' arity for `FindSymWithMatchingArity` instead of on each loop    * Move byref handling out of `LoadSymbolsFromType()`    Only one caller can possibly pass byref types, so handle it there.    * Further simplify type matching.    Since we're looking to match types, and types with different arity don't match, just look for the type itself.    * Remove dead code and tidy up.    Paths within the case of the type `.IsNullableType()` handle the possibility of the type itself being `Nullable<T>`, but that type returns false for the nullable type check (possibly not true in the static compiler?). Remove the branches for that, and tidy up.    * Move handling of nullable types.    Since there can be corresponding `AggregateSymbol`s we have to test for it anyway, so may as well test before any more work is done.    * Use `InsertRange` instead of repeated inserts.    Fewer allocations and copies.
25193	area-System.Runtime	Environment.ProcessorCount does not take into account cgroup/Docker limits	This leads to managed code over-dimensioning when running in Docker.    coreclr takes into account docker cpu limits: https://github.com/dotnet/coreclr/blob/dbfd10c94055fb5af823b4a7e30774641afcb3b2/src/classlibnative/bcltype/system.cpp#L349-L350
25196	area-Microsoft.CSharp	Defer calculation of AggregateType.GetBaseClass() in Microsoft.CSharp	Push logic for calculating the substitution necessary on base types when type or the base are generic into `AggregateType` and defer it until first call.    This allows cycling chains of derivation and type parameters.    Fixes #7527    * Add test for variant of cyclic type definitions.    Confirms fix for #7527 also fixes #23706    * Overrides for `SubstType` and `SubstTypeCore` for `AggregateType` when used    In one case replaces the equivalent existing override completely.    Allows type-checking and casting to be avoided.
25197	area-System.IO	Change timeout errorCode from ERROR_SUCCESS to ERROR_SEM_TIMEOUT	fixes #24635
25198	area-System.Net	[WIP] Test Only to compare outerloop for SslStream	
25199	area-System.Net	Reverts Cancellation on SslStream	Checking that this now passes the outerloop
25202	area-Microsoft.CSharp	Key AggregateType lookup on triple of symbol, outer type and type args	Avoid potential for false key matching.    Fixes #25201    * Remove `ErrorType.typeArgs`    Consistently empty for named errors, null for unnamed, so have no real effect.    Allows removal of remaining use of `GetNameFromPtrs()`    * Add multiply into KeyPair.GetHashCode()    Mix the bits a bit more.
25204	area-System.IO	Add Crc32 to ZipArchiveEntry	fixes #22292
25205	area-System.Data	System.Data.SqlClient packaging	From https://github.com/dotnet/corefx/pull/25134#discussion_r150415393:    > And for better or worse, we already have some such dependencies, e.g. System.Data.SqlClient isn't part of the .NET Runtime download but it does P/Invoke into the System.Net.Security.Native.so/dylib shim.    We either need to fix that, or we need to add a test coverage to ensure that you can mix and match different versions of .NET Core Runtime (that bundles `System.Net.Security.Native.so/dylib`) with different versions of `System.Data.SqlClient` and document/enforce the supported mixing and matching.    The packaging for `System.Data.SqlClient` is suspect in general: All build configurations in https://github.com/dotnet/corefx/blob/master/src/System.Data.SqlClient/src/Configurations.props are netstandard. How am I going to get the .NET Core shims that the implementation depends on when I install it on Mono?
25206	area-System.Net	Support cancellation on SslStream.AuthenticateAs*Async methods	cc: @Priya91   Previous attempt in https://github.com/dotnet/corefx/pull/24857 reverted in https://github.com/dotnet/corefx/pull/25203 due to it causing a failing outerloop test SslStream_StreamToStream_WriteAsync_ReadAsync_Pending_Success (outerloop tests weren't run on the original PR).
25207	area-System.Net	Disable SendAsync_ExpectedDiagnosticCancelledActivityLogging test	It's failing sporadically on outerloop, both Windows and Unix, both WinHttp/CurlHandler and ManagedHandler.
25209	area-Microsoft.CSharp	Fix handling of unary operations on nullable enums in Microsoft.CSharp	The code that covered this case would put a `NullableType` where an `AggregateType` would then be expected, and throw `NullReferenceException` after an `as AggregateType` it would hit. There was also no code to handle the necessary cast, then lifted operation, then cast back.    Catch the case of nullable enums early, and turn it into a cast on the operation on a cast to the underlying type (or `int` if smaller than `int`)    Fixes #25067    * Remove now-dead buggy code for unary operators and nullable enums.    * Remove dead code in `ExpressionTreeRewriter`    Would carry out the cast-of-operation-of-cast rewrite already done in the initial bind, but this having been already done makes it unreachable.
25210	area-System.Threading	Test failure: System.Threading.Channels.Tests.ChannelTests/DefaultReadAsync_CatchesTryWriteExceptions	Opened on behalf of @Sunny-pu  The test `System.Threading.Channels.Tests.ChannelTests/DefaultReadAsync_CatchesTryWriteExceptions` has failed.  Assert.Equal() Failure\r     Expected: Faulted\r     Actual:   RanToCompletion          Stack Trace:             at System.Threading.Channels.Tests.ChannelTests.<DefaultReadAsync_CatchesTryWriteExceptions>d__10.MoveNext() in E:\A\_work\722\s\corefx\src\System.Threading.Channels\tests\ChannelTests.cs:line 134     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\ExceptionServices\ExceptionDispatchInfo.cs:line 63        at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\CompilerServices\TaskAwaiter.cs:line 182        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\CompilerServices\TaskAwaiter.cs:line 150     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\ExceptionServices\ExceptionDispatchInfo.cs:line 63        at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\CompilerServices\TaskAwaiter.cs:line 182        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\CompilerServices\TaskAwaiter.cs:line 150     --- End of stack trace from previous location where exception was thrown ---        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\ExceptionServices\ExceptionDispatchInfo.cs:line 63        at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\CompilerServices\TaskAwaiter.cs:line 182        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.CoreLib\src\System\Runtime\CompilerServices\TaskAwaiter.cs:line 150      Build : Master - 20171113.01 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x64   - Debug   - Release 
25211	area-System.IO	Fix misleading exception message, cleanup code	I'm newbie(on contributing), i grab the issue and try to help. Fixes #24817
25212	area-Infrastructure	How to integrate CoreFX Binaries manually in a Linux System 	Hallo .Net Core Community,    im looking for a way to integrate my selfbuild Binaries of coreclr and corefx in an UbuntuSystem. I build the binaries for x86 to get .Net Core running on a x86 Ubuntu System. Now i need a guide where and how to place the binaries in this UbuntuSystem. Can someone give me a instruction or a link to an guide wich i was not able to find.    Greetings  Philipp
25214	area-Microsoft.CSharp	Microsoft.CSharp: Remove check for ExprMemberGroup being used as a lvalue	`ExprMemberGroup`s only exist within `ExprCall` and `ExprProperty` objects and can never be passed as operands, so this is unreachable. (Unlike in static compilation where it would be the result of someone trying e.g. `obj.ToString = 3`).    Results in removal of ERR_AssgReadonlyLocalCause, contributes to #22470.    * Remove `ErrArgIds` class    Only place it was instantiated has now been removed.    Clean-up all unused `ErrArgKind` as well as `Ids` that this makes unused.
25215	area-Microsoft.CSharp	Microsoft.CSharp: Replace IExprWithArgs interface with ExprWithArgs class in hierarchy	Allows for less casting, and tighter return types.    * Preliminary: Remove always-null parameter to `BindToProperty`    Removal of paths for that parameter being null allows tightening return type from `Expr` to `ExprProperty`.    * Replace `IExprWithArgs` interface with `ExprWithArgs` class in hierarchy    Makes `OptionalArguments` non-virtual    Allows implicit cast from `ExprWithArgs` to `Expr` for reduced casting.    * Change return types from `Expr` to `ExprWithArgs` where possible.    * Remove redundant cast from `ReorderArgumentsForNamedAndOptional`    Also make it void, since it always returns the same argument, to be clearer it's mutating its argument.    * Remove redundant call to `ExprMemberGroup.OptionalObject` property.    Stored as part of extension-method handling, but dynamic doesn't support extension methods.
25217	area-Microsoft.CSharp	Microsoft.CSharp: Remove code for checking possible membergroup ? delegate conversion	* Remove `MethodGroupReturnTypeInference()` method.    Initial `if (!(pSource is ExprMemberGroup memGrp))` will always be hit, since we can't have a member group expression as an argument within dynamic code, so it will always return false.    * Remove `GroupToArgsBinder._pDelegate`    The only remaining call to the constructor always passes null to this.  Remove it, and paths for it being non-null.    Results in removal of `ERR_MethDelegateMismatch`. Contributes to #22470
25219	area-System.Net	Make curl http handler use SSL_CERT_FILE/SSL_CERT_DIR environment variables.	Implements https://github.com/dotnet/corefx/issues/24281    CC @stephentoub @bartonjs     Some interesting points:  - The curl command ignores SSL_CERT_FILE when SSL_CERT_DIR is set. The underlying libcurl supports passing both to OpenSSL.  - HTTPS proxy support requires a recent version of libcurl. The SSL config for the proxy is passed as separate options.  
25220	area-Meta	Generic Range type	"Currently there is the non-generic `Range` type in the corefxlab repository ([link](https://github.com/dotnet/corefxlab/blob/2711e0824729fb318eb4e25544236bb2f53fa33e/src/System.Buffers.Experimental/System/Range.cs#L5-L20)) which is designed for a new C# slice syntax. As you can see, it's limited only to `int` values.    ```csharp  public readonly struct Range  {     public readonly long Index;     public readonly long Length;  }    public readonly ref struct Span<T>  {      public Span<T> Slice(Range range) => Slice(range.Index, range.Length);      public Span<T> Slice(int index, int length) { throw null; }  }  ```  ```csharp  var buffer = new Span<int>();  var slice1 = buffer[3..4]; // with syntax sugar  var slice2 = buffer.Slice(new Range(3, 4 - 3)); // without it  ```  So it would be nice to have a generic one instead it to represent ranges of different types.    ## Rationale and Usage    Implementing the generic version would allow to have a common type to represent ranges. There are too many areas where it could be used including numeric processing, range based operations, and simply to store intervals (for example `Range<Time> OpenHours`).    ## Proposed API    ```csharp  [Serializable]  public readonly struct Range<T> : IEquatable<Range<T>>, IFormattable, ISerializable      where T : IComparable<T>  {      public readonly T From;      public readonly T To;        public Range(T from, T to) { throw null; }      private Range(SerializationInfo info, StreamingContext context) { throw null; }        public void Deconstruct(out T from, out T to) { throw null; }        public override bool Equals(object obj) { throw null; }      public bool Equals(Range<T> other) { throw null; }      public override int GetHashCode() { throw null; }        public override string ToString() { throw null; }      public override string ToString(string forma) { throw null; }      public override string ToString(string format, IFormatProvider formatProvider) { throw null; }        void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { throw null; }  }    public static class Range  {      // all methods should be aggressively inlined      public static bool IsNormalized<T>(this Range<T> range) where T : IComparable<T> { throw null; }      public static Range<T> Normalize<T>(this Range<T> range) where T : IComparable<T> { throw null; }        public static bool IsEmpty<T>(this Range<T> range) where T : IComparable<T> { throw null; }      public static bool Contains<T>(this Range<T> range, T value) where T : IComparable<T> { throw null; }      public static bool Intersects(this Range<T> range, Range<T> other) where T : IComparable<T> { throw null; }      public static Range<T> Intersect(this Range<T> range, Range<T> other) where T : IComparable<T> { throw null; }        // Specialized versions of the previous methods for numeric and time types      public static bool IsNormalized(this Range<int> range) { throw null; }        // Only for numeric and time types      public static int Length(this Range<int> range) { throw null; }  }  ```    ## Details    There is no `struct` constraint to support `string` because it's a good candidate for range based operations, but there are methods which accept `IComparable<T>` as the second parameter should exist to do culture specific actions.    ```csharp  var range = new Range<string>(""A"", ""a"");  var emptyCS = range.IsEmpty(StringComparer.InvariantCulture); // false  var emptyCI = range.IsEmpty(StringComparer.InvariantCultureIgnoreCase); // true  ```    The implementations wouldn't conflict with the syntax sugar for slices and would not hurt performance because the length computation is inlined:  ```csharp  public readonly ref struct Span<T>  {      public Span<T> Slice(Range<int> range) => Slice(range.From, range.Length());      public Span<T> Slice(int index, int length) { throw null; }  }  ```    ```csharp  var buffer = new Span<int>();  var slice1 = buffer[3..4];  var slice2 = buffer.Slice(new Range<int>(3, 4)); // without it  ```    It's possible to implement `IsEmpty`, `IsNormalized` and other things as instance members using generic type parameter checks, but that will cause poor performance for non-BCL types.    ### Benchmark    ```csharp  public static class Range  {      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static bool IsNormalizedSpecialized(this Range<long> range)          => range.To >= range.From;        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static bool IsNormalizedGeneric<T>(this Range<T> range)          where T : IComparable<T>          => range.To.CompareTo(range.From) >= 0;        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static bool IsNormalizedComparer<T>(this Range<T> range, IComparer<T> comparer)          where T : IComparable<T>          => comparer.Compare(range.To, range.From) >= 0;  }  ```    Test environment: Intel Xeon E5-2687W, 3100 MHz, 8 cores, 16 threads  Iterations: 1000000 for inner loop, 1000000 for outer loop    | Method                  | Duration (msec) |  |:------------------------|----------------:|  | IsNormalizedSpecialized |             643 |  | IsNormalizedGeneric     |             975 |  | IsNormalizedComparer    |            1336 |    Duration is measured for a single outer loop iteration.    ## Open Questions    * Should `Range<T>` support nullable values? That prevents being of `IComparable<T>` constraint on the generic type parameter, but at the same time allows to have open-ended ranges. Type safety could be implemented in the static constructor of `Range<T>`.    ```csharp  static Range()  {      var valueType = typeof(T);      if (valueType.IsGenericType && valueType.GetGenericTypeDefinition() == typeof(Nullable<>))      {          valueType = valueType.GetGenericArguments()[0];      }        var comparableType = typeof(IComparable<>).MakeGenericType(valueType);      if (!comparableType.IsAssignableFrom(valueType))      {          throw new Exception($""The {valueType.Name} type doesn't implement {typeof(IComparable<>).Name}."");      }  }  ```    Another way to do that is to use `T?` as the field type, but it would increase the size of generic instances and would cause performance lose.    ```csharp  public readonly struct Range<T> : IEquatable<Range<T>>, IFormattable, ISerializable      where T : IComparable<T>  {      public readonly T? From;      public readonly T? To;  }    public static class Range  {      public static int? Length(this Range<int?> range) { throw null; }  }  ```    | Implementation (`T` is `int`) | Size (bytes) |  |:------------------------------|-------------:|  | `Range(T, T)`                 |            8 |  | `Range(T?, T?)`               |           16 |"
25222	area-System.Runtime	Add DateTimeOffset.To[Short/Long][Date/Time]String, include invariant and ISO forms	"It is still very common to see developers using the `ToShortDateString`,  `ToShortTimeString`, `ToLongDateString`, and `ToLongTimeString` methods on the `DateTime` struct.  However, there are no corresponding methods on the `DateTimeOffset` struct, and there probably should be, for consistency.  This also aids developers who may not be completely familiar with the various string format specifiers.    Additionally, I think it's not completely obvious that the culture is `CultureInfo.CurrentCulture` unless explicitly specified.  IMHO, it would make sense to have invariant forms of these methods.    Lastly, the invariant form is not the ISO standard year-month-day, but rather the US month-day-year, which is nonsortable.  IMHO, it would make sense to have ISO forms of both the date methods and for date-time.    The intent is to improve reliability, by making it crystal clear to developers which format they are getting, such that they don't wind up writing in bugs because they didn't think too much about dates.  (very common)    ## Proposed API  ```diff  namespace System {       public struct DateTimeOffset {  +        public static string ToShortDateString();  +        public static string ToShortTimeString();  +        public static string ToLongDateString();  +        public static string ToLongTimeString();  +        public static string ToShortDateInvariantString();  +        public static string ToShortTimeInvariantString();  +        public static string ToLongDateInvariantString();  +        public static string ToLongTimeInvariantString();  +        public static string ToISODateString();  +        public static string ToISOString();       }       public struct DateTime {  +        public static string ToShortDateInvariantString();  +        public static string ToShortTimeInvariantString();  +        public static string ToLongDateInvariantString();  +        public static string ToLongTimeInvariantString();  +        public static string ToISODateString();  +        public static string ToISOString();       }  }  ```    ## Example Usage  ```csharp  DateTimeOffset dto = new DateTimeOffset(2017, 7, 4, 1, 59, 59, 59, TimeSpan.Zero);    string s = dto.ToShortDateString();             // ""7/4/2017"" (en-US)  ""04/07/2017"" (en-GB)  string s = dto.ToShortTimeString();             // ""2:59 AM"" (en-US)  ""02:59"" (en-GB)  string s = dto.ToLongDateString();              // ""Tuesday, July 4, 2017"" (en-US)  ""04 July 2017"" (en-GB)  string s = dto.ToLongTimeString();              // ""2:59:59 AM"" (en-US)  ""02:59:59"" (en-GB)    string s = dto.ToShortDateInvariantString();    // ""07/04/2017""  string s = dto.ToShortTimeInvariantString();    // ""02:59""  string s = dto.ToLongDateInvariantString();     // ""Tuesday, July 4, 2017""  string s = dto.ToLongTimeInvariantString();     // ""02:59:59""    string s = dto.ToISODateString();               // ""2017-07-04""  string s = dto.ToISOString();                   // ""2017-07-04T01:59:59+00:00""      DateTime dt = new DateTime(2017, 7, 4, 2, 59, 59, 59, DateTimeKind.Utc);    string s = dt.ToShortDateInvariantString();     // ""07/04/2017""  string s = dt.ToShortTimeInvariantString();     // ""02:59""  string s = dt.ToLongDateInvariantString();      // ""Tuesday, July 4, 2017""  string s = dt.ToLongTimeInvariantString();      // ""02:59:59""    string s = dt.ToISODateString();                // ""2017-07-04""  string s = dt.ToISOString();                    // ""2017-07-04T01:59:59Z""  ```  "
25223	area-System.Collections	SecurityTransparent should be removed from Collections.Immutable	SecurityTransparent is a bit of a vestige nowdays, but is still enforced on desktop runtime.   As such the presence of the attribute is a blocker for the new language/runtime features such as ref returns, readonly references, spans...    Use of readonly references, in particular, makes a lot of sense, since the collections are _Immutable_     NOTE: Nearly no other library in CoreFx uses SecurityTransparent. ( https://github.com/dotnet/corefx/search?utf8=%E2%9C%93&q=SecurityTransparent&type= )    It is surprising that Collections.Immutable still does.     I think the attribute needs to be removed and soon since it is already causing troubles.  (Example: change https://github.com/dotnet/corefx/commit/fc4b1adb7f06687aa15f0416d83d2c27a0abf8dd when upgrade to C#7.2 had to be paired with disabling certain optimizations - we are not even using new features yet)  
25224	area-System.Net	"HttpClient possibly causing ""Unresolved P/Invoke"" crash"	"Case Link:  https://social.msdn.microsoft.com/Forums/windowsapps/en-US/15f89674-8c49-43d5-920b-d0997bb607f5/rs31709systemnethttphttpclient-possibly-causing-unresolved-pinvoke-crash?forum=wpdevelop    Issue Descrption:  Many customers in our MSDN forum report that when running app from the Windows Store, any HTTP requests made with the System.Net.Http.HttpClient class causes an exception: ""Unresolved P/Invoke method 'kernel32.dll!LocalAlloc' from this method. But it works fine in the debug and release mode, it only happens when running the app from the store.    Repro Environment:  Windows 10 (16299.19)  App Target and Minimum SDK: 16299.15  .NETCore UWP: 6.0.1  Visual Studio: 15.4.2    Ref: Internal Microsoft WDG Bug 14634810"
25226	area-Microsoft.CSharp	Ensure Microsoft.CSharp's binders only enumerate arguments once.	Fixes #25225
25228	area-System.Diagnostics	PerformanceCounterCategory_Create_Obsolete test failed with InvalidOperationException	https://mc.dot.net/#/user/stephentoub/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/3eb7408de3fa474f21e4107091731f7d412ef9f2/workItem/System.Diagnostics.PerformanceCounter.Tests/analysis/xunit/System.Diagnostics.Tests.PerformanceCounterCategoryTests~2FPerformanceCounterCategory_Create_Obsolete  ```  Unhandled Exception of Type System.InvalidOperationException  Message :  System.InvalidOperationException : Cannot load Counter Name data because an invalid index '' was read from the registry.  Stack Trace :     at System.Diagnostics.PerformanceCounterLib.GetStringTable(Boolean isHelp) in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\PerformanceCounterLib.cs:line 1097     at System.Diagnostics.PerformanceCounterLib.get_NameTable() in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\PerformanceCounterLib.cs:line 235     at System.Diagnostics.PerformanceCounterLib.get_CategoryTable() in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\PerformanceCounterLib.cs:line 167     at System.Diagnostics.PerformanceCounterLib.CategoryExists(String machine, String category) in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\PerformanceCounterLib.cs:line 275     at System.Diagnostics.PerformanceCounterCategory.Exists(String categoryName, String machineName) in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\PerformanceCounterCategory.cs:line 432     at System.Diagnostics.PerformanceCounterCategory.Exists(String categoryName) in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\PerformanceCounterCategory.cs:line 414     at System.Diagnostics.Tests.Helpers.DeleteCategory(String name) in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\tests\Helpers.cs:line 40     at System.Diagnostics.Tests.PerformanceCounterCategoryTests.PerformanceCounterCategory_Create_Obsolete() in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\tests\PerformanceCounterCategoryTests.cs:line 115  ```
25229	area-System.Memory	Change OwnedMemory Pin to take an optional integer offset	Related to https://github.com/dotnet/corefx/issues/24317 and https://github.com/dotnet/corefx/pull/24323#discussion_r141769638    > the scenario is I use OwnedMemory and MemoryHandle directly, without using Memory, e.g. I implement my own Memory-like factory for spans. If we don't like AddOffset, we should add OwnedMemory.Pin overload that takes offset to the added to the pointer inside the handle.    ## API Proposal  Change:  ```C#  namespace System.Buffers  {      public abstract class OwnedMemory<T> : IDisposable, IRetainable       {          public abstract MemoryHandle Pin();      }  }  ```    To:  ```C#  namespace System.Buffers  {      public abstract class OwnedMemory<T> : IDisposable, IRetainable       {          public abstract MemoryHandle Pin(int offset = 0);      }  }  ```    ## Usage  **Example** from [NativeOwnedMemory](https://github.com/dotnet/corefx/blob/master/src/Common/tests/System/Buffers/NativeOwnedMemory.cs#L56):  ```C#  public override unsafe MemoryHandle Pin() => new MemoryHandle(this, (void*)_ptr);  ```  Would become:  ```C#  public override unsafe MemoryHandle Pin(int offset = 0)   {     void* pointer = (void*)((byte*)_ptr + offset);     return new MemoryHandle(this, pointer);  }  ```    The following can then be re-written from [Memory.Retain](https://github.com/dotnet/corefx/blob/master/src/System.Memory/src/System/Memory.cs#L193-L197):  ```C#  if (_index < 0)  {      memoryHandle = ((OwnedMemory<T>)_arrayOrOwnedMemory).Pin();      memoryHandle.AddOffset((_index & RemoveOwnedFlagBitMask) * Unsafe.SizeOf<T>());  }  ```  To:  ```C#  if (_index < 0)  {      memoryHandle = ((OwnedMemory<T>)_arrayOrOwnedMemory).Pin((_index & RemoveOwnedFlagBitMask) * Unsafe.SizeOf<T>());  }  ```    We can then remove the internal AddOffset method [here](https://github.com/dotnet/corefx/blob/master/src/System.Memory/src/System/Buffers/MemoryHandle.cs#L48-L58) which was added in https://github.com/dotnet/corefx/pull/24323.    cc @KrzysztofCwalina, @stephentoub, @karelz, @terrajobst, @pakrym 
25230	area-System.Net	HTTP unit tests crashes sometimes	This is on Ubuntu 17.04. I'm not sure yet if other platforms are affected.   I build HTTP uni tests and than I use RunTest.sh to it in loop with outer-loop tests enabled.     *** Error in `/home/build/github/corefx/bin/testhost/netcoreapp-Linux-Debug-x64//dotnet': double free or corruption (fasttop): 0x00007f07f800e680 ***    if enabled, core file is created   ```  (lldb) bt  * thread #1: tid = 32784, 0x00007f08a74ed77f libc.so.6`__GI_raise(sig=2) + 159 at raise.c:58, name = 'dotnet', stop reason = signal SIGABRT    * frame #0: 0x00007f08a74ed77f libc.so.6`__GI_raise(sig=2) + 159 at raise.c:58      frame #1: 0x00007f08a74ef37a libc.so.6`__GI_abort + 362 at abort.c:89      frame #2: 0x00007f08a7531090 libc.so.6`__libc_message(do_abort=2, fmt=<unavailable>) + 704 at libc_fatal.c:175      frame #3: 0x00007f08a753ac3a libc.so.6`_int_free + 1578 at malloc.c:5048      frame #4: 0x00007f08a753abad libc.so.6`_int_free(av=<unavailable>, p=<unavailable>, have_lock=<unavailable>) + 1437 at malloc.c:3904      frame #5: 0x00007f08a753ed2c libc.so.6`__GI___libc_free(mem=<unavailable>) + 76 at malloc.c:2984      frame #6: 0x00007f0805b650dd libcrypto.so.1.0.0`CRYPTO_free + 29      frame #7: 0x00007f0805b67c3c libcrypto.so.1.0.0`OBJ_NAME_add + 140      frame #8: 0x00007f0805c26a68 libcrypto.so.1.0.0`EVP_add_digest + 40      frame #9: 0x00007f0805f91d3f libssl.so.1.0.0`SSL_library_init + 399      frame #10: 0x00007f07dd138651 System.Security.Cryptography.Native.OpenSsl.so`::CryptoNative_EnsureLibSslInitialized() + 17 at pal_ssl.cpp:19      frame #11: 0x00007f082db42bc6      frame #12: 0x00007f082db41bc4  ```        
25231	area-Microsoft.CSharp	Remove some unreachable errors from Microsoft.CSharp	* Remove `Error.BindBinaryOperatorRequireTwoArguments()`    `BindBinaryOperation` is only called by `DispatchPayload`, which is only called by `RuntimeBinder.BindCore`, which is only called by `RuntimeBinder.Bind`, which is only called with a `CSharpBinaryOperationBinder` as the first argument from `CSharpBinaryOperationBinder.FallbackBinaryOperation` which passes a fixed 2-element array. Anything but 2-elements is hence impossible.    Include tests that try to pass an different number, which throw in the `DynamicMetaObjectBinder` base.    * Remove `Error.BindUnaryOperatorRequireOneArgument()`    `BindUnaryOperation` is only called by `DispatchPayload`, which is only called by `RuntimeBinder.BindCore`, which is only called by `RuntimeBinder.Bind`, which is only called with a `CSharpUnaryOperationBinder` as the first argument from `CSharpUnaryOperationBinder.FallbackBinaryOperation` which passes a fixed 1-element array. Anything but 1 element is hence impossible.    * Remove `Error.BindBinaryAssignmentRequireTwoArguments()`    `BindUnaryOperation` is only called by `CSharpSetIndexBinder.DispatchPayload` or `CSharpSetMemberBinder.DispatchPayload`.    `CSharpSetMemberBinder.DispatchPayload` will only be calling with a fixed 2-element array. `CSharpSetIndexBinder.DispatchPayload` will only be called with an array with at least 3 elements.    Anything but with fewer than 2 elements is hence impossible.    * Remove `Error.BindRequireArguments()`    All calls include the target in the arguments, some include more, so there's never fewer than one `arg`.    * Remove check that payload to `RuntimeBinder.Bind` is `ICSharpBinder`    Call always traces back to an `ICSharpBinder` implementation passing this so can never not be so.
25232	area-System.Security	Move RandomNumberGenerator to coreclr	There are many cases where RandomNumberGenerator needs to be used. Currently it requires pulling in whole System.Security.Cryptography.Algorithms. It would be useful to have it defined in coreclr to avoid this dependency.    cc: @bartonjs @morganbr 
25234	area-System.Net	SocketException in SmtpClient takes down process	"With the following code, the resulting ExtendedSocketException is not caught and the process crashes:        static void Main(string[] args)      {          try          {              using (var smtpClient = new SmtpClient())              {                  smtpClient.Host = ""bogusdomainnotreal.com"";                  smtpClient.Port = 587;                  smtpClient.EnableSsl = true;                  smtpClient.Timeout = 5;                    smtpClient.SendMailAsync(""me@me.com"", ""test@test.com"", ""subj"", ""body"").Wait();              }          }          catch (Exception ex)          {              Console.WriteLine(ex);          }      }"
25235	area-System.Runtime	Added UnixEpoch to DateTime and DateTimeOffset	Fixes #24449
25236	area-System.Diagnostics	"Tests under ""System.Diagnostics.Tests.PerformanceCounterTests.PerformanceCounter_CreateCounter_SetReadOnly"" failed with ""Assert.NotEqual() Failure\r\nExpected: Not 0\r\nActual: 0"""	failed test:   System.Diagnostics.Tests.PerformanceCounterTests.PerformanceCounter_CreateCounter_SetReadOnly (from (empty))   Detail: https://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_netcoreapp_windows_nt_release/lastCompletedBuild/testReport/System.Diagnostics.Tests/PerformanceCounterTests/PerformanceCounter_CreateCounter_SetReadOnly/    MESSAGE:  ~~~  Assert.NotEqual() Failure\r\nExpected: Not 0\r\nActual: 0  ~~~  STACK TRACE:  ~~~  at System.Diagnostics.Tests.Helpers.RetryOnAllPlatforms[T](Func`1 func) in D:\j\workspace\outerloop_net---7a39cc82\src\System.Diagnostics.PerformanceCounter\tests\Helpers.cs:line 71 at System.Diagnostics.Tests.PerformanceCounterTests.PerformanceCounter_CreateCounter_SetReadOnly() in D:\j\workspace\outerloop_net---7a39cc82\src\System.Diagnostics.PerformanceCounter\tests\PerformanceCounterTests.cs:line 78  ~~~  
25240	area-System.Linq	Should we randomise pivots in remaining S.Linq quicksorts?	"In #24116 @stephentoub replaced Linq's main use of quicksort with `Array.Sort` (which uses a hybrid sort) to avoid the worse case scenarios identified in #24110    Linq still uses variants of quicksort; partial quicksort to find just part of an ordered sequence and quickselect to find a single element in the ordered sequence. Both of these have the same worse cases as quicksort.    `Array.Sort()` is not amenable to these variants.    (Also Linq.Parallel still uses quicksort).    4c538585453895abbdde2d4c1e13f1adf1578b3e tests for similar cases to those #24110 complains of. I ran them on the current code, the previous code, and the previous code modified to use random pivots with a xorshift128+ random (faster than `Random.Next()` and no heap allocation). Along with those existing tests that touch on ordering, I found the following:    |Test Name|Reverted|Array|Random|Improvement Array|Improvement Random|  |---|---|---|---|---|---|  |OrderBy(size: 100, iteration: 1000, wrapType: ICollection)|7.12835916007773|8.44284162141898|9.55231274424703|-18.4401828221983|-34.0043694451399|  |OrderBy(size: 100, iteration: 1000, wrapType: IEnumerable)|8.31319256253207|9.64644876629239|13.3377040230432|-16.0378361710201|-60.4402150283013|  |OrderBy(size: 100, iteration: 1000, wrapType: IReadOnlyCollection)|8.287985653899|9.66300892106141|10.8402846595428|-16.5905604157935|-30.7951667899316|  |OrderBy(size: 100, iteration: 1000, wrapType: NoWrap)|7.12519855811195|8.4986142334852|9.83434900229923|-19.2754723138155|-38.0221045363423|  |OrderByDescending(size: 100, iteration: 1000, wrapType: ICollection)|6.83798124538432|6.16107873794186|9.04367368779049|9.89915712183875|-32.256485697369|  |OrderByDescending(size: 100, iteration: 1000, wrapType: IEnumerable)|8.09819885341283|7.30799004841846|10.9410867061306|9.75783404801615|-35.1051870196999|  |OrderByDescending(size: 100, iteration: 1000, wrapType: IReadOnlyCollection)|8.03923158418696|7.69064121266405|10.3879201120447|4.33611555871311|-29.2153361084606|  |OrderByDescending(size: 100, iteration: 1000, wrapType: NoWrap)|6.83359279037543|6.07240320977215|9.14982792796568|11.1389367782546|-33.8948370007133|  |OrderByThenBy(size: 100, iteration: 1000, wrapType: ICollection)|7.61908238511442|9.08396891367261|10.1217532816741|-19.2265479556984|-32.8474056331141|  |OrderByThenBy(size: 100, iteration: 1000, wrapType: IEnumerable)|8.80899047807415|10.277000339993|11.3423225286133|-16.6649046286606|-28.7584832432807|  |OrderByThenBy(size: 100, iteration: 1000, wrapType: IReadOnlyCollection)|9.17246763473642|10.5101108520149|11.2456625407076|-14.5832427057337|-22.6023681797462|  |OrderByThenBy(size: 100, iteration: 1000, wrapType: NoWrap)|7.60360406591007|9.20888756607525|9.93286135010613|-21.1121395360694|-30.6335951215428|  |OrderDifferentSequencePatterns(size: 1000, iterationCount: 1000, pattern: ""asc and desc mixed"", sequence: [0, 999, 2, 997, 4, ...])|105.411336048631|97.9249670353268|143.400279892381|7.10205305608725|-36.0387651535163|  |OrderDifferentSequencePatterns(size: 1000, iterationCount: 1000, pattern: ""asc then desc"", sequence: [1000, 999, 998, 997, 996, ...])|420.020209192197|263.470161474411|195.16256008508|37.2720274624096|53.5349595533925|  |OrderDifferentSequencePatterns(size: 1000, iterationCount: 1000, pattern: ""asc"", sequence: [0, 1, 2, 3, 4, ...])|105.362480225828|86.9211643744856|141.131704381542|17.5027351404564|-33.9487302112177|  |OrderDifferentSequencePatterns(size: 1000, iterationCount: 1000, pattern: ""desc then asc"", sequence: [0, 1, 2, 3, 4, ...])|2805.12054839126|306.402120712674|197.79463755362|89.077042664409|92.9488008040491|  |OrderDifferentSequencePatterns(size: 1000, iterationCount: 1000, pattern: ""desc"", sequence: [999, 998, 997, 996, 995, ...])|106.657028249226|136.226477408211|143.234062552128|-27.7238637194071|-34.2940684766055|  |OrderDifferentSequencePatterns(size: 1000, iterationCount: 1000, pattern: ""random"", sequence: [534011718, 237820880, 1002897798, 1657007234, 1412011072, ...])|200.154685225037|178.204408640957|217.880368583894|10.9666563934794|-8.85599222367827|    `Array.Sort` is worse for many cases, but better for a few and much better for quicksort's worse cases.  Randomised-pivot quicksort is worse for almost all cases, but even better than `Array.Sort` for the worse cases. Randomised pivots are also usable with the variants like quickselect.    It would seem that randomised pivots aren't worth it for the full sorts, but what about the partials? Is the cost to the general case worth the benefit of avoiding the worse case? Should a different pivot strategy again be used?"
25242	area-System.Net	HttpClient GET methods does not call virtual SendAsync method	"I want to decorate all requests to `System.Net.Http.HttpClient` in some generic way, e.g. log request uri.  I create a subclass of `HttpClient` and override method `SendAsync(HttpRequestMessage, CancellationToken)`.  It turns out that overridden method is executed for `PostAsync`, `DeleteAsync`, `PutAsync`, but not executed for `GetAsync`.    ```  using System.Net.Http;    class HttClientEx : HttpClient  {      public override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)      {          Console.WriteLine(""{0} {1}"", request.Method, request.RequestUri);          return base.SendAsync(request, cancellationToken);      }  }  ```  Adding some generic request decorators would be much easier if   `SendAsync(HttpRequestMessage, HttpCompletionOption, CancellationToken)`   would be virtual, but   `SendAsync(HttpRequestMessage, CancellationToken)`   sealed."
25243	area-System.Net	Fix IndexOutOfRangeException in Socket.Begin/EndConnect	There is a race condition in Socket.EndConnect, where it attempts to access the RemoteEndPoint of the async result before waiting for the async result to complete.  Thus if EndConnect is used immediately after BeginConnect (e.g. without a callback and just invoking it synchronosuly), we might access the remote end point before it's been initialized.    Fixes https://github.com/dotnet/corefx/issues/24869  cc: @davidsh
25245	area-Meta	[Announcement] [Discussion] Microsoft Security Advisory CVE-2017-11770	# Microsoft Security Advisory CVE-2017-11770   ## Malformed Certificate can cause Denial of Service  ### Executive Summary     Microsoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.    Microsoft is aware of a security vulnerability in the public version of .NET Core where a malformed certificate or other ASN.1 formatted data could lead to a denial of service via an infinite loop on Linux and macOS.    System administrators are advised to update their .NET Core runtimes to versions 1.0.8, 1.1.5 and 2.0.3. Developers are advised to update their .NET Core SDK to version 2.0.3 or 1.1.5.  ### Announcement    https://github.com/dotnet/announcements/issues/44 is the locked announcement for this issue.    ### Mitigation Factors  .NET Core applications running on Windows are not affected by this vulnerability.     ## Affected Software  The vulnerabilities affect any Microsoft .NET Core project if it uses any of affected runtime versions listed below and is running on Linux.    Platform  | Runtime Version | Fixed runtime version  ----------------|----------------| -------------------------  Linux | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4<br />2.0.0 |  1.0.8<br />1.1.5<br />2.0.3  macOS | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4 |  1.0.8<br />1.1.5    ### Advisory FAQ  #### How do I know if I am affected?    Any application running against .NET Core 1.0.7 or lower, or 1.1.2 or lower, or 2.0.0 is affected. The default version of the .NET core runtime can be listed by running `dotnet --info`, which should produce output in the form of     ```  .NET Command Line Tools (2.0.2)    Product Information:   Version:            2.0.2   Commit SHA-1 hash:  a04b4bf512    Runtime Environment:   OS Name:     Windows   OS Version:  10.0.16299   OS Platform: Windows   RID:         win10-x64   Base Path:   C:\Program Files\dotnet\sdk\2.0.2\    Microsoft .NET Core Shared Framework Host      Version  : 2.0.0    Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d    ```    As this only displays the latest version of the runtime installed it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. By default these are    | Operating System          | Location          |  |---------------------------|-------------------|  | macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/       |  | Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/       |    Each runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.8, 1.1.5 or 2.0.3 then any applications targeting .NET Core will be vulnerable.    #### How do I fix my affected application?  Applications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Version 1.1.5 will also install version 1.0.8 of the runtime.    If you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.    ## Other Information  ### Reporting Security Issues    If you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).    ### Support  You can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.    ### What if the update breaks my application?  An application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.    Note that this file is optional, you may need to create it for each application alongside the executable.    ### Acknowledgments    Thanks to Bachraty Gergely for reporting this issue.    ### External Links    [CVE-2017-11770](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11770)    ### Revisions    V1.0 (Nov 14, 2017): Advisory published.  V1.1 (Nov 14, 2017): Link to CVE corrected.  V1.2 (Nov 14, 2017): Version numbers updated to reflect the correct version, 2.0.3    _Version 1.2_  _Last Updated 2017-11-15_
25246	area-System.Net	Add support for Unix Domain Sockets	Exposing a public UnixDomainSocketEndPoint end point to allow users to communicate with Unix domain sockets.    Fix #10981     Note - the API is still going through API Review.  The major question remaining right now is whether the class should be sealed, or if the class should be unsealed but sealing any virtual methods.  I won't merge this until the API has been approved.    /cc @khyperia
25248	area-Serialization	Fix the SGEN performance issue	The app that use SGEN take much longer than the app not use SGEN. This is caused by the super long ifelse if else if statement in the Wrte_Object/Read_Object methods.  Need port the fix in SG to corefx. 
25249	area-System.Memory	System.Text.Formatting Epic	Tracking item for [System.Text.Formatting](https://github.com/dotnet/corefxlab/tree/master/src/System.Text.Formatting)    Related #24174
25251	area-Infrastructure	Reference assembly for Nullable<T> needs to contain a private field of type T	The reference assembly's declaration for `Nullable<T>` should contain a private field of type `T`. But it does not.    ------------------------------------------    @hughbe commented on [Mon Jul 03 2017](https://github.com/dotnet/roslyn/issues/20624)    **Version Used**:   Microsoft (R) Visual C# Compiler version 2.2.0.61624    **Steps to Reproduce**:    1. `git clone https://github.com/hughbe/excel-mapper/tree/roslyn-demo`  2. `cd excel-mapper/src`  3. `dotnet restore`  4. `dotnet build`  5. `cd ExcelMapper.Tests`  6. `dotnet test`    **Expected Behavior**:    Compilation fails at step 4.  > Pipeline\PipelineResult.cs(9,35): error CS0523: Struct member 'PipelineResult<T>.PreviousResult' of type 'PipelineResult<T>?' causes a cycle in the struct layout [C:\Users\hugh\Documents\GitHub\excel-mapper\src\ExcelMapper\ExcelMapper.csproj]    **Note**: changing the [ExcelMapper.csproj](https://github.com/hughbe/excel-mapper/blob/roslyn-demo/src/ExcelMapper/ExcelMapper.csproj) from    ```xml    <PropertyGroup>      <TargetFrameworks>netstandard1.4</TargetFrameworks>    </PropertyGroup>  ```    to    ```xml    <PropertyGroup>      <TargetFrameworks>netstandard1.4;net46</TargetFrameworks>    </PropertyGroup>  ```    causes the compilation to fail, and no TypeLoadException to be thrown.    **Actual Behavior**:    `TypeLoadException` thrown running the unit tests in step 6.    ```  Failed   ExcelMapper.Tests.ExcelSheetTests.ReadRow_FirstRow_ReturnsExpected  Error Message:   System.TypeLoadException : Could not load type 'ExcelMapper.Pipeline.PipelineResult`1' from assembly 'ExcelMapper, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.  Stack Trace:     at ExcelMapper.Pipeline.Pipeline`1.CompletePipeline(String stringValue)     at ExcelMapper.Pipeline.ColumnPipeline`1.Execute(ExcelSheet sheet, ExcelRow row) in C:\Users\hugh\Documents\GitHub\excel-mapper\src\ExcelMapper\Pipeline\ColumnPipeline.cs:line 29     at ExcelMapper.ExcelPropertyMap.Execute(Object value, ExcelSheet sheet, ExcelRow row) in C:\Users\hugh\Documents\GitHub\excel-mapper\src\ExcelMapper\ExcelPropertyMap.cs:line 21     at ExcelMapper.ExcelClassMap.Execute(ExcelSheet sheet, ExcelRow row) in C:\Users\hugh\Documents\GitHub\excel-mapper\src\ExcelMapper\ExcelClassMap.cs:line 26     at ExcelMapper.ExcelSheet.TryReadRow[T](T& value) in C:\Users\hugh\Documents\GitHub\excel-mapper\src\ExcelMapper\ExcelSheet.cs:line 81     at ExcelMapper.ExcelSheet.ReadRow[T]() in C:\Users\hugh\Documents\GitHub\excel-mapper\src\ExcelMapper\ExcelSheet.cs:line 61     at ExcelMapper.Tests.ExcelSheetTests.ReadRow_FirstRow_ReturnsExpected() in C:\Users\hugh\Documents\GitHub\excel-mapper\src\ExcelMapper.Tests\ExcelMapper\ExcelSheetTests.cs:line 66  ```      ---    @gafter commented on [Wed Jul 05 2017](https://github.com/dotnet/roslyn/issues/20624#issuecomment-313159516)    The offending code is this    ``` c#      public struct PipelineResult<T>      {          public PipelineResult<T>? PreviousResult { get; }  ```    This auto-property creates a backing field of type `Nullable<PipelineResult<T>>`, which contains a private field of type `PipelineResult<T>`, thus inducing a cycle. I don't know why the compiler doesn't see this in a `net46` project.    ---    @hughbe commented on [Wed Jul 05 2017](https://github.com/dotnet/roslyn/issues/20624#issuecomment-313266564)    Neal, I believe the compiler doesn't see this in a netstandard project - the netstandard project is the one that crashes on runtime    ---    @gafter commented on [Sat Nov 11 2017](https://github.com/dotnet/roslyn/issues/20624#issuecomment-343690567)    I suspect the reference assembly for the netstandard framework does not contain the private backing field of type `T` for the struct `Nullable<T>`. If so, the bug is in the reference assembly, not the compiler.    
25252	area-Infrastructure	Add RID for Fedora 27 and enable CoreFX runs	https://fedoramagazine.org/announcing-fedora-27/    https://fedoraproject.org/wiki/Releases/27/Schedule    https://fedoraproject.org/wiki/End_of_life    Related: https://github.com/dotnet/corefx/pull/16302
25253	area-System.Net	Linux sockets: Consider removing multi-threading support in SocketAsyncEngine	PR #23115 makes this likely unnecessary.    There's some additional tuning work planned to try to better optimize epoll_wait behavior, and as part of this, we should remove the multi-threading support in SocketAsyncEngine (or at least rework it).
25254	area-System.Memory	Large memory test fails on outerloop	/cc @AtsushiKan    ref #24497    From System.Memory.Tests    Suspected test : (thanks @benaadams ) At a guess... would be the ParserTests.2gbOverflow which needs 4 * 2BG > 8 GB to run    ```  Executed on dw7opv3vs0003HH  2017-11-14 20:31:24,865: INFO: scriptrunner(33): _main: BuildTools Helix Script Runner v0.1 starting  2017-11-14 20:31:24,865: INFO: helix_test_execution(24): __init__: Copying execution payload files from C:\dotnetbuild\work\0f6bf7e2-4ce4-4832-b62e-da821b97c51b\Work\4b5eacd6-b225-4ea9-a5f7-441d3c2eba3b\Unzip to C:\dotnetbuild\work\0f6bf7e2-4ce4-4832-b62e-da821b97c51b\Work\4b5eacd6-b225-4ea9-a5f7-441d3c2eba3b\Exec\execution  2017-11-14 20:31:24,865: INFO: io(27): copy_tree_to: Copying 'C:\dotnetbuild\work\0f6bf7e2-4ce4-4832-b62e-da821b97c51b\Work\4b5eacd6-b225-4ea9-a5f7-441d3c2eba3b\Unzip\RunTests.cmd' to 'C:\dotnetbuild\work\0f6bf7e2-4ce4-4832-b62e-da821b97c51b\Work\4b5eacd6-b225-4ea9-a5f7-441d3c2eba3b\Exec\execution\RunTests.cmd'  2017-11-14 20:31:24,865: INFO: io(27): copy_tree_to: Copying 'C:\dotnetbuild\work\0f6bf7e2-4ce4-4832-b62e-da821b97c51b\Work\4b5eacd6-b225-4ea9-a5f7-441d3c2eba3b\Unzip\System.Memory.Tests.dll' to 'C:\dotnetbuild\work\0f6bf7e2-4ce4-4832-b62e-da821b97c51b\Work\4b5eacd6-b225-4ea9-a5f7-441d3c2eba3b\Exec\execution\System.Memory.Tests.dll'  2017-11-14 20:31:24,865: INFO: io(27): copy_tree_to: Copying 'C:\dotnetbuild\work\0f6bf7e2-4ce4-4832-b62e-da821b97c51b\Work\4b5eacd6-b225-4ea9-a5f7-441d3c2eba3b\Unzip\System.Memory.Tests.pdb' to 'C:\dotnetbuild\work\0f6bf7e2-4ce4-4832-b62e-da821b97c51b\Work\4b5eacd6-b225-4ea9-a5f7-441d3c2eba3b\Exec\execution\System.Memory.Tests.pdb'  2017-11-14 20:31:24,880: INFO: io(27): copy_tree_to: Copying 'C:\dotnetbuild\work\0f6bf7e2-4ce4-4832-b62e-da821b97c51b\Work\4b5eacd6-b225-4ea9-a5f7-441d3c2eba3b\Unzip\xunit.console.netcore.exe' to 'C:\dotnetbuild\work\0f6bf7e2-4ce4-4832-b62e-da821b97c51b\Work\4b5eacd6-b225-4ea9-a5f7-441d3c2eba3b\Exec\execution\xunit.console.netcore.exe'  2017-11-14 20:31:24,880: INFO: io(27): copy_tree_to: Copying 'C:\dotnetbuild\work\0f6bf7e2-4ce4-4832-b62e-da821b97c51b\Work\4b5eacd6-b225-4ea9-a5f7-441d3c2eba3b\Unzip\xunit.console.netcore.runtimeconfig.json' to 'C:\dotnetbuild\work\0f6bf7e2-4ce4-4832-b62e-da821b97c51b\Work\4b5eacd6-b225-4ea9-a5f7-441d3c2eba3b\Exec\execution\xunit.console.netcore.runtimeconfig.json'  2017-11-14 20:31:24,880: INFO: proc(23): run_and_log_output: Running: C:\dotnetbuild\work\0f6bf7e2-4ce4-4832-b62e-da821b97c51b\Work\4b5eacd6-b225-4ea9-a5f7-441d3c2eba3b\Unzip\RunTests.cmd C:\dotnetbuild\work\0f6bf7e2-4ce4-4832-b62e-da821b97c51b\Payload  2017-11-14 20:31:24,880: INFO: proc(26): run_and_log_output: CWD: C:\dotnetbuild\work\0f6bf7e2-4ce4-4832-b62e-da821b97c51b\Work\4b5eacd6-b225-4ea9-a5f7-441d3c2eba3b\Unzip  2017-11-14 20:31:24,895: INFO: proc(54): run_and_log_output: Output: Using C:\dotnetbuild\work\0f6bf7e2-4ce4-4832-b62e-da821b97c51b\Payload as the test runtime folder.  2017-11-14 20:31:24,895: INFO: proc(54): run_and_log_output: Output: Executing in C:\dotnetbuild\work\0f6bf7e2-4ce4-4832-b62e-da821b97c51b\Work\4b5eacd6-b225-4ea9-a5f7-441d3c2eba3b\Unzip\   2017-11-14 20:31:24,895: INFO: proc(54): run_and_log_output: Output: Running tests... Start time: 20:31:24.89  2017-11-14 20:31:24,895: INFO: proc(54): run_and_log_output: Output:   2017-11-14 20:31:24,895: INFO: proc(54): run_and_log_output: Output: C:\dotnetbuild\work\0f6bf7e2-4ce4-4832-b62e-da821b97c51b\Work\4b5eacd6-b225-4ea9-a5f7-441d3c2eba3b\Unzip>set XUNIT_PERFORMANCE_MIN_ITERATION=1   2017-11-14 20:31:24,895: INFO: proc(54): run_and_log_output: Output:   2017-11-14 20:31:24,895: INFO: proc(54): run_and_log_output: Output: C:\dotnetbuild\work\0f6bf7e2-4ce4-4832-b62e-da821b97c51b\Work\4b5eacd6-b225-4ea9-a5f7-441d3c2eba3b\Unzip>set XUNIT_PERFORMANCE_MAX_ITERATION=1   2017-11-14 20:31:24,895: INFO: proc(54): run_and_log_output: Output:   2017-11-14 20:31:24,895: INFO: proc(54): run_and_log_output: Output: C:\dotnetbuild\work\0f6bf7e2-4ce4-4832-b62e-da821b97c51b\Work\4b5eacd6-b225-4ea9-a5f7-441d3c2eba3b\Unzip>call C:\dotnetbuild\work\0f6bf7e2-4ce4-4832-b62e-da821b97c51b\Payload\dotnet.exe xunit.console.netcore.exe System.Memory.Tests.dll  -xml testResults.xml -notrait category=nonnetcoreapptests -notrait category=nonwindowstests  -notrait category=failing   2017-11-14 20:31:24,990: INFO: proc(54): run_and_log_output: Output: xUnit.net console test runner (64-bit .NET Core)  2017-11-14 20:31:24,990: INFO: proc(54): run_and_log_output: Output: Copyright (C) 2014 Outercurve Foundation.  2017-11-14 20:31:24,990: INFO: proc(54): run_and_log_output: Output:   2017-11-14 20:31:25,084: INFO: proc(54): run_and_log_output: Output: Discovering: System.Memory.Tests  2017-11-14 20:31:25,411: INFO: proc(54): run_and_log_output: Output: Discovered:  System.Memory.Tests  2017-11-14 20:31:25,693: INFO: proc(54): run_and_log_output: Output: Starting:    System.Memory.Tests  2017-11-14 20:31:27,661: INFO: proc(54): run_and_log_output: Output: [ParseInt32 '0',D to 0)]  2017-11-14 20:31:48,457: INFO: proc(54): run_and_log_output: Output: [ParseInt32 '2',D to 2)]  2017-11-14 20:32:06,128: INFO: proc(54): run_and_log_output: Output: [ParseInt32 '21',D to 21)]  2017-11-14 20:32:23,223: INFO: proc(54): run_and_log_output: Output: [ParseInt32 '+2',D to 2)]  2017-11-14 20:32:40,924: INFO: proc(54): run_and_log_output: Output: [ParseInt32 '-2',D to -2)]  2017-11-14 20:32:57,706: INFO: proc(54): run_and_log_output: Output: [ParseInt32 '2147483647',D to 2147483647)]  2017-11-14 20:33:14,471: INFO: proc(54): run_and_log_output: Output: [ParseInt32 '-2147483648',D to -2147483648)]  2017-11-14 20:33:31,707: INFO: proc(54): run_and_log_output: Output: [ParseInt32 '2147483648',D to (should-not-parse))]  2017-11-14 20:33:48,144: INFO: proc(54): run_and_log_output: Output: [ParseInt32 '-2147483649',D to (should-not-parse))]  2017-11-14 20:34:00,503: INFO: proc(54): run_and_log_output: Output: [ParseInt32 '12345abcdefg1',D to 12345)]  2017-11-14 20:34:11,926: INFO: proc(54): run_and_log_output: Output: [ParseInt32 '1234145abcdefg1',D to 1234145)]  2017-11-14 20:34:23,176: INFO: proc(54): run_and_log_output: Output: [ParseInt32 'abcdefghijklmnop1',D to 0)]  2017-11-14 20:34:34,815: INFO: proc(54): run_and_log_output: Output: [ParseInt32 '1147483648',D to 1147483648)]  2017-11-14 20:34:46,362: INFO: proc(54): run_and_log_output: Output: [ParseInt32 '-1147483649',D to -1147483649)]  ```
25255	area-Serialization	Change `releaseNotes` in Sgen package's nuspec	The current releaseNotes points to the release notes of .NET Core runtime 1.0.0 release. We should update it to a new fwlink.
25257	area-System.Memory	Adding null check for implicit cast from array to Span.	Fixes https://github.com/dotnet/corefx/issues/24409    **Edit:** Also fixes https://github.com/dotnet/corefx/issues/16730    ~Will depend on the corresponding PR in coreclr (which will be identical to this one and I will submit it after I address the feedback here).~  Depends on https://github.com/dotnet/coreclr/pull/15044    cc @stephentoub, @KrzysztofCwalina, @benaadams, @ericstj 
25259	area-Serialization	System.Runtime.Serialization.Primitives (DataContractSerializer) 4.3 is not compatible with coreapp 2.0 Derived Exceptions	"DataContractSerializer in System.Runtime.Serialization.Primitives 4.3 is not compatible with Derived Exception objects in coreapp2.    In coreapp2, run this code below:  ```c#              Type type = typeof(NotSupportedException);              DataContractSerializer serializer = new DataContractSerializer(type);                var test = new NotSupportedException();                object target;                using (var stream = new MemoryStream())              {                  serializer.WriteObject(stream, test);                  stream.Seek(0, SeekOrigin.Begin);                    try                  {                      target = serializer.ReadObject(stream);                  }                  catch (Exception ex)                  {                      Console.WriteLine(ex.ToString());                      Console.ReadKey();                      throw;                  }              }                Console.WriteLine(""OK"");              Console.ReadKey();  ```    System.PlatformNotSupportedException will be observed.    This code works like a charm in coreapp1.    Problem is still existed in System.Runtime.Serialization.Primitives 4.4.0-beta-24913-02.    [EDIT] Add C# syntax highlighting by @karelz"
25260	area-Meta	Error: CS1703: System.Runtime, Version=4.1.2.0	When my MVC.core project tries to open any page, I face with the following error:    > CS1703: An assembly with the same identity 'System.Runtime, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' has already been imported.    I tried to clean Temporary folder and checked about the conflicts within the projects but I found nothing.  
25261	area-System.Net	Set handshake failure for alpn failure on Linux.	cc @stephentoub @Drawaes     fixes #24853     The client throws a TimeoutException, because the server is not sending fatal handshake failed alert before terminating the connection, so the client times out waiting for reply from handshake.    @davidsh When i was debugging this on windows, the ```ProtocolToken.Status``` was ```ApplicationProtocolMismatch``` error, but the ```ProtocolToken.Payload``` was null, which means there are no outgoing buffers from Schannel. Does SChannel not send alert for ALPN failure?
25263	area-System.Threading	Test failure: System.Threading.ThreadPools.Tests.ThreadPoolTests/SetMinThreadsTo0Test	Opened on behalf of @Sunny-pu  The test `System.Threading.ThreadPools.Tests.ThreadPoolTests/SetMinThreadsTo0Test` has failed.  Assert.True() Failure\r     Expected: True\r     Actual:   False          Stack Trace:             at System.Threading.ThreadPools.Tests.ThreadPoolTests.SetMinThreadsTo0Test$fin$0() in E:\A\_work\1217\s\corefx\src\System.Threading.ThreadPool\tests\ThreadPoolTests.cs:line 221        at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetV(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall)        at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean isTargetThisCall)        at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566      Build : Master - 20171115.02 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x64   - Debug   - Release - Windows.10.Amd64.ClientRS3-x86   - Debug   - Release 
25264	area-System.Net	NetworkInterface.GetPhysicalAddress() will return null for `tun*` on netcore2.0 and linux	Not sure if the method is expected to return not null, but seems it does?    <details>    * On windows([core](https://github.com/dotnet/corefx/blob/v2.0.0/src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/SystemNetworkInterface.cs#L168)/framework/[mono](https://github.com/mono/mono/blob/mono-5.4.1.7/mcs/class/System/System.Net.NetworkInformation/NetworkInterface.cs#L892)), it always return an new PhysicalAddress(empty for `loopback` but not null).  * On linux([mono](https://github.com/mono/mono/blob/mono-5.4.1.7/mcs/class/System/System.Net.NetworkInformation/NetworkInterface.cs#L578)), it always return an new PhysicalAddress if exists, and PhysicalAddress.None if not exists or `loopback`.  * On linux([core](https://github.com/dotnet/corefx/blob/v2.0.3/src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/UnixNetworkInterface.cs#L37)), it return the preload PhysicalAddress(but null with `tun*`, and 6 * `00` for `loopback`), and there is already an Assert to ensure it's not null.  * The [doc](https://docs.microsoft.com/zh-cn/dotnet/api/system.net.networkinformation.networkinterface.getphysicaladdress?view=netframework-4.7.1) doesn't say the method may return null and the example directly use ToString() on the result.  </details>    Reproduce step(Tested On Ubuntu, netcore2.0):  ---  1. use `tunctl -3` or `openvpn --mktun -dev tun0` or some others to create an tun;  2. use `ifconfig` or some others to add an ipaddr to the card  3. use `NetworkInterface.GetAllNetworkInterfaces()` and `NetworkInterface.GetPhysicalAddress()` in netcore to the the card's macAddr, and get `null`.    ---    Cross Link: Azure/DotNetty#309
25266	area-System.Diagnostics	Make Process.Start throw Win32Exception when child process doesn't exec.	This improves the behavior when a child process can't be successfully started.    CC @stephentoub 
25267	area-System.Runtime	RuntimeInformation.ProcessArchitecture is a lie on desktop	"1. In Visual Studio 2017, create a new console app targeting .NET Framework 4.7.1 (you might need to grab the [targeting pack](https://www.microsoft.com/net/download/visual-studio-sdks)).  2. Create a x64 solution configuration and switch to it.  3. Put this in `Main()`: `Console.WriteLine($""Arch {RuntimeInformation.ProcessArchitecture}, IntPtr.Size: {IntPtr.Size}"");`  4. Run the app    Expected result:  ```  Arch X64, IntPtr.Size: 8  ```    Observed result:  ```  Arch X86, IntPtr.Size: 8  ```"
25268	area-System.Data	Test failure: System.Data.Tests.DataTableTest.PropertyExceptions	The test `System.Data.Tests.DataTableTest.PropertyExceptions ` has failed.    Assert.Throws() Failure  Expected: typeof(System.ArgumentException)  Actual:   (No exception was thrown)    ```  Stack trace:    at System.Data.Tests.DataTableTest.<>c.<PropertyExceptions>b__16_0() in D:\git\dotnetfix\corefx\src\System.Data.Common\tests\System\Data\DataTableTest.cs:line 886    Child process:    System.Data.Common.Tests, Version=4.2.1.0, Culture=neutral, PublicKeyToken=9d77cc7ad39b68eb System.Data.Tests.DataTableTest+<>c Int32 <PropertyExceptions>b__16_0()  ```    - Config:  netcoreapp-Windows_NT-Debug-x64  - OS: Microsoft Windows [Version 6.1.7601]
25269	area-System.Data	Unhandled Exception: System.Data.Odbc.OdbcException: ERROR [H] [unixODBC][	```sh  # odbcinst -j  unixODBC 2.3.4  DRIVERS............: /etc/odbcinst.ini  SYSTEM DATA SOURCES: /etc/odbc.ini  FILE DATA SOURCES..: /etc/ODBCDataSources  USER DATA SOURCES..: /root/.odbc.ini  SQLULEN Size.......: 8  SQLLEN Size........: 8  SQLSETPOSIROW Size.: 8  ```    ```sh  # dotnet --info  .NET Command Line Tools (2.0.0)    Product Information:   Version:            2.0.0   Commit SHA-1 hash:  cdcd1928c9    Runtime Environment:   OS Name:     debian   OS Version:  9   OS Platform: Linux   RID:         linux-x64   Base Path:   /usr/share/dotnet/sdk/2.0.0/    Microsoft .NET Core Shared Framework Host      Version  : 2.0.0    Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d    ```    ```sh  # cat /root/.odbcinst.ini  [ODBC]  TraceFile=/tmp/sql.log  Trace=Yes    [ODBC Drivers]  Cloudera ODBC Driver for Impala=Installed    [Cloudera ODBC Driver for Impala]  Description=Cloudera ODBC Driver for Impala  Driver=/opt/cloudera/impalaodbc/lib/64/libclouderaimpalaodbc64.so  ```    ```sh  # odbcinst -q -d  [ODBC Drivers]  [Cloudera ODBC Driver for Impala]  ```    ```sh  # dpkg -l | grep cloudera  ii  clouderaimpalaodbc          2.5.40.1025-2                  all          Cloudera ODBC Driver for Impala  ```    ```sh  # dotnet run    Unhandled Exception: System.Data.Odbc.OdbcException: ERROR [H] [unixODBC][     at System.Data.Odbc.OdbcConnectionHandle..ctor(OdbcConnection connection, OdbcConnectionString constr, OdbcEnvironmentHandle environmentHandle)     at System.Data.Odbc.OdbcConnectionOpen..ctor(OdbcConnection outerConnection, OdbcConnectionString connectionOptions)     at System.Data.Odbc.OdbcConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningObject)     at System.Data.ProviderBase.DbConnectionFactory.CreateNonPooledConnection(DbConnection owningConnection, DbConnectionPoolGroup poolGroup, DbConnectionOptions userOptions)     at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)     at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)     at System.Data.ProviderBase.DbConnectionInternal.OpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory)     at System.Data.Odbc.OdbcConnection.Open()     at dotnet_cross_odbc.Program.Main(String[] args) in /root/dotnet-cross-odbc/src/dotnet-cross-odbc/Program.cs:line 12  ```      *P.S: the host and database has been replaced with '*.*.*.*'*    ```txt  # cat /tmp/sql.log  [ODBC][4192][1510748384.915616][__handles.c][460]                  Exit:[SQL_SUCCESS]                          Environment = 0x171d2e0  [ODBC][4192][1510748384.917195][SQLSetEnvAttr.c][189]                  Entry:                          Environment = 0x171d2e0                          Attribute = SQL_ATTR_ODBC_VERSION                          Value = 0x3                          StrLen = -6  [ODBC][4192][1510748384.917219][SQLSetEnvAttr.c][364]                  Exit:[SQL_SUCCESS]  [ODBC][4192][1510748384.917230][SQLSetEnvAttr.c][189]                  Entry:                          Environment = 0x171d2e0                          Attribute = SQL_ATTR_CONNECTION_POOLING                          Value = 0x2                          StrLen = -6  [ODBC][4192][1510748384.917237][SQLSetEnvAttr.c][364]                  Exit:[SQL_SUCCESS]  [ODBC][4192][1510748384.918088][SQLAllocHandle.c][375]                  Entry:                          Handle Type = 2                          Input Handle = 0x171d2e0  [ODBC][4192][1510748384.918112][SQLAllocHandle.c][493]                  Exit:[SQL_SUCCESS]                          Output Handle = 0x171df10  [ODBC][4192][1510748384.918506][SQLSetConnectAttrW.c][332]                  Entry:                          Connection = 0x171df10                          Attribute = SQL_ATTR_LOGIN_TIMEOUT                          Value = 0xf                          StrLen = -5  [ODBC][4192][1510748384.918646][SQLSetConnectAttrW.c][606]                  Exit:[SQL_SUCCESS]  [ODBC][4192][1510748384.919578][SQLDriverConnectW.c][290]                  Entry:                          Connection = 0x171df10                          Window Hdl = (nil)                          Str In = [Driver=Cloudera ODBC Driver for Impala;Host=*.*.*.*;Port=21050;Database=*;][length = 82 (SQL_NTS)]                          Str Out = (nil)                          Str Out Max = 0                          Str Out Ptr = 0x7ffe4c382190                          Completion = 0                  UNICODE Using encoding ASCII 'ANSI_X3.4-1968' and UNICODE 'UCS-2LE'    [ODBC][4192][1510748384.928525][SQLDriverConnectW.c][699]                  Exit:[SQL_ERROR]  [ODBC][4192][1510748384.931695][SQLGetDiagRecW.c][514]                  Entry:                          Connection = 0x171df10                          Rec Number = 1                          SQLState = 0x7ffe4c381f40                          Native = 0x7ffe4c382130                          Message Text = 0x17ba0f0                          Buffer Length = 1024                          Text Len Ptr = 0x7ffe4c382128  [ODBC][4192][1510748384.931733][SQLGetDiagRecW.c][561]                  Exit:[SQL_SUCCESS]                          SQLState = [H]                          Native = 0x7ffe4c382130 -> 10360                          Message Text = [[unixODBC][]  [ODBC][4192][1510748384.931772][SQLGetDiagRecW.c][514]                  Entry:                          Connection = 0x171df10                          Rec Number = 2                          SQLState = 0x7ffe4c381f40                          Native = 0x7ffe4c382130                          Message Text = 0x17ba0f0                          Buffer Length = 1024                          Text Len Ptr = 0x7ffe4c382128  [ODBC][4192][1510748384.931783][SQLGetDiagRecW.c][561]                  Exit:[SQL_NO_DATA]  ```    Source Repo on GitHub: https://github.com/qqbuby/dotnet-cross-odbc  
25273	area-System.IO	Add Flush to ZipArchive	"When creating a package on .NET Core, you have to call Dispose or Close to get the contents written out to the underlying stream. This works on .NET Framework, but fails on .NET Core:     ```csharp  [Fact]  public void FlushSavesPackageContents()  {      var uri = new Uri(""/something"", UriKind.Relative);      var contentType = ""something/other"";        byte[] CreatePackage()      {          using (var ms = new MemoryStream())          {              using (var package = Package.Open(ms, FileMode.Create))              {                  package.CreatePart(uri, contentType);                    Assert.Empty(ms.ToArray());                    package.Flush();                    // All data should be written after calling flush                  return ms.ToArray();              }          }      }        var bytes = CreatePackage();        Assert.NotEmpty(bytes);        using (var ms = new MemoryStream(bytes))      using (var package = Package.Open(ms))      {          Assert.True(package.PartExists(uri));          Assert.Equal(contentType, package.GetPart(uri).ContentType);      }  }  ```  "
25274	area-System.Net	[release/1.1.x] Port WinRT WebSockets Client fix to UWP/netcore50 servicing	Port WinRT WebSockets Client fix (#21600) to UWP servicing (netcore50) branch    Fixes #24802
25275	area-System.IO	Use Mono workaround to parse internal Uri relationships in packages	Uri parsing on Mono has a quirk when parsing a Uri that if you pass UriKind.RelativeOrAbsolute, a forward slash / is treated as absolute while in .NET Framework this would be parsed as relative. This causes `System.IO.Packaging.Package` to not be able to load relative URIs that are used as part of internal relationships.    Fixes #24822 
25276	area-Infrastructure	Add retry logic for setup of dotnet cli	Copy init-tools.sh retry logic from corefx.  Also adding display_error_message() function.    Fixes dotnet/core-eng#1966
25277	area-Serialization	"Add a test to verify the XmlQualifiedName ""duration"" of TimeSpan type."	"Add a test to verify ""duration"" in the following line.    `AddNonXsdPrimitive(typeof(TimeSpan), ""TimeSpan"", UrtTypes.Namespace, ""TimeSpan"", new XmlQualifiedName(""duration"", XmlSchema.Namespace), new XmlSchemaFacet[0], TypeFlags.CanBeAttributeValue | TypeFlags.CanBeElementValue | TypeFlags.XmlEncodingNotRequired);`    Fix #18854     @shmao @zhenlan @mconnew "
25280	area-System.Net	Throw when ManagedHandler's ConnectHelper completes sync but unsuccessfully	https://github.com/dotnet/corefx/pull/23115#issuecomment-344735964    cc: @geoffkizer
25284	area-Infrastructure	Change label to use new machine pool	Backport of #25283
25285	area-Infrastructure	Change label to use new machine pool	Backport of #25283
25286	area-System.Net	[WIP] Ssl stream bug hunt - trying to find the outerloop failure	I have just free'd the GCHandle rather than setting it to null.
25287	area-Infrastructure	Is it possible to run test against runtime only?	I was able to build and run corefx tests.    My work has a constraint that it need to use docker image less than 500MB in size.   The docker image contains corefx, coreclr and with built tests is 13.4 GB      I wonder if it is possible that I copy minimum required files to the microsoft/dotnet:2.0-runtime-jessie image and have the test run? 
25289	area-System.Net	HttpListener failure on Windows ARM	   System.Net.HttpListenerException: Invalid access to memory location     at System.Net.HttpListener.BeginGetContext(AsyncCallback callback, Object state)     at DotNetCoreHttpListener.Program.Main(String[] args) in C:\src\DotNetCoreHttpListener\Program.cs:line 22
25290	area-System.Net	StringContent doesn't have an option to remove charset	"I'm using `HttpClient `to send the request but it seems `StringContent ` doesn't have an option to remove `charset `and I have to do it manually    REST endpoint only support `{application/json}` not `{application/json; charset=utf-8}`    ```  apiClient.BaseAddress = new Uri(""http://endpoint:8888"");  apiClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(""application/json""));    var json = JsonConvert.SerializeObject(new Dictionary<string, string>  {   {""username"", username},   {""password"", password}  });  var content = new StringContent(json, Encoding.UTF8, ""application/json"");  content.Headers.Remove(""Content-Type""); // ""{application/json; charset=utf-8}""  content.Headers.Add(""Content-Type"", ""application/json"");  var loginResponse = await apiClient.PostAsync(""api/login"", content);  ```    **Environment**: .NET Core 2.0, .NET Standard 2.0     "
25291	area-System.Diagnostics	Linux Process.StartTime is in the future	TestStartTimeProperty failed on my laptop:  ```     System.Diagnostics.Tests.ProcessThreadTests.TestStartTimeProperty [FAIL]        Assert.InRange() Failure        Range:  (11/17/17 3:21:16 AM - 11/16/17 12:10:45 PM)        Actual: 11/17/17 3:21:17 AM        Stack Trace:           /home/tmds/repos/corefx/src/System.Diagnostics.Process/tests/ProcessThreadTests.cs(115,0): at System.Diagnostics.Tests.ProcessThreadTests.<TestStartTimeProperty>d__3.MoveNext()           --- End of stack trace from previous location where exception was thrown ---           --- End of stack trace from previous location where exception was thrown ---           --- End of stack trace from previous location where exception was thrown ---  Finished:    System.Diagnostics.Process.Tests  ```  The actual and lower range values are in the future.    To calculate the StartTime, the boot time of the system is used. It is calculated as follows:    https://github.com/dotnet/corefx/blob/c280881a048ee9d9fbfc629ca55d755d3e2b045d/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs#L483    Probably Stopwatch.GetTimestamp doesn't increment while my laptop is sleeping.
25292	area-System.Net	Fix Socket span tests in light of ArraySegment->Span cast change	The tests were depending on a cast from a default ArraySegment to a Span throwing an exception.  Now that it's not, fix the tests accordingly.    cc: @ahsonkhan 
25293	area-Infrastructure	Problem building the build-managed.sh for an x86 CoreFX Linux build	  Hallo Github Community,    im facing following problems building the build-managed.sh for an corefx x86 build:  ```  /home/arbeit/Tools/depProj.targets(83,5): error : Error no assets were resolved from NuGet packages. [/home/arbeit/corefx/external/netstandard/netstandard.depproj]  /home/arbeit/Tools/depProj.targets(83,5): error : Error no assets were resolved from NuGet packages. [/home/arbeit/corefx/external/docs/docs.depproj]  /home/arbeit/Tools/depProj.targets(83,5): error : Error no assets were resolved from NuGet packages. [/home/arbeit/corefx/external/ILLink/ILLink.depproj]  ```  I was following these steps:    ```  git clone https://github.com/dotnet/corefx.git  cd corefx  sudo ./cross/build-rootfs.sh x86    ./build-native.sh -debug -- clang3.8  ./build-native.sh -debug -buildArch=x86 -- cross clang3.8  ./build-managed.sh -BuildTests=false  ```  The build-native.sh builds working fine, but the managed build not. I also tried -release instead of -debug.    I found [these  issue with a workaround](https://github.com/dotnet/corefx/issues/15274) but i have no   src/Tools/CoreFx.Tools/CoreFx.Tools.csproj.    Can someone help me with that problems?    Greetings    Philipp.    
25294	area-System.IO	IsolatedStorageException using System.IO.Packaging	We are getting an IsolatedStorageException in the System.IO.Packaging code ([details here](https://github.com/OfficeDev/Open-XML-SDK/issues/292#issuecomment-344715377)). Two questions:    1. What is the best way to avoid this using the existing code.  2. I'm willing to contribute a fix to eliminate this issue - can I volunteer to do so?    thanks - dave
25295	area-System.Net	TryParse for email addresses 	"Currently we have to write this code:    ```c#          public static bool IsEmailAddress(this string value)          {              try              {                  new System.Net.Mail.MailAddress(value);                  return true;              }              catch ()              {                  return false;              }          }  ```    MailAddress should have a TryParse method like Int32.TryParse.    ## Rationale and Usage    Throwing and catching exceptions can have a significant impact on performance. So when possible there should be a non-throwing alternative for methods that commonly fail. An example would be `Int32.Parse` and `Int32.TryParse`.    There is also an impact on debugger. If you have the IDE set to ""Break on All Exceptions"" in order to see where an exception is being thrown, it will also catch this even though it is not interesting.    ## Proposed API    ```csharp  class MailAddress {      [...]      public static bool TryParse( string address, out MailAddress result);      public static bool TryParse( string address, string displayName, out MailAddress result);      public static bool TryParse( string address, string displayName, Encoding displayNameEncoding, out MailAddress result);  ```    ## Details    ## Open Questions      "
25296	area-System.Security	Create a Memory/Span-based ASN.1 reader and writer	"The AsnReader type can read any BER-encoded value for the types that it supports (for tag values up to int.MaxValue).  It also understands the CER and DER restrictions, and when reading in those modes it will enforce the restrictions that those encoding rulesets dictate.    The AsnWriter type mostly writes in DER (except where CER demands a different encoding). The only significant ""BER-relaxation"" it takes is that closing a SET OF value will not sort the contents.    Unlike its predecessor, the DerEncoder class, AsnWriter never involves `byte[][]`.    The reader and writer (and helper classes) are all in one file because they're expected to be consumed as shared source until we're fully happy with things, then it can become public API and split into multiple files accordingly.    Reference materials:  * [ITU-T-REC-X.680-201508](https://www.itu.int/rec/dologin_pub.asp?lang=e&id=T-REC-X.680-201508-I!!PDF-E&type=items) (ASN.1 language, and some semantics behind the values)  * [ITU-T-REC-X.690-201508](https://www.itu.int/rec/dologin_pub.asp?lang=e&id=T-REC-X.690-201508-I!!PDF-E&type=items) (the BER encoding family (BER, CER, DER)).    Contributes to #21833."
25297	area-System.Security	make sure crypto_Init is done before calling ssl_init	fixes #25230     The problem is that openssl initialization is not re-entrant/thread safe.  The trace shows SSL_library_init calls OBJ_NAME_add() This is exactly what crypto init would do. Further more, locking needs to be set in openssl.     This change ensures crypto init is called before ssl_init. That should be no-op if CryptoNative_EnsureOpenSslInitialized() was already called.     With this change  did 5000 iterations of HTTP test suite without any crash.  
25298	area-Serialization	XmlSerializer.CreateWriter Throws NotImplementedException	The tests being added by https://github.com/dotnet/wcf/compare/master...imcarolwang:SFxTest?expand=1 got the following exceptions. We need to investigate if it's issue in serialization or in WCF.    ```  Exception details: System.ServiceModel.CommunicationException: There was an error in serializing body of message :   'There was an error generating the XML document.'.  Please see InnerException for more details.   ---> System.InvalidOperationException: There was an error generating the XML document.   ---> System.NotImplementedException: The method or  operation is not implemented.                 at System.Xml.Serialization.XmlSerializer.CreateWriter() in E:\A\_work\1360\s\corefx\src\System.Private.Xml\src\Sy  stem\Xml\Serialization\XmlSerializer.cs:line 1039  at System.Xml.Serialization.XmlSerializer.Serialize(XmlWriter xmlWriter, Object o, XmlSerializerNamespaces namespa  ces, String encodingStyle, String id) in E:\A\_work\1360\s\corefx\src\System.Private.Xml\src\System\Xml\Serialization  \XmlSerializer.cs:line 465       --- End of inner exception stack trace ---       at System.Xml.Serialization.XmlSerializer.Serialize(XmlWriter xmlWriter, Object o, XmlSerializerNamespaces namespa  ces, String encodingStyle, String id) in E:\A\_work\1360\s\corefx\src\System.Private.Xml\src\System\Xml\Serialization  \XmlSerializer.cs:line 514       at System.Xml.Serialization.XmlSerializer.Serialize(XmlWriter xmlWriter, Object o, XmlSerializerNamespaces namespa  ces) in E:\A\_work\1360\s\corefx\src\System.Private.Xml\src\System\Xml\Serialization\XmlSerializer.cs:line 437       at System.ServiceModel.Dispatcher.XmlSerializerOperationFormatter.SerializeBody(XmlDictionaryWriter writer, Messag  eVersion version, XmlSerializer serializer, MessagePartDescription returnPart, MessagePartDescriptionCollection bodyP  arts, Object returnValue, Object[] parameters) in E:\OSS\carol\wcf\src\System.Private.ServiceModel\src\System\ServiceModel\Dispatcher\XmlSerializerOperationFormatter.cs:line 324       at System.ServiceModel.Dispatcher.XmlSerializerOperationFormatter.SerializeBody(XmlDictionaryWriter writer, Messag  eVersion version, String action, MessageDescription messageDescription, Object returnValue, Object[] parameters, Boolean isRequest) in E:\OSS\carol\wcf\src\System.Private.ServiceModel\src\System\ServiceModel\Dispatcher\XmlSerializerOperationFormatter.cs:line 276       --- End of inner exception stack trace ---  ```
25301	area-System.Linq	S.L.Expressions produces unnecessary nop instructions for high-arity delegates	Any use of `ldarg`, `ldarga` or `starg` is followed by two redundant `nop` functions due to passing a four-byte signed integer where a two-byte unsigned is expected.    In theory this could produce even worse IL for very large values, but since that would be an attempt to use more that 65535 arguments, would fail on that ground anyway.
25302	area-System.Linq	S.L.Expressions interpreter defers and differs on excepton for excessive arguments.	If you try to compile a lambda expression with more than 65535 parameters it throws `InvalidProgramException` which is to be expected since .NET methods cannot have more arguments than that.    The interpreter doesn't throw until attempted invocation, and at that point throws `TargetInvocationException` instead.
25303	area-System.Text	Regex should have a static TryParse() method	"[edit by @ViktorHofer to put into review format]    # Issue  from @udlose   The `System.Text.RegularExpression` class does not have a true ability to test for valid regular expression syntax from a string input. The only way that this can currently be accomplished is to surround the `Regex `ctor (that takes a string) with a `try/catch` and look for an `ArgumentException `if the string is not a valid regular expression.    # Rationale  from @udlose   This is not desirable for 3 reasons:     1. It doesn't follow the ""TryParse"" pattern used by other types for ""conversion"" from strings such as `Int32.TryParse( string )`, etc.   2. Performance of possible exception throwing   3. Exceptions should not be used for control flow    # Proposal  from @ViktorHofer  ```csharp  namespace System.Text.RegularExpressions  {      public class Regex : ISerializable      {          public static bool TryParse(string pattern, out Regex regex);          public static bool TryParse(string pattern, RegexOptions options, out Regex regex);          public static bool TryParse(string pattern, RegexOptions options, TimeSpan matchTimeout, out Regex regex);            public static bool Validate(string pattern);          public static bool Validate(string pattern, Regexoptions options);      }  }  ```    Names are not final. Could either be `TryCreate(...)` and `ValidatePattern(...)`    # Discussion  from @ViktorHofer  For this to work we would need to make some changes in `RegexParser`. Everywhere where we are currently throwing an exception with the helper method `MakeException(string)` we would need to add a condition and return null if no exceptions are desired (TryParse scenario). We would also need to make sure that the changes won't harm existing inlining optimizations. It would involve adding a lot of repetitive code."
25304	area-System.Linq	Fix two issues related to high-arity lambda expressions.	* Only use two bytes for arguments of `ldarg` and relatives in S.L.Expressions.    Fixes #25301    * Always throw InvalidProgramException compiling lambdas too many params    Consistent between interpreter and compiler, and later code can depend on the count being valid.    Fixes #25302
25305	area-Infrastructure	Fix issue where CI perf builds fail by invoking sudo	[This build](https://ci2.dot.net/job/dotnet_corefx/job/perf/job/master/job/perf_ubuntu14.04_release/1373/console) failed on the new Ubuntu machine pool because of a call to sudo, and no longer running as root. Root permissions are not required to run these commands, so the sudo call should not be needed
25306	area-System.Security	X509Store.Add pops up a dialog, fails on OneCore systems	"Repro:    ```c#  using System;  using System.Security.Cryptography.X509Certificates;    namespace CertTest  {      class Program      {          static void Main(string[] args)          {              X509Store store = new X509Store(StoreName.Root, StoreLocation.CurrentUser);              store.Open(OpenFlags.ReadWrite);              string certPath = ""c:\\test\\t.cer"";              store.Add(new X509Certificate2(X509Certificate2.CreateFromCertFile(certPath)));              Console.WriteLine(""Added Cert: "" + certPath);              store.Close();          }      }  }  ```    The code below pops up a dialog: ""You are about to install a certificate from a certification authority... "":    ![image](https://user-images.githubusercontent.com/1875734/32924226-6bac68ee-caf0-11e7-934e-afef4e317c16.png)    when run on a desktop version on Windows. On a GUI-less OneCore system (such as Nano or IoT Core), it fails immediately with exception   `Internal.Cryptography.CryptoThrowHelper.WindowsCryptographicException: 'The operation was canceled by the user'` making this API completely unusable.    Interestingly, the API succeeds on Linux.    So either we have a security hole on Linux, or we need to fix it on Windows (at least OneCore SKUs) to avoid the dialog.    The popup can be avoided when the certificate is added to the local machine root, however that only works for an administrator and is not possible for many scenarios.    [EDIT] Add C# syntax highlight by @karelz"
25307	area-System.Runtime	Expose and test TryFormat methods on {S}Byte, {U}Int16/32/64, Boolean	Depends on https://github.com/dotnet/coreclr/pull/15069  Depends on https://github.com/dotnet/corert/pull/4953  Fixes https://github.com/dotnet/corefx/issues/22403
25308	area-System.Linq	S.L.Expressions: Remove pre-generated delegate for CallSite-only delegate.	Has no actual dynamic arguments.
25310	area-Meta	Feature request: Add a method to get the core framework version.	"Due to some function is brought in with newer version of core framework, I need to test the installed version of core framework on client side while my app running.    Is there any way to get the framework version, e.g. ""2.0.3"" ?  Currently, Environment.Version is set to netfx version even the app is running as core app.    Thanks."
25311	area-System.Net	"Tests under ""System.Net.Tests"" failed with ""Exit code was 131 but it should have been 42"""	Failed tests:   System.Net.Tests.WebRequestTest.DefaultWebProxy_SetThenGet_ValuesMatch   System.Net.Tests.GlobalProxySelectionTest.Select_Success   System.Net.Tests.HttpWebRequestTest.DefaultMaximumResponseHeadersLength_SetAndGetLength_ValuesMatch   System.Net.Tests.HttpWebRequestTest.DefaultMaximumErrorResponseLength_SetAndGetLength_ValuesMatch   System.Net.Tests.HttpWebRequestTest.DefaultCachePolicy_SetAndGetPolicyReload_ValuesMatch   System.Net.Tests.AuthenticationManagerTest.CredentialPolicy_Roundtrip   System.Net.Tests.AuthenticationManagerTest.CustomTargetNameDictionary_ValidCollection   System.Net.Tests.AuthenticationManagerTest.Register_Unregister_ModuleCountUnchanged    Configuration: osx10.12_debug    Detail: https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_debug/3587/testReport/    MESSAGE:  Exit code was 131 but it should have been 42\nExpected: True\nActual: False  +++++++++++++++++++  STACK TRACE:  at System.Diagnostics.RemoteExecutorTestBase.RemoteInvokeHandle.Dispose() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 205 at System.Net.Tests.WebRequestTest.DefaultWebProxy_SetThenGet_ValuesMatch() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/src/System.Net.Requests/tests/WebRequestTest.cs:line 36
25312	area-System.Diagnostics	Fix Process StartTime offset on Linux due to device sleeping	Fixes https://github.com/dotnet/corefx/issues/25291
25313	area-Meta	Getting MSB3027 (access denied) in MSDEV during compilation after dotnet.exe crash	"Hey there,    I'm devolping a dotnet core console application with Visual Studio Pro 2017 (15.4.0).    Sometimes I'm starting my console app from the Powershell, sometimes directly hitting F5 from the Visual Studio. It occurs from time to time, that when I start the Project from Powershell, that dotnet.exe crashes in case of an unhandled application exception.     From that Point on, I can't compile my Project anymore getting:    Error MSB3027 Could not copy ""obj\Debug\netcoreapp2.0\projectname.dll"" to ""bin\Debug\netcoreapp2.0\projectname.dll"".   Exceeded retry count of 10. Failed.     In the taskmanager, there is no dotnet process open, closing all MSDEV instances doesn't help. At the Moment I'm forced to do a reboot.    Any guesses?  "
25316	area-Serialization	Add releasenotes and projecturl in the nuget package.	Fix #25255     @shmao @zhenlan @mconnew 
25319	area-Infrastructure	Use BuildTools PackageVersionPropsUrl tooling	https://github.com/dotnet/core-eng/issues/2037  BuildTools PR this is using: https://github.com/dotnet/buildtools/pull/1787    ---    All definitions need `PB_PackageVersionPropsUrl` to default to empty string, not undefined. If it were undefined, VSTS could leave in `$(PB_PackageVersionPropsUrl)` which would make the build fail when it fails to download it.    For Docker, map the environment variable on each run command.    For OSX/Windows, have VSTS set the environment variable by creating a definition variable.
25320	area-Serialization	SGEN need support .exe	It only works for .dll not works for .exe. This is because in the target, we always load <AssemblyName>.dll. In full framework, the output is <AssemblyName>.exe.
25321	area-Infrastructure	Mark packages as stable for 2.0.4	cc: @weshaggard     FYI: @danmosemsft 
25323	area-System.IO	Porting: Switch WaitNamedPipe and CreateNamedPipeClient invocation ordering. 	(Original PR #24616)    * Switch WaitNamedPipe and CreateNamedPipeClient invocation ordering.    We need to do this as WaitNamedPipe is not supported in Windows Containers.  By default using CreateNamedPipeClient first with call to WaitNamedPipe as  a fallback only will allow us to use NamedPipeClientStream inside Windows  Containers.    * Integrate feedback from PR.
25324	area-System.Numerics	Add support for Big-Endian and unsigned byte patterns to BigInteger	Fixes #24575
25326	area-System.Runtime	Temporarily removing use of ReadOnlySpan indexer in Runtime.Extensions	Removing the use of the ReadOnlySpan indexer to help the implementation change go through with the least disabling of tests.    This is a temporary workaround that is required to reduce the number of failing tests that would need to be disabled due to the change to ReadOnlySpan indexer to return ref readonly, here: https://github.com/dotnet/coreclr/pull/14727    cc @weshaggard, @stephentoub, @KrzysztofCwalina, @jkotas     **This change should be reverted once the change propogates (and the tests enabled): https://github.com/dotnet/coreclr/issues/15089**
25328	area-System.Data	Better error messaging for Integrated Auth Failure in SqlClient	SqlClient error should also point the user to check if Kerberos is enabled on Sql Server for authentication when Integrated Authentication fails.  
25329	area-System.Net	[release/1.0.0] Port WinRT WebSockets Client fix (#21600)	Port WinRT WebSockets Client fix (#21600) to UWP servicing (netcore50) branch    Contributes to #24802
25330	area-System.Net	WebSocket broken after failed close handshake	Server: AspNet Core 2.0  Client: websocket-sharp    If you connect with websocket-sharp to AspNet Core's Websocket server, then kills the client app, reopen it, and connect again, you get an exception on server's ReceiveAsync(). After that, you can't connect from any source, even from browsers.    ```  [2017-11-18 03:51:33] info: Microsoft.AspNetCore.Hosting.Internal.WebHost[1]                              Request starting HTTP/1.1 GET http://localhost:5000/ws  [2017-11-18 03:51:35] fail: Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware[0]                              An unhandled exception has occurred while executing the request  System.Net.WebSockets.WebSocketException (0x80004005): The remote party closed the WebSocket connection without completing the close handshake. ---> Microsoft.AspNetCore.Server.Kestrel.Core.BadHttpRequestException: Unexpected end of request content.     at Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.PipeCompletion.ThrowFailed()     at Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.Pipe.GetResult(ReadResult& result)     at Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.Pipe.Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IReadableBufferAwaiter.GetResult()     at Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadableBufferAwaitable.GetResult()     at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.MessageBody.<ReadAsync>d__22.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()     at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.FrameRequestStream.<ReadAsyncInternal>d__21.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()     at System.Net.WebSockets.ManagedWebSocket.<EnsureBufferContainsAsync>d__70.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Net.WebSockets.ManagedWebSocket.<ReceiveAsyncPrivate>d__61.MoveNext()     at System.Net.WebSockets.ManagedWebSocket.<ReceiveAsyncPrivate>d__61.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()     at Test.Web.WebSocketManager.WebSocketManagerMiddleware.<Receive>d__7.MoveNext() in D:\Projects\...\Test-web\Test.Web\WebSocketManager\WebSocketManagerMiddleware.cs:line 92  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Test.Web.WebSocketManager.WebSocketManagerMiddleware.<Invoke>d__6.MoveNext() in D:\Projects\...\Test-web\Test.Web\WebSocketManager\WebSocketManagerMiddleware.cs:line 31  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.AspNetCore.Builder.Extensions.MapMiddleware.<Invoke>d__3.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.AspNetCore.Builder.Extensions.MapMiddleware.<Invoke>d__3.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.<Invoke>d__7.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware.<Invoke>d__6.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware.<Invoke>d__6.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore.MigrationsEndPointMiddleware.<Invoke>d__4.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware.<Invoke>d__6.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware.<Invoke>d__6.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.<Invoke>d__7.MoveNext()  ```    Exception while trying to connect with Chrome after the server is broken:    ```  [2017-11-18 03:55:11] info: Microsoft.AspNetCore.Hosting.Internal.WebHost[1]                              Request starting HTTP/1.1 GET http://localhost:5000/ws  [2017-11-18 03:55:11] info: Microsoft.AspNetCore.Cors.Infrastructure.CorsService[4]                              Policy execution successful.  [2017-11-18 03:55:11] fail: Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware[0]                              An unhandled exception has occurred while executing the request  System.Net.WebSockets.WebSocketException (0x80004005): The remote party closed the WebSocket connection without completing the close handshake. ---> System.ObjectDisposedException: Cannot access a disposed object.  Object name: 'FrameResponseStream'.     at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.FrameResponseStream.ValidateState(CancellationToken cancellationToken)     at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.FrameResponseStream.WriteAsync(Byte[] buffer, Int32 offset, Int32 count, CancellationToken cancellationToken)     at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.FrameDuplexStream.WriteAsync(Byte[] buffer, Int32 offset, Int32 count, CancellationToken cancellationToken)     at System.Net.WebSockets.ManagedWebSocket.SendFrameLockAcquiredNonCancelableAsync(MessageOpcode opcode, Boolean endOfMessage, ArraySegment`1 payloadBuffer)     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Test.Web.WebSocketManager.WebSocketHandler.<SendMessageAsync>d__8.MoveNext() in D:\Projects\...\Test-web\Test.Web\WebSocketManager\WebSocketHandler.cs:line 49  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Test.Web.WebSocketManager.WebSocketHandler.<SendMessageToAllAsync>d__10.MoveNext() in D:\Projects\...\Test-web\Test.Web\WebSocketManager\WebSocketHandler.cs:line 68  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Test.Web.MasterServer.MasterServerHandler.<OnConnected>d__1.MoveNext() in D:\Projects\...\Test-web\Test.Web\MasterServer\MasterServerHandler.cs:line 28  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Test.Web.WebSocketManager.WebSocketManagerMiddleware.<Invoke>d__6.MoveNext() in D:\Projects\...\Test-web\Test.Web\WebSocketManager\WebSocketManagerMiddleware.cs:line 29  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.AspNetCore.Builder.Extensions.MapMiddleware.<Invoke>d__3.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.AspNetCore.Builder.Extensions.MapMiddleware.<Invoke>d__3.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.<Invoke>d__7.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware.<Invoke>d__6.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware.<Invoke>d__6.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore.MigrationsEndPointMiddleware.<Invoke>d__4.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware.<Invoke>d__6.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware.<Invoke>d__6.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.<Invoke>d__7.MoveNext()  ```    Workaround:    ```c#  try {      await socket.ReceiveAsync(...);  } catch (Exception) {      await socket.CloseOutputAsync(...);  }  ```  
25332	area-Microsoft.CSharp	Don't cache TypeParameterType in table.	There's only one per symbol, and its stored in the symbol and looked-for there first, so never found in the lookup table.    Remove the table.
25333	area-Infrastructure	cant cross build arm64 on Ubuntu 17.10	simply put i cant cross build arm64 on Ubuntu 17.10  all i need is a arm64 mscorlib.dll  cant built the crossbuild rootfs to compile and cant compile it based on the guide    https://github.com/dotnet/corefx/blob/master/Documentation/building/cross-building.md    nothing in the guide appears to work
25334	area-System.Numerics	Add support System.Numerics.Vectors types with double precision	Vector2, Vector3, Vector4, Matrix3x2, Matrix4x4, Plane, Quaternion are currently implemented with single precission numbers.   Theare are requests (above) and some miror implementations of System.Numerics.* can be found across Internet where double is supported.    These classes should support float and double precission and maybe in future more types. One of possile solution is to miror them as generics  with support for both double and single precission numbers.    ## Rationale and Usage    This is request that developers ask about, one of usages is CAD software.    For example, to use Vector3<T> and Matrix4x4<T> with double precission we will be able to write:    ```csharp  var v1 = new Vector3<double>(4,5,4);  var v2 = new Vector3<double>(1,3,2);  double d = Vector3<double>.Dot(v1, v2);    Matrix4x4<double> xRot = Matrix4x4<double>.CreateTranslation(v1);  Vector3<double> tr = Vector3<double>.Transform(v2,xRot);  ```    ## Proposed API (mirrored from Vector2, Vector3, Vector4, Matrix3x2, Matrix4x4, Plane)    The following APIs are duplicates of the existing `float` based APIs, but with `float` replaced with `T` to allow for `float`, `double`, and in the future `System.Half`.    ### File Vector2OfT.cs    ```csharp  public partial struct Vector2<T> : IEquatable<Vector2<T>>, IFormattable  {      public static Vector2<T> Zero { get; }            public static Vector2<T> One { get; }            public static Vector2<T> UnitX { get; }            public static Vector2<T> UnitY { get; }            public override int GetHashCode();        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public override bool Equals(object obj);        public override string ToString();        public string ToString(string format);        public string ToString(string format, IFormatProvider formatProvider);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public T Length();        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public T LengthSquared();        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static T Distance(Vector2<T> value1, Vector2<T> value2);            [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static T DistanceSquared(Vector2<T> value1, Vector2<T> value2);            [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector2<T> Normalize(Vector2<T> value);            [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector2<T> Reflect(Vector2<T> vector, Vector2<T> normal);            [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector2<T> Clamp(Vector2<T> value1, Vector2<T> min, Vector2<T> max);            [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector2<T> Lerp(Vector2<T> value1, Vector2<T> value2, T amount);            [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector2<T> Transform(Vector2<T> position, Matrix3x2<T> matrix);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector2<T> Transform(Vector2<T> position, Matrix4x4<T> matrix);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector2<T> TransformNormal(Vector2<T> normal, Matrix3x2<T> matrix);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector2<T> TransformNormal(Vector2<T> normal, Matrix4x4<T> matrix);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector2<T> Transform(Vector2<T> value, Quaternion<T> rotation);            [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector2<T> Add(Vector2<T> left, Vector2<T> right);            [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector2<T> Subtract(Vector2<T> left, Vector2<T> right);            [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector2<T> Multiply(Vector2<T> left, Vector2<T> right);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector2<T> Multiply(Vector2<T> left, T right);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector2<T> Multiply(T left, Vector2<T> right);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector2<T> Divide(Vector2<T> left, Vector2<T> right);            [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector2<T> Divide(Vector2<T> left, T divisor);            [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector2<T> Negate(Vector2<T> value);  }  ```  ### File Vector2_IntrinsicsOfT.cs  ```csharp  public partial struct Vector2<T>  {      public T X;            public T Y;        [JitIntrinsic]      public Vector2(T value);        [JitIntrinsic]      public Vector2(T x, T y);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public void CopyTo(T[] array);        public void CopyTo(T[] array, int index);        [JitIntrinsic]      public bool Equals(global::System.Numerics.Vector2<T> other);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static T Dot(global::System.Numerics.Vector2<T> value1, global::System.Numerics.Vector2<T> value2);            [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static global::System.Numerics.Vector2<T> Min(global::System.Numerics.Vector2<T> value1, global::System.Numerics.Vector2<T> value2);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static global::System.Numerics.Vector2<T> Max(global::System.Numerics.Vector2<T> value1, global::System.Numerics.Vector2<T> value2);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static global::System.Numerics.Vector2<T> Abs(global::System.Numerics.Vector2<T> value);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static global::System.Numerics.Vector2<T> SquareRoot(global::System.Numerics.Vector2<T> value);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static global::System.Numerics.Vector2<T> operator +(global::System.Numerics.Vector2<T> left, global::System.Numerics.Vector2<T> right);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static global::System.Numerics.Vector2<T> operator -(global::System.Numerics.Vector2<T> left, global::System.Numerics.Vector2<T> right);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static global::System.Numerics.Vector2<T> operator *(global::System.Numerics.Vector2<T> left, global::System.Numerics.Vector2<T> right);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static global::System.Numerics.Vector2<T> operator *(T left, global::System.Numerics.Vector2<T> right);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static global::System.Numerics.Vector2<T> operator *(global::System.Numerics.Vector2<T> left, T right);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static global::System.Numerics.Vector2<T> operator /(global::System.Numerics.Vector2<T> left, global::System.Numerics.Vector2<T> right);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static global::System.Numerics.Vector2<T> operator /(global::System.Numerics.Vector2<T> value1, T value2);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static global::System.Numerics.Vector2<T> operator -(global::System.Numerics.Vector2<T> value);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static bool operator ==(global::System.Numerics.Vector2<T> left, global::System.Numerics.Vector2<T> right);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static bool operator !=(global::System.Numerics.Vector2<T> left, global::System.Numerics.Vector2<T> right);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static explicit operator Vector2<T>(Vector2 value);  }  ```  ### File Vector3OfT.cs  ```csharp  public partial struct Vector3<T> : IEquatable<Vector3<T>>, IFormattable  {      public static Vector3<T> Zero { get; }            public static Vector3<T> One { get; }            public static Vector3<T> UnitX { get; }            public static Vector3<T> UnitY { get; }            public static Vector3<T> UnitZ { get; }            public override int GetHashCode();        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public override bool Equals(object obj);        public override string ToString();        public string ToString(string format);        public string ToString(string format, IFormatProvider formatProvider);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public T Length();        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public T LengthSquared();        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static T Distance(Vector3<T> value1, Vector3<T> value2);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static T DistanceSquared(Vector3<T> value1, Vector3<T> value2);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> Normalize(Vector3<T> value);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> Cross(Vector3<T> vector1, Vector3<T> vector2);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> Reflect(Vector3<T> vector, Vector3<T> normal);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> Clamp(Vector3<T> value1, Vector3<T> min, Vector3<T> max);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> Lerp(Vector3<T> value1, Vector3<T> value2, T amount);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> Transform(Vector3<T> position, Matrix4x4<T> matrix);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> TransformNormal(Vector3<T> normal, Matrix4x4<T> matrix);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> Transform(Vector3<T> value, Quaternion<T> rotation);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> Add(Vector3<T> left, Vector3<T> right);            [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> Subtract(Vector3<T> left, Vector3<T> right);            [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> Multiply(Vector3<T> left, Vector3<T> right);            [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> Multiply(Vector3<T> left, T right);            [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> Multiply(T left, Vector3<T> right);            [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> Divide(Vector3<T> left, Vector3<T> right);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> Divide(Vector3<T> left, T divisor);            [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> Negate(Vector3<T> value);  }  ```  ### File Vector3_IntrinsicsOfT.cs  ```csharp  public partial struct Vector3<T>  {      public T X;            public T Y;            public T Z;        [JitIntrinsic]      public Vector3(T value);        public Vector3(Vector2<T> value, T z);        [JitIntrinsic]      public Vector3(T x, T y, T z);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public void CopyTo(T[] array);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public void CopyTo(T[] array, int index);        [JitIntrinsic]      public bool Equals(Vector3<T> other);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static T Dot(Vector3<T> vector1, Vector3<T> vector2);        [JitIntrinsic]      public static Vector3<T> Min(Vector3<T> value1, Vector3<T> value2);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> Max(Vector3<T> value1, Vector3<T> value2);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> Abs(Vector3<T> value);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> SquareRoot(Vector3<T> value);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> operator +(Vector3<T> left, Vector3<T> right);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> operator -(Vector3<T> left, Vector3<T> right);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> operator *(Vector3<T> left, Vector3<T> right);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> operator *(Vector3<T> left, T right);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> operator *(T left, Vector3<T> right);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> operator /(Vector3<T> left, Vector3<T> right);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> operator /(Vector3<T> value1, T value2);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector3<T> operator -(Vector3<T> value);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static bool operator ==(Vector3<T> left, Vector3<T> right);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static bool operator !=(Vector3<T> left, Vector3<T> right);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static explicit operator Vector3<T>(Vector3 value);  }  ```  ### File Vector4OfT.cs  ```csharp  public partial struct Vector4<T> : IEquatable<Vector4<T>>, IFormattable  {      public static Vector4<T> Zero { get; }        public static Vector4<T> One { get; }        public static Vector4<T> UnitX { get; }        public static Vector4<T> UnitY { get ; }            public static Vector4<T> UnitZ { get; }            public static Vector4<T> UnitW { get; };        public override int GetHashCode();        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public override bool Equals(object obj);        public override string ToString();        public string ToString(string format);        public string ToString(string format, IFormatProvider formatProvider);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public T Length();        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public T LengthSquared();        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static T Distance(Vector4<T> value1, Vector4<T> value2);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static T DistanceSquared(Vector4<T> value1, Vector4<T> value2);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> Normalize(Vector4<T> vector);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> Clamp(Vector4<T> value1, Vector4<T> min, Vector4<T> max);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> Lerp(Vector4<T> value1, Vector4<T> value2, T amount);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> Transform(Vector2<T> position, Matrix4x4<T> matrix);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> Transform(Vector3<T> position, Matrix4x4<T> matrix);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> Transform(Vector4<T> vector, Matrix4x4<T> matrix);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> Transform(Vector2<T> value, Quaternion<T> rotation);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> Transform(Vector3<T> value, Quaternion<T> rotation);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> Transform(Vector4<T> value, Quaternion<T> rotation);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> Add(Vector4<T> left, Vector4<T> right);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> Subtract(Vector4<T> left, Vector4<T> right);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> Multiply(Vector4<T> left, Vector4<T> right);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> Multiply(Vector4<T> left, T right);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> Multiply(T left, Vector4<T> right);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> Divide(Vector4<T> left, Vector4<T> right);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> Divide(Vector4<T> left, T divisor);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> Negate(Vector4<T> value);  }  ```  ### File Vector4OfT_Intrinsics.cs  ```csharp  public partial struct Vector4<T>  {      public T X;            public T Y;        public T Z;            public T W;            [JitIntrinsic]      public Vector4(T value);        [JitIntrinsic]      public Vector4(T x, T y, T z, T w);        public Vector4(Vector2<T> value, T z, T w);        public Vector4(Vector3<T> value, T w);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public void CopyTo(T[] array);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public void CopyTo(T[] array, int index);        [JitIntrinsic]      public bool Equals(Vector4<T> other);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static T Dot(Vector4<T> vector1, Vector4<T> vector2);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> Min(Vector4<T> value1, Vector4<T> value2);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> Max(Vector4<T> value1, Vector4<T> value2);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> Abs(Vector4<T> value);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> SquareRoot(Vector4<T> value);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> operator +(Vector4<T> left, Vector4<T> right);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> operator -(Vector4<T> left, Vector4<T> right);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> operator *(Vector4<T> left, Vector4<T> right);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> operator *(Vector4<T> left, T right);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> operator *(T left, Vector4<T> right);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> operator /(Vector4<T> left, Vector4<T> right);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> operator /(Vector4<T> value1, T value2);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Vector4<T> operator -(Vector4<T> value);        [JitIntrinsic]      [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static bool operator ==(Vector4<T> left, Vector4<T> right);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static bool operator !=(Vector4<T> left, Vector4<T> right);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static explicit operator Vector4<T>(Vector4 value);  }  ```  ### File Matrix3x2OfT.cs  ```csharp  public struct Matrix3x2<T> : IEquatable<Matrix3x2<T>>  {      public T M11;        public T M12;            public T M21;            public T M22;            public T M31;            public T M32;        public static Matrix3x2<T> Identity { get; }        public bool IsIdentity { get; }        public Vector2<T> Translation { get; set; }        public Matrix3x2(T m11, T m12, T m21, T m22, T m31, T m32);        public static Matrix3x2<T> CreateTranslation(Vector2<T> position);        public static Matrix3x2<T> CreateTranslation(T xPosition, T yPosition);        public static Matrix3x2<T> CreateScale(T xScale, T yScale);        public static Matrix3x2<T> CreateScale(T xScale, T yScale, Vector2<T> centerPoint);        public static Matrix3x2<T> CreateScale(Vector2<T> scales);        public static Matrix3x2<T> CreateScale(Vector2<T> scales, Vector2<T> centerPoint);        public static Matrix3x2<T> CreateScale(T scale);        public static Matrix3x2<T> CreateScale(T scale, Vector2<T> centerPoint);        public static Matrix3x2<T> CreateSkew(T radiansX, T radiansY);        public static Matrix3x2<T> CreateSkew(T radiansX, T radiansY, Vector2<T> centerPoint);        public static Matrix3x2<T> CreateRotation(T radians);        public static Matrix3x2<T> CreateRotation(T radians, Vector2<T> centerPoint);        public T GetDeterminant();        public static bool Invert(Matrix3x2<T> matrix, out Matrix3x2<T> result);        public static Matrix3x2<T> Lerp(Matrix3x2<T> matrix1, Matrix3x2<T> matrix2, T amount);        public static Matrix3x2<T> Negate(Matrix3x2<T> value);        public static Matrix3x2<T> Add(Matrix3x2<T> value1, Matrix3x2<T> value2);        public static Matrix3x2<T> Subtract(Matrix3x2<T> value1, Matrix3x2<T> value2);        public static Matrix3x2<T> Multiply(Matrix3x2<T> value1, Matrix3x2<T> value2);        public static Matrix3x2<T> Multiply(Matrix3x2<T> value1, T value2);        public static Matrix3x2<T> operator -(Matrix3x2<T> value);        public static Matrix3x2<T> operator +(Matrix3x2<T> value1, Matrix3x2<T> value2);        public static Matrix3x2<T> operator -(Matrix3x2<T> value1, Matrix3x2<T> value2);        public static Matrix3x2<T> operator *(Matrix3x2<T> value1, Matrix3x2<T> value2);        public static Matrix3x2<T> operator *(Matrix3x2<T> value1, T value2);        public static bool operator ==(Matrix3x2<T> value1, Matrix3x2<T> value2);        public static bool operator !=(Matrix3x2<T> value1, Matrix3x2<T> value2);        public bool Equals(Matrix3x2<T> other);        public override bool Equals(object obj);        public override string ToString();        public override int GetHashCode();        public static explicit operator Matrix3x2<T>(Matrix3x2 value);  }  ```  ### File Matrix4x4ofT.cs  ```csharp  public struct Matrix4x4<T> : IEquatable<Matrix4x4<T>>  {      public T M11;            public T M12;            public T M13;            public T M14;            public T M21;            public T M22;            public T M23;            public T M24;        public T M31;            public T M32;            public T M33;            public T M34;            public T M41;            public T M42;            public T M43;            public T M44;            public static Matrix4x4<T> Identity { get; }        public bool IsIdentity { get; }        public Vector3<T> Translation { get; set; }        public Matrix4x4(T m11, T m12, T m13, T m14, T m21, T m22, T m23, T m24, T m31, T m32, T m33, T m34, T m41, T m42, T m43, T m44);            public Matrix4x4(Matrix3x2<T> value);        public static Matrix4x4<T> CreateBillboard(Vector3<T> objectPosition, Vector3<T> cameraPosition, Vector3<T> cameraUpVector, Vector3<T> cameraForwardVector);        public static Matrix4x4<T> CreateConstrainedBillboard(Vector3<T> objectPosition, Vector3<T> cameraPosition, Vector3<T> rotateAxis, Vector3<T> cameraForwardVector, Vector3<T> objectForwardVector);        public static Matrix4x4<T> CreateTranslation(Vector3<T> position);        public static Matrix4x4<T> CreateTranslation(T xPosition, T yPosition, T zPosition);        public static Matrix4x4<T> CreateScale(T xScale, T yScale, T zScale);        public static Matrix4x4<T> CreateScale(T xScale, T yScale, T zScale, Vector3<T> centerPoint);        public static Matrix4x4<T> CreateScale(Vector3<T> scales);        public static Matrix4x4<T> CreateScale(Vector3<T> scales, Vector3<T> centerPoint);        public static Matrix4x4<T> CreateScale(T scale);        public static Matrix4x4<T> CreateScale(T scale, Vector3<T> centerPoint);        public static Matrix4x4<T> CreateRotationX(T radians);        public static Matrix4x4<T> CreateRotationX(T radians, Vector3<T> centerPoint);        public static Matrix4x4<T> CreateRotationY(T radians);        public static Matrix4x4<T> CreateRotationY(T radians, Vector3<T> centerPoint);        public static Matrix4x4<T> CreateRotationZ(T radians);        public static Matrix4x4<T> CreateRotationZ(T radians, Vector3<T> centerPoint);        public static Matrix4x4<T> CreateFromAxisAngle(Vector3<T> axis, T angle);        public static Matrix4x4<T> CreatePerspectiveFieldOfView(T fieldOfView, T aspectRatio, T nearPlaneDistance, T farPlaneDistance);        public static Matrix4x4<T> CreatePerspective(T width, T height, T nearPlaneDistance, T farPlaneDistance);        public static Matrix4x4<T> CreatePerspectiveOffCenter(T left, T right, T bottom, T top, T nearPlaneDistance, T farPlaneDistance);        public static Matrix4x4<T> CreateOrthographic(T width, T height, T zNearPlane, T zFarPlane);        public static Matrix4x4<T> CreateOrthographicOffCenter(T left, T right, T bottom, T top, T zNearPlane, T zFarPlane);        public static Matrix4x4<T> CreateLookAt(Vector3<T> cameraPosition, Vector3<T> cameraTarget, Vector3<T> cameraUpVector);        public static Matrix4x4<T> CreateWorld(Vector3<T> position, Vector3<T> forward, Vector3<T> up);        public static Matrix4x4<T> CreateFromQuaternion(Quaternion<T> quaternion);        public static Matrix4x4<T> CreateFromYawPitchRoll(T yaw, T pitch, T roll);        public static Matrix4x4<T> CreateShadow(Vector3<T> lightDirection, Plane<T> plane);        public static Matrix4x4<T> CreateReflection(Plane<T> value);        public T GetDeterminant();        public static bool Invert(Matrix4x4<T> matrix, out Matrix4x4<T> result);        public static bool Decompose(Matrix4x4<T> matrix, out Vector3<T> scale, out Quaternion<T> rotation, out Vector3<T> translation);        public static Matrix4x4<T> Transform(Matrix4x4<T> value, Quaternion<T> rotation);        public static Matrix4x4<T> Transpose(Matrix4x4<T> matrix);        public static Matrix4x4<T> Lerp(Matrix4x4<T> matrix1, Matrix4x4<T> matrix2, T amount);        public static Matrix4x4<T> Negate(Matrix4x4<T> value);        public static Matrix4x4<T> Add(Matrix4x4<T> value1, Matrix4x4<T> value2);        public static Matrix4x4<T> Subtract(Matrix4x4<T> value1, Matrix4x4<T> value2);        public static Matrix4x4<T> Multiply(Matrix4x4<T> value1, Matrix4x4<T> value2);        public static Matrix4x4<T> Multiply(Matrix4x4<T> value1, T value2);        public static Matrix4x4<T> operator -(Matrix4x4<T> value);        public static Matrix4x4<T> operator +(Matrix4x4<T> value1, Matrix4x4<T> value2);        public static Matrix4x4<T> operator -(Matrix4x4<T> value1, Matrix4x4<T> value2);        public static Matrix4x4<T> operator *(Matrix4x4<T> value1, Matrix4x4<T> value2);        public static Matrix4x4<T> operator *(Matrix4x4<T> value1, T value2);        public static bool operator ==(Matrix4x4<T> value1, Matrix4x4<T> value2);        public static bool operator !=(Matrix4x4<T> value1, Matrix4x4<T> value2);        public bool Equals(Matrix4x4<T> other);        public override bool Equals(object obj);        public override string ToString();        public override int GetHashCode();        public static explicit operator Matrix4x4<T>(Matrix4x4 value);  }  ```  ### File PlaneOfT.cs  ```csharp  public struct Plane<T> : IEquatable<Plane<T>>  {      public Vector3<T> Normal;            public T D;        public Plane(T x, T y, T z, T d);            public Plane(Vector3<T> normal, T d);        public Plane(Vector4<T> value);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Plane<T> CreateFromVertices(Vector3<T> point1, Vector3<T> point2, Vector3<T> point3);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Plane<T> Normalize(Plane<T> value);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Plane<T> Transform(Plane<T> plane, Matrix4x4<T> matrix);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static Plane<T> Transform(Plane<T> plane, Quaternion<T> rotation);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static T Dot(Plane<T> plane, Vector4<T> value);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static T DotCoordinate(Plane<T> plane, Vector3<T> value);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static T DotNormal(Plane<T> plane, Vector3<T> value);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static bool operator ==(Plane<T> value1, Plane<T> value2);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public static bool operator !=(Plane<T> value1, Plane<T> value2);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public bool Equals(Plane<T> other);        [MethodImpl(MethodImplOptions.AggressiveInlining)]      public override bool Equals(object obj);        public override string ToString();        public override int GetHashCode();        public static explicit operator Plane<T>(Plane value);  }  ```  ### File QuaternionOfT.cs  ```csharp  public struct Quaternion<T> : IEquatable<Quaternion<T>>  {      public T X;            public T Y;            public T Z;            public T W;        public static Quaternion<T> Identity { get; }        public bool IsIdentity { get; }        public Quaternion(T x, T y, T z, T w);        public Quaternion(Vector3<T> vectorPart, T scalarPart);        public T Length();        public T LengthSquared();        public static Quaternion<T> Normalize(Quaternion<T> value);        public static Quaternion<T> Conjugate(Quaternion<T> value);        public static Quaternion<T> Inverse(Quaternion<T> value);        public static Quaternion<T> CreateFromAxisAngle(Vector3<T> axis, T angle);        public static Quaternion<T> CreateFromYawPitchRoll(T yaw, T pitch, T roll);        public static Quaternion<T> CreateFromRotationMatrix(Matrix4x4<T> matrix);        public static T Dot(Quaternion<T> quaternion1, Quaternion<T> quaternion2);        public static Quaternion<T> Slerp(Quaternion<T> quaternion1, Quaternion<T> quaternion2, T amount);        public static Quaternion<T> Lerp(Quaternion<T> quaternion1, Quaternion<T> quaternion2, T amount);        public static Quaternion<T> Concatenate(Quaternion<T> value1, Quaternion<T> value2);        public static Quaternion<T> Negate(Quaternion<T> value);        public static Quaternion<T> Add(Quaternion<T> value1, Quaternion<T> value2);        public static Quaternion<T> Subtract(Quaternion<T> value1, Quaternion<T> value2);        public static Quaternion<T> Multiply(Quaternion<T> value1, Quaternion<T> value2);        public static Quaternion<T> Multiply(Quaternion<T> value1, T value2);        public static Quaternion<T> Divide(Quaternion<T> value1, Quaternion<T> value2);        public static Quaternion<T> operator -(Quaternion<T> value);        public static Quaternion<T> operator +(Quaternion<T> value1, Quaternion<T> value2);        public static Quaternion<T> operator -(Quaternion<T> value1, Quaternion<T> value2);        public static Quaternion<T> operator *(Quaternion<T> value1, Quaternion<T> value2);        public static Quaternion<T> operator *(Quaternion<T> value1, T value2);        public static Quaternion<T> operator /(Quaternion<T> value1, Quaternion<T> value2);        public static bool operator ==(Quaternion<T> value1, Quaternion<T> value2);        public static bool operator !=(Quaternion<T> value1, Quaternion<T> value2);        public bool Equals(Quaternion<T> other);        public override bool Equals(object obj);        public override string ToString();        public override int GetHashCode();        public static explicit operator Quaternion<T>(Quaternion value);  }  ```    ### class Vector2 extended with:  ```csharp  public static implicit operator Vector2(Vector2<double> value);  public static implicit operator Vector2(Vector2<float> value);  ```  ### class Vector3 extended with:  ```csharp  public static implicit operator Vector3(Vector3<double> value);  public static implicit operator Vector3(Vector3<float> value);  ```  ### class Vector4 extended with:  ```csharp  public static implicit operator Vector4(Vector4<double> value);  public static implicit operator Vector4(Vector4<float> value);  ```  ### class Matrix3x2 extended with:  ```csharp  public static implicit operator Matrix3x2(Matrix3x2<double> value);  public static implicit operator Matrix3x2(Matrix3x2<float> value);  ```  ### class Matrix4x4 extended with:  ```csharp  public static implicit operator Matrix4x4(Matrix4x4<double> value);  public static implicit operator Matrix4x4(Matrix4x4<float> value);  ```  ### class Quaternion extended with:  ```csharp  public static implicit operator Quaternion(Quaternion<double> value);  public static implicit operator Quaternion(Quaternion<float> value);  ```  ### class Plane extended with:  ```csharp  public static implicit operator Plane(Plane<double> value);  public static implicit operator Plane(Plane<float> value);  ```    ## Original Text    _From @acecebov on August 25, 2017 16:50_    Add support System.Numerics.Vectors types with double precision:  Vector2d, Vector3d, Vector4d, Matrix3x2d, Matrix4x4d, PlaneD, QuaternionD.    There are lots of scientific/gaming cases when we want to work with double precision and benefit of SIMD!    _Copied from original issue: dotnet/coreclr#13591_
25335	area-System.Collections	IntrospectiveSortUtilities.FloorLog2 method is misleadingly named.	 coreclr/src/mscorlib/src/System/Collections/Generic/ArraySortHelper.cs     The method FloorLog2 does not actually return FloorLog2.  It also does not return CeilingLog2.  It returns FloorLog2 + 1 unless x is 0, where 0 is returned.    Examples (where x is a signed 32 bit integer and f(x) does what FloorLog2 actually does).    x => f(x)         x = 1: f(x) = 1      x = 2 : f(x) = 2      x = 3 : f(x) = 2      x = 4 : f(x) = 3      x = 7 : f(x) = 3     x = 8 : f(x) = 4     x = 16 : f(x) = 5   x = 100 : f(x) = 7    It appears that the method does what it is supposed to do-- the introsort routine uses and it works for that purpose.  The method, however, is poorly named: it should be renamed to something like FloorLog2PlusOne or at least commented to indicate what actually does.    I came across this when translating the IntroSort routines into another language but replacing the FloorLog2 method with a method that calculates FloorLog2 which I already had on hand in the target language.            
25336	area-System.Runtime	Add BigInteger.TryFormat method for outputting to a span	I accidentally omitted this when doing the BigInteger work.  cc: @bartonjs 
25337	area-System.Memory	TryFormat with format strings as ReadOnlySpan<char> or string	"We've approved and added a bunch of `TryFormat` methods for doing the equivalent of `ToString`, but rendering into a supplied `Span<char>` instead of allocating a `string`.  Many of these `TryFormat` methods accept a `string format` argument, just as does `ToString`.  @justinvp raised the question of whether these should instead be `ReadOnlySpan<char> format`.    Example scenario:  His scenario was in looking at changing the implementation of `string.Format`, `StringBuilder.AppendFormat`, etc.: today they allocate substrings when parsing out formats from holes, e.g. `""blah {0:D4} blah {1:[##-##-##]}""`, in order to supply that format string to the formatting API.  We can achieve this internally for these methods; the question is whether we should expose that publicly so that other scenarios can benefit from it as well, if there are other scenarios.    Another scenario:  https://github.com/dotnet/corefx/blob/master/src/System.Runtime.Numerics/src/System/Numerics/BigNumber.cs#L578  BigInteger creates a format string to use when formatting its _sign value, in order to specify the number of digits.  If format supported `ReadOnlySpan<char>`, we could use stack space instead of allocating a string.    The main downside to this change is it makes the methods a bit harder to use, in particular because there's no implicit cast from `string` to `ReadOnlySpan<char>`, so instead of passing in a format like `""D4""`, you need to do `""D4"".AsReadOnlySpan()`. `TryFormat` methods on the following types would be affected:  ```C#  BigInteger // TryFormat not yet implemented  Byte  DateTime  DateTimeOffset  Decimal  Double // TryFormat not yet implemented  Guid  Int16  Int32  Int64  SByte  Single // TryFormat not yet implemented  TimeSpan  UInt16  UInt32  UInt64  ```    Options  ---  1. Leave the design as-is.  We could using `string format`, we can address `string.Format`/`StringBuilder.AppendFormat` internally, and rare public uses can allocate strings when needed.  2. Change the methods to use `ReadOnlySpan<char> format` instead of `string format`.  Callers use `AsReadOnlySpan()` when they have a string.  3. Change the methods to use `ReadOnlySpan<char> format` instead of `string format`, and add an implicit cast on `string` from `string` to `ReadOnlySpan<char>`.  4. Keep the existing `string format` methods, and add overloads that take `ReadOnlySpan<char>`."
25338	area-Microsoft.CSharp	Dynamic overload resolution with conversions fails to distinguish between numeric and string +	"Give a class implicitly castable to both `string` and a numeric type:  ```C#  public class Castable  {   public static implicit operator int(Castable obj) => 0     public static implicit operator string(Castable obj) => """";  }  ```  Then the following:  ```  dynamic d = new Castable();  var result = d + 2;  ```  Throws `IndexOutOfRangeException` (NetFX throws `RuntimeBinderInternalCompilerException`)."
25339	area-Microsoft.CSharp	"MS.CSharp: Stop string conversion being incorrectly considered ""simple"""	Correct check that the predefined type must be `<= NUM_EXT_TYPES` to the correct `< NUM_EXT_TYPES`. Stops string conversion being considered when not appropriate.    Fixes #25338
25342	area-Microsoft.CSharp	MS.CSharp some error improvements	* Have `HandleAmbiguity` return `RuntimeBinderException` to throw at callsite    Should have been done in #22748 but was missed. Also remove unused argument.    * Remove unused boolean parameter passed through `GroupToArgsBinder.Bind()`    * Replace always true result from `GroupToArgsBinder.Bind()` with void.    Replace always true result from `BindMethodGroupToArgumentsCore` with `GroupToArgsBinderResult` that was `out` parameter.    Remove unreachable debug-time error catch.    Also remove incorrect comment about extension methods.  
25344	area-System.Numerics	IndexOutOfRangeException in System.Numerics.Vector<T>(array) Where array Size < 32 Bytes	`System.Numerics.Vector<byte> vec   = new System.Numerics.Vector<byte>(new byte[] { 4, 3, 2, 1, 6, 4, 2, 4 });`    This call will crash with an `IndexOutOfRangeException` exception. I'm pulling in this library as a NuGet package. If I pass in >= 32 bytes, this code works.    The same logic applies to other data types if they do not fill enough at least 32 bytes.    Is there a reason for this behavior? My use case involves passing variable length bytes (anywhere from 1 to millions). The constructor does not make this behavior clear, and I'd prefer to not have to pad my byte arrays to use this.    If the library is not supposed to support values less than the size of the XMM/YMM register, then it would be ideal to at least throw a more specific exception.
25345	area-System.Net	Remove blocking in SslStream Tests that should be async	This removes a load of blocking in the functional Tests for SslStream.     ref PR #25286  ref Issue #19705    This should also unblock #24853 and allow the test changes to be reverted there    /cc @stephentoub @Priya91   
25346	area-System.Net	Tests : Remove the number of unneeded blocking tasks in tests	I am launching this as a tracking issue for Tests in general.    There a number of cases where Tests block (Task.WaitAll is the biggest culprit it seems) across the Repo. You can get away with this for a certain amount of time, but as the test coverage grows, you tend to hit threadpool starvation and random timeouts, it also has the potential to deadlock xunit.    I have launched this issue to track the PR's and to link them back to why I am making the changes. Also to identify other tests that need changing.    Areas that need PR's to fix    - [x] System.Net.Security (SslStream)  - [ ] System.Net.Sockets  - [x] System.Net.Http  - [x] System.Net.NameResolution  - [x] System.Net.Security (Negotiate)  I will update this list with more that I find.    ref #25345   ref #19705  ref #25360  
25347	area-System.Net	System.Net.Sockets Remove some Task blocks to make tests async	"I have removed the ""easy"" blocking points in the tests in here. There is more work to be done, but they require a lot more refactoring so much closer code reviewing. These the ""low hanging"" fruit and I will look at further PR's to sort this out.    ref #25346  "
25349	area-System.Diagnostics	PerformanceCounter_IncrementBy_IncrementByReadOnly Failure for Windows 8.1	The failure on Windows is only on Windows.81.Amd64.Open (the test is skipped on a number of the win10 versions)  System.Diagnostics.Tests.PerformanceCounterTests/PerformanceCounter_IncrementBy_IncrementByReadOnly    Assert.NotEqual() Failure  Expected: Not 0  Actual: 0    https://mc.dot.net/#/user/Drawaes/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/95937940636258caa156046fa21fca91a45682d3/workItem/System.Diagnostics.PerformanceCounter.Tests/analysis/xunit/System.Diagnostics.Tests.PerformanceCounterTests~2FPerformanceCounter_IncrementBy_IncrementByReadOnly    Trace    ```  at System.Diagnostics.Tests.Helpers.RetryOnAllPlatforms[T](Func`1 func) in D:\j\workspace\windows-TGrou---6368dffa\src\System.Diagnostics.PerformanceCounter\tests\Helpers.cs:line 71     at System.Diagnostics.Tests.PerformanceCounterTests.CreateCounterWithCategory(String name, Boolean readOnly, PerformanceCounterCategoryType categoryType) in D:\j\workspace\windows-TGrou---6368dffa\src\System.Diagnostics.PerformanceCounter\tests\PerformanceCounterTests.cs:line 297     at System.Diagnostics.Tests.PerformanceCounterTests.PerformanceCounter_IncrementBy_IncrementByReadOnly() in D:\j\workspace\windows-TGrou---6368dffa\src\System.Diagnostics.PerformanceCounter\tests\PerformanceCounterTests.cs:line 228  ```  
25353	area-System.Numerics	"Improve performance of BigInteger.ToString(""x"")"	"Benchmark:  ```C#  using System;  using System.Numerics;  using BenchmarkDotNet.Attributes.Jobs;  using BenchmarkDotNet.Attributes;  using BenchmarkDotNet.Running;    [MemoryDiagnoser]  [InProcess]  public class Program  {      public static void Main() => BenchmarkRunner.Run<Program>();        private static BigInteger s_smallBigInt = new BigInteger(100);      private static BigInteger s_largeBigInt = BigInteger.Parse(new string('9', 2000));        [Benchmark]      public void BigIntegerToString_Small()      {          BigInteger small = s_smallBigInt;          for (int i = 0; i < 100_000; i++) small.ToString(""x"");      }        [Benchmark]      public void BigIntegerToString_Large()      {          BigInteger large = s_largeBigInt;          for (int i = 0; i < 1_000; i++) large.ToString(""x"");      }  }  ```    Before:  ```   |                   Method |     Mean |     Error |    StdDev |     Gen 0 | Allocated |   |------------------------- |---------:|----------:|----------:|----------:|----------:|   | BigIntegerToString_Small | 20.01 ms | 0.4187 ms | 0.6519 ms | 6843.7500 |  27.47 MB |   | BigIntegerToString_Large | 29.62 ms | 0.3435 ms | 0.3045 ms | 8468.7500 |  33.91 MB |  ```    After:  ```   |                   Method |     Mean |     Error |    StdDev |     Gen 0 | Allocated |   |------------------------- |---------:|----------:|----------:|----------:|----------:|   | BigIntegerToString_Small | 9.445 ms | 0.1153 ms | 0.0834 ms |  750.0000 |   3.05 MB |   | BigIntegerToString_Large | 3.946 ms | 0.0603 ms | 0.0534 ms | 1000.0000 |   4.01 MB |  ```    So for this small value, an ~2x throughput improvement, and for this large value, an ~8x throughput improvement, and for both, an ~9x reduction in allocation.    cc: @bartonjs "
25354	area-System.Net	Add FileStream and int64 overloads to SendPacketsElement	"# Approved API shape    https://github.com/dotnet/corefx/issues/25354#issuecomment-352854380    ```c#  public partial class SendPacketsElement  {      // EXISTING APIs        public SendPacketsElement(byte[] buffer)      public SendPacketsElement(byte[] buffer, int offset, int count)      public SendPacketsElement(byte[] buffer, int offset, int count, bool endOfPacket)      public SendPacketsElement(string filepath)      public SendPacketsElement(string filepath, int offset, int count)      public SendPacketsElement(string filepath, int offset, int count, bool endOfPacket)        public byte[] Buffer { get; }      public bool EndOfPacket { get; }      public string FilePath { get; }        // These properties will throw if constructed from a file with a long offsets.      // NotSupportedException(""Count/Offset is larger than int.MaxValue. Use CountLong/OffsetLong instead."");      public int Count { get; }      public int Offset { get; }        // NEW APIs        public long OffsetLong { get; }       public long CountLong { get; }         public SendPacketsElement(string filepath, long offset, long count);      public SendPacketsElement(string filepath, long offset, long count, bool endOfPacket);        // We only take the long ones as this as an advanced scenario and the int      // ones don't buy you anything really.      public SendPacketsElement(FileStream file);      public SendPacketsElement(FileStream file, long offset, long count);      public SendPacketsElement(FileStream file, long offset, long count, bool endOfPacket);        public FileStream FileStream { get; }  }  ```    # Original proposal    `SendPacketsElement`, `SendFile` and `BeginSendFile` currently take a `string` filename to indicate the file (or part thereof) to send. Under the hood, the implementation of these methods creates and manages `FileStream`s. I suggest that you add overloads that take `FileStream`.    This makes it possible for applications to manage file handles directly - for example, to manage the lifetime of open handles, control how the file is accessed, shared and file options, buffer size. For example, turning off the file system cache on read is critical for performance for file servers. In addition, through the `FileStream` constructors it becomes possible to interop with file handles coming from unmanaged code and to use these with the socket API directly.    Concretely:    ```csharp  public partial class Socket : System.IDisposable  {          // irrelevant methods omitted            // existing send file API          public IAsyncResult BeginSendFile(string fileName, AsyncCallback callback, object state) { throw null; }          public IAsyncResult BeginSendFile(string fileName, byte[] preBuffer, byte[] postBuffer, TransmitFileOptions flags, AsyncCallback callback, object state) { throw null; }          public void SendFile(string fileName) { }          public void SendFile(string fileName, byte[] preBuffer, byte[] postBuffer, TransmitFileOptions flags){ }           // suggested API additions          public IAsyncResult BeginSendFile(FileStream file, AsyncCallback callback, object state) { throw null; }          public IAsyncResult BeginSendFile(FileStream file, byte[] preBuffer, byte[] postBuffer, TransmitFileOptions flags, AsyncCallback callback, object state) { throw null; }          public void SendFile(FileStream file) { }          public void SendFile(FileStream file, byte[] preBuffer, byte[] postBuffer, TransmitFileOptions flags){ }  }    public partial class SendPacketsElement  {          // existing API - ctors          public SendPacketsElement(byte[] buffer) { }          public SendPacketsElement(byte[] buffer, int offset, int count) { }          public SendPacketsElement(byte[] buffer, int offset, int count, bool endOfPacket) { }          public SendPacketsElement(string filepath) { }          public SendPacketsElement(string filepath, int offset, int count) { }          public SendPacketsElement(string filepath, int offset, int count, bool endOfPacket) { }          // suggested API - ctors          public SendPacketsElement(FileStream file) { }          public SendPacketsElement(FileStream  file, int offset, int count) { }          public SendPacketsElement(FileStream file, int offset, int count, bool endOfPacket) { }            // existing API - properties          public byte[] Buffer { get { throw null; } }          public int Count { get { throw null; } }          public bool EndOfPacket { get { throw null; } }          public string FilePath { get { throw null; } }          public int Offset { get { throw null; } }            // suggested API - property          public FileStream FileStream { get { throw null; } }  }  ```  As for the behavior of `SendPacketsElement.FilePath` vs `FileStream`, I suggest that depending on which constructor is used only one of them returns a non-null result. This is pretty much the behavior of the other properties (i.e. if a filepath ctor is used, `Buffer` returns null).  "
25355	area-System.Collections	Dictionary (etc) optimization suggestion, use readonly ref	"Now that readonly ref (in) is being added to the language, Dictionary.Contains, TryGetValue etc. can all use ""in"" parameters as they only read from the input. This would improve dictionary lookups of keys which value-tuples since they would be passed by ref and not by value.  Really this is relavent for any method that doesn't modify its parameters. This may be a clr/jit level optimization, since this can be identified by an analyser."
25357	area-Microsoft.CSharp	Simplify some casting and conversion related code in Microsoft.CSharp	* Remove `pDestinationTypeForLambdaErrorReporting` from conversions.    Stored in a field and passed around, but never used for anything beside.    * Don't use `ExprClass` in casts and `ExprTypeOf`    Acts as a wrapper around the type, but provides nothing beyond that wrapper, so it is just unwrapped again. (Visiting an `ExprClass` is always a nop, so that's not a reason to wrap it).    Use the `CType` directly instead.    (`ExprClass` remains in use as the target of static calls).    * Make visiting `ExprClass` explicitly just return it directly.    This is what happens anyway, but since the previous change depends on this, making this clear makes that being correct clearer, as well as a minor efficiency gain.
25359	area-System.ComponentModel	CategoryProperties_GetCategory_ReturnsExpected failed on netfx in CI	"https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_false_prtest/5395/consoleText  ```  System.ComponentModel.Tests.CategoryAttributeTests.CategoryProperties_GetCategory_ReturnsExpected(attributeThunk: Func`1 { Method = System.ComponentModel.CategoryAttribute <DefaultProperties_TestData>b__8_4(), Target = <>c { } }, expectedCategory: ""Misc"") [FAIL]          Assert.Equal() Failure                     (pos 0)          Expected: Misc          Actual:   Default                     (pos 0)          Stack Trace:               at System.ComponentModel.Tests.CategoryAttributeTests.CategoryProperties_GetCategory_ReturnsExpected(Func`1 attributeThunk, String expectedCategory)  ```"
25360	area-System.Net	Negotiate Async tests - remove blocking	"ref #25346     Found a bunch more in the Negotiate tests, this should be it doing a search for "".Wait"" on all files here.    I cleaned up the unneeded ConfigureAwait and added a range to the SslTest as well."
25364	area-System.IO	Test failure: System.IO.Tests.FileSystemWatcherTests_netstandard17/EndInit_ResumesPausedEnableRaisingEvents(setBeforeBeginInit: True)	Opened on behalf of @Sunny-pu  The test `System.IO.Tests.FileSystemWatcherTests_netstandard17/EndInit_ResumesPausedEnableRaisingEvents(setBeforeBeginInit: True)` has failed.  Deleted event did not occur as expected\r     Expected: True\r     Actual:   False          Stack Trace:             at System.IO.Tests.FileSystemWatcherTest.ExecuteAndVerifyEvents($FileSystemWatcher watcher, $WatcherChangeTypes expectedEvents, Action action, Boolean assertExpected, String[] expectedPaths, Int32 timeout) in E:\A\_work\398\s\corefx\src\System.IO.FileSystem.Watcher\tests\Utility\FileSystemWatcherTest.cs:line 244        at System.IO.Tests.FileSystemWatcherTest.ExpectEvent($FileSystemWatcher watcher, $WatcherChangeTypes expectedEvents, Action action, Action cleanup, String[] expectedPaths, Int32 attempts, Int32 timeout) in E:\A\_work\398\s\corefx\src\System.IO.FileSystem.Watcher\tests\Utility\FileSystemWatcherTest.cs:line 183        at System.IO.Tests.FileSystemWatcherTest.ExpectEvent($FileSystemWatcher watcher, $WatcherChangeTypes expectedEvents, Action action, Action cleanup) in E:\A\_work\398\s\corefx\src\System.IO.FileSystem.Watcher\tests\Utility\FileSystemWatcherTest.cs:line 132        at System.IO.Tests.FileSystemWatcherTests_netstandard17.EndInit_ResumesPausedEnableRaisingEvents(Boolean setBeforeBeginInit) in E:\A\_work\398\s\corefx\src\System.IO.FileSystem.Watcher\tests\FileSystemWatcher.cs:line 229        at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetVI<System.Boolean>(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall)        at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean isTargetThisCall)        at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566      Build : Master - 20171120.01 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x64   - Release 
25367	area-System.Drawing	FromHandle_BitmapHandleOneTime_Success failed in CI on Linux	https://mc.dot.net/#/user/tmds/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/cfe7984c51ef3590fed2e50ddfb38619dda9f89d/workItem/System.Drawing.Common.Tests/analysis/xunit/System.Drawing.Tests.IconTests~2FFromHandle_BitmapHandleOneTime_Success  ```  Unhandled Exception of Type System.ArgumentException  Message :  System.ArgumentException : handle  Stack Trace :     at System.Drawing.Icon.FromHandle(IntPtr handle) in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/src/System.Drawing.Common/src/System/Drawing/Icon.Unix.cs:line 335     at System.Drawing.Tests.IconTests.FromHandle_BitmapHandleOneTime_Success() in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/src/System.Drawing.Common/tests/IconTests.cs:line 688  ```
25369	area-System.Net	Cannot catch exception on SmtpClient.SendMailAsync when no server is listening	See repo here  https://github.com/MrAntix/cant-catch-exception    I need to be able to catch an exception when the emailing fails for what ever reason  
25370	area-System.Memory	Added explicit conversion APIs for Span to ROSpan and Memory to ROMemory	Added explicit conversion APIs to ```Span<T>``` and ```Memory<T>```:  ```csharp  public static ReadOnlyMemory<T> AsReadOnlyMemory(this Memory<T> memory);  public static ReadOnlySpan<T> AsReadOnlySpan(this Span<T> span);  ```  Resolves #24564  I'm not sure if tests required.
25371	area-System.Diagnostics	PerformanceCounterCategory_CounterExists_InterruptsPerSec test failed in CI	https://mc.dot.net/#/user/dotnet-maestro-bot/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/fee59555b693b03698e9f626932d3d224fde9306/workItem/System.Diagnostics.PerformanceCounter.Tests/analysis/xunit/System.Diagnostics.Tests.PerformanceCounterCategoryTests~2FPerformanceCounterCategory_CounterExists_InterruptsPerSec  ```  Unhandled Exception of Type System.InvalidOperationException  Message :  System.InvalidOperationException : Cannot load Counter Name data because an invalid index '' was read from the registry.  Stack Trace :     at System.Diagnostics.PerformanceCounterLib.GetStringTable(Boolean isHelp) in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\PerformanceCounterLib.cs:line 1097     at System.Diagnostics.PerformanceCounterLib.get_NameTable() in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\PerformanceCounterLib.cs:line 235     at System.Diagnostics.PerformanceCounterLib.get_CategoryTable() in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\PerformanceCounterLib.cs:line 167     at System.Diagnostics.PerformanceCounterLib.CounterExists(String category, String counter, Boolean& categoryExists) in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\PerformanceCounterLib.cs:line 369     at System.Diagnostics.PerformanceCounterLib.CounterExists(String machine, String category, String counter) in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\PerformanceCounterLib.cs:line 341     at System.Diagnostics.PerformanceCounterCategory.CounterExists(String counterName) in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\PerformanceCounterCategory.cs:line 160     at System.Diagnostics.Tests.PerformanceCounterCategoryTests.PerformanceCounterCategory_CounterExists_InterruptsPerSec() in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\tests\PerformanceCounterCategoryTests.cs:line 174  ```
25372	area-System.Runtime	Add Decimal.TryFormat span-based method	Separated out of https://github.com/dotnet/corefx/issues/22403 and https://github.com/dotnet/corefx/issues/22616    Add:  ```C#  public bool TryFormat(Span<char> destination, out int charsWritten, string format = null, IFormatProvider provider = null);  ```  and use it in `StringBuilder.Append(decimal)`.
25373	area-System.Runtime	Add Double/Single.TryFormat span-based methods	Separated out of https://github.com/dotnet/corefx/issues/22403 and https://github.com/dotnet/corefx/issues/22616    Add:  ```C#  public bool TryFormat(Span<char> destination, out int charsWritten, string format = null, IFormatProvider provider = null);  ```  and use it in `StringBuilder.Append(double)`.
25375	area-System.IO	readdir and multi-threading	readdir_r has been made obsolete in glibc, and using readdir is recommended instead.  To accomodate, corefx falls back to readdir when readdir_r is not available (https://github.com/dotnet/corefx/pull/10795).    The readdir implementation in glibc is thread-safe in that it allows multiple different DIRs (which may point to the same path) to be enumerated simultaneously.  It does **NOT** allow a single DIR to be iterated by multiple threads.    Is it expected from functions like `Directory.EnumerateFiles` to return an iterator that can be consumed simultaneously by multiple threads?
25376	area-Meta	HttpBinding HttpClientCredentialType.Windows IIS10 - Core 2.0	"Trying to connect to SSRS Execution. Works fine on my development machine, soon as I move to IIS I get errors with the same exact remote SSRS server. Any tips tricks, most of the help from Google is the old way of doing it with XML file configurations. What really gets me is that it works from my development machine using IISExpress, why not on a TEST Server using IIS?    AppPool No Managed Code    The rest of the Core 2.0 MVC application works perfectly. Why would it work remote on my machine via VPN then throw error like that on TEST server which is on same network? I really think this has something to do with IIS.      ```  basicHttpBinding.Security.Transport.ClientCredentialType = HttpClientCredentialType.Windows;    var serviceSoapClient = new ReportExecutionServiceSoapClient(basicHttpBinding, new EndpointAddress($""{model.ReportServerUrl}/ReportExecution2005.asmx""));    serviceSoapClient.ClientCredentials.Windows.AllowedImpersonationLevel = System.Security.Principal.TokenImpersonationLevel.Impersonation;    serviceSoapClient.ClientCredentials.Windows.ClientCredential = (NetworkCredential)(new NetworkCredential() { UserName = model.Username, Password = model.Password, Domain = model.Domain });  ```        Error:    System.AggregateException: One or more errors occurred. (The HTTP request is unauthorized with client authentication scheme 'Negotiate'. The authentication header received from the server was ''.) ---> System.ServiceModel.Security.MessageSecurityException: The HTTP request is unauthorized with client authentication scheme 'Negotiate'. The authentication header received from the server was ''.    https://github.com/aspnet/Hosting/issues/1276"
25378	area-Infrastructure	Manually run CoreFX netstandard tests against Mono	Get an idea of the pass rate and any complications in doing this.
25379	area-Infrastructure	Plan for running netstandard test bed against Mono	We assume that Mono would consume our tests out of their CoreFX submodule. What technical changes are needed on CoreFX side to make the tests run? What work is needed on the Mono side?
25380	area-Meta	Investigate and categorize Linux/Windows performance discrepancies	Most of our performance benchmarking has been against Windows, except for the key public benchmarks like Techempower and CLBG. Our xunit `[Benchmark]` tests are run on Linux and Windows, and there are some areas where Linux does not match Windows performance on the same hardware. Investigate, categorize and triage.
25381	area-Meta	Update man pages documentation for Linux developers	The `man` pages installed by .NET Core have outdated content eg relating to project.json and commands that no longer exist.  Clean this up and make it more useful: `man` pages are where Unix users start.
25382	area-Infrastructure	Only run Debug corefx official builds and tests runs weekly	We don't need to do official builds for both release and debug multiple times daily. Our general official builds should be defaulted to Release but we should enable a weekly Debug build for extra test validation.     @danmosemsft any preference on which day of the week so you can pay extra attention to the test results? 
25383	area-Meta	Outreach to Nuget package owners with potentially compatible assets	Reach out to the owners of popular packages that do not declare compatibility with with .NET Standard 2.0 (or at least .NET Core 2.0) although their desktop assets are in fact API compatible. Ask and help the owners to add packaging and test for .NET Standard/.NET Core so that the packages can be consumed more confidently from VS, without a warning.    Also, reach out to the owners of packages that do have compatible assets but the assets seem to have cut down functionality because they were targeting the limited pre 2.0 surface area. These too can be repackaged.    Use our Nuget data lake and API scanners to prioritize and track this work.
25385	area-Infrastructure	Relationship with Mono.Posix	We don't want to replicate Mono.Posix, which has had time to stabilize. The [version that supports .NET Core ](https://www.nuget.org/packages/Mono.Posix.NETStandard/) has not been heavily downloaded. Is it sufficient? Or just poorly known? Does it need contributions or extension?     Also, if we want code in CoreFX to depend on it, we need to figure out how to do that technically.
25386	area-Meta	Use hardware intrinsics	Intel and others are adding support for general use of hardware intrinsics (as opposed to code explicitly recognized by code gen which is the approach of Vector).    As these come on line, use them where they help: eg string searching, regex, CRC, ... 
25387	area-System.IO	Improve GetFiles performance (Windows)	@JeremyKuhne has identified possibilities for substantial performance improvement. Some of this is already complete.
25388	area-System.Numerics	Add ref/in/out overloads of methods for Vectors and Matrices	"Adding overloads to Vector and Matrix types for better memory and performance characteristics.    Fixes #157    ## Notes  1. ~The EOF newline changes came from merging these old commits into the master branch. I wanted to preserve the commit history, so I didn't try fixing up these newline changes.~  FIXED  2. I wasn't excited about all the `#if FEATURE_REF_OVERLOADS` in the tests. But I didn't see a great way to factor them without the `#if`s.  I felt keeping the tests contained together was a high priority, that way the ""expected"" values were only in a single place.  I'm open to better ideas here."
25390	area-Microsoft.CSharp	MS.CSharp Refactoring of producing lambda for dynamic operation and rewriting it	"* Tighten type of parents in symbol factory methods to those valid.    Makes the correctness of what follows clearer.    * Remove parent parameter to `SymFactory.CreateScope()`    Always null; we only ever work with one `Scope`. Let's make that explicit    * Remove `RewriteLambdaParameters`    Pulls locals that are sibling to scope into lambda expression (for hoisting) but there is never a sibling to any scope in the dynamic binder.    * Remove `ExpressionTreeRewriter.DestroyWraps`    Unwraps hoisted locals that are siblings to the scope, but we never have any.    * Remove `ExpressionTreeRewriter.currentAnonMeth`    We only ever have one bound lambda at a time; never another nested within that, so this check is unnecessary.    * Remove check `createParameters != null`    Always true. Indeed `ExpressionTreeCallRewriter.Rewrite` depends on this as it expects an `ExprBinOp`, and if this path wasn't taken we'd return an `ExprCall` instead.    * Take `VisitBOUNDLAMBDA` out of the main visiting loop.    Can only be reached from the top of an `ExpressionTreeRewriter` visit, so only call it from there, tightening parameter types.    * Tighten `VisitBoundLambda` to return `ExprBinOp`    Pass this tightened type definition through to `ExpressionTreeCallRewriter.Rewrite`, making one asserted fact there statically known.    * Remove `ExpressionKind.SequenceReverse`    No such expression is ever created.    * Create predefined type for `Func<>`    Since we're using it with every dynamic operation, it should be in the faster lookup.    * Tighten `ExprBoundLambda` ctor parameter types and assertions.    * Place lambda's return expression directly inside `ExprBoundLambda`    Since the expression is always a single block with a single return that returns a single expression, just store that single expression.    Essentially this changes the restrictions from what one can do in C# in defining an anonymous delegate to what one can do in C# in defining an expresson with `=>` syntax.    This matches what we are actually using the object for better, and removes two levels of indirection through other objects, with the possibility of errors in them.    * Remove `ExprBlock`, `ExprReturn` & `ExprStatement`    No longer used.    Remove commented-out `ExpressionKind`s along with those removed here.    * Don't add ""`this`"" local to scope.    Never given meaning, only ever deliberately avoided in rewrites.    When a dynamic operation uses `this`, it does so by having `this` passed-in explicitly.    * Remove `LocalVariableSymbol.fUsedInAnonMeth`    Never not set to true, so no real significance.    * Pass deferred binding to out parameter directly.    We'll always get the correct final result there, so don't replicate logic we just called into.    * Remove path in `ExpressionTreeRewriter.VisitLOCAL` for null `wrap`.    Since the only locals have just had this set to non-null, this is unreachable.    Since the code removed here is the only use of `ExprHoistedLocalExpr`, remove it too."
25392	area-System.Net	Mark System.Net.WebSockets.Client 4.0.2 package stable	cc @safern @davidsh 
25393	area-System.Runtime	Support for Base32 encoding	Currently there is no official support in .NET for Base32 encoding, unlike Base64 encoding.   There is also no nuget package with this functionality that's widely used:  https://www.nuget.org/packages?q=base32     Have you considered adding this to .NET? What's the recommendation for developers that need this?
25394	area-System.Net	Mark System.Net.WebSockets.Client 4.3.2 package stable	cc @safern @davidsh 
25396	area-System.Runtime	There's no way to get the managed object size in memory	"# Public API to detect the size of the managed object.    As mentioned [in this article](https://blogs.msdn.microsoft.com/cbrumme/2003/04/15/size-of-a-managed-object/), we don't have such API to get the size in the runtime.    So far, if we want to do so, we have a choice to use some tools or techniques (not at the runtime), such as:  - using dotMemory.  - using WinDBG and calculate the object fields one by one.  - measuring the GC before and after ccreating the objects.    On of the very good example of that need, in the case we build customized cache and we want to keep the maximum size limit under control.    The developers around the world [still asking](www.google.com/search?q=.net+Size+of+a+managed+object) and requesting such API.      # How we can implement such thing    The good news that we already have this mechanism already implemented internally by SizedReference Type.    ```  internal class SizedReference : IDisposable  {    //some code here     public SizedReference(Object target) { ... }      public Object Target { get {...} }     public Int64 ApproximateSize { get { ... } }      public void Dispose() {}  }  ```    What we gonna do is just to expose it as Public API      # Proposed API  I suggest to add some class under System.Runtime to as a wrapper to SizedReference     or just as extension to the object.    ```  /// <summary>  /// Get the approximate size allocated for this object in the memory in bytes  /// </summary>  /// <param name=""obj"">the object that you want to know its size</param>  /// <returns>size in bytes</returns>  public static long GetSize(this object obj)  {   //using SizedReference Type to get the approximate size  }  ```      ---  ---    @alden-menzalgy commented on [Sun Nov 05 2017](https://github.com/dotnet/standard/issues/573)    Hi,    There is no way to get the actual (or even an approximate) size of the cached object in the memory.    The case is, we have +100 customized cache for different purposes to accelerate our platform, for each cache we have  - Cache MaxSize  - Cache ConsumedSize  - Cache RemainingSize    Whenever we insert some object to be cached, we should detect its size to re-calculate aforementioned cache properties.    I know that's a complex issue and depends on many factors, so far we have some workarounds but non of them is official and we afraid to be changed in any minor or major release.    Should you add any API to get the object size in the memory ? or at least Type size and then we can add the object-specific data length.    Related Topics    [Workaround 1](https://stackoverflow.com/questions/1128315/find-size-of-object-instance-in-bytes-in-c-sharp)  [What Microsoft says about this issue](https://blogs.msdn.microsoft.com/cbrumme/2003/04/15/size-of-a-managed-object/)    ---    @JanEggers commented on [Sat Nov 11 2017](https://github.com/dotnet/standard/issues/573#issuecomment-343669631)    you can use structs for your cache items and Marshal.Sizeof    ---    @alden-menzalgy commented on [Mon Nov 13 2017](https://github.com/dotnet/standard/issues/573#issuecomment-343930349)    It requires changing the structure that we've built the application with.  It may consider a workaround but not permanent solution    "
25397	area-Infrastructure	Configure build definitions but only run Release builds by default	cc @MattGal 
25399	area-System.Net	System.Net.Http Removing unneeded blocking from tests	Removed anywhere that had an WaitAll    ref #25346    
25400	area-System.Diagnostics	Category does not exist. errors in PerformanceCounter tests	https://mc.dot.net/#/user/Drawaes/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/ab1336f6c46534d55ac9b1fce42111c05ca65f94/workItem/System.Diagnostics.PerformanceCounter.Tests/wilogs  ```  2017-11-20 16:11:23,493: INFO: proc(54): run_and_log_output: Output: Discovering: System.Diagnostics.PerformanceCounter.Tests  2017-11-20 16:11:23,697: INFO: proc(54): run_and_log_output: Output: Discovered:  System.Diagnostics.PerformanceCounter.Tests  2017-11-20 16:11:23,775: INFO: proc(54): run_and_log_output: Output: Starting:    System.Diagnostics.PerformanceCounter.Tests  2017-11-20 16:11:25,900: INFO: proc(54): run_and_log_output: Output:    System.Diagnostics.Tests.PerformanceCounterCategoryTests.PerformanceCounterCategory_GetCounters [FAIL]  2017-11-20 16:11:25,900: INFO: proc(54): run_and_log_output: Output:       System.InvalidOperationException : Could not Read Category Index: 10170.  2017-11-20 16:11:25,900: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-20 16:11:26,009: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\PerformanceCounterLib.cs(1424,0): at System.Diagnostics.CategorySample..ctor(Byte[] data, CategoryEntry entry, PerformanceCounterLib library)  2017-11-20 16:11:26,009: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\PerformanceCounterLib.cs(822,0): at System.Diagnostics.PerformanceCounterLib.GetCategorySample(String category)  2017-11-20 16:11:26,009: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\PerformanceCounterLib.cs(791,0): at System.Diagnostics.PerformanceCounterLib.GetCategorySample(String machine, String category)  2017-11-20 16:11:26,009: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\PerformanceCounterCategory.cs(443,0): at System.Diagnostics.PerformanceCounterCategory.GetCounterInstances(String categoryName, String machineName)  2017-11-20 16:11:26,009: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\PerformanceCounterCategory.cs(517,0): at System.Diagnostics.PerformanceCounterCategory.GetInstanceNames()  2017-11-20 16:11:26,009: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\PerformanceCounterCategory.cs(460,0): at System.Diagnostics.PerformanceCounterCategory.GetCounters()  2017-11-20 16:11:26,009: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\tests\PerformanceCounterCategoryTests.cs(234,0): at System.Diagnostics.Tests.PerformanceCounterCategoryTests.PerformanceCounterCategory_GetCounters()  2017-11-20 16:11:28,973: INFO: proc(54): run_and_log_output: Output:    System.Diagnostics.Tests.PerformanceCounterTests.PerformanceCounter_BeginInitEndInit_ProcessorCounter [FAIL]  2017-11-20 16:11:28,973: INFO: proc(54): run_and_log_output: Output:       System.InvalidOperationException : Category does not exist.  2017-11-20 16:11:28,973: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-20 16:11:28,973: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\PerformanceCounterLib.cs(360,0): at System.Diagnostics.PerformanceCounterLib.CounterExists(String machine, String category, String counter)  2017-11-20 16:11:28,973: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\PerformanceCounter.cs(478,0): at System.Diagnostics.PerformanceCounter.InitializeImpl()  2017-11-20 16:11:28,973: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\tests\PerformanceCounterTests.cs(177,0): at System.Diagnostics.Tests.PerformanceCounterTests.PerformanceCounter_BeginInitEndInit_ProcessorCounter()  2017-11-20 16:11:28,973: INFO: proc(54): run_and_log_output: Output:    System.Diagnostics.Tests.PerformanceCounterCategoryTests.PerformanceCounterCategory_CounterExists_StaticInterruptsPerSec [FAIL]  2017-11-20 16:11:28,973: INFO: proc(54): run_and_log_output: Output:       System.InvalidOperationException : Category does not exist.  2017-11-20 16:11:28,973: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-11-20 16:11:28,973: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\PerformanceCounterLib.cs(360,0): at System.Diagnostics.PerformanceCounterLib.CounterExists(String machine, String category, String counter)  2017-11-20 16:11:28,973: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\PerformanceCounterCategory.cs(188,0): at System.Diagnostics.PerformanceCounterCategory.CounterExists(String counterName, String categoryName, String machineName)  2017-11-20 16:11:28,973: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\src\System\Diagnostics\PerformanceCounterCategory.cs(168,0): at System.Diagnostics.PerformanceCounterCategory.CounterExists(String counterName, String categoryName)  2017-11-20 16:11:28,973: INFO: proc(54): run_and_log_output: Output:          D:\j\workspace\windows-TGrou---f8ac6754\src\System.Diagnostics.PerformanceCounter\tests\PerformanceCounterCategoryTests.cs(191,0): at System.Diagnostics.Tests.PerformanceCounterCategoryTests.PerformanceCounterCategory_CounterExists_StaticInterruptsPerSec()  ```
25402	area-System.Net	Several improvements to Sockets	"Two main changes:  - Fully enable `Memory<byte>` with SocketAsyncEventArgs.  When adding the `Memory<byte>`-based APIs, we only did so at a cursory level; the implementation was still array-based, and we'd just fish out the array from the `Memory<byte>`, which meant it wouldn't work if the `Memory<byte>` wrapped a native pointer.  This fixes that.  SocketAsyncEventArgs now relies on `Memory<byte>` internally, as well as on Windows relying on its `Retain` method instead of using `GCHandle` directly, which means `OwnedMemory<T>` implementations can do pre-pinning and then make Retain a nop to avoid some overheads.  The change also makes it so we don't pin buffers handed to us for longer than a given operation, but we also avoid calling Retain for common operations until we know we're going async.  - Cache AsyncOperation instances on Unix on the SocketAsyncContext.  Currently when an operation completes asynchronously on Unix, we allocate an AsyncOperation-derived instance to store the state for that operation.  For several of the most common operations, this change caches a AsyncOperation instance for each common type, and reuses that instance if it's available, avoiding most of the allocation associated with async completion on Unix (there's still currently the cost of the queued work item for callback handling).    Some additional cleanup is included as well, in particular eliminating the ""InnerStart"" pattern that was introduced when the PAL was added in.  This pattern made it more difficult to find where state was being created and stored, and was largely unnecessary.  By unraveling it, it also made it possible to remove more fields from SocketAsyncEventArgs.  This PR shrinks the size of SAEA by 10% on Windows.    Fixes https://github.com/dotnet/corefx/issues/24429  cc: @geoffkizer "
25403	area-System.Diagnostics	PerformanceCounterLib is not fully thread safe	PerformanceCounterLib instances are stored in a static table such that there's a single instance for a machine/LCID combination. As such there is an expectation that operations are thread safe (since to the caller they appear to be static operations)    The code attempts to achieve this but it appears to have holes, eg _customCategoryTable, a HashTable, is modified [here ](https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.PerformanceCounter/src/System/Diagnostics/PerformanceCounterLib.cs#L706 )without protection against concurrent write at this same location (or in other places).    Make a pss through PerformanceCounterLib to make it thread safe through its static members.    https://github.com/dotnet/corefx/pull/25401
25405	area-System.Linq	Test failure: System.Linq.Expressions.Tests.LambdaTests/AboveByteMaxArityArg(useInterpreter: True)	Opened on behalf of @Sunny-pu  The test `System.Linq.Expressions.Tests.LambdaTests/AboveByteMaxArityArg(useInterpreter: True)` has failed.  System.PlatformNotSupportedException : Operation is not supported on this platform.          Stack Trace:             at System.Linq.Expressions.Compiler.DelegateHelpers.MakeNewDelegate(Type[] types) in E:\A\_work\903\s\corefx\src\System.Linq.Expressions\src\System\Linq\Expressions\Compiler\DelegateHelpers.Generated.cs:line 170        at System.Linq.Expressions.Compiler.DelegateHelpers.MakeDelegateType(Type[] types) in E:\A\_work\903\s\corefx\src\System.Linq.Expressions\src\System\Linq\Expressions\Compiler\DelegateHelpers.Generated.cs:line 34        at System.Linq.Expressions.Expression.Lambda($Expression body, String name, Boolean tailCall, IEnumerable$1<$ParameterExpression> parameters) in E:\A\_work\903\s\corefx\src\System.Linq.Expressions\src\System\Linq\Expressions\LambdaExpression.cs:line 846        at System.Linq.Expressions.Tests.LambdaTests.AboveByteMaxArityArg(Boolean useInterpreter) in E:\A\_work\903\s\corefx\src\System.Linq.Expressions\tests\Lambda\LambdaTests.cs:line 787        at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetVI<System.Boolean>(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall)        at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean isTargetThisCall)        at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566      Build : Master - 20171121.03 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x64   - Debug   - Release - Windows.10.Amd64.ClientRS3-x86   - Debug   - Release 
25407	area-System.IO	Eliminate dirent memcpy when using readdir.	@stephentoub this eliminates the memcpy for the readdir case as suggested in https://github.com/dotnet/corefx/issues/25375.    I have included a check to throw on concurrent readdir. I can remove that if it is not desired.
25408	area-System.Net	Could DecompressionHandler be made public?	I'm in a situation where I'm reading an HTTP response with a Content-Encoding of gzip. I need the output of an `HttpClient` to be the decompressed data, but I need to intercept the compressed data in order to hash it.    I can do this by creating an `HttpMessageHandler` in three layers:    - `HttpClientHandler` with decompression disabled  - A custom handler which creates a content stream to intercept the data as it's being read  - A [DecompressionHandler](https://github.com/dotnet/corefx/blob/master/src/System.Net.Http/src/System/Net/Http/Managed/DecompressionHandler.cs) to perform the decompression    Unfortunately, `DecompressionHandler` is internal. I can potentially fork it, but a) it uses internal methods which would need working round; b) I'd really rather not have the duplication. Would it be possible for this to be made public?    (If there's a better way to do this, I'm all ears - there's a [Stack Overflow question](https://stackoverflow.com/questions/47324282) with a few more details.)
25409	area-System.Data	Test failure: System.Data.Tests.AppDomainsAndFormatInfo.Bug55978	The test `System.Data.Tests.AppDomainsAndFormatInfo.Bug55978` has failed.    ```  Stack trace:  System.Data.EvaluateException : Cannot perform '>=' operation on System.DateTime and System.String.  at System.Data.BinaryNode.SetTypeMismatchError(Int32 op, Type left, Type right) in D:\git\dotnetfix\corefx\src\System.Data.Common\src\System\Data\Filter\BinaryNode.cs:line 135     at System.Data.BinaryNode.BinaryCompare(Object vLeft, Object vRight, StorageType resultType, Int32 op, CompareInfo comparer) in D:\git\dotnetfix\corefx\src\System.Data.Common\src\System\Data\Filter\BinaryNode.cs:line 267     at System.Data.BinaryNode.BinaryCompare(Object vLeft, Object vRight, StorageType resultType, Int32 op) in D:\git\dotnetfix\corefx\src\System.Data.Common\src\System\Data\Filter\BinaryNode.cs:line 152     at System.Data.BinaryNode.EvalBinaryOp(Int32 op, ExpressionNode left, ExpressionNode right, DataRow row, DataRowVersion version, Int32[] recordNos) in D:\git\dotnetfix\corefx\src\System.Data.Common\src\System\Data\Filter\BinaryNode.cs:line 871     at System.Data.BinaryNode.Eval(DataRow row, DataRowVersion version) in D:\git\dotnetfix\corefx\src\System.Data.Common\src\System\Data\Filter\BinaryNode.cs:line 41     at System.Data.BinaryNode.Eval(ExpressionNode expr, DataRow row, DataRowVersion version, Int32[] recordNos) in D:\git\dotnetfix\corefx\src\System.Data.Common\src\System\Data\Filter\BinaryNode.cs:line 142     at System.Data.BinaryNode.EvalBinaryOp(Int32 op, ExpressionNode left, ExpressionNode right, DataRow row, DataRowVersion version, Int32[] recordNos) in D:\git\dotnetfix\corefx\src\System.Data.Common\src\System\Data\Filter\BinaryNode.cs:line 908     at System.Data.BinaryNode.Eval(DataRow row, DataRowVersion version) in D:\git\dotnetfix\corefx\src\System.Data.Common\src\System\Data\Filter\BinaryNode.cs:line 41     at System.Data.DataExpression.Invoke(DataRow row, DataRowVersion version) in D:\git\dotnetfix\corefx\src\System.Data.Common\src\System\Data\Filter\DataExpression.cs:line 195     at System.Data.Index.AcceptRecord(Int32 record, IFilter filter) in D:\git\dotnetfix\corefx\src\System.Data.Common\src\System\Data\Selection.cs:line 217     at System.Data.Index.InitRecords(IFilter filter) in D:\git\dotnetfix\corefx\src\System.Data.Common\src\System\Data\Selection.cs:line 745     at System.Data.Index..ctor(DataTable table, IndexField[] indexFields, Comparison`1 comparison, DataViewRowState recordStates, IFilter rowFilter) in D:\git\dotnetfix\corefx\src\System.Data.Common\src\System\Data\Selection.cs:line 138     at System.Data.Index..ctor(DataTable table, IndexField[] indexFields, DataViewRowState recordStates, IFilter rowFilter) in D:\git\dotnetfix\corefx\src\System.Data.Common\src\System\Data\Selection.cs:line 89     at System.Data.DataTable.GetIndex(IndexField[] indexDesc, DataViewRowState recordStates, IFilter rowFilter) in D:\git\dotnetfix\corefx\src\System.Data.Common\src\System\Data\DataTable.cs:line 3184     at System.Data.DataTable.GetIndex(String sort, DataViewRowState recordStates, IFilter rowFilter) in D:\git\dotnetfix\corefx\src\System.Data.Common\src\System\Data\DataTable.cs:line 3161     at System.Data.DataView.UpdateIndex(Boolean force, Boolean fireEvent) in D:\git\dotnetfix\corefx\src\System.Data.Common\src\System\Data\DataView.cs:line 1557     at System.Data.DataView.UpdateIndex(Boolean force) in D:\git\dotnetfix\corefx\src\System.Data.Common\src\System\Data\DataView.cs:line 1531     at System.Data.DataView.SetIndex2(String newSort, DataViewRowState newRowStates, IFilter newRowFilter, Boolean fireEvent) in D:\git\dotnetfix\corefx\src\System.Data.Common\src\System\Data\DataView.cs:line 1508     at System.Data.DataView.SetIndex(String newSort, DataViewRowState newRowStates, IFilter newRowFilter) in D:\git\dotnetfix\corefx\src\System.Data.Common\src\System\Data\DataView.cs:line 1486     at System.Data.DataView.set_RowFilter(String value) in D:\git\dotnetfix\corefx\src\System.Data.Common\src\System\Data\DataView.cs:line 301     at System.Data.Tests.AppDomainsAndFormatInfo.Bug55978() in D:\git\dotnetfix\corefx\src\System.Data.Common\tests\System\Data\DataTableTest.cs:line 4043  ```    - Config:  netcoreapp-Windows_NT-Debug-x64  - OS: Microsoft Windows [Version 6.1.7601]
25410	area-System.Data	Implementation of DbProviderFactories. 	"This PR implements API reviewed here: #20903 ""Additional API for DbProviderFactories in .NET Core"".  Fixes #4571    Design decisions:    - `GetFactory(DataRow)` follows the same behavior as on NetFX: it will return the factory which type is present in the DataRow present. This can lead to undefined behavior when a different factory is registered in the DbProviderFactories for a given invariant name than the one specified in the DataRow. As this is a catch-22 situation with no true answer, the decision for now was made to make it behave the same as on NetFX  - `RegisterFactory(string providerInvariantName, string factoryTypeAssemblyQualifiedName)` registers the type name but doesn't check the type as that would require the load of the assembly and this method is meant to be used to pre-register factories which might not be present on the system (yet) (e.g. by an ORM). The type registration is deferred till the factory is requested through a `GetFactory` method. This might cause a false sense of correctness: the type registered might not be valid. This is a situation following from the nature of the method.   - `TryGetFactory(string providerInvariantName, out DbProviderFactory factory)` will still throw an exception when the factory type associated with the providerInvariantName was registered with `RegisterFactory(string, string)` and the type is invalid, as the type checking was deferred when the registration took place. In the API review thread it was undecided what to do, so I decided to stick with the exception in this case: the alternative, swallow the exception and returning false could suggest the registration earlier was successful, or that the factory isn't there/not registered, which isn't the case: a factory is registered, the type specified just couldn't be loaded.   - Internal implementation is using a ConcurrentDictionary instead of a DataTable, which is used in NetFx. This is done to avoid locks as the `IEnumerable<string> GetProviderInvariantNames()` method would lead to upscaling a ReaderWriterLockSlim lock to write level in the case of an internal Datatable  - The method `DataTable GetFactoryClasses()` builds the datatable every time. Initially I had a cached version to avoid re-allocating columns again, but maintaining that construct was rather tedious and this method isn't expected to be on a hot path at all (it's likely called once in an application's life) so I've chosen for a lock-free rebuild of the datatable every time. NetFx creates a copy of the internal table, for comparison.   - The method `IEnumerable<string> GetProviderInvariantNames()` returns a `List<T>` as that was the most simplest of implementations. If an array is preferred I could change that. As the internal structure is a concurrentdictionary and to keep things threadsafe, yield-ing over the keys set of the concurrent dictionary didn't feel correct, but please correct me if this should be updated. :)     // cc @karelz @divega @terrajobst "
25411	area-System.ComponentModel	Packaging System.ComponentModel.Composition	Fixes #11857
25412	area-System.Memory	Move (ReadOnly)Span.DangerousGetPinnableReference to MemoryMarshal	Separated from https://github.com/dotnet/corefx/issues/23879#issuecomment-341482899    We should also rename it as part of the move. Pinnable does not make sense if it is not going to be used for pinning. And Dangerous can be omitted too because of methods under `System.Runtime.InteropServices` are dangerous by convention.    So what about:    ```c#  namespace System.Runtime.InteropServices  {      public static class MemoryMarshal      {          public static readonly ref T GetReference<T>(in ReadOnlySpan<T> span);          public static ref T GetReference<T>(in Span<T> span);      }  }  ```
25413	area-System.Memory	Add implicit cast from string to ReadOnlySpan<char>	Proposal:  ```C#  public class String  {      public static implicit operator ReadOnlySpan<char>(string value) =>          value != null ? new ReadOnlySpan<char>(ref value.GetRawStringData(), value.Length) : default;      ...  }  ```
25414	area-System.Diagnostics	Make ExcludeFromCodeCoverageAttribute applicable to assemblies.	Closes #24694
25415	area-Infrastructure	Alpine3.6-x64: Segmentation fault on publish attempt	@dotnet-mc-bot commented on [Tue Nov 21 2017](https://github.com/dotnet/core-eng/issues/2149)  Opened on behalf of @jcagme  Warnings: 0 Status Message: failed  Build : Master - 20171121.04 (Product Build) Failing configurations: - Alpine3.6   - Debug-x64 [Mission Control Build Info](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/build~2Fproduct~2F/build/20171121.04/workItem/Orchestration/analysis/external/Visual%20Studio%20Build%20Information)   
25416	area-System.Memory	Added SpanExtensions.EndsWith	Added Span extensions methods  ```csharp  public static bool EndsWith<T>(this Span<T> span, ReadOnlySpan<T> value) where T : IEquatable<T>;  public static bool EndsWith<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> value) where T : IEquatable<T>;  ```    Resolves #24840
25417	area-System.Runtime	Expose and test Decimal.TryParse	Depends on https://github.com/dotnet/coreclr/pull/15145  Depends on https://github.com/dotnet/corert/pull/4980  Fixes https://github.com/dotnet/corefx/issues/25372  cc: @jkotas 
25424	area-System.Memory	Optimize Utf-8 Integer Formatter for the default case	Using the 'D' Standard Format has too much overhead due to precision checks.    Also, instead of calculating the digit count first and then writing the digits (which results in `O(2n)` operations, where n is the length of the number), write the digits in reverse order and then reverse the digits in place (which results in `O(n + n/2)` operations).    ![image](https://user-images.githubusercontent.com/6527137/33106649-f99c9a98-cee7-11e7-836e-03049e063c01.png)    cc @AtsushiKan, @KrzysztofCwalina, @jkotas
25425	area-System.Memory	Try to reduce overhead of abstraction in Utf-8 integer formatter APIs	Currently, the overhead to calling the Utf-8 integer formatter APIs is high for the simple/default case.    **Any ideas on what we can do to reduce this overhead caused by the abstraction layer and the desire to reduce code duplication?**    Let's say we just want to write an integer starting from the end of the provided buffer (instead of the front), and we provide a StandardFormat 'R' to support that (see scenario in [SignalR](https://github.com/aspnet/SignalR/pull/1128) here: https://github.com/aspnet/SignalR/pull/1128/files#diff-d04b54105a83f4a2e21723409df7b9b1R37).    The function calls look like this:  TryFormat(int value, ..., 'R') => TryFormatInt64(value, 0xffffffff, buffer, out bytesWritten, format) => if check + switch statement => TryFormatInt64R  https://github.com/dotnet/corefx/blob/master/src/System.Memory/src/System/Buffers/Text/Utf8Formatter/Utf8Formatter.Integer.Signed.cs#L18    Even if TryFormatInt64R is essentially a no-op, the overhead is higher than implementing your own (relatively naiive) method and calling it directly.  ```C#  private static bool TryFormatInt64R(long value, Span<byte> buffer, out int bytesWritten)  {      bytesWritten = 0;      return false;  }  ```      ```C#  // Note: Not tested, just an example  public static bool MyReverseFormat(uint value, Span<byte> buffer, out int bytesWritten)  {      int digits = 0;      bytesWritten = 0;      do      {          int index = buffer.Length - 1 - digits;          if (index < 0)           {              buffer.Clear();              return false;          }          buffer[index] = (byte)('0' + value % 10);          value /= 10;          digits++;      } while (value > 0);        bytesWritten = digits;      return true;  }  ```    **Overhead of calling no-op TryFormat:**  ![image](https://user-images.githubusercontent.com/6527137/33107176-e63797b6-ceea-11e7-8f32-3d45b416ac53.png)    **We never overcome the overhead, even though the per loop iteration performance of our algorithm is better:**  ![image](https://user-images.githubusercontent.com/6527137/33107144-ba032dae-ceea-11e7-9612-2ddeb87b9cf1.png)    ![image](https://user-images.githubusercontent.com/6527137/33107156-d08d0aea-ceea-11e7-8bc5-7019bf4176cb.png)    Related PR: https://github.com/dotnet/corefx/pull/25424    cc @KrzysztofCwalina, @AtsushiKan, @jkotas
25426	area-System.IO	Fast file enumeration for Windows	Implements an optimized, low allocation replacement for file enumeration on Windows. In preliminary tests this improves performance at least two fold, particularly for recursive searches.    Removes agressive filter validation.    Copies and cleans up filename matching code from FileSystemWatcher.    Other notes:    - Attempting to build the DosMatcher for Unix as well  - Specific unit tests for DosMatcher forthcoming- existing tests cover it pretty well, however  - Intent is to take the internal model and make it public and cross platform to allow custom filtering and transforms for enumeration  - Also investigating exposing options for error and link handling  - Intent is to make the Span combine code public as well (likely as part of Path)  - Need to follow up on conversion of NTSTATUS errors- might have to do a fallback to GetFileInformationFromHandleEx if the conversion API isn't actually available on OneCore  - Win7 doesn't have the right options for GetFileInformationFromHandleEx and WinRT can't use the NT API
25427	area-System.IO	Add PipeOptions.CurrentUserOnly option	Systems that use named pipes often want to try to lock down access, validating that only the user that created the server is able to connect to it, and similarly validating that the client is connecting to a server it expects.    On Windows this can be done with a complicated dance involving ACLs.  On Unix where our PipeStream is built on top of domain sockets, it can be done with a complicated dance involving creating a directory that's permissioned just to the user, creating the domain socket on a path in there, etc.    As we've seen several systems want to do this, including for example Roslyn with its compiler server, we should expose an option and handle the difficulties of this in one place so that customers of NamedPipeServer/ClientStream don't need to reinvent the wheel each time.    Proposal:  ```C#  namespace System.IO.Pipes  {      [Flags]      public enum PipeOptions // existing type      {          ...          CurrentUserOnly = unchecked((int)0x20000000) // new value proposed      }  }  ```  (Note that today the implementation on Windows just passes PipeOptions in by value to CreateNamedPipe.  We would strip off this new value if it was set before doing so, but for extra good measure we should also choose a value that's not currently accepted by CreateNamedPipe.)    [edit by @danmosemsft: this flag will cause a check that the pipe is owned by the same user with the same elevation level ]
25428	area-System.IO	Remove trimming and validation for file find filter strings	"The complexity here has to do with limited trust scenarios. We shouldn't trim or care about "".."".     #25426 handles this for Windows. Working on Unix."
25429	area-System.Net	Test failure: System.Net.Sockets.Tests.ConnectApm/Connect_Success(listenAt: 127.0.0.1)	Opened on behalf of @Sunny-pu    The test `System.Net.Sockets.Tests.ConnectApm/Connect_Success(listenAt: 127.0.0.1)` has failed.    System.TimeoutException : WhenAllOrAnyFailed timed out after 10000            Stack Trace:               at System.Threading.Tasks.TaskTimeoutExtensions.<WhenAllOrAnyFailed>d__2.MoveNext()      --- End of stack trace from previous location where exception was thrown ---         at System.Net.Sockets.Tests.Connect`1.<Connect_Success>d__0.MoveNext() in E:\A\_work\1035\s\corefx\src\System.Net.Sockets\tests\FunctionalTests\Connect.cs:line 23      --- End of stack trace from previous location where exception was thrown ---      --- End of stack trace from previous location where exception was thrown ---      --- End of stack trace from previous location where exception was thrown ---  Build : Master - 20171122.01 (Core Tests)  Failing configurations:  - Windows.7.Amd64-x64    - Release    https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171122.01/workItem/System.Net.Sockets.Tests
25431	area-System.Runtime	Fix SSE2 and SSE4.1 APIs	Reflect mscorlib change https://github.com/dotnet/coreclr/pull/15160 
25432	area-System.Net	SslApplicationProtocols.ToString() shouldn't allocate for known protocols	For http/1.1 and h2 it shouldn't allocate a new string https://github.com/dotnet/corefx/blob/1d95739cf905df31685fed2451aedeec95880ade/src/System.Net.Security/src/System/Net/Security/SslApplicationProtocol.cs#L97. Those 2 should be hardcoded to return constants.    /cc @Priya91 @stephentoub @karelz 
25434	area-System.Data	SqlBulkCopy.WriteToServer fails with null reference exception when using a named column mapping and IDataReader not implemented via DbDataReader	"How to reproduce:   1) implment IDataReader *without inherting from DbDataReader*  2) Create a SqlBulkCopy object having a column mapping where from and to are column names.  3) WriteToServer will fail due to a null reference exception.    ```c#  //how to repro. (Using DataBoss.Data 0.0.42 from NuGet on netstandard 2.0)  using DataBoss.Data;  using System;  using System.Data.SqlClient;  using System.Diagnostics;    namespace ConsoleApp3  {    class Program    {      static void Main(string[] args)      {          var db = new SqlConnection(""Server=.;Integrated Security=SSPI"");            db.Open();          db.ExecuteNonQuery(""create table #Temp(id int not null)"");            var toInsert = SequenceDataReader.Create(new[] { 1, 2, 3 }, x => x.Map(""id"", id => id));            var bulkCopy = new SqlBulkCopy(db)          {              DestinationTableName = ""#Temp"",          };               for (var i = 0; i != toInsert.FieldCount; ++i)          {              var n = toInsert.GetName(i);              bulkCopy.ColumnMappings.Add(n, n);          }          bulkCopy.WriteToServer(toInsert);        }    }  }  ```    Known workaround: Create the column mapping by ordinal (change bulkCopy.ColumnMappings.Add(n, n); to 2.Add(i, n)"".    [Likely culprit as far as I can discern is mishandling the  _DbDataReaderSource here:](https://github.com/dotnet/corefx/blob/master/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs#L848)  ![image](https://user-images.githubusercontent.com/112032/33130899-202d107c-cf95-11e7-8f8c-6a494bd9a446.png)    [EDIT] Add C# syntax highlight + space formatting by @karelz  [EDIT] Clarified repro code, added link to my guess on source. @drunkcod"
25435	area-System.Net	UnixDomainSocketEndPoint: support Linux abstract socket address.	This adds support for Linux abstract socket addresses.    The added test round-trips the address _managed -> native -> managed_ to ensure we have connected to the correct address.  To succeed for pathname addresses, the terminating null needed to be stripped.    CC @stephentoub @eerhardt 
25437	area-System.ComponentModel	Porting first half of the System.ComponentModel.Composition tests	Fixing #11857    Adding 347 tests  Sets line and branch coverage to 73% and 65% respectively.  
25438	area-System.Memory	Expose and test string implicit cast to ReadOnlySpan<char>	Fixes https://github.com/dotnet/corefx/issues/25413  Depends on https://github.com/dotnet/coreclr/pull/15167  Depends on https://github.com/dotnet/corert/pull/4990  cc: @jkotas, @ahsonkhan 
25439	area-System.Net	Fix AsyncOperation caching in SocketAsyncContext.Unix.cs	https://github.com/dotnet/corefx/pull/25402 introduced caching for several key AsyncOperation objects, in order to avoid the extra allocations on hot/common paths in async socket operations on Unix.  But something about the implementation doesn't work correctly, resulting in sporadic errors where the callback is null, suggesting that we returned the object for subsequent reuse while it was still in use.  The caching has been temporarily disabled, but this should be revisited.
25440	area-System.Diagnostics	EventLog is not supported in .Net Core? When is it going to be avaiable next?	I have trying hard to see if EventLog works in .Net Core but it doesn't.  Is it going to be also shipped with dot net core version 2.1 ?    
25442	area-System.Runtime	"Proposal BitConverter.ToString to have ""N"" formatter to omit the dashes"	"# Rationale    With GUID, we have option to omit the dashes:    ```c#  var guid = Guid.NewGuid();    guid.ToString();    // ->    994fd7bc-ddb3-48ea-9eb1-49df7ed9c5ac  guid.ToString(""N""); // ->    994fd7bcddb348ea9eb149df7ed9c5ac  ```    The BitConverter does not present such an overload to omit the dashes.    # Proposal    In addition to the existing ToString overloads in BitConverter:    ```c#          public static string ToString(byte[] value)          public static string ToString(byte[] value, int startIndex)          public static string ToString(byte[] value, int startIndex, int length)  ```    Please consider:    ```c#          public static string ToString(byte[] value, string format)          public static string ToString(byte[] value, int startIndex, string format)          public static string ToString(byte[] value, int startIndex, int length, string format)  ```    # Example:    ```c#  var bytes= new byte[16];  var random = new Random();  random.NextBytes(bytes);    var testString = BitConverter.ToString(bytes, ""N"");    Assert.DoesNotContain('-', testString);  ```"
25443	area-System.Threading	TaskScheduler should be able to cancel pending tasks	_From @JeffCyr on November 22, 2017 18:48_  ## Rationale  After a `Task` is enqueued with `TaskScheduler.QueueTask(Task task)`, it is currently not possible to cancel or fail the task if the `TaskScheduler` can't execute the task.    This makes it hard to implement a disposable `TaskScheduler` because `Dispose` needs to block until all pending tasks are executed, which is not always possible, or have to leave the pending tasks uncompleted, which is not ideal either.    ## Proposed API  ```c#  public abstract class TaskScheduler  {      //...        protected bool TrySetCanceled(Task task);        protected bool TrySetException(Task task, Exception exception);  }  ```    ## Details  - `TrySetCanceled` and `TrySetException` can only be called for a `Task` assigned to this `TaskScheduler`. This is similar to `TryExecuteTask`.  - `TrySetCanceled` and `TrySetException` are implemented with best effort. They will return `false` if the tasks is already running or canceled by a `CancellationToken`.    ## Pull Request  A PR with the proposed changes is available on my fork: https://github.com/JeffCyr/coreclr/pull/1  _Copied from original issue: dotnet/coreclr#15171_
25444	area-System.Net	SslApplicationProtocol: Use the copied byte array	When `copy` is true, the `protocol` byte array is copied to a new array, but then the new array is never used. Instead, use the new array.
25448	area-System.Runtime	Tests for new string.contains Api	Fixes #25094  PR implementation link = https://github.com/dotnet/coreclr/pull/15180
25449	area-System.Security	CMS:  enable adding certificates and unsigned attributes post-signing	CMS permits post-signing changes to `SignedData.certificates` and `SignerInfo.unsignedAttrs` collections; however, `System.Security.Cryptography.Pkcs.SignedCms.Certificates` and `System.Security.Cryptography.Pkcs.SignerInfo.UnsignedAttributes` properties return copies of the data and mutations of these collections are not persisted back to the root `SignedCms` object.    Example 1:  to an existing `SignerInfo` object attempt to add a timestamp per [RFC 3161 appendix A](https://tools.ietf.org/html/rfc3161#page-20).  Example 2:  to an existing `SignedCms` object attempt to add additional certificates found during a chain building for the timestamp authority's certificate in example 1.  (According to RFC 3161, if `certReq` is TRUE in the timestamp request, the TSA is only obliged to return in its response the signing certificate, not all certificates in a complete chain for the signing certificate.)    While this issue was discovered on .NET Framework, it is relevant to both .NET Framework and .NET Core's #14197 and #24524 and NuGet package signing's cross-platform plan.  NuGet has a Windows-only workaround (P/Invoking) and a cross-platform workaround too, but the cross-platform workaround is a hack and a blocker for other features (like ECDSA support).    One option is to introduce add/remove helper methods on `SignedCms` and `SignerInfo` classes.    CC @bartonjs, @rido-min
25450	area-System.IO	Should remove CheckInvalidPathChars	The check for invalid path chars on the majority of System.IO APIs aggregates to a significant cost in real world performance metrics. There is little benefit to premptively checking- we should start by removing the check from everything but Path.GetFullPath().    http://source.dot.net/#System.Private.CoreLib/shared/System/IO/PathInternal.cs,486d9b8f9e6ecd64,references    We need to remove checks in CoreCLR (where Path lives) and System.IO.FileSystem.
25456	area-System.Diagnostics	ProcessStartInfo doesn't pass empty string to the target process	"Following code is to pass ""test1"" and an empty string as arguments to netcoretest application. It works well on Windows. On Ubuntu (16.10 and 17.04), it just passes ""test1"" to netcoretest, and ignores the empty string. Could anyone help to take a look?    ```              ProcessStartInfo psi = new ProcessStartInfo(""/usr/bin/dotnet"");              psi.Arguments = ""netcoretest.dll test1 \""\"""";                Process p1 = Process.Start(psi);              p1.OutputDataReceived += (s, eventArg) =>              {                  Console.WriteLine(""P1 {0}"", eventArg.Data.ToString());              };  ```  "
25458	area-System.IO	Removed Check Invalid Path Chars	Fixes #25450   coreclr pr - dotnet/coreclr#15191
25459	area-System.Linq	FindIndex for IReadOnlyList<T>?	## Rationale and Usage    I think the usage for this API is almost same with `List<T>.FindIndex`. But this **is** a readonly API and should exist in `IReadOnlyList<T>`. Otherwise we have to fallback to mutable type, `List<T>` as interface, which is ... bad, or write a `FindIndex` extension method ourselves.    ## Questions    1. If we just use type switch to optimize for `List<T>` internally, what about custom class (such as my `SortedList`) which implements `IReadOnlyList`, and also use an array internal, and I want to have a high-perf `FindIndex`?     2. Should we generalize to `IEnumerable`? What's the usage for `IEnumerable.FindIndex`?  
25460	area-System.Net	Quick removal of more blocking in Sockets	Found a group of tests that use a mix of async and APM but the entire test can be made non blocking. Hopefully removing these is making the outerloop more stable/worth it :)    Ref #25346    /cc @stephentoub @davidsh 
25461	area-Microsoft.CSharp	RuntimeBinderException when using Task extension method on the result of an async method in a call tree that includes a dynamic parameter	"_From @bungeemonkee on November 22, 2017 23:31_  I ran into a very specific case where the clr appears to not properly resolve extension methods at runtime for code involving both dynamics and async and throws a RuntimeBinderException.    CLI version: 2.0.3  CLR versioin: 2.0.3    If the code below is added to a netcoreapp2.0 console project it will reproduce the exception.    Program.cs  ```csharp  using System;  using System.Threading.Tasks;    namespace RuntimeBinderException  {      public static class Program      {          public static void Main(string[] args)          {              Go(args).Wait();                Console.WriteLine(""Should not get here."");          }            public static async Task Go(dynamic thing)          {              await DoSomething(thing).TaskExtension();          }            public static async Task DoSomething(object parameter)          {              // The function needs only be declared async - it doesn't need to actually await anything          }      }  }    TaskExtensions.cs  ```csharp  using System.Runtime.CompilerServices;  using System.Threading.Tasks;    namespace RuntimeBinderException  {      public static class TaskExtensions      {          public static async Task TaskExtension(this Task task)          {              await task;          }      }  }  ```    The exception is:  >Unhandled Exception: System.AggregateException: One or more errors occurred. ('System.Threading.Tasks.Task' does not contain a definition for 'TaskExtension') ---> Microsoft.CSharp.RuntimeBinder.RuntimeBinderException: 'System.Threading.Tasks.Task' does not contain a definition for 'TaskExtension'  >   at CallSite.Target(Closure , CallSite , Object )  >   at System.Dynamic.UpdateDelegates.UpdateAndExecute1[T0,TRet](CallSite site, T0 arg0)  >   at RuntimeBinderException.Program.<Go>d__1.MoveNext() in /mnt/c/_Local/Playground/RuntimeBinderException/RuntimeBinderException/Program.cs:line 17  >   --- End of inner exception stack trace ---  >   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)  >   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)  >   at System.Threading.Tasks.Task.Wait()  >   at RuntimeBinderException.Program.Main(String[] args) in /mnt/c/_Local/Playground/RuntimeBinderException/RuntimeBinderException/Program.cs:line 10      I have included a zip archive of the solution to reproduce the issue.  [RuntimeBinderException.zip](https://github.com/dotnet/coreclr/files/1497723/RuntimeBinderException.zip)  _Copied from original issue: dotnet/coreclr#15186_"
25463	area-System.Net	SmtpClient should enable predictable filenames when using SpecifiedPickupDirectory delivery method	"## Current Situation  Currently we can write an email to the filesystem so we can verify the content without actually sending a communication.    ```c#   string from = ""someone@example.com"";   string to = ""someone-else@example.com"";   SmtpClient client = new SmtpClient(""smtp.example.com"");   client.PickupDirectoryLocation = @""C:\temp"";   client.DeliveryMethod = SmtpDeliveryMethod.SpecifiedPickupDirectory;        MailMessage m = new MailMessage(from, to);   m.Body = ""Hey core-coders!"";   m.Subject = ""Example.com email"";   client.SendMail(m);  ```    Which predictably writes a file to **C:\temp** - however the filename is an auto generated guid (e.g. *e98d022e-8885-4969-b87e-c16b03c02712.eml*).    ## Rational and Usage  This works well, however it doesn't scale well if you have a routine that sends 20+ emails and you're interested in looking at 1 of them.      A simple way to improve this is to add a method on the **MailMessage** class to stipulate how the filename should be written to the filesystem.    ```c#   m.SpecifiedPickupFile = ""my-filename.eml"";  ```    ### Proposed API    ```c#   namespace System.Net.Mail {    public class MailMessage : IDisposable {     public string SpecifiedPickupFile { get; set; }     ....    }   }  ```    ## Details  - Above change would also help with integration testing.    ## Open Questions  - What happens if the file already exists in the **SpecifiedPickupDirectory**? Personally I think an exception would be the sensible choice (duplicate file exception?).    ## Pull Request  Proposal not yet approved.    ## Updates  - Initial version    "
25466	area-Microsoft.CSharp	Remove some pointer-related dead code from Microsoft.CSharp	* Remove `GetPtrBinOpSigs` and code used by it.    Is only called by `GetSpecialBinopSignatures`, which is only called by `BindStandardBinop`, which is only called by `BindBinaryOperation`, which creates its arguments from `ArgumentObject` objects which cannot contain pointers, so there is no way to reach this with a `PointerType`.    * Remove `BindPtrBinOp`    Now only called by `BindIncOpCore`, only called by `BindLiftedIncOp` & `BindNonliftedIncOp`, both only called by `BindIncOp`, only called by `BindStandardUnaryOperator` which is only called by `BindUnaryOperation`, which creates its argument from an `ArgumentObject` object which cannot contain a pointer, so there is no way to reach this with a `PointerType`.    * Update comments on possible binary operations excluding pointers.    * Remove `PointerType` branch from `PopulateSignatureList`    Only called from `BindStandardUnaryOperator`, so can't have pointers as per above.    * Remove pointer condition on `BindToField`.    Only called by `CreateField`, called by `BindProperty` which creates the relevant expression from an `ArgumentObject`.
25467	area-System.Net	Socket.IOcontrol handles Windows-specific control codes and is not supported in linux	_From @ms0713 on November 23, 2017 5:53_  Using DllImport in my .Net code, I was using **ws2_32.dll**. While running same in Linux it says dll cant be load.  So I stopped using DllImport and used Socket.IOControl() to read my data from socket. This time linux gives following error:  Socket.IOControl handles Windows -specific control codes and is not supported in linux.    What could be the common way to recieve data in Windows and Linux???    _Copied from original issue: dotnet/coreclr#15194_
25468	area-Microsoft.CSharp	Remove some dead code from Microsoft.CSharp's PredefinedMembers	"* Remove `MethodSignatureEnum.SIG_REF` and `.SIG_OUT`    No predefined methods used these.    * Remove checks that `GetOptPredefAgg` may have returned null.    It can't, as we won't start up without types we expect are there.  Rename to `GetPredefAgg`, since it's not ""Opt"".    * Remove branches for `LoadTypeFromSignature` returning null.    Since we can now see that this can never happen    * Remove `PredefinedType.PT_G_OPTIONAL` branch in `LoadTypeArrayFromSignature`    No parameter list contains it.    * Skip getting type arguments for predefined members when there are none.    Avoids creating and throwing away an array."
25469	area-System.Data	SqlConnection should NOT be sealed (nothing should be sealed, really)	"Imagine the following scenario:    For security reasons (or performance, or policies, or whatever), I want to have a readonly sql connection to some features and a read/write connection for others.    What's the most easy way to accomplish this? Using .net core dependency injection:    ```  services.AddScoped(_ => new ReadOnlySqlConnection(Configuration.GetConnectionString(""ReadOnlySqlConnectionStringWithAReadOnlyUser"")));  services.AddScoped(_ => new ReadWriteSqlConnection(Configuration.GetConnectionString(""ReadWriteSqlConnectionStringWithAReadOnlyUser"")));  ```    Then, I could implement a simple inheritance to resolve what type of connection I want:    ```  public class ReadOnlySqlConnection : SqlConnection  {  }    public class ReadWriteSqlConnection : SqlConnection  {  }  ```    I could even create a specialized SqlCommand to throw exceptions on write methods while using a ReadOnly connection (overriding ExecuteNonQuery to throw an exception). So I could make a specialized method on it:    ```  public class ReadOnlySqlConnection : SqlConnection  {      public ReadOnlySqlCommand CreateCommand(...)      {          ...      }  }    public class ReadWriteSqlConnection : SqlConnection  {      public ReadWriteSqlCommand CreateCommand(...)      {          ...      }  }  ```    Sealing classes is bad for the extensible nature of .net :(    I KNOW there are other ways to doing this... but, why seal anything, really? Let's us extend all we want \O/"
25470	area-Meta	Port System.Messaging	
25473	area-Microsoft.CSharp	Remove invalid assertion from Microsoft.CSharp's BindIsEvent	Missed when #25420 removed two similar from `InvokeMember`.    Also include tests for `IsEvent`, `BindIsEvent`, etc.
25477	area-System.Security	AsyncLocal.OnValueChanged seems to be called with a stale change, crashing the process	I've attempted to write a middleware service to use WindowsIdentity.RunImpersonated, Wait()-ing for the next handler to return.     However I've seen that WindowsIdentity.CurrentImpersonatedTokenChanged is called a final time after my middleware finishes, with a closed but valid windows token. This leads to Environment.FailFast being called in ExecutionContext.OnContextChanged, which is logging the stack trace from OnContextChanged, but isn't logging the details of the exception that was caught.    There seem to be a number of problems here;  - We need an async version of RunImpersonated (#24977)  - WindowsIdentity.CurrentImpersonatedTokenChanged should check for closed tokens  - Environment.FailFast should log the exception details (https://github.com/dotnet/coreclr/issues/15203)  - AsyncLocal.OnValueChanged seems to be called with a stale change after an async task has completed.    In the meantime, I've worked around the problem by calling advapi32.dll ImpersonateLoggedOnUser / RevertToSelf directly from an AsyncLocal change handler, essentially implementing an async version of RunImpersonated myself.    EDIT by @ViktorHofer: added issue link for failfast.
25480	area-System.Linq	ExpressionTree serialization and reflection fallback?	The expression tree is a great tools for making standard dynamic script. But there is 2 features I think we need to let it contain in expression tree library    One is standardize serialization/deserialization for making it portable and could transfer the logic across network and also save it as data in a file or database    Another is fallback to reflection in addition to `Compile()` to delegate. In place where we can't do a runtime code generation such as when we doing AoT compilation
25481	area-System.Net	Fix NetworkStream.Write() when UNIX signal interrupts the system call	Comment in the code has stated, that since the socket is in the blocking mode send() operation will always complete after all requested bytes were transferred. On UNIX systems send() system call can be interrupted by a signal. This change makes sure that all bytes were transferred, even in case when the system call was interrupted.
25483	area-Microsoft.CSharp	NRE from MS.CSharp's Binder.Convert on identity or upcasts	If we explicitly set the source type of a use of `Binder.Convert` and if the conversion is either the identity conversion or an upcast of a reference type to either a base type or implemented interface, then the delegate produced will throw `NullReferenceException` on execution.    ```C#  var binder = Binder.Convert(CSharpBinderFlags.None, typeof(int), GetType());  var callSite = CallSite<Func<CallSite, int, int>>.Create(binder);  var func = callSite.Target;  int result = func(callSite, 2); // throws NRE  ```    The `ExpressionTreeRewriter` removes such casts whenever it finds them, since they can be skipped, but the `ExpressionTreeCallRewriter` can't handle the `p0 => p0` result if that conversion was the only operation.    
25484	area-Microsoft.CSharp	Correct identity expression results in MS.CSharp	Have `ExpressionTreeCallRewriter` correctly handle CSharp expressions that only access a parameter, so that conversions that have been fully optimised away can be correctly converted into Linq expressions.    Fixes #25483    Also include some tests for implicit conversions.
25485	area-System.IO	Fix misleading exception message, cleanup code FileSystemWatcher	@danmosemsft  found another place where message could be more precise again on FileSystemWatcher. Fixes #24817
25487	area-System.Linq	Remove FEATURE_INTERPRET from System.Linq.Expressions	Since it's been set on every build for some time, it no longer serves any purpose, and it existing implies it could perhaps not be set.
25488	area-Microsoft.CSharp	Remove code in Microsoft.CSharp related to casting method groups or unbound lambdas	* Remove branches for inferring method group arguments to methods.    We can never have a method-group or bound lambda expression as an argument, so these branches can never find a result.    * Remove `MethodTypeInferrer._pClassTypeArguments`    Set, but never used.    * Remove `ArgInfos.fHasExprs` and paths for it being false.    Always set to true in `FillInArgInfoFromArgList` immediately after creation.    Removing the dead code this orphans removes `InferForMethodGroupConversion`, which dealt with passing generic method groups as arguments, and hence irrelevant to dynamic binding.
25489	area-System.Net	Implement managed and independent websocket support	According to the code here, there's no websocket implementation for Windows 7. Since windows 7 isn't EOL and it's listed as a supported plaform, this is a bug . Since Microsoft I guess wants to keep ubiquitous web technology out of Windows 7 I guess to coerce people into upgrading to Windows Spy edition, probably should implement this or strip windows 7 from the list of supported operating systems.
25495	area-System.ComponentModel	Issue when calling Validator.TryValidateObject	Hi,    The method TryValidateObject will throw an exception when trying to validate an object. It seems that the GetObjectValidationErrors method does not check if result of alidatable.Validate(validationContext) is not null. Is this a bug or a desired design?    Regards,  Jérôme Piquot    Method : System.ComponentModel.DataAnnotations.GetObjectValidationErrors              // Step 3: Test for IValidatableObject implementation                          if (instance is IValidatableObject validatable)              {                  var results = validatable.Validate(validationContext);  **===>**      foreach (var result in results.Where(r => r != ValidationResult.Success))                  {                      errors.Add(new ValidationError(null, instance, result));                  }              }  Call Stack :   System.ArgumentNullException: Value cannot be null.  Parameter name: source     at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)     at System.ComponentModel.DataAnnotations.Validator.GetObjectValidationErrors(Object instance, ValidationContext validationContext, Boolean validateAllProperties, Boolean breakOnFirstError)     at System.ComponentModel.DataAnnotations.Validator.TryValidateObject(Object instance, ValidationContext validationContext, ICollection`1 validationResults, Boolean validateAllProperties)     at Flexmind.Framework.Database.ApplicationDbContext.ValidateObject(IValidatableObject toValidate) in C:\Dev\Tyndareus\Flexmind.Framework\Flexmind.Framework\src\Core\Flexmind.Framework.Database\ApplicationDbContext.cs:line 148     at Flexmind.Framework.Database.ApplicationDbContext.BeforeSave() in C:\Dev\Tyndareus\Flexmind.Framework\Flexmind.Framework\src\Core\Flexmind.Framework.Database\ApplicationDbContext.cs:line 127     at Flexmind.Framework.Database.ApplicationDbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken) in C:\Dev\Tyndareus\Flexmind.Framework\Flexmind.Framework\src\Core\Flexmind.Framework.Database\ApplicationDbContext.cs:line 102     at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(CancellationToken cancellationToken)  
25497	area-System.Net	URI thread safety documentation	"The URI class is immutable, and glancing at the [code](https://github.com/dotnet/corefx/blob/master/src/System.Private.Uri/src/System/Uri.cs) it seems as though [thread-safety](https://github.com/dotnet/corefx/blob/c4ebdbe5f5fbf53ec73b2c2e16f610387945151f/src/System.Private.Uri/src/System/Uri.cs#L128) is considered. However, the [URI docs](https://msdn.microsoft.com/en-us/library/system.uri(v=vs.110).aspx) say _""Any instance members are not guaranteed to be thread safe""_.     Is that really the case? If not, and the class is thread-safe, the docs should be updated."
25498	area-System.ComponentModel	Fixing disabled tests in System.ComponentModel.Composition	This issue tracks the disabled failing tests for System.ComponentModel.Composition identified during port to core    
25499	area-System.Memory	ReadOnlySpan<T> debug view error	"VS 15.5.0 Preview 4.0  System.Memory 4.5.0-preview1-25925-02    The error occurs when viewing debug information of the ""readonlySpan"" variable.    repro:  ```  var stringData = ""hello Steve"";  var readonlySpan = stringData.AsReadOnlySpan();  ```    error:  ```  Specified cast is not valid.    at System.SpanDebugView`1[[System.Char, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]..ctor(ReadOnlySpan`1 collection)  ```"
25500	area-System.Linq	S.L.Expressions interpreter fails to widen rhs of coalese expressions	With a coalesce expression where the left hand side is wider than the right hand side (ignoring that the left may be nullable and the right not), then the right hand side should be widened to the value of the node of the two (that is, the wider of the two if both are nullable, the non-nullable form of the wider of the two otherwise).    The compiler handles this fine, but the interpreter will throw `InvalidCastException` if the left hand operand had been null.    Repro:    ```C#  Expression.Lambda<Func<long>>(   Expression.Coalesce(Expression.Constant(null, typeof(long?)), Expression.Constant(2))   ).Compile(true)();
25501	area-System.Linq	Correctly handle coalesce linq expressions that widen the rhs operand	Fixes #25500
25503	area-Microsoft.CSharp	Presence of overloads with __arglist can prevent dynamic binding finding correct overload	Given    ```C#  public class HasVarargs  {   public int Binary(int i, int j, __arglist) => 0;     public int Binary(int i, int j) => i + j; // This should be fine with dynamic     public int Binary(int i, __arglist) => 0;  }  ```    Then the code:  ```C#  dynamic d = new HasVarargs();  Console.WriteLine(d.Binary(3, 4));  ```    Can throw a `RuntimeBinderException` with a message of `The best overloaded method match for 'UserQuery.HasVarargs.Binary(int, __arglist, ...)' has some invalid arguments` or of `No overload for method 'Binary' takes '2' arguments` or perhaps work, depending on the order the methods are put in the class' source (I would guess, affecting the order reflection finds them in). 
25504	area-Microsoft.CSharp	Stop Microsoft.CSharp getting confused by varargs overloads to callable members	* Include calling convention in `MemberInfo` equality checks    Prevents the binder from thinking a callable method is a varargs (and hence uncallable) method it has already seen, and not recording it.    Fixes #25503    * Record whether a constructor is varargs.    Constructors were assumed to not be varargs, so a varargs constructor could be erroneously called.    * Remove vararg handling from `AdjustCallArgumentsForParams`    We will never get this far with a vararg method.    * Don't include ellipses in error messages about varargs members.    Since we're including `__arglist`, the ellipsis representing the argument list is redundant.    Fixes #25506    * Remove `isVarargs` and `isAbstract` from `MethodSymbol`    `isVarargs` had only been used in error messages (no longer the case) and an assertion added when vararg handling was removed from `AdjustCallArgumentsForParams` above (can be replaced with a check for an `ArgumentListType` parameter), with varargs members correctly failing overload resolution due to the `ArgumentListType` parameter not matching rather than the `isVarargs` flag.    `isAbstract` was set but never used.
25505	area-System.Data	Add PrepareAsync() to DbCommand	ADO.NET includes `DbCommand.Prepare()` for command preparation, to speed up subsequent repeated executions of the command. As this method may perform I/O to create a server-side statement, it should have a `DbCommand.PrepareAsync()` counterpart. As with other ADO.NET async overloads, `DbCommand` should provide a default implementation which delegates to the sync version.
25506	area-Microsoft.CSharp	Microsoft.CSharp represents __arglist in error messages twice.	Given the following:    ```C#  public class HasVarargs  {   public void OnlyVarargs(__arglist)   {   }  }  ```    Then attempting:  ```C#  dynamic d = new HasVarargs();  d.OnlyVarargs(1);  ```    Raises an exception with the message `The best overloaded method match for 'UserQuery.HasVarargs.OnlyVarargs(__arglist, ...)' has some invalid arguments`    Really it should either use `__arglist` to represent the varargs component or `...` but not both. Considering that the static error message would be `Argument 1: cannot convert from 'int' to '__arglist'` it would seem that the former would be preferred to the latter.
25507	area-Microsoft.CSharp	Microsoft.CSharp picks incorrect default for optional MarshalAs(UnmanagedType.IDispatch)	With  ```C#  public class Class  {   public object GetVal([Optional, MarshalAsAttribute(UnmanagedType.IDispatch)]object val) => val;  }  ```    Then a static call to `GetVal()` will return null, but via `dynamic` it will return `System.Reflection.Missing`.    This works correctly in NetFX. (Was `UnmanagedType.IDispatch` once not available in CoreFX?)
25508	area-Microsoft.CSharp	Have Microsoft.CSharp pick correct default for optional MarshalAs(UnmanagedType.IDispatch)	* Use null as default for optional parameters that marshal as `IDispatch`    Fixes #25507    * Don't allocate six arrays for empty parameters in `MethodOrPropertySymbol`    (A common case)    * More tests for default parameter value handling    * Remove dead path from `SetParameterAttributes`    Looks for default decimal value, but we've already looked for that via `DecimalConstantAttribute` which is the only way to set it.  
25509	area-System.Runtime	Reuse HashHelpers for BinaryFormatter objectholder hashes	Fixes https://github.com/dotnet/corefx/issues/25533  Fixes https://github.com/dotnet/corefx/issues/24902    With https://github.com/dotnet/corefx/pull/17949 we increased the MaxArrazSize of ObjectHolders. Because of that change our largest prime number 6584983 can now be smaller than the max size of an array. By @danmosemsft suggestion I'm reusing the HashHelpers utility class to utilize larger pre-computed prime numbers and remove the logic for calculating the next optimal prime number.  This also changes the start prime number size as before it was 5 and now it is 3. When I'm off plane I will add benchmarks with performance numbers. A quick test didn't show any noticeable performance regressions.    @Alois-xx I'm marking issue #24902 as fixed. As @stephentoub already mentioned we brought back BinaryFormatter for a smoother transition from .NET Framework to .NET Core and don't intend to optimize it further. If you want to, you can work by yourself on changing the data structure to remove the necessity of the pre-computed prime numbers and therefore the virtual limit. That would require extensive tests to be confident that we don't break or regress existing code.    cc @joperezr 
25510	area-System.Numerics	Vectorize Quaternion	Contributes to https://github.com/dotnet/corefx/issues/7751    PTAL @mellinoe @eerhardt @tannergooding @CarolEidt 
25511	area-System.Net	Issue #23141 Fix ManagedHandler cancellation Tests	An attempt to solve #23141. There are two parts to the PR.  1. Improving the cancellation support in ManagedHandler: this employs handling the cancellation via the CancellationToken while allowing the operation to still run in background (as discussed in [this](https://github.com/dotnet/corefx/issues/23141#issuecomment-346678600) comment). The idea is based on the blog article [here](https://blogs.msdn.microsoft.com/pfxteam/2012/10/05/how-do-i-cancel-non-cancelable-async-operations/) :-)    2. Even with the above 'by-pass' fix, the test 'ReadAsStreamAsync_ReadAsync_Cancel_TaskCanceledQuickly' still hanged while doing `ReadAsync` from the stream. In case of `ManagedHandler` the response stream is of type `ContentLengthReadStream` which needed fix on the lines of cancelable functionality in `WinHttpResponseStream` ([here](https://github.com/dotnet/corefx/blob/035b1e367c18db600c9d7158102fd2ab4e7a7ed2/src/System.Net.Http.WinHttpHandler/src/System/Net/Http/WinHttpResponseStream.cs#L216))    I am still trying to find out how to close / dispose the HttpConnection or the stream instead of allowing the operations to run in the background, consequences of which I am not very sure of.    @stephentoub, I have created this PR as we discussed [here](https://github.com/dotnet/corefx/issues/23141#issuecomment-340493361). Appreciate your inputs.    Thanks,  Mandar
25512	area-Infrastructure	"Remove suffix "".sh"" from Unix shell scripts such as ""build.sh"" - let the shebang line do its job"	On Unix platforms, it is solely the executable bit that determines whether files are executable - irrespective of the filename or its suffix (extension, in Windows-speak).    A file marked as executable that happens to be a _script_ file specifies the executable (interpreter) to use via its _shebang line_,  the very first line which looks something like `#!/usr/bin/env bash`.    Therefore, **rename `build.sh` to just `build`, ...**  - **suffix `.sh` is technically unnecessary and generally a bad habit.**    Omitting the `.sh` suffix will make invocation on Unix more like on Windows:    ```cmd  :: cmd.exe  build    # PowerShell  ./build  ```    ```sh  # bash  ./build  ```    Note that, for security reasons, the `./` part is necessary in order to invoke an executable in the current dir. on Unix platforms, just as it is in PowerShell.  
25513	area-System.Net	The certificate authority is invalid or incorrect exception while using .NET standard 2.0	@jainankit2474 commented on [Sun Nov 26 2017](https://github.com/dotnet/standard/issues/592)  My problem here is specifically in .Net standard 2.0 and .Net core 2.0, since the same code, seems to work fine with .net framework 4.6.1.    In .NET framework, we are using following code to trust all certificates:    `ServicePointManager.ServiceCertificateValidationCallback += (o, c, ch, er) => true;`    But the same code is not working with .NET core 2.0 and .NET standard 2.0.    I have also tried the below code:    `var httpClientHandler = new HttpClientHandler();  httpClientHandler.ServiceCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;`    But this is not working for me.  'An error occurred while sending the request, The certificate authority is invalid or incorrect' exception has been thrown.    ![image](https://user-images.githubusercontent.com/25975246/33242042-855d6ba6-d2f4-11e7-841c-483f82159d49.png)      Please suggest me any alternative solution for the self-signed certificate in .NET standard 2.0.  ---  @Petermarcu commented on [Sun Nov 26 2017](https://github.com/dotnet/standard/issues/592#issuecomment-347051864)  This may be an issue with the implementation of those API's in .NET Core 2.0. I'm going to move this issue to .NET Core so that can be determined.  
25515	area-Infrastructure	corefx build fails with  zero as null pointer constant	I am trying to build corefx for raspberry pi with clang 5.0. I am betting below error at multiple places.    /src/Native/Unix/System.Native/pal_random.cpp::9494::2222::      errorerror: : zero as null pointer constant [-Werror,-Wzero-as-null-pointer-constant]zero as null pointer constant [-Werror,-Wzero-as-null-pointer-constant]          srand48(time(NULL));        srand48(time(NULL));                       ^~~~                     ^~~~                       nullptr                     nullptr    /corefx/2.0.0-r0/recipe-sysroot-native/usr/lib/clang/5.0.1/include/stddef.h::100100::1818::  notenote: : expanded from macro NULL expanded from macro NULL   `#` define NULL __null#    define NULL __null    Any suggestion would be of great help.
25516	area-System.Net	System.Net.Http.dll 4.6.25220.1? System.Net.Http.dll 4.6.25514.4???	@ghd258 commented on [Thu Nov 16 2017](https://github.com/dotnet/core/issues/1098)  System.Net.Http.dll 4.6.25220.1?  System.Net.Http.dll 4.6.25514.4 ??? ??NuGet???4.6.25514.4 ????  ---  @Petermarcu commented on [Sun Nov 26 2017](https://github.com/dotnet/core/issues/1098#issuecomment-347080256)  Translated:  System.Net.Http.dll 4.6.25220.1 and System.Net.Http.dll 4.6.25514.4 is not compatible and NuGet is not 4.6.25514.4 this version    @davidsh is this another instance of the OOB/Binding redirect challenges with System.Net.Http?  
25517	area-Infrastructure	FreeBSD: building corefx managed components fails on ODBC32 namespace	Dear All,    I am on Windows 10, and I am referring specifically to:  https://github.com/dotnet/corefx/wiki/Building-.NET-Core--2.x-on-FreeBSD#user-content-building-managed-components-on-windows    As well as the Linux counterpart. I tried:  1) `build.cmd` with default flags. This works, but I am well uncertain what to copy to my FreeBSD (11) system.  2) `build-managed.cmd` with the same flags recommended for Linux. The build fails at:    ```System.Data.forwards.cs(10,83): error CS0234: The type or namespace name 'ODBC32' does not exist in the namespace 'System.Data.Odbc' (are you missing an assembly reference?)```    3) The same on Ubuntu 16.04, on Hyper-V (using both build.sh and build-managed.sh). Same failure as on Windows. Corefx revision is:  `commit d61b6095568c18cb5e24cff24e0ecf488dfe0f75`    Furthermore, I am uncertain what to do with the binaries, should I be able to produce them. From the following passage, I seem to understand which binaries/libraries are required for testing: should I just move that set of files to `/usr/.../bin` in order to access them globally?
25518	area-System.IO	readdir_r: align read buffer at dirent	This avoids unaligned access when readdir_r is filling the dirent.    CC @stephentoub 
25519	area-System.Net	System.Uri fails for umlaut characters	Loading a XML document (System.Xml.Linq.XDocument.Load(String uri, LoadOptions options)) fails when the path to the XML file contains an umlaut.    Call stack  ```  ERROR: The given path's format is not supported.     at System.IO.Path.GetFullPath(String path)     at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)     at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize)     at System.Xml.XmlDownloadManager.GetStream(Uri uri, ICredentials credentials, IWebProxy proxy, RequestCachePolicy cachePolicy)     at System.Xml.XmlUrlResolver.GetEntity(Uri absoluteUri, String role, Type ofObjectToReturn)     at System.Xml.XmlTextReaderImpl.FinishInitUriString()     at System.Xml.XmlTextReaderImpl..ctor(String uriStr, XmlReaderSettings settings, XmlParserContext context, XmlResolver uriResolver)     at System.Xml.XmlReaderSettings.CreateReader(String inputUri, XmlParserContext inputContext)     at System.Xml.XmlReader.Create(String inputUri, XmlReaderSettings settings)     at System.Xml.Linq.XDocument.Load(String uri, LoadOptions options)     at Fable.CLI.ProjectCracker.getFsprojSourceFiles(String projFile)     at Fable.CLI.ProjectCracker.crackProjects@242(FSharpList`1 acc, FSharpChoice`2 projFile)     at Microsoft.FSharp.Collections.SeqModule.FoldBack[T,TState](FSharpFunc`2 folder, IEnumerable`1 source, TState state)     at Fable.CLI.ProjectCracker.getProjectOptionsFromFsproj(Message msg, String projFile)     at Fable.CLI.ProjectCracker.retry@286(FSharpChecker checker, Message msg, String projFile, DateTime retryUntil, Unit unitVar0)     at Fable.CLI.ProjectCracker.retryGetProjectOpts(FSharpChecker checker, Message msg, String projFile)     at Fable.CLI.ProjectCracker.getFullProjectOpts(FSharpChecker checker, Message msg, String projFile)     at Fable.CLI.StateUtil.createProject(FSharpChecker checker, Boolean isWatchCompile, FSharpOption`1 prevProject, Message msg, String projFile)     at Fable.CLI.StateUtil.updateState(FSharpChecker checker, FSharpMap`2 state, Message msg)     at Fable.CLI.StateUtil.loop@195-6.Invoke(Tuple`2 _arg1)  ```  Issue arose when trying to build Fable (http://fable.io/ - uses dotnet core to compile F# to javascript ) project and it seems that any umlaut in the path will case an error. More background information available here: https://github.com/fable-elmish/templates/issues/46  
25520	area-System.Net	Weird issue with httpClient	I am testing my code in my win10 dev machine and works fine.    ```  //mycode  HttpResponseMessage response = await client.GetAsync(uri);  ```    When i try it in a winServer2012 r2   I get     ```  System.Net.Http.WinHttpException (0x80072F8F): A security error occurred     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Threading.Tasks.RendezvousAwaitable`1.GetResult()     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext()    An error occurred while sending the request.     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()     at NextcloudClient.NextCloudPublicSharesClient.<_getLoginRequestToken>d__15.MoveNext() in C:\Projects\httpIssues\httpIssues\NextcloudClient\NextCloudPublicClient.cs:line 396  ...  ```    My pc with is in the same network with the devServer in the same AD  My code was working before upgrading to .net core 2.0.3  
25521	area-Microsoft.CSharp	dynamic and private protected	"Currently Microsoft.CSharp treats access to a method that `IsFamilyAndAssembly` the same as it does one that `IsAssembly`, allowing it to be called as long as the call-site is from the same assembly.    Until recently this was valid for the static compiler (since it couldn't create a method that was `IsFamilyAndAssembly` there couldn't be one in the assembly being compiled, so any encountered must be in another assembly and therefore the access in practice must be the same as if it was `IsAssembly`) and incorrect but obscure for the dynamic binder (you can create a situation where it comes up, through manually coding against the API, but not through the use of `dynamic`).    With C#7.2 introducing [`private protected`](https://github.com/dotnet/csharplang/issues/37) this is no longer the case and it would be quite easy to write a dynamic call that broke the rules:    ```C#  public class A  {   private protected void Method(int x)   {   }  }    public class B  {   public void CheatPrivateProtected(A a)   {    dynamic d = a;    d.Method(2);   }  }  ```    This should probably be changed.    Doing so is a breaking change, but an obscure one: In order to have code that would be broken until recently it would have to be:    1. Using a library that had a `IsFamilyAndAssembly` member (rare)  2. Manually calling `Binder.InvokeMember` or such rather than using `dynamic` (rare, and using a method documented as ""This API supports the product infrastructure and is not intended to be used directly from your code."")  3. Setting the call site of the `CallSite` created to be a type that is internal to the other library (very rare) but neither the type invoked on nor a type derived from it (extremely rare, and pointless).    Doing so after there is more use of `private protected` would be a bigger break, so it is probably a good idea to make the change before then.    It will also mean incompatibility with netfx unless it also makes a comparable change."
25523	area-Microsoft.CSharp	Implement private protected in Microsoft.CSharp	Make Microsoft.CSharp honour the access of `IsFamilyAndAssembly` as is set by [private protected in C#7.2](https://github.com/dotnet/csharplang/issues/37)    Fixes #25521    See #25521 for discussion on both change impact and potential issues if C# makes `IsFamilyAndAssembly` more available but this change is not made.
25524	area-System.IO	Unix: Remove MaxPath, MaxName	PATH_MAX is not an upper bound on path lengths on Unix. system function return  values should be used to determine behavior, instead of limiting the path length.    MaxName is not used. When used, it should take into account the file system at  that path.
25525	area-System.Net	SocketOptionName.MulticastInterface not supported with Linux IPv6	Set the multicast interface socket option on IPv6 socket causes a SocketException    ```c#  using System;  using System.Net.Sockets;    namespace client  {      class Program      {          static void Main(string[] args)          {              var socket = new Socket(AddressFamily.InterNetworkV6, SocketType.Dgram, ProtocolType.Udp);              socket.SetSocketOption(SocketOptionLevel.IPv6, SocketOptionName.MulticastInterface, 1);          }      }  }  ```    When run this on Ubuntu Linux with dotnet 2.0.4 results in a SocketException    ```  Unhandled Exception: System.Net.Sockets.SocketException: Operation not supported     at System.Net.Sockets.Socket.UpdateStatusAfterSocketErrorAndThrowException(SocketError error, String callerName)     at System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, Int32 optionValue, Boolean silent)     at System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, Int32 optionValue)     at client.Program.Main(String[] args) in /home/jose/client/Program.cs:line 11  ```    [EDIT] Add C# syntax highlight by @karelz
25526	area-System.Drawing	Don't directly throw Exception System.Drawing	"@safern i'm trying to fix ""throw new Exception()"" on System.Drawing(#23748) but as @karelz thought may be a compatibility concerns, with netfx. What do you think?I could split tests per platform, but i think that is not a good idea. Is it better to skip System.Drawing and go on with other?"
25527	area-System.Data	Don't directly throw Exception System.Data.SqlClient 	"I did some test [here](https://github.com/dotnet/corefx/compare/master...MarcoRossignoli:issue_23748_SqlClient#diff-4443802483f189746d4dcd5ca6e8d62c) on SqlClient(#23748) and i think it's a special case when exception is catch after throw. Maybe ""InvalidOperationException""? @JonHanna do you think is fine here?  @saurabh500 @corivera"
25528	area-System.Runtime	Added test for Delegate.CreateDelegate method	Added test for dotnet/coreclr#15196
25529	area-System.Runtime	thread contention at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.GetTypeInformation 	@AndresPabloGomez commented 4 days ago  Please change the method GetTypeInformation to use ReaderWriterLockSlim or something else, to access typeNameCache dictionary.     @msisterna commented 4 days ago  I have the same problem.
25530	area-System.Runtime	Design capability APIs	"We need to list & drive a design of capability APIs as explained here:    https://github.com/dotnet/designs/blob/master/accepted/compat-pack/compat-pack.md#non-goals    Instead of writing code like this:    ```csharp  private static string GetLoggingPath()  {      if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))      {          using (var key = Registry.CurrentUser.OpenSubKey(@""Software\Fabrikam\AssetManagement""))          {              if (key?.GetValue(""LoggingDirectoryPath"") is string configuredPath)                  return configuredPath;          }      }        var appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);      return Path.Combine(appDataPath, ""Fabrikam"", ""AssetManagement"", ""Logging"");  }  ```    we should be promoting code like this:    ```csharp  private static string GetLoggingPath()  {      if (Registry.IsSupported)      {          using (var key = Registry.CurrentUser.OpenSubKey(@""Software\Fabrikam\AssetManagement""))          {              if (key?.GetValue(""LoggingDirectoryPath"") is string configuredPath)                  return configuredPath;          }      }        var appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);      return Path.Combine(appDataPath, ""Fabrikam"", ""AssetManagement"", ""Logging"");  }  ```"
25531	area-System.Console	WindowAndCursorProps.Title_Set_Windows(lengthOfTitle: 1024) failed with ThrowsException	"Happening on my local machine: Windows 10 RS4 17046    ```   <test name=""WindowAndCursorProps.Title_Set_Windows(lengthOfTitle: 1024)"" type=""WindowAndCursorProps"" method=""Title_Set_Windows"" time=""14.5858609"" result=""Fail"">          <traits>            <trait name=""category"" value=""nonlinuxtests"" />            <trait name=""category"" value=""nonosxtests"" />            <trait name=""category"" value=""nonfreebsdtests"" />            <trait name=""category"" value=""nonnetbsdtests"" />            <trait name=""category"" value=""nonuaptests"" />            <trait name=""category"" value=""nonuapaottests"" />          </traits>          <failure exception-type=""System.Diagnostics.RemoteExecutorTestBase+RemoteInvokeHandle+RemoteExecutionException"">            <message><![CDATA[System.Diagnostics.RemoteExecutorTestBase+RemoteInvokeHandle+RemoteExecutionException : Remote process failed with an unhandled exception.]]></message>            <stack-trace><![CDATA[  Child exception:    Xunit.Sdk.ThrowsException: Assert.Throws() Failure  Expected: typeof(System.IO.IOException)  Actual:   (No exception was thrown)     at WindowAndCursorProps.<>c.<Title_Set_Windows>b__11_0(String lengthOfTitleString) in D:\git\corefx\src\System.Console\tests\WindowAndCursorProps.cs:line 161    Child process:    System.Console.Tests, Version=4.1.1.0, Culture=neutral, PublicKeyToken=9d77cc7ad39b68eb WindowAndCursorProps+<>c Int32 <Title_Set_Windows>b__11_0(System.String)    Child arguments:    1024  ]]></stack-trace>          </failure>        </test>  ```"
25532	area-System.Console	Disable console title workaround for >=RS4	Fixes https://github.com/dotnet/corefx/issues/25531    cc @joperezr @ianhays 
25533	area-System.Collections	Right sizing HashSet ctor is allocating too many elements	When initializing a HashSet like this:    ```csharp  new HashSet<string>(80_000_000);  ```    the underlying arrays (buckets and slots) will not have the size of ~80M (its next prime number) but the size of the next prime number in the pre-computed list, which is 92_434_613. This is an oversize of 11.55% and is not expected by the user. The worst case is that the array gets oversized by 20% because of the layout of the pre-computed prime numbers.    This was introduced by https://github.com/dotnet/corefx/pull/6203    cc @jkotas @stephentoub @danmosemsft 
25535	area-System.IO	Add overload to Path.GetFullPath() to specify base path	"We should add an overload that allows specifying the base path to resolve against if the given `path` isn't fully qualified.    ## Rationale and Usage    Resolving partially qualified paths (paths that are relative to the current directory) is error prone as it depends on the process-wide state of the current working directory. Allowing users to specify a virtual ""working directory"" will avoid many common errors caused by setting the current directory to resolve paths ""correctly"".    ``` C#  foreach (string file in sourceFiles)  {      resolvedSources.Add(Path.GetFullPath(file, projectRoot));  }  ```    ## Proposed API    ``` C#  namespace System.IO  {      public static class Path      {          public static string GetFullPath(string path, string basePath);      }  }  ```    ## Implementation Notes    - `basePath` will throw ArgumentNullException if null.  - `basePath` will throw ArgumentException if it does not meet `Path.IsPathFullyQualified()`.   - If `path` does not meet `Path.IsPathFullyQualified()`, it will be combined with the `basePath` before resolving.  - If the given path is drive relative on Windows (`C:foo`) we will combine with the `basePath` **if** the drive matches. If it does not, we will assume it is meant to be at the root of the specified drive. (Option: we could throw in this case...)  "
25536	area-System.IO	Need Span based path join API	"We need an API that does a simple join of `ReadOnlySpan<char>` segments, adding a directory separator only if needed.      ## Rationale and Usage    We don't have API for combining paths that works with `Span<char>`. It will become common that segments of existing strings will be combined into paths. A simple example will be getting a filename from an existing path and adding it to the directory of another.    ``` C#  // entry.FileName being a ReadOnlySpan<char>, directory being a string or span  string path = Path.Join(directory, entry.FileName);  ```    We could add overloads for `Path.Combine()`, but the behavior of returning the last argument that passes `IsPathRooted()` isn't intuitive, and is not desired in the common case. If the intent was to ""resolve"" a path against another, getting the final path correct is difficult to do, particularly on Windows.  Take the following:    ``` C#  string result = Path.Combine(@""C:\Foo"", @""\Bar"");  ```    This returns `\Bar`, which can only be correctly resolved (via `Path.GetFullPath()`) if the current directory happens to be on the `C:` drive. This can be better handled by the #25535 proposal for Path.GetFullPath().    Additionally, it is common for people to use the existing `Combine()` APIs on paths that aren't file system paths (URIs, registry paths, etc.).    ## Proposed API    ``` C#  namespace System.IO  {      public static class Path      {          public static string Join(ReadOnlySpan<char> path1, ReadOnlySpan<char> path2);          public static string Join(ReadOnlySpan<char> path1, ReadOnlySpan<char> path2, ReadOnlySpan<char> path3);          public static bool TryJoin(Span<char> destination, out int charsWritten, ReadOnlySpan<char> path1, ReadOnlySpan<char> path2);      }  }  ```    ## Implementation Notes    - We will add the default directory separator if either type of separator is not already present (we'll allow an existing AltDirectorySeparator to be valid)  - Only spans that have a length will be combined  - We will not care about rooting (unlike the existing Combine APIs)  - This will not check the validity of the given paths in any way (character validity, etc)"
25539	area-System.IO	Need Span overloads for Path APIs	In order to reduce allocations for path generation and manipulation we need Span overloads for `System.IO.Path` APIs.    ## Proposed API    ``` C#  namespace System.IO  {      public static class Path      {          public static ReadOnlySpan<char> GetDirectoryName(ReadOnlySpan<char> path);          public static ReadOnlySpan<char> GetExtension(ReadOnlySpan<char> path);          public static ReadOnlySpan<char> GetFileName(ReadOnlySpan<char> path);          public static ReadOnlySpan<char> GetFileNameWithoutExtension(ReadOnlySpan<char> path);          public static ReadOnlySpan<char> GetPathRoot(ReadOnlySpan<char> path);          public static bool HasExtension(ReadOnlySpan<char> path);          public static bool IsPathFullyQualified(ReadOnlySpan<char> path);          public static bool IsPathRooted(ReadOnlySpan<char> path);      }  }  ```    ## Implementation Notes    - If the current APIs return null, these would return an empty span.
25542	area-System.Data	Don't directly throw Exception System.Data.SqlClient	Closes #25527 and contributes to #23748
25544	area-System.Net	Fix MulticasInterface SocketOption to work with IPv6 on Linux	Fixes #25525
25546	area-System.Runtime	Expose Stream.CopyToAsync overload without buffer size	How do you feel about tests for this? Do you have any pointers to any existing tests for reference?    Closes #23312
25548	area-System.Net	Ctor of System.Uri transform Uri to lowercase	"I got into this bug when was moving library to .Net Standard 2:  When we construct Uri by combining two Uri's, one with absolute path, and another with Relative:  `var sut = new Uri(new Uri(""https://your_azure_account.restv2.westeurope.media.azure.net/api/"", UriKind.Absolute), new Uri(""ContentKeys('nb:kid:UUID:7deef38d-3432-4747-a5b2-0cd2f06a6edd')/GetKeyDeliveryUrl"", UriKind.Relative));`    It lowers ""ContentKeys"":  `https://your_azure_account.restv2.westeurope.media.azure.net/api/contentkeys('nb:kid:UUID:7deef38d-3432-4747-a5b2-0cd2f06a6edd')/GetKeyDeliveryUrl`  instead of   `https://your_azure_account.restv2.westeurope.media.azure.net/api/ContentKeys('nb:kid:UUID:7deef38d-3432-4747-a5b2-0cd2f06a6edd')/GetKeyDeliveryUrl`  which you'll get e.g. in .Net 4.7.2.     Interesting, but GetKeyDeliveryUrl isn't getting lowered.    This bug breaks retrieving of key delivery Url if you're using Microsoft.Data.Services.Client library."
25550	area-System.Drawing	IconCodecTest.Bitmap16Pixels failed on netfx in CI	https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_false_prtest/5682/consoleText  ```  MonoTests.System.Drawing.Imaging.IconCodecTest.Bitmap16Pixels [FAIL]          System.ArgumentException : Parameter is not valid.          Stack Trace:               at System.Drawing.Bitmap..ctor(String filename)               at MonoTests.System.Drawing.Imaging.IconCodecTest.Bitmap16Pixels()  ```
25552	area-System.Net	enable multicast test on Fedora again	https://github.com/dotnet/corefx/issues/24036 should fix the problem.       @dotnet-bot test Outerloop Linux x64 Debug Build please  @dotnet-bot test Outerloop Linux x64 Release Build please      
25553	area-System.Runtime	Expose/test double.TryFormat and float.TryFormat	Depends on https://github.com/dotnet/coreclr/pull/15246  Depends on https://github.com/dotnet/corert/pull/5036  Fixes dotnet/corefx#25373
25554	area-Infrastructure	Missing line numbers for NETFX test and code	In at least some cases, eg https://github.com/dotnet/corefx/issues/25550 dumped:  ```          Stack Trace:               at System.Drawing.Bitmap..ctor(String filename)               at MonoTests.System.Drawing.Imaging.IconCodecTest.Bitmap16Pixels()  ```    May need someone to use the Helix repro tool to see why.
25557	area-System.Data	fix ODBC build break on FreeBSD	"Unlike some other assemblies where there is stub of UnknownUnix ODBC failed on FreeBSD.    This fixes #25517 and it is part of #1626   Odbc on FreeBSD is same as Linux and comes from unixODBC package.     With this ""./build.sh  -OS=FreeBSD  -SkipManagedPackageBuild"" works again on FreeBSD 11. "
25559	area-System.Diagnostics	Make Process.Start wait for child process to exec on OSX	OSX doesn't have pipe2. SystemNative_Pipe() is used instead.  https://github.com/dotnet/corefx/pull/5421 this workaround seems only working on Linux. SystemNative_Pipe() can be used to allow OSX which doesn't have `pipe2()` to create `waitForChildToExecPipe` pipe with `FD_CLOEXEC` flag set during child process creation.  Please review. Thanks.    Fixes: https://github.com/dotnet/corefx/issues/23972  Refs: https://github.com/dotnet/corefx/pull/5421
25560	area-System.Net	" Revert ""Minor change to avoid an allocation in Uri"""	Fixes https://github.com/dotnet/corefx/issues/25548    While https://github.com/dotnet/corefx/pull/12061 looked simple, the removal of the allocation actually broke this behavior (and worse, broke string immutability) because the CheckSchemeSyntax method that's called actually mutates the `char*` that's passed in.  This code was bad to begin with, as this was always (even in netfx) mutating a string instance, but that PR made it worse and broke this because it ends up passing in / mutating the original string rather than a copy that's mutated and then thrown away.    The removal of the allocation can be re-done in a different way.  For now, though, we need to revert.    cc: @davidsh, @jamesqo
25561	area-System.Net	Unsealing HttpRequestHeaders and HttpResponseHeaders	"The built-in [HttpRequestHeaders](https://github.com/dotnet/corefx/blob/master/src/System.Net.Http/src/System/Net/Http/Headers/HttpRequestHeaders.cs) and [HttpResponseHeaders](https://github.com/dotnet/corefx/blob/master/src/System.Net.Http/src/System/Net/Http/Headers/HttpResponseHeaders.cs) types contain properties for many HTTP headers like `ExpectContinue`, `Host` and so on.     It would be useful if users could add extend these types and add their own properties (maybe Acme Inc. uses a custom `X-Acme-Awesomeness` header for internal usage and wants to add a property for easy access). However, this can currently not be done since the types are sealed. The closest alternative is to use `GetValues(""X-Acme-Awesomeness"").First()`, which is messier.    A good example is that `HttpResponseHeaders` does not contain a property for the HTTP `Set-Cookie` field.    Another idea may be to wait to see if C# 8.0 includes extension properties, which would be a solution here."
25562	area-Serialization	fix sgen if/else issue	Port the if/else fix from SG to corefx. Fix another if/else issue when write member elements only when the total number of members is bigger than 1000.    Fix #25248     @shmao @zhenlan @mconnew 
25563	area-System.Net	Ensure HttpListener request buffer is aligned as required by the host processor	On Windows, the HttpRecieveHttpRequest function requires a buffer with a memory alignment greater than or equal to the required alignment of the HTTP_REQUEST struct.     This fix ensures that alignment requirements are respected when allocating buffers in HttpListener RequestContextBase. Since HttpReceiveHttpRequest copies both the HTTP_REQUEST struct and the variable length request body into the buffer, we need to be able to allocate a buffer with variable size and with a set alignment. Since C# does not provide a method for specifying the alignment of byte arrays, I switched the underlying buffer to be unmanaged. This unmanaged buffer is allocated using Marshal.AllocHGlobal, which allocates memory at the maximum alignment required by the host processor.    I'm new to writing code on the border between managed and unmanaged, and so I would appreciate any suggestions on how to improve things here.     Fixes #25289  
25565	area-Infrastructure	Not For Merge	This is to check whether dumpling and helix are creating dumps for hung processes
25566	area-System.Runtime	Improve BinaryFormatter equality check logging	If I could rewrite time I would have made all the equality checks with Assert...    PS: the GitHub diff is useless here.
25567	area-Serialization	Make the target works for exe.	Fix #25320   @shmao @zhenlan @mconnew 
25569	area-System.IO	Proposed API for symbolic links	# Rationale    The ability to interact with symbolic links (symlinks) in .NET is currently limited to determining that a file is `ReparsePoint`.  This proposed API provides the ability to identify, read, and create symbolic links.    # Proposed API  ```C#  public class Directory  {      public static DirectoryInfo CreateSymbolicLink(string linkPath, string targetPath);      public static string GetSymbolicLinkTargetPath(string linkPath);      public static bool IsSymbolicLink(string path);  }    public class File  {      public static FileInfo CreateSymbolicLink(string linkPath, string targetPath);      public static string GetSymbolicLinkTargetPath(string linkPath);      public static bool IsSymbolicLink(string path);  }    public class FileSystemInfo  {      public bool IsSymbolicLink { get; }      public string SymbolicLinkTargetPath { get; }        public void CreateSymbolicLink(string linkPath);  }  ```    # Details  The path returned from `GetSymbolicLinkTargetPath(string)`/`SymbolicLinkTargetPath` will be returned exactly as it is stored in the symbolic link.  It may reference a non-existent file or directory.    For the purposes of this API, NTFS Junction Points are considered to be like Linux bind mounts and are not considered to be symbolic links.    # Updates  - Move `GetSymbolicLinkTargetPath` and `IsSymbolicLink` from `Path` to `Directory`, `DirectoryInfo`, `File` and `FileInfo`.  - Add `CreateSymbolicLink`.  - Split from #24685.  - Change `path` to `linkPath` where a link file's path is desired.  - Move the APIs to the `FileSystemInfo` base class.
25572	area-System.Net	 .net core 2.0 calling Socket.Select caused high cpu usage.	_From @zl-cn on November 29, 2017 5:54_  System: windows 10  Platform: .net core 2.0  under .net core 2.0 calling Socket.Select caused high cpu usage.  but under .net 4.6 it's ok.  simple code:    while(true) { Socket.Select(checkRead, checkWrite, checkError, 0); if (checkError.Count == 0 && checkWrite.Count == 0 && checkRead.Count == 0) { Thread.Sleep(10); continue; } }  _Copied from original issue: dotnet/coreclr#15264_
25574	area-System.Net	SslStream RemoteCertificateValidationCallback cannot access protocol/cipher info	The `RemoteCertificateValidationCallback` is [documented](https://msdn.microsoft.com/en-us/library/ms145057(v=vs.110).aspx?f=255&mspperror=-2147217396#Anchor_2) as being able to access these values and potentially choose to reject the connection based on them:    > The security protocol and cryptographic algorithms are already selected when the `userCertificateValidationCallback` delegate's method is invoked. You can use the method to determine whether the selected cryptographic algorithms and strengths are sufficient for your application. If not, the method should return false to prevent the `SslStream` from being created.    Currently this doesn't work, because attempting to access them [throws an `InvalidOperationException`](https://github.com/dotnet/corefx/blob/master/src/System.Net.Security/src/System/Net/Security/SslState.cs#L244). Ideally, please can this be fixed to work as documented (I only skimmed the code briefly but I don't see any need for the `authSuccessCheck` here?).    If it's not practical to make it work as advertised for some reason, please can the documentation be fixed - which I will happily do myself if someone points me in the direction of the right place to PR.    N.B. I am trying to implement this with `AuthenticateAsServer()`, I haven't checked whether it may work as documented for a client-side stream, I will try it out when I can and update the issue if no-one else has checked it first.    Related to https://github.com/dotnet/corefx/issues/24588 / https://github.com/dotnet/corefx/issues/21577 in the sense that if I was able to specify the cipher set that can be used, I wouldn't need to do this as I could simply disable the ciphers I want to disallow with high-level configuration rather than manually checking per-connection.
25575	area-System.Runtime	DataTable serialization incorrectly depends on the Current Culture's Number Format Info	"Ported manually from here https://github.com/Microsoft/dotnet/issues/471 (Zenhub doesn't allow moving issues between organizations)    @logiclrd commented on Sep 1:    We have a client reporting problems with our application because they have configured the Windows Region & Language settings to use the string ""()"" as the negative sign for number formatting. This seems to be traceable back to the fact that the DataTable in question has a custom schema that specifies negative values for the autoincrement seed & step. When DataTable is trying to deserialize the schema, it assumes that the quantity negative one should look like ""()1"" and therefore does not recognize the ""-1"" in the XML data. Some quick testing reveals that a DataTable serialized under these conditions produces correct XML representing ""-1"" as ""-1""; this issue affects only deserialization.    This issue only comes up when properties in the table's schema have negative values. Negative values in the row data do not trigger the problem.    Our client has informed us that this configuration is deliberate and desired. The only control we have over DataTable deserialization seems to be to override the entire process's CultureInfo.CurrentCulture, which in turn means that reports produced by our software will not use the ""()1"" format the client desires. There does not appear to be a way to work around this issue only for DataTable serialization/deserialization and without affecting other number formatting in the application.  The following code reproduces the issue:    ```csharp     var serializer = new BinaryFormatter();                var table = new DataTable();                table.Columns.Add(                  new DataColumn(""RowID"", typeof(int))                  {                      AutoIncrement = true,                      AutoIncrementSeed = -1, // These lines produce attributes within the schema portion of the underlying XML representation of the DataTable with the value ""-1"".                      AutoIncrementStep = -1,                  });                table.Columns.Add(""Value"", typeof(string));                table.Rows.Add(1, ""Test"");              table.Rows.Add(2, ""Data"");                var buffer = new MemoryStream();                serializer.Serialize(buffer, table);                CultureInfo.CurrentCulture =                  new CultureInfo(""en-US"")                  {                      NumberFormat =                          new NumberFormatInfo()                          {                              NegativeSign = ""()"" // DataTable's deserialization incorrectly uses this to ascertain the number format for deserializing the schema properties.                          }                  };                buffer.Position = 0;                var table2 = (DataTable)serializer.Deserialize(buffer); // System.Exception: ""-1 is not a valid value for Int64.""  ```    cc @weshaggard @danmosemsft @richlander "
25578	area-System.Net	Remove XunitShowProgress from System.Net.Sockets.Tests	Shouldn't have been merged.  It's spamming the log.
25579	area-System.Net	Add basic Socket.IOControl implementation on Unix	Socket.IOControl uses Windows-specific code values, both in terms of the actual code numbers and in terms of lots of them being Windows-specific functionality.  But a few of the codes do translate across OSes in terms of functionality, and we've heard from at least a few developers who were using these codes and expected them to work on Unix.    cc: @geoffkizer, @tmds 
25580	area-Infrastructure	DatasetExtensions is not in the compat pack	Nor on Nuget. It looks like it was overlooked. We need to grab a signed version and put it up on Nuget. Also add to the pack authoring, but we don't need to republish the whole pack for this.    @safern 
25581	area-System.Net	SslStream using intermediate CA certificates	The SslStream class on Linux doesn't use the user personal certificate store to build the certificate chain    I have create a simple client server test to reproduce the issue https://github.com/pepone/netstreamtest
25582	area-System.Runtime	Make DateTIme.Now as efficient as DateTime.UtcNow	@vancem commented on [Tue Sep 05 2017](https://github.com/dotnet/coreclr/issues/13789)  I thought we fixed this but I just checked and we have not, so I am logging an issue.    DateTime.Now is over 10X SLOWER than DateTime.UtcNow.       I ran the the trivial program below  ```c#              var start = DateTime.Now;              while ((DateTime.Now-start).TotalSeconds < 5)              {                }  ```  while profiling with [PerfView](https://github.com/Microsoft/perfview)  to get the following data    Name | Inc % | Inc  -- | -- | --  \|\|    \|+ system.private.corelib!System.DateTime.get_Now() | 95.4 | 4,832  \|\|    \| + system.private.corelib!TimeZoneInfo.GetDateTimeNowUtcOffsetFromUtc | 88.1 | 4,462  \|\|    \| + system.private.corelib!System.DateTime.get_UtcNow() | 5.8 | 293    which show that only 6% of time is spent actually fetching the time, and 95% of the time was figuring out what time zone we are in.      This mapping from Utc time to local time could be cached and all the inefficiency removed.      This is important because people DO use DateTIme.Now to measure the durations of fast things (in fact we improved DateTime.UtcNow so that it has a accuracy of < 1msec).    Currently we tell people to avoid DateTime.Now (use DateTime.UtcNow), to avoid this inefficiency, but we could easily make DateTIme.Now almost the same cost     This is only a small amount of work, we should just do it.     @danmosemsft , @karelz     ---  @mikedn commented on [Tue Sep 05 2017](https://github.com/dotnet/coreclr/issues/13789#issuecomment-327262909)  > Currently we tell people to avoid DateTime.Now (use DateTime.UtcNow), to avoid this inefficiency    I don't know about others but I avoid `DateTime.Now` not because it's inefficient but because it is plain wrong to use it to measure durations. Or more generally, to use it for anything that doesn't involve displaying the local time to the user...    Let's keep `DateTime.Now` slow to encourage devs to do the right thing ??  ---  @karelz commented on [Tue Sep 05 2017](https://github.com/dotnet/coreclr/issues/13789#issuecomment-327279813)  Marking as up-for-grabs.  Moderate cost (as it requires perf measurements before and after the change)  ---  @danmosemsft commented on [Tue Sep 05 2017](https://github.com/dotnet/coreclr/issues/13789#issuecomment-327292376)  > mapping from Utc time to local time could be cached    Of course, daylight savings could begin one second from now so it presumably can't be trivially cached. @tarekgh is there a way that DateTime can be told when the local time offset changes, instead of asking each call? I'm sure there has been thinking about this in the past.  ---  @tarekgh commented on [Tue Sep 05 2017](https://github.com/dotnet/coreclr/issues/13789#issuecomment-327297374)  > is there a way that DateTime can be told when the local time offset changes    No, we don't have a way to know that. We looked before, and the way you can know that (on Windows) is either you have a Window and listen to some window message or you use WinRT API. Obviously, both are not a good solution for us.     Also, it is difficult to know if we are passing the daylight saving at any moment to know we need to adjust the calculation (or the cache).     We already have some optimization here:  http://source.dot.net/#System.Private.CoreLib/src/System/TimeZoneInfo.Win32.cs,50    but we still doing the calculations here:  http://source.dot.net/#System.Private.CoreLib/src/System/TimeZoneInfo.Win32.cs,402    because of we cannot know if we crossed the daylight or not.     by the way, the optimization we have there has a bug. that can tell when trying to optimize, you can run into some other problems.           ---  @vancem commented on [Tue Sep 05 2017](https://github.com/dotnet/coreclr/issues/13789#issuecomment-327306683)  On the caching issue:   It seems to me that when you calculate daylight savings time, you can also know when it will change (at worst you probe say 4 hours into the future and see if it is different, since you know that daylight savings time only happens 2 a year, if you get the same number for now and 4 hours from now, you can know that for the next 4 hours it will not change).     The next time you want Now you can then just check if the time is in the 'known' region and if so use the cached DST value.    @mikedn - yes, arguably DateTime.Now is bad for computing deltas  (since any time you cross DST, you get a weird value).   However giving bad perf does not actually change behavior, it just makes their code that much worse.    There are also correct usages (when you just want a timestamp).    The bottom line is that if people use it at all frequently (and we have evidence that they do), it is worth optimizing.    ---  @tarekgh commented on [Tue Sep 05 2017](https://github.com/dotnet/coreclr/issues/13789#issuecomment-327316508)  @vancem yes, in general, I agree there is a way we can optimize. we just want to be careful to not affect the functionality and not have a complex solution.     To mention, instead of probing for some time (4 hours in your example) we can just calculate the exact time we are going to switch the daylight when we create the cache. and then we always check against this time to know if we need to update the cache or just use the cached offset.  ---  @danmosemsft commented on [Tue Sep 05 2017](https://github.com/dotnet/coreclr/issues/13789#issuecomment-327320861)  If the machine time zone changes, do we need to listen to that?   ---  @tarekgh commented on [Tue Sep 05 2017](https://github.com/dotnet/coreclr/issues/13789#issuecomment-327322383)  > If the machine time zone changes, do we need to listen to that?    Same answer:    ```  No, we don't have a way to know that. We looked before, and the way you can know that (on Windows) is either you have a Window and listen to some window message or you use WinRT API. Obviously, both are not a good solution for us.  ```    Today we ask the apps to listen to the TZ changes on the machine and then call us to clear the cache.   ---  @danmosemsft commented on [Wed Nov 29 2017](https://github.com/dotnet/coreclr/issues/13789#issuecomment-348010037)  Moving to CoreFX to track more easily.  
25586	area-Infrastructure	Create new property for OfficialBuildLeg and set it for offline build	"When doing an offline build, we need the identity package and runtime package to be built.  Adding an ""OfficialBuildLeg"" property and setting it based on OfficialBuildId being set or an OfflineBuild being in progress."
25588	area-System.Net	System.IO.FileNotFoundException: Could not load file or assembly 'System.Net.Http, Version=4.1.1.0	"I recently created a .NET Core 2.0 library that multitargeted `net46`. It included this in the .csproj file:    ```    <ItemGroup Condition=""'$(TargetFramework)'=='net46'"">      <Reference Include=""System.Net.Http"" />    </ItemGroup>      <ItemGroup Condition=""'$(TargetFramework)'=='netstandard2.0'"">      <PackageReference Include=""System.Net.Http"" Version=""4.3.3"" />      <PackageReference Include=""System.Net.Primitives"" Version=""4.3.0"" />      <PackageReference Include=""System.Net.Requests"" Version=""4.3.0"" />      <PackageReference Include=""System.Net.Sockets"" Version=""4.3.0"" />    </ItemGroup>  ```    I referenced this library is a .NET Framework 4.7 console app and get this exception:  ```  Unhandled Exception: System.IO.FileNotFoundException: Could not load file or assembly 'System.Net.Http, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified. ---> System.IO.FileNotFoundException: Could not load file or assembly 'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.  ```    I didn't see any warnings in the error list, but I decided to check the build log and found a conflict.    This is what I see in the detailed build log:  ```  1>  There was a conflict between ""System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"" and ""System.Net.Http, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"".  1>      ""System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"" was chosen because it was primary and ""System.Net.Http, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"" was not.  1>      References which depend on ""System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"" [C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7\System.Net.Http.dll].  1>          C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7\System.Net.Http.dll  1>            Project file item includes which caused reference ""C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7\System.Net.Http.dll"".  1>              System.Net.Http  ```    My `App.config` includes a redirect which should have been used  ```  <dependentAssembly>          <assemblyIdentity name=""System.Net.Http"" publicKeyToken=""b03f5f7f11d50a3a"" culture=""neutral"" />          <bindingRedirect oldVersion=""0.0.0.0-4.1.1.0"" newVersion=""4.1.1.0"" />        </dependentAssembly>  ```    What I don't fully understand in why System.Net.Http includes a reference to itself. Is this corruption of some sort or am I missing something?"
25590	area-System.Runtime	Concurrent Dictionary for BinaryFormatters	Fixes #25529  
25591	area-System.Reflection	Assembly.Load doesn't work for ASP.NET Core Web Application assembly targeting at net461	"Repro Step:  1. Create a ASP.NET Core Web Application targeting at net461.   2. Create a console app targeting netcoreapp2.0.   3. Use Assembly.Load to load the asp.net core app assembly created in step#1. I will get the FileLoadException ""Could not load file or assembly ..."". Is it expected?"
25595	area-Microsoft.CSharp	Test failure: Microsoft.Internal.GenerationServicesTests/EnumType	Opened on behalf of @Sunny-pu  The test `Microsoft.Internal.GenerationServicesTests/EnumType` has failed.  System.MissingMethodException : Method 'DynamicMethod..ctor(string, Type, Type[])' from assembly 'System.Reflection.Emit.Lightweight' was not included in compilation, but was referenced in GenerationServicesTests.CreateValueGenerator(T). There may have been a missing assembly, or a dependency on a more recent Windows SDK release.          Stack Trace:             at Microsoft.Internal.GenerationServicesTests.TestSuccessfulValueGeneration<System.UInt32>(UInt32 value)        at Microsoft.Internal.GenerationServicesTests.EnumType() in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\tests\System\ComponentModel\Composition\GenerationServicesTests.cs:line 66        at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetV(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall)        at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean isTargetThisCall)        at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566      Build : Master - 20171130.02 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x86   - Release - Windows.10.Amd64.ClientRS3-x64   - Release 
25596	area-System.ComponentModel	Test failure: System.ComponentModel.Composition.AdaptingCollectionTests/TestDyamicallyFilteringImports	Opened on behalf of @Sunny-pu  The test `System.ComponentModel.Composition.AdaptingCollectionTests/TestDyamicallyFilteringImports` has failed.  System.NullReferenceException : Object reference not set to an instance of an object.          Stack Trace:             at System.ComponentModel.Composition.ExportServices.CreateStronglyTypedLazyFactory(Type exportType, Type metadataViewType) in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\ExportServices.cs:line 57        at System.ComponentModel.Composition.ReflectionModel.ImportType.TryGetCastFunction(Type genericType, Boolean isOpenGeneric, Type[] arguments, Func$2<$Export,Object>& castFunction) in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\ReflectionModel\ImportType.cs:line 169        at System.ComponentModel.Composition.ReflectionModel.ImportType.Initialize(Type type) in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\ReflectionModel\ImportType.cs:line 135        at System.ComponentModel.Composition.ReflectionModel.ImportType..ctor(Type type, $ImportCardinality cardinality) in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\ReflectionModel\ImportType.cs:line 52        at System.ComponentModel.Composition.AttributedModel.AttributedModelDiscovery.CreateMemberImportDefinition(MemberInfo member, $ICompositionElement origin) in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\AttributedModel\AttributedModelDiscovery.cs:line 115        at System.ComponentModel.Composition.AttributedModel.AttributedPartCreationInfo.GetImportDefinitions() in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\AttributedModel\AttributedPartCreationInfo.cs:line 429        at System.ComponentModel.Composition.AttributedModel.AttributedPartCreationInfo.DiscoverExportsAndImports() in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\AttributedModel\AttributedPartCreationInfo.cs:line 256        at System.ComponentModel.Composition.AttributedModel.AttributedPartCreationInfo.GetExports() in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\AttributedModel\AttributedPartCreationInfo.cs:line 64        at System.ComponentModel.Composition.ReflectionModel.ReflectionComposablePartDefinition.get_ExportDefinitionsInternal() in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\ReflectionModel\ReflectionComposablePartDefinition.cs:line 65        at System.ComponentModel.Composition.ReflectionModel.ReflectionComposablePart.get_ExportDefinitions() in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\ReflectionModel\ReflectionComposablePart.cs:line 144        at System.ComponentModel.Composition.Factories.ExportProviderFactory.RecomposableExportProvider.<>c.<ChangeExports>b__5_1($Export export) in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\Hosting\ComposablePartExportProvider.cs:line 371        at System.ComponentModel.Composition.MetadataViewGenerator.MetadataViewFactory.Invoke(IDictionary$2<String,Object> metadata) in Invoke:line 16707566        at System.Linq.Enumerable.SelectManySingleSelectorIterator$2<System.__Canon,System.__Canon>.ToArray() in E:\A\_work\356\s\corefx\src\System.Linq\src\System\Linq\SelectMany.cs:line 232        at System.Linq.Enumerable.ToArray<System.__Canon>(IEnumerable$1<__Canon> source) in E:\A\_work\356\s\corefx\src\System.Linq\src\System\Linq\ToCollection.cs:line 18        at System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Recompose($CompositionBatch batch, $AtomicComposition atomicComposition) in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\Hosting\ComposablePartExportProvider.cs:line 370        at System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Compose($CompositionBatch batch) in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\Hosting\ComposablePartExportProvider.cs:line 273        at System.ComponentModel.Composition.Hosting.CompositionContainer.Compose($CompositionBatch batch) in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\Hosting\CompositionContainer.cs:line 397        at System.ComponentModel.Composition.AttributedModelServices.ComposeParts($CompositionContainer container, Object[] attributedParts) in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\AttributedModelServices.cs:line 169        at System.ComponentModel.Composition.AdaptingCollectionTests.TestDyamicallyFilteringImports() in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\tests\System\Integration\AdaptingCollectionTests.cs:line 351        at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetV(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall)        at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean isTargetThisCall)        at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566      Build : Master - 20171130.02 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x86   - Release - Windows.10.Amd64.ClientRS3-x64   - Release 
25597	area-System.ComponentModel	Test failure: System.ComponentModel.Composition.CatalogFilteringTests/FilteredCatalog_ScopeB	Opened on behalf of @Sunny-pu  The test `System.ComponentModel.Composition.CatalogFilteringTests/FilteredCatalog_ScopeB` has failed.  System.InvalidOperationException : There is no metadata token available for the given member.          Stack Trace:             at System.Reflection.Runtime.TypeInfos.RuntimeNoMetadataNamedTypeInfo.get_MetadataToken() in f:\dd\ndp\fxcore\CoreRT\src\System.Private.Reflection.Core\src\System\Reflection\Runtime\MethodInfos\RuntimeSyntheticMethodInfo.cs:line 146        at System.ComponentModel.Composition.ReflectionModel.ReflectionMemberExportDefinition.GetIndex() in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\ReflectionModel\ReflectionMemberExportDefinition.cs:line 67        at System.ComponentModel.Composition.ReflectionModel.ReflectionComposablePart.GetExportingMemberFromDefinition($ExportDefinition definition) in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\ReflectionModel\ReflectionComposablePart.cs:line 567        at System.ComponentModel.Composition.ReflectionModel.ReflectionComposablePart.<RequiresActivation>b__39_0($ExportDefinition definition) in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\ReflectionModel\ReflectionComposablePart.cs:line 352        at System.Func$2<System.__Canon,System.Int32>.Invoke(__Canon arg) in Invoke:line 16707566        at System.Linq.Enumerable.Any<System.__Canon>(IEnumerable$1<__Canon> source, Func$2<__Canon,Boolean> predicate) in E:\A\_work\356\s\corefx\src\System.Linq\src\System\Linq\AnyAll.cs:line 38        at System.ComponentModel.Composition.ReflectionModel.ReflectionComposablePart.RequiresActivation() in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\ReflectionModel\ReflectionComposablePart.cs:line 350        at System.ComponentModel.Composition.ReflectionModel.ReflectionComposablePart.GetInstanceActivatingIfNeeded() in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\ReflectionModel\ReflectionComposablePart.cs:line 267        at System.ComponentModel.Composition.ReflectionModel.ReflectionComposablePart.NotifyImportSatisfied() in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\ReflectionModel\ReflectionComposablePart.cs:line 526        at System.ComponentModel.Composition.ReflectionModel.ReflectionComposablePart.Activate() in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\ReflectionModel\ReflectionComposablePart.cs:line 214        at System.ComponentModel.Composition.Hosting.ImportEngine.PartManager.TryOnComposed() in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\Hosting\ImportEngine.PartManager.cs:line 139        at System.ComponentModel.Composition.Hosting.ImportEngine.TrySatisfyImportsStateMachine($PartManager partManager, $ComposablePart part) in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\Hosting\ImportEngine.cs:line 369        at System.ComponentModel.Composition.Hosting.ImportEngine.TrySatisfyImports($PartManager partManager, $ComposablePart part, Boolean shouldTrackImports) in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\Hosting\ImportEngine.cs:line 435        at System.ComponentModel.Composition.Hosting.ImportEngine.SatisfyImports($ComposablePart part) in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\Hosting\ImportEngine.cs:line 172        at System.ComponentModel.Composition.Hosting.CompositionServices.GetExportedValueFromComposedPart($ImportEngine engine, $ComposablePart part, $ExportDefinition definition) in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\Hosting\CompositionServices.cs:line 537        at System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExportedValue($CatalogPart part, $ExportDefinition export, Boolean isSharedPart) in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\Hosting\CatalogExportProvider.cs:line 536        at System.ComponentModel.Composition.Hosting.CatalogExportProvider.CatalogExport.GetExportedValueCore() in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\Hosting\CatalogExportProvider.CatalogExport.cs:line 61        at System.ComponentModel.Composition.Primitives.Export.get_Value() in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\Primitives\Export.cs:line 207        at System.ComponentModel.Composition.ExportServices.GetCastedExportedValue<System.__Canon>($Export export) in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\ExportServices.cs:line 134        at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueCore<System.__Canon>(String contractName, $ImportCardinality cardinality) in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\Hosting\ExportProvider.GetExportOverrides.cs:line 735        at System.ComponentModel.Composition.CompositionContainerExtensions.IsPresent<System.__Canon>($CompositionContainer container) in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\tests\System\ComponentModel\Composition\CompositionContainerExtensions.cs:line 17        at System.ComponentModel.Composition.CatalogFilteringTests.FilteredCatalog_ScopeB() in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\tests\System\Integration\CatalogFilteringTests.cs:line 33        at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetV(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall)        at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean isTargetThisCall)        at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566      Build : Master - 20171130.02 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x86   - Release - Windows.10.Amd64.ClientRS3-x64   - Release 
25598	area-System.ComponentModel	Test failure: System.ComponentModel.Composition.CompositionErrorIdTests/CompositionErrorIdsAreInSyncWithErrorIds	Opened on behalf of @Sunny-pu  The test `System.ComponentModel.Composition.CompositionErrorIdTests/CompositionErrorIdsAreInSyncWithErrorIds` has failed.  Assert.Equal() Failure\r     Expected: Unknown\r     Actual:   (null)          Stack Trace:             at System.UnitTesting.ExtendedAssert.EnumsContainSameValuesCore<System.ComponentModel.Composition.ErrorId, System.ComponentModel.Composition.CompositionErrorId>() in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\tests\System\ComponentModel\Composition\UnitTesting\ExtendedAssert.cs:line 30        at System.ComponentModel.Composition.CompositionErrorIdTests.CompositionErrorIdsAreInSyncWithErrorIds() in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\tests\System\ComponentModel\Composition\CompositionErrorIdTests.cs:line 15        at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetV(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall)        at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean isTargetThisCall)        at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566      Build : Master - 20171130.02 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x86   - Release - Windows.10.Amd64.ClientRS3-x64   - Release 
25599	area-System.ComponentModel	Test failure: System.ComponentModel.Composition.Diagnostics.CompositionTraceIdTests/CompositionTraceIdsAreInSyncWithTraceIds	Opened on behalf of @Sunny-pu  The test `System.ComponentModel.Composition.Diagnostics.CompositionTraceIdTests/CompositionTraceIdsAreInSyncWithTraceIds` has failed.  Assert.Equal() Failure\r     Expected: Rejection_DefinitionRejected\r     Actual:   (null)          Stack Trace:             at System.UnitTesting.ExtendedAssert.EnumsContainSameValuesCore<System.ComponentModel.Composition.Diagnostics.TraceId, System.ComponentModel.Composition.Diagnostics.CompositionTraceId>() in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\tests\System\ComponentModel\Composition\UnitTesting\ExtendedAssert.cs:line 30        at System.ComponentModel.Composition.Diagnostics.CompositionTraceIdTests.CompositionTraceIdsAreInSyncWithTraceIds() in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\tests\System\ComponentModel\Composition\Diagnostics\CompositionTraceIdTests.cs:line 15        at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetV(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall)        at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean isTargetThisCall)        at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566      Build : Master - 20171130.02 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x86   - Release - Windows.10.Amd64.ClientRS3-x64   - Release 
25600	area-System.ComponentModel	Test failure: System.ComponentModel.Composition.Hosting.FilteredCatalogTransitiveClosureTests/IncludeDependenciesChainWithCycles	Opened on behalf of @Sunny-pu  The test `System.ComponentModel.Composition.Hosting.FilteredCatalogTransitiveClosureTests/IncludeDependenciesChainWithCycles` has failed.  System.Reflection.MissingMetadataException : This operation cannot be carried out because metadata for the following object was removed for performance reasons:\     \       EETypeRva:0x000331C0\     \     No further information is available. Rebuild in debug mode for better information.\     \               Stack Trace:             at System.Reflection.Runtime.TypeInfos.RuntimeNoMetadataNamedTypeInfo.CoreGetDeclaredNestedTypes($NameFilter optionalNameFilter) in f:\dd\ndp\fxcore\CoreRT\src\System.Private.Reflection.Core\src\System\Reflection\Runtime\TypeInfos\RuntimeBlockedTypeInfo.cs:line 229        at System.Linq.EnumerableRewriter.GetPublicType(Type t) in E:\A\_work\356\s\corefx\src\System.Linq.Queryable\src\System\Linq\EnumerableRewriter.cs:line 125        at System.Linq.EnumerableRewriter.VisitConstant($ConstantExpression c) in E:\A\_work\356\s\corefx\src\System.Linq.Queryable\src\System\Linq\EnumerableRewriter.cs:line 202        at System.Linq.Expressions.ConstantExpression.Accept($ExpressionVisitor visitor) in E:\A\_work\356\s\corefx\src\System.Linq.Expressions\src\System\Linq\Expressions\ConstantExpression.cs:line 55        at System.Linq.Expressions.ExpressionVisitor.Visit(ReadOnlyCollection$1<$Expression> nodes) in E:\A\_work\356\s\corefx\src\System.Linq.Expressions\src\System\Linq\Expressions\ExpressionVisitor.cs:line 48        at System.Linq.EnumerableRewriter.VisitMethodCall($MethodCallExpression m) in E:\A\_work\356\s\corefx\src\System.Linq.Queryable\src\System\Linq\EnumerableRewriter.cs:line 25        at System.Linq.Expressions.MethodCallExpression.Accept($ExpressionVisitor visitor) in E:\A\_work\356\s\corefx\src\System.Linq.Expressions\src\System\Linq\Expressions\MethodCallExpression.cs:line 109        at System.Linq.EnumerableExecutor$1<System.Int32>.Execute() in E:\A\_work\356\s\corefx\src\System.Linq.Queryable\src\System\Linq\EnumerableExecutor.cs:line 38        at System.Linq.EnumerableQuery$1<System.__Canon>.System.Linq.IQueryProvider.Execute<System.Int32>($Expression expression) in E:\A\_work\356\s\corefx\src\System.Linq.Queryable\src\System\Linq\EnumerableQuery.cs:line 100        at System.Linq.Queryable.Count<System.__Canon>($IQueryable$1<__Canon> source) in E:\A\_work\356\s\corefx\src\System.Linq.Queryable\src\System\Linq\Queryable.cs:line 999        at System.ComponentModel.Composition.Hosting.FilteredCatalogTransitiveClosureTests.IncludeDependenciesChainWithCycles() in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\tests\System\ComponentModel\Composition\Hosting\FilteredCatalogTransitiveClosureTests.cs:line 236        at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetV(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall)        at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean isTargetThisCall)        at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566      Build : Master - 20171130.02 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x86   - Release - Windows.10.Amd64.ClientRS3-x64   - Release 
25601	area-System.ComponentModel	Test failure: System.ComponentModel.Composition.ImportEngineTests/PreviewImports_ReleaseImports_ShouldNotBlockChanges	Opened on behalf of @Sunny-pu  The test `System.ComponentModel.Composition.ImportEngineTests/PreviewImports_ReleaseImports_ShouldNotBlockChanges` has failed.  Assert.Throws() Failure\r     Expected: typeof(System.ComponentModel.Composition.ChangeRejectedException)\r     Actual:   typeof(System.ArgumentNullException): Value cannot be null.\r     Parameter name: source          Stack Trace:             at System.Linq.Enumerable.ToArray<System.__Canon>(IEnumerable$1<__Canon> source) in E:\A\_work\404\s\corefx\src\System.Linq\src\System\Linq\ToCollection.cs:line 15        at System.ComponentModel.Composition.Hosting.ImportEngine.TryRecomposeImport($PartManager partManager, Boolean partComposed, $ImportDefinition import, $AtomicComposition atomicComposition) in E:\A\_work\404\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\Hosting\ImportEngine.cs:line 584        at System.ComponentModel.Composition.Hosting.ImportEngine.TryRecomposeImports($PartManager partManager, IEnumerable$1<$ExportDefinition> changedExports, $AtomicComposition atomicComposition) in E:\A\_work\404\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\Hosting\ImportEngine.cs:line 545        at System.ComponentModel.Composition.Hosting.ImportEngine.OnExportsChanging(Object sender, $ExportsChangeEventArgs e) in E:\A\_work\404\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\Hosting\ImportEngine.cs:line 514        at System.Action$2<System.__Canon,System.__Canon>.Invoke(__Canon arg1, __Canon arg2) in Invoke:line 16707566        at System.ComponentModel.Composition.Hosting.CompositionServices.TryFire<System.__Canon>(EventHandler$1<__Canon> _delegate, Object sender, __Canon e) in E:\A\_work\404\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\Hosting\CompositionServices.cs:line 581        at System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanging($ExportsChangeEventArgs e) in E:\A\_work\404\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\Hosting\ExportProvider.cs:line 202        at System.ComponentModel.Composition.Factories.ExportProviderFactory.RecomposableExportProvider.ChangeExports(List$1<$Export> newExports) in E:\A\_work\404\s\corefx\src\System.ComponentModel.Composition\tests\System\ComponentModel\Composition\Factories\ExportProviderFactory.RecomposableExportProvider.cs:line 64        at System.ComponentModel.Composition.Factories.ExportProviderFactory.RecomposableExportProvider.AddExport(String contractName, Object value) in E:\A\_work\404\s\corefx\src\System.ComponentModel.Composition\tests\System\ComponentModel\Composition\Factories\ExportProviderFactory.RecomposableExportProvider.cs:line 26        at System.ComponentModel.Composition.ImportEngineTests.<>c__DisplayClass5_0.<PreviewImports_ReleaseImports_ShouldNotBlockChanges>b__0() in E:\A\_work\404\s\corefx\src\System.ComponentModel.Composition\tests\System\ComponentModel\Composition\Hosting\ImportEngineTests.cs:line 141      Build : Master - 20171130.02 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x64   - Release 
25602	area-System.ComponentModel	Test failure: System.ComponentModel.Composition.MetadataViewProviderTests/GetMetadataView_AbstractClassWithConstructor_ShouldThrowMemberAccessException	Opened on behalf of @Sunny-pu  The test `System.ComponentModel.Composition.MetadataViewProviderTests/GetMetadataView_AbstractClassWithConstructor_ShouldThrowMemberAccessException` has failed.  Assert.Throws() Failure\r     Expected: typeof(System.MemberAccessException)\r     Actual:   typeof(System.ComponentModel.Composition.CompositionContractMismatchException): Unable to create an instance of the Metadata view 'System.ComponentModel.Composition.MetadataViewProviderTests+AbstractClassWithConstructorMetadataView, System.ComponentModel.Composition.Tests, Version=4.0.0.0, Culture=neutral, PublicKeyToken=9d77cc7ad39b68eb' because a constructor could not be selected.  Ensure that the type implements a constructor which takes an argument of type IDictionary<string, object>.          Stack Trace:             at System.ComponentModel.Composition.MetadataViewProvider.GetMetadataView<System.__Canon>$catch$1() in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\src\System\ComponentModel\Composition\MetadataViewProvider.cs:line 89        at System.ComponentModel.Composition.MetadataViewProviderTests.<>c__DisplayClass5_0.<GetMetadataView_AbstractClassWithConstructor_ShouldThrowMemberAccessException>b__0() in E:\A\_work\356\s\corefx\src\System.ComponentModel.Composition\tests\System\ComponentModel\Composition\MetadataViewProviderTests.cs:line 119        at System.Action.Invoke() in Invoke:line 16707566      Build : Master - 20171130.02 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x86   - Release - Windows.10.Amd64.ClientRS3-x64   - Release 
25603	area-System.Threading	Add Run(Func<Task>) overload to TaskFactory	Could be convenient and more consistent with [`Task`](https://msdn.microsoft.com/en-us/library/system.threading.tasks.task.run%28v=vs.110%29.aspx?f=255&MSPPError=-2147217396).
25605	area-Meta	Dispose should not throw PlatformNotSupportedException even when the type is not supported	As reported by @ayende in [a blog post](https://ayende.com/blog/180641/if-you-have-a-finalizer-watch-your-ctor?Key=e518b670-167f-4582-afaa-0e201896bd4f), some types throw `PlatformNotSupportedException` from `Dispose(bool disposing)` on platforms that are not supported. This is problematic, because:    1. The big issue: The finalizer of a base class of some of those types (like `Component`) calls `Dispose(false)`, which causes the process to crash.  2. The smaller issue: It's against [the Framework Design Guidelines](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/dispose-pattern#basic-dispose-pattern):        >  X AVOID throwing an exception from within `Dispose(bool)` except under critical situations where the containing process has been corrupted (leaks, inconsistent shared state, etc.).      >      > Users expect that a call to `Dispose` will not raise an exception.         I think this applies even for types that are not supported.    The original example was `SqlConnection`, but I think a simpler repro is with `SerialPort`, which is not supported on .Net Core on Linux:    0. The following should apply to any Linux machine with .Net Core installed (in my case, Ubuntu 16.04 and .Net Core SDK 2.0.3).  1. `dotnet new console`  2. `dotnet add package System.IO.Ports`  3. Change `Program.cs` to:        ```c#      using System;      using System.IO.Ports;        class Program      {          static void Main()          {              try              {                  new SerialPort();              }              catch (Exception ex)              {                  Console.WriteLine(ex);              }                // to simulate GC and subsequent finalization at some point in the future              GC.Collect();              GC.WaitForPendingFinalizers();          }      }      ```  4. Run it in Release mode (to make sure the finalizer is run): `dotnet run -c Release`  5. The program first correctly catches the exception thrown from the `SerialPort` constructor, but then it crashes:        ```      System.PlatformNotSupportedException: System.IO.Ports is currently only supported on Windows.         at System.IO.Ports.SerialPort..ctor()         at Program.Main() in /home/osboxes/hwapp/Program.cs:line 10        Unhandled Exception: System.PlatformNotSupportedException: System.IO.Ports is currently only supported on Windows.         at System.IO.Ports.SerialPort.Dispose(Boolean disposing)         at System.ComponentModel.Component.Finalize()      ```    I think that for unsupported types, `Dispose` should be empty. It should not throw, to avoid crash that cannot be prevented (and to follow Framework Design Guidelines).
25606	area-System.ComponentModel	Skipping test on uap	Relates to #25498     cc: @danmosemsft @safern 
25607	area-System.IO	System.IO.Compression compatability issues	"Hi,    I have a project, using 4.6.1 with the new project format, which creates nuget packages (the idea being we will eventually change to target .NETStandard 2.0).    I have another project, which is using 4.6.1 with the traditional xml project format, which consumes that package.  This project uses System.IO.Compression.ZipFile to extract the contents of uploaded zips.  This is where the problems start to happen though;    1) On my development machine, where I have installed the .NET 2.0 SDKS,  I have to do an assembly redirect of version 4.1.2.0 of System.IO.Compression to 4.2.0.0.  This seems to resolve the problems for me.  However, on other machines, where the SDK is not installed, but the 461 runtime is installed, this fails with   `System.IO.FileLoadException: Could not load file or assembly 'System.IO.Compression, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' or one of its dependencies. The located assembly's manifest definition does not match   the assembly reference. (Exception from HRESULT: 0x80131040) ---> System.IO.FileLoadException: Could not load file or assembly 'System.IO.Compression, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' or one of its depend  encies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)`    2) If I do not do the redirect (and in fact, just redirect down to 4.1.2.0), it works on the other machines, but fails for me with  `Could not load file or assembly 'System.IO.Compression, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)`    I should point out that prior to importing the 461 package, the code was using 4.1.2.0 happily.    If it helps, here is the project file for the package - you'll note there is no reference to System.IO.Compression or System.IO.Compression.FileSystem;    ```xml  <Project Sdk=""Microsoft.NET.Sdk"">      <PropertyGroup Condition=""'$(Configuration)|$(Platform)'=='Release|AnyCPU'"">        <TreatWarningsAsErrors>true</TreatWarningsAsErrors>      <WarningsAsErrors />    </PropertyGroup>      <PropertyGroup>      <TargetFramework>net461</TargetFramework>      <DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>      <OutputType>Library</OutputType>    </PropertyGroup>      <PropertyGroup Condition=""'$(Configuration)|$(Platform)'=='Debug|AnyCPU'"">      <TreatWarningsAsErrors>true</TreatWarningsAsErrors>      <WarningsAsErrors />    </PropertyGroup>      <ItemGroup>      <PackageReference Include=""AWSSDK.IdentityManagement"" Version=""3.3.5.3"" />      <PackageReference Include=""AWSSDK.S3"" Version=""3.3.12.1"" />      <PackageReference Include=""Dapper"" Version=""1.50.2"" />      <PackageReference Include=""Microsoft.AspNetCore.Http.Abstractions"" Version=""2.0.0"" />      <PackageReference Include=""Microsoft.CSharp"" Version=""4.4.0"" />      <PackageReference Include=""System.Configuration.ConfigurationManager"" Version=""4.4.0"" />      <PackageReference Include=""System.Security.Cryptography.ProtectedData"" Version=""4.4.0"" />    </ItemGroup>      <ItemGroup>      <Reference Include=""Security.Cryptography"">        <HintPath>..\packages\Security.Cryptography.1.7.2\lib\net35\Security.Cryptography.dll</HintPath>      </Reference>      <Reference Include=""System.Core"" />      <Reference Include=""System.Runtime.Caching"" />    </ItemGroup>    </Project>  ```    My worry is that I can only seem to fix this by installing the SDK - which is not something I'd anticipate doing on our production systems.  "
25610	area-Serialization	Area-Serialization Sprint 128	The issue is for tracking issues to be done in sprint 128 (due by 12/21/2017)
25613	area-System.IO	Unix file enumerator isn't thread safe	New test in #25426 uncovered this.    ```  Unhandled Exception of Type System.NullReferenceException  Message :  System.NullReferenceException : Object reference not set to an instance of an object.  Stack Trace :     at Interop.Sys.ReadDir(SafeDirectoryHandle dir, DirectoryEntry& outputEntry)     at System.IO.UnixFileSystem.FileSystemEnumerable`1.<Enumerate>d__11.MoveNext()     at System.IO.Tests.Regressions.ThreadSafeRepro.Race(IEnumerator`1 s) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.IO.FileSystem/tests/Directory/Regressions.cs:line 30     at System.IO.Tests.Regressions.ThreadSafeRepro.Execute(String directory) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.IO.FileSystem/tests/Directory/Regressions.cs:line 53     at System.IO.Tests.Regressions.FileEnumeratorIsThreadSafe() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.IO.FileSystem/tests/Directory/Regressions.cs:line 21  ```
25614	area-System.Runtime	system.valuetuple in .nuget conflicts with system.valuetuple in Microsoft.NET.Build.Extensions.	I have a solution that mixes .net standard and .net framework projects. I encountered the following error:    ```  10>  Encountered conflict between 'Reference:C:\Users\Zhivko\.nuget\packages\system.valuetuple\4.4.0\ref\net47\System.ValueTuple.dll' and 'Reference:C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\Microsoft\Microsoft.NET.Build.Extensions\\net47\ref\System.ValueTuple.dll'.  Choosing 'Reference:C:\Users\Zhivko\.nuget\packages\system.valuetuple\4.4.0\ref\net47\System.ValueTuple.dll' because file version '4.6.25519.3' is greater than '4.6.25514.4'.  10>  Encountered conflict between 'CopyLocal:C:\Users\Zhivko\.nuget\packages\system.valuetuple\4.4.0\lib\net47\System.ValueTuple.dll' and 'CopyLocal:C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\Microsoft\Microsoft.NET.Build.Extensions\\net47\lib\System.ValueTuple.dll'.  Choosing 'CopyLocal:C:\Users\Zhivko\.nuget\packages\system.valuetuple\4.4.0\lib\net47\System.ValueTuple.dll' because file version '4.6.25519.3' is greater than '4.6.25514.4'.  10>C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\Microsoft.Common.CurrentVersion.targets(1988,5): warning MSB3277: Found conflicts between different versions of the same dependent assembly that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed.  ```    Can I do anything to resolve the conflict? Thanks    [EDIT] Fixed log formatting by @karelz
25615	area-System.Memory	Move DangerousTryGetArray from a ReadOnlyMemory to MemoryMarshal	Leftover from the approved API proposal: https://github.com/dotnet/corefx/issues/23879#issuecomment-333306452    Rename the DangerousTryGetArray instance method on ReadOnlyMemory to TryGetArray and move it to the MemoryMarshal class.    ```C#  namespace System.Runtime.InteropServices  {      public static class MemoryMarshal      {          public static bool TryGetArray<T>(ReadOnlyMemory<T> readOnlyMemory, out ArraySegment<T> arraySegment);      }  }  ```    cc @KrzysztofCwalina, @stephentoub
25616	area-Serialization	Suppress compiler warnings from XmlSerializer.Generator	When using the new XmlSerializer.Generator, there is a lot of warnings like:        warning CS0219: The variable 'tmp' is assigned but its value is never used       warning CS0219: The variable 'a_2' is assigned but its value is never used    see: https://ci.appveyor.com/project/ublsharp/ublsharp/build/108    Looking at the msbuild targets here https://github.com/dotnet/corefx/blob/master/src/Microsoft.XmlSerializer.Generator/pkg/build/Microsoft.XmlSerializer.Generator.targets#L16 I see there's no way to pass nowarn/DisabledWarnings to the Csc tasks.     Any way to take a variable here?     On a side-note, should I even be doing this (including the sgen dll with the nuget packge), or is that something for the package consumer? What are the recommendations?
25617	area-System.Runtime	Provide a method to query memory status on Linux and OSX	This could be similar to [Interop.GlobalMemoryStatusEx.cs](https://github.com/dotnet/corefx/blob/master/src/Common/src/Interop/Windows/kernel32/Interop.GlobalMemoryStatusEx.cs) and provide information similar to the one in MEMORYSTATUSEX. While the memory management is different on Windows and other platforms and this functionality is arguably low level, it still could be useful in a range of user scenarios such as determining memory pressure (e.g. to see if the cache needs to be trimmed) or trying to evaluate memory usage before reserving/mapping/committing large chunks of memory, or trying to decide whether a service wants to reject processing a new request.    It appears that most of the groundwork is already done in   [sysinfo.cpp](https://github.com/dotnet/coreclr/blob/master/src/pal/src/misc/sysinfo.cpp#L221) but is not exposed via managed APIs.  
25618	area-System.Runtime	Add BigInteger.TryFormat	Note that I'm waiting for https://github.com/dotnet/corefx/issues/25337 to land and will then update this with using `ReadOnlySpan<char>` instead of `string` for the `format`.  After that I'll run some perf tests to verify nothing's regressed.    Contributes to https://github.com/dotnet/corefx/issues/25336  cc: @bartonjs 
25619	area-System.Data	SqlCommand ExecuteNonQuery port	Port the following APIs from .Net Framework to .Net Core.  M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery  M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery(System.AsyncCallback,System.Object)    M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)  
25620	area-System.Data	Possible Critical Bug/Issue with SqlConnection in .NET Core 2.0 when running on Linux or Linux Containers and having multiple concurrent users like in a Load Test	"POSSIBLE ISSUE/BUG  When load testing with not many concurrent users (just like 20, 50 or more concurrent users)  we've found a Possible Critical Bug/Issue with SqlConnection in .NET Core 2.0 when running on Linux or Linux Containers.  We might be missing something, but I don't see it.  This is happening only when running SqlClient in .NET Core 2.0 on Linux or Linux-containers.  When running on Windows or Windows Containers, there are no issues, so, that is a bad symptom...    ```  Error when load testing:  System.Data.SqlClient.SqlException (0x80131904): A network-related or instance-specific error occurred  while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that   the instance name is correct and that SQL Server is configured to allow remote connections. (provider:   TCP Provider, error: 40 - Could not open a connection to SQL Server) at   System.Data.ProviderBase.DbConnectionPool.TryGetConnection(...  ```    REPRO:  We have created a very simple project to repro the issue.  It is an ASP.NET Core Web API with two methods to run:  1. Method running a plain native SqlConnection with a query.  2. Method running a query with Dapper based on a query.  3. When using EF Core, it should happen the same, but for the repro we perefered to go to the simplest repro which is just to use a SqlConntection.    Basically, the issue is related to SqlConnection, not from higher level frameworks like EF Core or Dapper, as it happens whenever .NET Core 2.0 SqlConnection  is used on LINUX.     You can get the repro code from here (Simple ASP.NET Core 2.0 Web API with SqlConnection):    [https://github.com/CESARDELATORRE/SQLConnNetCore2IssueRepro](https://github.com/CESARDELATORRE/SQLConnNetCore2IssueRepro)    This is the Web API method when using simply a SqlConntection:  ```C#  [HttpGet(""native"")]  public async Task<IActionResult> GetNative()  {      var connectionString = ""Server=tcp:eshopsql-e3h5ug5xd3rfs.database.windows.net,1433;Initial Catalog=orderingdb;Persist Security Info=False;User ID=eshop;Password=MY-PASSWORD;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Max Pool Size=400;Connection Timeout=30;"";      using (var connection = new SqlConnection(connectionString))      {          try          {              connection.Open();              var command = connection.CreateCommand();              command.CommandText = @""SELECT o.[Id] as ordernumber,o.[OrderDate] as [date],os.[Name] as [status],SUM(oi.units*oi.unitprice) as total                  FROM [ordering].[Orders] o                  LEFT JOIN[ordering].[orderitems] oi ON  o.Id = oi.orderid                   LEFT JOIN[ordering].[orderstatus] os on o.OrderStatusId = os.Id                                       GROUP BY o.[Id], o.[OrderDate], os.[Name]                   ORDER BY o.[Id]"";              var reader = command.ExecuteReader(System.Data.CommandBehavior.CloseConnection);              var count = 0;              while (reader.Read())              {                  count += 1;              }              return Ok(count);          }          catch (Exception x)          {              throw new InvalidOperationException(x.ToString());          }      }  }  ```  The database is actually running on an Azure SQL Database so we test it against a hypothetical ""production"" database. But this issue happens the same way if the SQL Database is running in a SQL Container.    If I deploy the container/solution from VS into Docker for Windows (running on the Linux VM), the Web API runs OK, as in the following screenshot:  NOTE that the URL has to provide ""/native"" at the end.    The tables in SQL currently have no registries, hence ""0"" as return value. But the query is being executed:    ![image](https://user-images.githubusercontent.com/1712635/33460579-ae95c594-d5e3-11e7-864a-7d0086760a01.png)    If you want to try with Dapper, try the same URL but ending on ""/dapper"" which will execute a different code/method.    You can see the Web API container running in the local Docker Linux VM:  ![image](https://user-images.githubusercontent.com/1712635/33460652-f50e2e94-d5e3-11e7-99fe-4b4595aadc03.png)    Then, if we do Load Testing and simulate concurrent users, this is when we start getting a lot of errors from SqlConntection, like this:    `System.Data.SqlClient.SqlException (0x80131904): A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: TCP Provider, error: 40 - Could not open a connection to SQL Server) at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection) at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection) at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection) at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions) at System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions) at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry) at System.Data.SqlClient.SqlConnection.Open() at   `    Contact me at cesardl at microsoft.com for further info about the issue.      "
25621	area-System.Data	Performance issue fix for manged sni	Setting buffer size of socket manually causes the performance issue. This is a fix for the issue: https://github.com/dotnet/corefx/issues/24480
25623	area-Microsoft.CSharp	Microsoft.CSharp: Remove unused SymWithType fields from MemberLookup	* Remove `_swtAmbigWarn`    Not sure if setting it can be reached, but it's never used if it is, because we can only error or not, with no mechanism to warn.    * Remove `_swtOverride`    Set, but never used (since we can't have a bogus override against an already-compiled type, which it is stored to potentially error against in static compilation).  
25626	area-System.Memory	Optimize UTF-8 Int64/UInt64 Formatter for x86	- If the number is larger than a quintillion (10^18), split it into three parts that can each fit in a uint32:   `{1-2 digits}{9 digits}{9 digits}`.  Otherwise, split it into two parts that can each fit in a uint32:   `{1-9 digits}{9 digits}`.  - Inlining some methods.    ![image](https://user-images.githubusercontent.com/6527137/33464638-22cd8db6-d5f8-11e7-8b20-657bdd745243.png)    ![image](https://user-images.githubusercontent.com/6527137/33464644-284b62c2-d5f8-11e7-9e5f-97ee7c60ee85.png)    ![image](https://user-images.githubusercontent.com/6527137/33512473-2c43ce02-d6e6-11e7-8167-fe9642a38cc4.png)    **Edit2:** Out-dated result2  !~[image](https://user-images.githubusercontent.com/6527137/33466160-1076d362-d601-11e7-9e4b-922bb330a841.png)~    **Edit:** Out-dated result  !~[image](https://user-images.githubusercontent.com/6527137/33464650-2f293150-d5f8-11e7-85bf-6d0a29420bf5.png)~    **Questions:**  **Edit:** Ignore question 1. I can no longer reproduce those results.  1. ~I am surprised that formatting '0' is faster for x86 than for x64 (by around 30%). I have no idea why given the assembly is the same for both. Any ideas as to why this is?~    The code is identical for both!  ```C#  if ((ulong)value < 10)  {      return TryFormatUInt32SingleDigit((uint)value, buffer, out bytesWritten);  }  ```    2. Even after the optimizations in this PR, x64 is still 1-3x faster than x86 for numbers above int.MaxValue (since all int64 operations expand into several instructions). I am not sure what else can be done about this. Thoughts?  **Edit2:** The difference has been shrunk to 1-2x (rather than 3x) which is to be expected.    cc @AtsushiKan, @KrzysztofCwalina, @jkotas, @davidfowl, @stephentoub 
25627	area-System.Data	DbConnectionPool.CleanupCallback with short lived windows impersonation tokens causes kestrel process to crash	"Add the following reproducer to an empty dotnet core 2 project and wait for the timer DbConnectionPool.CleanupCallback to fire.  Since the WindowsIdentity token that was being impersonated has now been closed, an ObjectDisposedException will be thrown while attempting to run the timer in the captured execution context.  This causes ExecutionContext.OnContextChanged to call FailFast and crash the process.    ```c#      public class Startup      {          public void ConfigureServices(IServiceCollection services)          {              services.AddEntityFrameworkSqlServer();              services.AddDbContextPool<DbContext>(o => {                  var server = ""localhost"";                  var database = ""master"";                  o.UseSqlServer($""Server={server};Database={database};integrated security=True;Trusted_Connection=true"", options => { } );              });          }            private async Task WhoAmI(HttpContext context)          {              var dbContext = context.RequestServices.GetRequiredService<DbContext>();              var parm = new SqlParameter(""name"", SqlDbType.VarChar, 50);              parm.Value = """";              parm.Direction = ParameterDirection.InputOutput;              await dbContext.Database.ExecuteSqlCommandAsync(""select @name = loginame from master.sys.sysprocesses where spid = @@SPID"", parm);              var name = (parm.Value as string).Trim();              await context.Response.WriteAsync($""Hello {name}!"");          }            public void Configure(IApplicationBuilder app, IHostingEnvironment env)          {              app.Run(context => {                  WindowsIdentity.RunImpersonated(                      ((WindowsIdentity)context.User.Identity).AccessToken,                      () => WhoAmI(context).Wait());                  return Task.CompletedTask;              });          }      }  ```  Is there an easy way to run this (and any other) timer to avoid capturing the execution context?    [EDIT] Add C# syntax highlighting by @karelz"
25628	area-Infrastructure	Add static library definitions to CMakeLists for CoreRT	Add static library definitions to be consumed by CoreRT, similar to the current build of System.Native. 
25629	area-System.Net	HttpCompletionOption.ResponseHeadersRead behavior with AllowAutoRedirect=true	"This is a question regarding the behavior of `HttpCompletionOption.ResponseHeadersRead` when `AllowAutoRedirect` is set to true. When a redirect occurs, which of the following behaviors takes place?    1. The completion option is only respected for the first request (i.e. it is ""best-effort""; since a redirect took place, we cannot respect the completion option. So we read the response body and then follow redirects ignoring the original completion option).  2. The completion option is respected for all requests (a new connection is created for each redirect, wasting a new connection each time).  3. The completion option is only respected for the last request (we read response bodies as long as the status code asks us to redirect. The destination response body is not read).  4. When a redirect occurs, the completion option has no effect.    Since HTTP/1.1 is the default protocol, `keep-alive`s are enabled. This means that if a response body is not read, then a new request cannot be made on the same TCP connection. So it seems that (3) or (4) are most likely.    However, RFC2616 does not forbid `HTTP 302` responses from having response bodies. So a problem arises when the responses are huge (say many GBs each). In this case, every redirect will take very long and it would actually be beneficial to re-create a new connection for each redirect.    I realize that this is a hypothetical scenario, but wanted to check anyway since the behavior was not documented (and I couldn't make much from the source).    **Extra**: How do timeouts work with regard to redirects? Are they per-request or for all of them?"
25630	area-System.Runtime	Environment.ProcessorCount: use runtime implementation via EnvironmentAugments	This doesn't build on my machine (yet):    > 'EnvironmentAugments' does not contain a definition for 'ProcessorCount'    EnvironmentAugments.ProcessorCount was added in https://github.com/dotnet/coreclr/pull/15297.    I've made the change for all platforms (i.e. also Windows) and removed the corefx implementation.    CC @stephentoub @jkotas 
25631	area-System.Security	Cannot import PKCS12 certificates on OS X	"```c#  using System;  using System.Security.Cryptography.X509Certificates;    namespace x509import  {      class Program      {          static void Main(string[] args)          {              try              {                    X509Store certStore = new X509Store(""My"", StoreLocation.CurrentUser);                  certStore.Open(OpenFlags.ReadWrite);                  X509Certificate2Collection certs = new X509Certificate2Collection();                  try                  {                      certs.Import(""s_rsa_cai1.p12"", ""password"", X509KeyStorageFlags.DefaultKeySet);                      foreach(X509Certificate2 c in certs)                      {                          certStore.Add(c);                      }                  }                  finally                  {                      foreach(X509Certificate2 c in certs)                      {                          certStore.Remove(c);                      }                  }              }              catch(Exception ex)              {                  Console.WriteLine(ex);              }          }      }  }  ```    This program fails in OS X with the following exception    ```  Interop+AppleCrypto+AppleCommonCryptoCryptographicException: The contents of this item cannot be retrieved.     at Interop.AppleCrypto.X509StoreAddCertificate(SafeKeychainItemHandle certOrIdentity, SafeKeychainHandle keychain)     at Internal.Cryptography.Pal.StorePal.AppleKeychainStore.Add(ICertificatePal cert)     at System.Security.Cryptography.X509Certificates.X509Store.Add(X509Certificate2 certificate)     at x509import.Program.Main(String[] args) in /Users/jose/x509import/Program.cs:line 21  ```    The same program works fine with Linux and Windows, The test certificate can be download from   https://github.com/zeroc-ice/ice/raw/3.7/csharp/test/IceSSL/certs/s_rsa_cai1.p12    [EDIT] Add C# syntax highlighting by @karelz"
25632	area-System.Net	Failing code with forward slashes as path separators with paths containing umlauts	"As mentioned in this issue( https://github.com/dotnet/corefx/issues/25519 ) there is a problem for me with paths using forward slashes as path separators and umlauts (probably all characters outside the 0000-007F range?). Found using System.Xml.Linq.XDocument.Load(), can't reproduce with just System.IO.Path.GetFullPath() so my guess is the path gets malformed somewhere along the call stack between those calls but I am not setup to debug the .net core code so unsure where.    Tested with .Net Core 2.0.3 on Windows 10 64-bit (dotnet-sdk-2.0.3-win-x64.exe installer)    Simple test code (project created with ```dotnet new console```):    ```c#  using System;  using System.Xml.Linq;    namespace forwardslashwithumlaut  {      class Program      {          static void Main(string[] args)          {              var xmlDoc1 = XDocument.Load(@""c:/elmish/dotnetcoreissue/o/test.xml"");              Console.WriteLine(""Nonumlaut forward slash path passed""); //passes on .Net core and .Net Framework 4.6.1              var xmlDoc2 = XDocument.Load(@""c:/elmish/dotnetcoreissue/ö/test.xml"");              Console.WriteLine(""Umlaut forward slash path passed""); // failson .Net core and passes on.Net Framework 4.6.1          }      }  }  ```  Console output:  ```  dotnet run  Nonumlaut forward slash path passed    Unhandled Exception: System.NotSupportedException: The given path's format is not supported.     at System.IO.Path.GetFullPath(String path)     at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)     at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize)     at System.Xml.XmlDownloadManager.GetStream(Uri uri, ICredentials credentials, IWebProxy proxy, RequestCachePolicy cachePolicy)     at System.Xml.XmlUrlResolver.GetEntity(Uri absoluteUri, String role, Type ofObjectToReturn)     at System.Xml.XmlTextReaderImpl.FinishInitUriString()     at System.Xml.XmlTextReaderImpl..ctor(String uriStr, XmlReaderSettings settings, XmlParserContext context, XmlResolver uriResolver)     at System.Xml.XmlReaderSettings.CreateReader(String inputUri, XmlParserContext inputContext)     at System.Xml.XmlReader.Create(String inputUri, XmlReaderSettings settings)     at System.Xml.Linq.XDocument.Load(String uri, LoadOptions options)     at System.Xml.Linq.XDocument.Load(String uri)     at backslashpathwithumlaut.Program.Main(String[] args) in C:\elmish\backslashpathwithumlaut\Program.cs:line 12  ```    [EDIT] Add C# syntax highlighting by @karelz"
25633	area-Infrastructure	dotnet publish on FreeBSD	This is more of a question. I apologize in advance if this is not the proper place to ask for a clarification.    I was able to compile the runtime for FreeBSD, by following the instructions at:  https://github.com/dotnet/corefx/wiki/Building-.NET-Core--2.x-on-FreeBSD    I have applications that need to be `dotnet run` from the SDK. If I `dotnet publish` those applications on a Windows host, barring some very particular dependencies, should they run on my FreeBSD environment?  
25634	area-System.Console	ConsoleColor.White isn't white on macosx	_From @equiman on December 1, 2017 13:25_  I'm working in a console project in dotnet core.   But white color on mac is represented as lighter gray and not as white color.    Example img: https://ibb.co/kKoXPb  1) is background color in terminal by default.  2) is `Console.BackgroundColor = ConsoleColor.White; ` but is represented as lighter gray.     I'm using default terminal application on macos.    $> dotnet --version  2.0.0    $> sw_vers  ProductName: Mac OS X  ProductVersion: 10.13.1  BuildVersion: 17B1003    Code using to format with color:  https://github.com/equiman/hardhat/blob/master/dev/tools/Colorify.cs  _Copied from original issue: dotnet/coreclr#15320_
25635	area-System.Threading	BufferBlock.OutputAvailableAsync does not set CancellationToken when canceled	When I await BufferBlock<T>.OutputAvailableAsync(token) and the token gets canceled a TaskCanceledException is thrown (which is correct) with a CancellationToken set to CancellationToken.None. It should be set to the canceled token.    I think this is because OutputAvailableAsyncTarget<T>.CancelAndUnlink() calls thisTarget.TrySetCanceled() without the token as parameter.
25636	area-System.Memory	Span/Memory Epic	Groups all remaining work for Span and Memory for 2.1
25637	area-System.Net	Add logic to skip alpn tests where unsupported.	Fixes #25033, #25661    Adding logic to detect openssl version is greater than 1.0.2 before running the alpn tests. This has been causing test failures in several runs redhat6.9 distro was not added in the distro skip list. This method is more reliable.    cc @stephentoub @wfurt @karelz 
25638	area-Meta	Alpine Linux hierarchy chain is incorrect	"In https://github.com/dotnet/corefx/blob/master/pkg/Microsoft.NETCore.Platforms/runtimeGroups.props, the alpine linux has incorrect parent ""any"" instead of ""unix"".      "
25639	area-System.Net	IOControl_SIOCATMARK_Success test not working on macOS/Windows	The new IOControl_SIOCATMARK_Success is failing on macOS.  Needs investigation to understand whether it's a test issue (e.g. a subtle behavioral difference between unix implementations) or something deeper.
25640	area-System.Net	[ManagedHandler] ProxySetViaEnvironmentVariable_DefaultProxyCredentialsUsed test disabled	This may not be specific to ManagedHandler. We are disabling them for now to reduce noise for 2.1.    ProxySetViaEnvironmentVariable_DefaultProxyCredentialsUsed:  failing sometimes on Windows (this used to be Unix test only)     12 failures so far in November.
25641	area-System.Net	disable ProxySetViaEnvironmentVariable_DefaultProxyCredentialsUsed on windows	disabling for now per agreement with @karelz     failed 12 times in November on various windows  version.     #25640 filed to track it.
25642	area-System.Net	Avoid filling the TRUSTED_ISSUERS entry in SSL handshake on Linux	Discussion is here: https://github.com/dotnet/corefx/issues/23938    This PR avoid filling in the TRUSTED_ISSUERS field in the SSL handshake on Linux to maintain comparability with the behavior of SslStream on Windows.    As for Windows 8 / Windows Server 2012 SChannel is no longer sending the trusted issuers by default (see: https://technet.microsoft.com/en-us/library/dn786429(v=ws.11).aspx)    This can reduce the number of bytes in an SSL handshake from `21,939`  to `1,486`  and help comparability and ease of use when using client certificates with SslStream.
25643	area-System.Net	"[release/2.0.0] Revert ""Minor change to avoid an allocation in Uri"""	Quoting @stephentoub --     > While #12061 looked simple, the removal of the allocation actually broke this behavior (and worse, broke string immutability) because the CheckSchemeSyntax method that's called actually mutates the char* that's passed in. This code was bad to begin with, as this was always (even in netfx) mutating a string instance, but that PR made it worse and broke this because it ends up passing in / mutating the original string rather than a copy that's mutated and then thrown away.  >   > The removal of the allocation can be re-done in a different way. For now, though, we need to revert.    The break is bad enough that it renders System.Uri unusable in many situations, so the fix warrants porting back to 2.0.x.     Fixes #25548    cc: @stephentoub @karelz @davidsh 
25645	area-System.Net	Fix subprotocol check in WebSocketHandle.Managed	@qmfrederik, I'm not sure how to repro what you were seeing, but the condition here looked wrong regardless, so hopefully this addresses your issue.
25647	area-System.IO	Position in the input stream is always end after decompression	On desktop when you run decompression the position in the input stream is a first position after compressed data aligned to the input buffer while on Core we always read stream until the end.    Problem is in here: https://github.com/dotnet/corefx/blob/master/src/System.IO.Compression/src/System/IO/Compression/DeflateZLib/Inflater.cs#L42    We should not be checking for `AvailIn == 0` and `AvailOut == 0` which may be non-zero when we are finished (AvailIn tells us how much data can we still read from the input and AvailOut tells us how much space there is in the output buffer).
25648	area-System.Memory	Remove use of Unsafe in the UTF-8 formatter	Just like the parsers, the formatters should not be using unsafe code.  [This](https://github.com/dotnet/corefx/pull/25424) PR removes the use of unsafe code from the default integer formatter. We need to remove it from all the places.  See https://github.com/dotnet/corefx/pull/25424#discussion_r152992177 for more context.      cc @KrzysztofCwalina, @jkotas, @AtsushiKan, @morganbr, @GrabYourPitchforks 
25650	area-System.Console	We need a cross-platform way to detect key-down state	"_From @masonwheeler on July 1, 2015 14:48_  Right now, if you want to answer the question ""Is <insert key here> on the keyboard currently down?"", you do it with a PInvoke call to `GetAsyncKeyState`.  Problem is, that will only work for winapi-based platforms.  There should be a cross-platform solution for this, and ISTM it's low-level enough that it belongs in CoreCLR and not CoreFX.  Feel free to correct me if this isn't the case, and I'll open the issue on CoreFX instead.   _Copied from original issue: dotnet/coreclr#1190_"
25652	area-System.Diagnostics	System.Diagnostics.Process.GetProcesses and System.Diagnostics.ProcessModule	"_From @diamondes3 on August 11, 2017 18:47_  I'm creating a program that needs to get a list of currently executing processes in memory and take action to kill a given process, if it's a different instance of the same (currently executing program) that has become hung for some reason; where I have a criteria based on start time to declare a given process as being hung.  This logic is being developed on a windows machine using ""dotnet"" core, then packaged and run on a Ubuntu machine.    If I get a list of processes via ""Process.GetProcesses"", I can see my currently executing logic in the list as ""dotnet"".  This isn't real helpful, as what if there are X different ""dotnet"" programs running on this machine, they all look like they are the same logic due to the ""dotnet"" name.  Some of them MIGHT be hung instances of the logic I'm after, some of them MIGHT be totally other ""dotnet"" assemblies.    I figured out, that if I examine the list of modules for a given process (ProcessModule), the ProcessModule.ModuleName is the name of the underlying .dll that the ""dotnet"" core environment is running.    This works fine on the Windows machine running Visual Studio.  When I compile and package the logic and run it on the Linux machine, I get can get the list of Processes, examine their corresponding modules; however, the underlying .dll that the ""dotnet"" core is executing is missing from the list of modules that should be in that given process.  In other words, the .dll name shows up as a module in the Windows process, but does NOT show up as a module in the Linux process; even though numerous other modules DO show up in the Linux environment for the given process.    There are no exceptions or any other errors that I'm seeing, just not seeing the underlying .dll listed as a module for a given process on the Linux machine.    Any constructive thoughts on this?  _Copied from original issue: dotnet/coreclr#13340_"
25653	area-System.Xml	XmlReader.Read with Async settings should not throw AggregateException	"Consider the following code:    ```c#  using System.Xml;    class Program  {      static void Main()      {          var reader = XmlReader.Create(""a"", new XmlReaderSettings { Async = true });          reader.Read();      }  }  ```    Assuming the file `a` doesn't exist, this code is expected to throw `FileNotFoundException`. .Net Core 1.x does exactly that. But .Net Core 2.x and .Net Framework 4.x don't, they throw the exception wrapped in `AggreagteException`:    ```  > dotnet run -f netcoreapp1.1  Unhandled Exception: System.IO.FileNotFoundException: Could not find file 'C:\code\tmp\coreapp\a'.     at System.IO.Win32FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, FileStream parent)     at System.IO.Win32FileSystem.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, FileStream parent)     at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)     at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)     at System.Xml.XmlSystemPathResolver.GetEntity(Uri uri, String role, Type typeOfObjectToReturn)     at System.Xml.XmlTextReaderImpl.FinishInitUriString()     at System.Xml.XmlTextReaderImpl.FinishInit()     at System.Xml.XmlTextReaderImpl.Read()     at System.Xml.XmlAsyncCheckReader.Read()     at Program.Main() in C:\code\tmp\coreapp\Program.cs:line 8  > dotnet run -f netcoreapp2.0  Unhandled Exception: System.AggregateException: One or more errors occurred. (Could not find file 'C:\code\tmp\coreapp\a'.) ---> System.IO.FileNotFoundException: Could not find file 'C:\code\tmp\coreapp\a'.     at System.IO.FileStream.OpenHandle(FileMode mode, FileShare share, FileOptions options)     at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)     at System.Xml.XmlDownloadManager.<>c__DisplayClass2_0.<GetStreamAsync>b__0()     at System.Threading.Tasks.Task`1.InnerInvoke()     at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)     at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()     at System.Xml.XmlUrlResolver.<GetEntityAsync>d__15.MoveNext()     --- End of inner exception stack trace ---     at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)     at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)     at System.Threading.Tasks.Task.Wait()     at System.Xml.XmlTextReaderImpl.FinishInitUriString()     at System.Xml.XmlTextReaderImpl.FinishInit()     at System.Xml.XmlTextReaderImpl.Read()     at System.Xml.XmlAsyncCheckReader.Read()     at Program.Main() in C:\code\tmp\coreapp\Program.cs:line 8  > dotnet run -f netcoreapp2.1  Unhandled Exception: System.AggregateException: One or more errors occurred. (Could not find file 'C:\code\tmp\coreapp\a'.) ---> System.IO.FileNotFoundException: Could not find file 'C:\code\tmp\coreapp\a'.     at System.IO.FileStream.ValidateFileHandle(SafeFileHandle fileHandle)     at System.IO.FileStream.CreateFileOpenHandle(FileMode mode, FileShare share, FileOptions options)     at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)     at System.Xml.XmlDownloadManager.<>c__DisplayClass2_0.<GetStreamAsync>b__0()     at System.Threading.Tasks.Task`1.InnerInvoke()     at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)     at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)  --- End of stack trace from previous location where exception was thrown ---     at System.Xml.XmlUrlResolver.<GetEntityAsync>d__15.MoveNext()     --- End of inner exception stack trace ---     at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)     at System.Threading.Tasks.Task.Wait()     at System.Xml.XmlTextReaderImpl.FinishInitUriString()     at System.Xml.XmlTextReaderImpl.FinishInit()     at System.Xml.XmlTextReaderImpl.Read()     at System.Xml.XmlAsyncCheckReader.Read()     at Program.Main() in C:\code\tmp\coreapp\Program.cs:line 8  > dotnet run -f net45  Unhandled Exception: System.AggregateException: One or more errors occurred. ---> System.IO.FileNotFoundException: Could not find file 'C:\code\tmp\coreapp\a'.     at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)     at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)     at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, String msgPath, Boolean bFromProxy)     at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, Boolean useAsync)     at System.Xml.XmlDownloadManager.<>c__DisplayClass4_0.<GetStreamAsync>b__0()     at System.Threading.Tasks.Task`1.InnerInvoke()     at System.Threading.Tasks.Task.Execute()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Xml.XmlUrlResolver.<GetEntityAsync>d__15.MoveNext()     --- End of inner exception stack trace ---     at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)     at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)     at System.Threading.Tasks.Task.Wait()     at System.Xml.XmlTextReaderImpl.FinishInitUriString()     at System.Xml.XmlTextReaderImpl.Read()     at Program.Main() in C:\code\tmp\coreapp\Program.cs:line 8  > dotnet run -f net47  Unhandled Exception: System.AggregateException: One or more errors occurred. ---> System.IO.FileNotFoundException: Could not find file 'C:\code\tmp\coreapp\a'.     at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)     at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)     at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, String msgPath, Boolean bFromProxy)     at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, Boolean useAsync)     at System.Xml.XmlDownloadManager.<>c__DisplayClass4_0.<GetStreamAsync>b__0()     at System.Threading.Tasks.Task`1.InnerInvoke()     at System.Threading.Tasks.Task.Execute()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Xml.XmlUrlResolver.<GetEntityAsync>d__15.MoveNext()     --- End of inner exception stack trace ---     at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)     at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)     at System.Threading.Tasks.Task.Wait()     at System.Xml.XmlTextReaderImpl.FinishInitUriString()     at System.Xml.XmlTextReaderImpl.Read()     at Program.Main() in C:\code\tmp\coreapp\Program.cs:line 8  ```    I think that `XmlReader.Read()` should not throw `AggregateException`, even though `Async` is set in the settings.    The code responsible for this behavior on .Net Core is:    https://github.com/dotnet/corefx/blob/8229cb7e33a40b990cdef2fd83a7a021636a89aa/src/System.Private.Xml/src/System/Xml/Core/XmlTextReaderImpl.cs#L625-L629    Changing it from `.Wait()` and `.Result` to `.GetAwaiter().GetResult()` should fix the issue."
25654	area-System.Runtime	Overload to String.Replace that can take multiple strings to replace	"Sometime I want to replace multiple texts from a string, and the code become something like this:    ```C#  var toReplace = new[] {""aaa"", ""bbb"", ""ccc""};  var replaceWith = """";    foreach (var s in toReplace )  {      foo = foo.Replace(s, replaceWith );  }  ```    Of course, I can use `Regex `for such situations, but it feels a bit unnecessarily complicated for such a common case.    I suggest to create an overload to String.Replace with following signature:    ```C#  string Replace(IEnumerable<string>, string)  ```    Whit this, I can rerwite the example to following:  ```C#  var toReplace = new[] {""aaa"", ""bbb"", ""ccc""};  var replaceWith = """";    foo = foo.Replace(toReplace , replaceWith );  ```  "
25655	area-System.Net	Please add RememberMe to NetworkCredentials	### Suggestion    Would be nice to have a `RemeberMe` property in the `NetworkCredentials` class, to make it easier to use as a standard username and password DTO unit.    ### Proposed API    Add a `bool` or `bool?` property named `RememberMe` to the `NetworkCredential` class, to make it easier to attach this piece of info with the request.    ### Motive    In the client side it will make it easier to use the `NetworkCredential` class as a DTO from the UI/ViewModel or some other high layer in the app down to the DAL and embedded in the request, and in the server side to be able to store cookies accordingly.  Not something that will always be used, but something that's many times worth sitting there.
25656	area-System.Net	Added RememberMe field to NetworkCredential	See #25655.
25658	area-System.Net	System.Net.Sockets - Tests - Removed more blocking on APM tests	
25659	area-System.Threading	Please consider ReusableTask and ReusableValueTask	What makes reference type important is its reusability, but Task as a reference type is not designed to be reused.  Considering REST Api or RPC, the most frequent functions are to be called millions of times from Internet requests, if task or valueTask would be able to be reused, the time for heap allocation or stack initialization(deep copy does cost time) could be saved at somewhat degree.  Reusable must take some disadvantage, but just like valueTask, it could bring some goodness.
25660	area-System.Text	Overload to Regex.Escape with RegexOptions.IgnorePatternWhitespace option	By default Regex treats space character as literal i.e. it doesn't use RegexOptions.IgnorePatternWhitespace.  But Regex.Escape escapes space characters as if I use RegexOptions.IgnorePatternWhitespace. And there is no way to change it. 
25661	area-System.Net	ALPN tests failing on RedHat	https://mc.dot.net/#/user/Drawaes/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/5e70fee9f1339db71f723caac7a85d55346c9a09/workItem/System.Net.Security.Tests/wilogs  ```  2017-12-02 23:41:32,500: INFO: proc(54): run_and_log_output: Output:    System.Net.Security.Tests.SslStreamAlpnTests.SslStream_StreamToStream_Alpn_NonMatchingProtocols_Fail [FAIL]  2017-12-02 23:41:32,500: INFO: proc(54): run_and_log_output: Output:       AuthenticationException was not thrown.  2017-12-02 23:41:32,500: INFO: proc(54): run_and_log_output: Output:       Expected: True  2017-12-02 23:41:32,501: INFO: proc(54): run_and_log_output: Output:       Actual:   False  2017-12-02 23:41:32,513: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-12-02 23:41:32,870: INFO: proc(54): run_and_log_output: Output:          /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/src/System.Net.Security/tests/FunctionalTests/SslStreamAlpnTests.cs(157,0): at System.Net.Security.Tests.SslStreamAlpnTests.<SslStream_StreamToStream_Alpn_NonMatchingProtocols_Fail>d__4.MoveNext()  2017-12-02 23:41:32,870: INFO: proc(54): run_and_log_output: Output:          --- End of stack trace from previous location where exception was thrown ---  2017-12-02 23:41:32,870: INFO: proc(54): run_and_log_output: Output:          --- End of stack trace from previous location where exception was thrown ---  2017-12-02 23:41:32,870: INFO: proc(54): run_and_log_output: Output:          --- End of stack trace from previous location where exception was thrown ---  2017-12-02 23:41:32,870: INFO: proc(54): run_and_log_output: Output:    System.Net.Security.Tests.SslStreamAlpnTests.SslStream_StreamToStream_Alpn_Success(clientProtocols: [http/1.1, h2], serverProtocols: [h2], expected: h2) [FAIL]  2017-12-02 23:41:32,870: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure  2017-12-02 23:41:32,870: INFO: proc(54): run_and_log_output: Output:       Expected: h2  2017-12-02 23:41:32,870: INFO: proc(54): run_and_log_output: Output:       Actual:   (null)  2017-12-02 23:41:32,870: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-12-02 23:41:32,871: INFO: proc(54): run_and_log_output: Output:          /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/src/System.Net.Security/tests/FunctionalTests/SslStreamAlpnTests.cs(116,0): at System.Net.Security.Tests.SslStreamAlpnTests.<SslStream_StreamToStream_Alpn_Success>d__3.MoveNext()  2017-12-02 23:41:32,871: INFO: proc(54): run_and_log_output: Output:          --- End of stack trace from previous location where exception was thrown ---  2017-12-02 23:41:32,871: INFO: proc(54): run_and_log_output: Output:          --- End of stack trace from previous location where exception was thrown ---  2017-12-02 23:41:32,871: INFO: proc(54): run_and_log_output: Output:          --- End of stack trace from previous location where exception was thrown ---  2017-12-02 23:41:33,124: INFO: proc(54): run_and_log_output: Output:    System.Net.Security.Tests.SslStreamAlpnTests.SslStream_StreamToStream_Alpn_Success(clientProtocols: [http/1.1], serverProtocols: [http/1.1, h2], expected: http/1.1) [FAIL]  2017-12-02 23:41:33,124: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure  2017-12-02 23:41:33,124: INFO: proc(54): run_and_log_output: Output:       Expected: http/1.1  2017-12-02 23:41:33,124: INFO: proc(54): run_and_log_output: Output:       Actual:   (null)  2017-12-02 23:41:33,124: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-12-02 23:41:33,125: INFO: proc(54): run_and_log_output: Output:          /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/src/System.Net.Security/tests/FunctionalTests/SslStreamAlpnTests.cs(116,0): at System.Net.Security.Tests.SslStreamAlpnTests.<SslStream_StreamToStream_Alpn_Success>d__3.MoveNext()  2017-12-02 23:41:33,125: INFO: proc(54): run_and_log_output: Output:          --- End of stack trace from previous location where exception was thrown ---  2017-12-02 23:41:33,125: INFO: proc(54): run_and_log_output: Output:          --- End of stack trace from previous location where exception was thrown ---  2017-12-02 23:41:33,125: INFO: proc(54): run_and_log_output: Output:          --- End of stack trace from previous location where exception was thrown ---  2017-12-02 23:41:33,214: INFO: proc(54): run_and_log_output: Output:    System.Net.Security.Tests.SslStreamAlpnTests.SslStream_StreamToStream_Alpn_Success(clientProtocols: [http/1.1, h2], serverProtocols: [http/1.1, h2], expected: http/1.1) [FAIL]  2017-12-02 23:41:33,214: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure  2017-12-02 23:41:33,214: INFO: proc(54): run_and_log_output: Output:       Expected: http/1.1  2017-12-02 23:41:33,214: INFO: proc(54): run_and_log_output: Output:       Actual:   (null)  2017-12-02 23:41:33,214: INFO: proc(54): run_and_log_output: Output:       Stack Trace:  2017-12-02 23:41:33,215: INFO: proc(54): run_and_log_output: Output:          /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/src/System.Net.Security/tests/FunctionalTests/SslStreamAlpnTests.cs(116,0): at System.Net.Security.Tests.SslStreamAlpnTests.<SslStream_StreamToStream_Alpn_Success>d__3.MoveNext()  2017-12-02 23:41:33,215: INFO: proc(54): run_and_log_output: Output:          --- End of stack trace from previous location where exception was thrown ---  2017-12-02 23:41:33,215: INFO: proc(54): run_and_log_output: Output:          --- End of stack trace from previous location where exception was thrown ---  2017-12-02 23:41:33,215: INFO: proc(54): run_and_log_output: Output:          --- End of stack trace from previous location where exception was thrown ---  ```
25662	area-System.Drawing	Several System.Drawing.Common tests fail locally deterministically	Maybe because I actually have a printer attached, or the specifics of the printer I have attached?  Regardless I should be able to run the tests locally and cleanly.  ```    Discovering: System.Drawing.Common.Tests    Discovered:  System.Drawing.Common.Tests    Starting:    System.Drawing.Common.Tests       System.Drawing.Printing.Tests.PrinterSettingsTests.IsDirectPrintingSupported_ImageFormatSupported_ReturnsExpected(imageFormat: Jpeg) [FAIL]          Assert.Equal() Failure          Expected: True          Actual:   False          Stack Trace:             c:\Users\stoub\Source\Repos\corefx\src\System.Drawing.Common\tests\Printing\PrinterSettingsTests.cs(399,0): at System.Drawing.Printing.Tests.PrinterSettingsTests.IsDirectPrintingSupported_ImageFormat    Supported_ReturnsExpected(ImageFormat imageFormat)       System.Drawing.Printing.Tests.PrinterSettingsTests.IsDirectPrintingSupported_ImageFormatSupported_ReturnsExpected(imageFormat: Png) [FAIL]          Assert.Equal() Failure          Expected: True          Actual:   False          Stack Trace:             c:\Users\stoub\Source\Repos\corefx\src\System.Drawing.Common\tests\Printing\PrinterSettingsTests.cs(399,0): at System.Drawing.Printing.Tests.PrinterSettingsTests.IsDirectPrintingSupported_ImageFormat    Supported_ReturnsExpected(ImageFormat imageFormat)       System.Drawing.Printing.Tests.PrintDocumentTests.Ctor_Default_Success [FAIL]          Assert.Equal() Failure          Expected: FormSource          Actual:   AutomaticFeed          Stack Trace:             c:\Users\stoub\Source\Repos\corefx\src\System.Drawing.Common\tests\Printing\PrintDocumentTests.cs(260,0): at System.Drawing.Printing.Tests.PrintDocumentTests.AssertDefaultPageSettings(PageSettings pa    geSettings)             c:\Users\stoub\Source\Repos\corefx\src\System.Drawing.Common\tests\Printing\PrintDocumentTests.cs(48,0): at System.Drawing.Printing.Tests.PrintDocumentTests.Ctor_Default_Success()       System.Drawing.Printing.Tests.PrintDocumentTests.DefaultPageSettings_Null_ReturnsExpected [FAIL]          Assert.Equal() Failure          Expected: FormSource          Actual:   AutomaticFeed          Stack Trace:             c:\Users\stoub\Source\Repos\corefx\src\System.Drawing.Common\tests\Printing\PrintDocumentTests.cs(260,0): at System.Drawing.Printing.Tests.PrintDocumentTests.AssertDefaultPageSettings(PageSettings pa    geSettings)             c:\Users\stoub\Source\Repos\corefx\src\System.Drawing.Common\tests\Printing\PrintDocumentTests.cs(73,0): at System.Drawing.Printing.Tests.PrintDocumentTests.DefaultPageSettings_Null_ReturnsExpected()    Finished:    System.Drawing.Common.Tests      === TEST EXECUTION SUMMARY ===  c:\Users\stoub\Source\Repos\corefx\Tools\tests.targets(484,5): warning :    System.Drawing.Common.Tests  Total: 4506, Errors: 0, Failed: 4, Skipped: 0, Time: 7.297s [c:\Users\stoub\Source\Repos\corefx\src\Syste  m.Drawing.Common\tests\System.Drawing.Common.Tests.csproj]  ```
25663	area-System.Linq	Soundness feedback requested: Increasing cache success in S.L.Expressions	"Expressions contains a `CanCache(Type)` method that reports on the safety of caching a delegate or information about a method based on whether the type is a mscrolib type that (if generic) has only mscorlib type parameters.    The netfx version allows not just mscorlib types to be considered safe, but also those in System.Core where the cache lives. While there aren't as many types in corefx's S.L.Expressions as there are in netfx's S.Core, this basic principle seems sound to me.    It also seems worth doing, tracking hits and misses (of the outer calls only, ignoring its recursive calls on generic parameters except as they affect the final result) has the tests for Microsoft.CSharp go from 0.05% hits to 54.40% and the tests for System.Dynamic.Runtime go from 0.27% to 41.87%. (S.L.Expressions itself goes from 49.59% to 54.34%, and if anything I was expecting it to be an unfair comparison in explicitly using Expressions types more than other tests would, but it it also does a lot of permutations on the primitive types that would have a high hit rate). That would seem to be enough to suggest that dynamic is attempting to cache with so low a success rate as to maybe not be worth trying, but with the change to include Expressions' types it becomes much more useful.    And it **seems** safe to me, as surely if the types in Expressions were collectible then collecting would also make the static cache collected.    Question 1: Am I wrong in this? Could a type in Expressions be collectible without the `TypeUtils` type becoming collectible (unreachable at least, even if not yet collected) and making the static cache collectible? Because if I am wrong, then this idea isn't safe.    Question 2: If I'm correct in this, and caching uses of these types would be safe, would it also be safe to consider types in assemblies referenced by Expressions (transitively) safe to cache?    Question 3: Iff the answer to the first question is ""safe"" and to the second is ""not safe"", would the assemblies of types that are base types or implemented interfaces of safe types, also be safe (probably too much of a burden to check that to pay off anyway, but figuring out an efficient way to check on this is a separate investigation)."
25665	area-System.IO	Many tests failing after path validation updates	Search for `[ActiveIssue(25665)]` in the tests.
25666	area-System.Numerics	[Discussion] General purpose non-cryptographic hashing API for .NET	Context from https://github.com/dotnet/corefx/issues/14354#issuecomment-348003785:    > @JonHanna, I'd be interested to hear how your testing goes so we can start thinking about what would be useful in a general-purpose non-cryptographic hashing API.    > @morganbr Where would be an appropriate forum to discuss such an API? I expect that such an API would consist of more than just the lowest common denominator, and maybe a good API will also need an improved JIT w.r.t. handling of larger structs. Discussing all that might be better done in a separate issue...    /cc @gimpf, @morganbr, @JonHanna 
25669	area-System.Memory	[System.Memory] Embedded Reference Types compiler bug	"Code that was previously working (on 4.5.0-preview2-25707-02 , which seems to have disappeared!?) breaks on the latest preview: 4.5.0-preview1-26002-01, this is breaking deployment of new CI infrastructure as the working package is not obtainable. I have tried to hunt down the the issue, but it is beyond my understanding.    #### Repro steps    1. dotnet new console    2. dotnet add package System.Memory -v 4.5.0-preview1-26002-01  -s https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json  3. Edit Program.cs and insert `ReadOnlySpan<char> x = ""hello"".AsReadOnlySpan();` before the print statement  4. Run `dotnet build`    #### Project file (repo.csproj)  ```  <Project Sdk=""Microsoft.NET.Sdk"">    <PropertyGroup>      <OutputType>Exe</OutputType>      <TargetFramework>netcoreapp2.0</TargetFramework>    </PropertyGroup>    <ItemGroup>      <PackageReference Include=""System.Memory"" Version=""4.5.0-preview1-26002-01"" />    </ItemGroup>  </Project>  ```  #### Source file (Program.cs)  ```  ?using System;    namespace repo  {      class Program      {          static void Main(string[] args)          {              ReadOnlySpan<char> x = ""hello"".AsReadOnlySpan();              Console.WriteLine(""Hello World!"");          }      }  }  ```      #### Expected behavior    Expected that the above code works, the usage was taken from the Span doco (https://github.com/dotnet/corefxlab/blob/master/docs/specs/span.md)    #### Actual behavior  Compiler error:  Program.cs(10,12): error CS0619: 'ReadOnlySpan<char>' is obsolete: 'Types with embedded references are not supported in this version of your compiler.' [/tmp/repo/repo.csproj]    #### Known workarounds  If you have a cached version of 4.5.0-preview2-25707-02 , you can use this and there will be no errors    #### Related information   Output of dotnet --info  ```  .NET Command Line Tools (2.0.3)    Product Information:   Version:            2.0.3   Commit SHA-1 hash:  eb1d5ee318    Runtime Environment:   OS Name:     debian   OS Version:  9   OS Platform: Linux   RID:         linux-x64   Base Path:   /usr/share/dotnet/sdk/2.0.3/    Microsoft .NET Core Shared Framework Host      Version  : 2.0.3    Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df  ```    Edit: Tagging area owners @KrzysztofCwalina and @ahsonkhan"
25671	area-System.Reflection	Add MemberInfo.IsCollectible & Assembly.IsCollectible	We may wish to treat a collectible assembly or member info differently to a non-collectible. Most obviously, we might want to avoid caching a collectible type or method for a long time and preventing that possible collection. (`Type` has an `IsCollectible` method, but it is not exposed.)    Proposed API:    ```C#  namespace System.Reflection  {      public abstract class Assembly      {          public virtual bool IsCollectible { get; }      }        public abstract class MemberInfo      {          public virtual bool IsCollectible { get; }      }  }  ```    Note that collectibility of assemblies is not the only factor on collectibility of member infos. `TypeBuilder` is derived from `Type` and instances are always collectible.    `TypeDelegator` is itself collectible, but it should report on its delegatee.    **Editted to include all of `MemberInfo` and also `Assembly`.**
25672	area-Microsoft.CSharp	Issue with Workaround: Missing compiler required member 'Microsoft.CSharp.RuntimeBinder.Binder.InvokeMember'	Hi all.    Today, while I'm using Roslyn to compile some code under netcoreapp 2, I got such an error:  Missing compiler required member 'Microsoft.CSharp.RuntimeBinder.Binder.InvokeMember'    If you google this, it will point you to add Microsoft.CSharp as reference while calling Roslyn method. But sadly, it's done in my project.    After several hour digging and testing, I found the problem and solution:  It seems that some methods related to Linq are used in my code. Adding **System.Linq.Expressions** as reference to Roslyn fixes the problem.    Note: Images of these references should be loaded only from TRUSTED_PLATFORM_ASSEMBLIES.  
25674	area-System.IO	Test failure: System.IO.Tests.DirectoryInfo_EnumerateFiles_str_str/SearchPatternByExtension	Opened on behalf of @Sunny-pu  The test `System.IO.Tests.DirectoryInfo_EnumerateFiles_str_str/SearchPatternByExtension` has failed.  Assert.Equal() Failure\r     Expected: 2\r     Actual:   0          Stack Trace:             at System.IO.Tests.Directory_GetFileSystemEntries_str_str.SearchPatternByExtension() in E:\A\_work\965\s\corefx\src\System.IO.FileSystem\tests\Directory\GetFileSystemEntries_str_str.cs:line 158        at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetV(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall)        at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtrForDynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState)        at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566      Build : Master - 20171204.01 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x86   - Release - Windows.10.Amd64.ClientRS3-x64   - Release 
25675	area-System.Runtime	Test failure: System.Runtime.Serialization.Formatters.Tests.BinaryFormatterTests/RoundtripManyObjectsInOneStream	Opened on behalf of @Sunny-pu  The test `System.Runtime.Serialization.Formatters.Tests.BinaryFormatterTests/RoundtripManyObjectsInOneStream` has failed.  System.Runtime.Serialization.SerializationException : The constructor to deserialize an object of type 'System.ComponentModel.Composition.CompositionContractMismatchException' was not found.\r     ---- System.Runtime.Serialization.SerializationException : The constructor to deserialize an object of type 'System.ComponentModel.Composition.CompositionContractMismatchException' was not found.          Stack Trace:             at System.Runtime.Serialization.ObjectManager.CompleteISerializableObject$catch$0() in E:\A\_work\965\s\corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs:line 774        at System.Runtime.Serialization.ObjectManager.FixupSpecialObject($ObjectHolder holder) in E:\A\_work\965\s\corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs:line 198        at System.Runtime.Serialization.ObjectManager.DoFixups() in E:\A\_work\965\s\corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs:line 826        at System.Runtime.Serialization.Formatters.Binary.ObjectReader.Deserialize($BinaryParser serParser, Boolean fCheck) in E:\A\_work\965\s\corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryObjectReader.cs:line 103        at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream serializationStream, Boolean check) in E:\A\_work\965\s\corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\Formatters\Binary\BinaryFormatter.cs:line 66        at System.Runtime.Serialization.Formatters.Tests.BinaryFormatterTests.RoundtripManyObjectsInOneStream()        at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetV(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall)        at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtrForDynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState)        at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566          ----- Inner Stack Trace -----        at System.Runtime.Serialization.ObjectManager.GetDeserializationConstructor(Type t) in E:\A\_work\965\s\corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs:line 794        at System.Runtime.Serialization.ObjectManager.CompleteISerializableObject(Object obj, SerializationInfo info, StreamingContext context) in E:\A\_work\965\s\corefx\src\System.Runtime.Serialization.Formatters\src\System\Runtime\Serialization\ObjectManager.cs:line 770      Build : Master - 20171204.01 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x86   - Release - Windows.10.Amd64.ClientRS3-x64   - Release 
25676	area-System.Net	[Regression] Test failed: System.Net.Http.Functional.Tests.HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test / SetDelegate_ConnectionSucceeds	## Types of failures    ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.IO.IOException : The decryption operation failed, see inner exception.  -------- Interop+OpenSsl+SslException : Decrypt failed with OpenSSL error - SSL_ERROR_SSL.  ------------ System.Security.Cryptography.CryptographicException : Error occurred during a cryptographic operation.  at System.Net.Http.HttpConnection.<SendAsync>d__38.MoveNext() in /root/corefx-1259674/src/System.Net.Http/src/System/Net/Http/Managed/HttpConnection.cs:line 438  --- End of stack trace from previous location where exception was thrown ---  at System.Net.Http.HttpConnectionHandler.<SendAsyncWithAwaitedConnection>d__4.MoveNext() in /root/corefx-1259674/src/System.Net.Http/src/System/Net/Http/Managed/HttpConnectionHandler.cs:line 43  --- End of stack trace from previous location where exception was thrown ---  at System.Net.Http.CookieHandler.<SendAsync>d__3.MoveNext() in /root/corefx-1259674/src/System.Net.Http/src/System/Net/Http/Managed/CookieHandler.cs:line 31  --- End of stack trace from previous location where exception was thrown ---  at System.Net.Http.AuthenticateAndRedirectHandler.<SendAsync>d__7.MoveNext() in /root/corefx-1259674/src/System.Net.Http/src/System/Net/Http/Managed/AuthenticateAndRedirectHandler.cs:line 62  --- End of stack trace from previous location where exception was thrown ---  at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__62.MoveNext() in /root/corefx-1259674/src/System.Net.Http/src/System/Net/Http/HttpClient.cs:line 488  --- End of stack trace from previous location where exception was thrown ---  at System.Net.Http.Functional.Tests.HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test.<>c__DisplayClass3_1.<<SetDelegate_ConnectionSucceeds>b__0>d.MoveNext() in /root/corefx-1259674/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.AcceptAllCerts.cs:line 54  --- End of stack trace from previous location where exception was thrown ---  at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass3_0.<CreateServerAsync>b__0(Task t) in /root/corefx-1259674/src/Common/tests/System/Net/Http/LoopbackServer.cs:line 68  at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state) in /root/coreclr/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 151  at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) in /root/coreclr/src/mscorlib/src/System/Threading/Tasks/Task.cs:line 2440  --- End of stack trace from previous location where exception was thrown ---  at System.Net.Http.Functional.Tests.HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test.<SetDelegate_ConnectionSucceeds>d__3.MoveNext() in /root/corefx-1259674/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.AcceptAllCerts.cs:line 52  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----  at System.Net.Security.SslStreamInternal.<ReadAsyncInternal>d__32`1.MoveNext() in /root/corefx-1259674/src/System.Net.Security/src/System/Net/Security/SslStreamInternal.cs:line 285  --- End of stack trace from previous location where exception was thrown ---  at System.Net.Http.HttpConnection.<FillAsync>d__64.MoveNext() in /root/corefx-1259674/src/System.Net.Http/src/System/Net/Http/Managed/HttpConnection.cs:line 958  --- End of stack trace from previous location where exception was thrown ---  at System.Net.Http.HttpConnection.<ReadNextLineAsync>d__62.MoveNext() in /root/corefx-1259674/src/System.Net.Http/src/System/Net/Http/Managed/HttpConnection.cs:line 867  --- End of stack trace from previous location where exception was thrown ---  at System.Net.Http.HttpConnection.<SendAsync>d__38.MoveNext() in /root/corefx-1259674/src/System.Net.Http/src/System/Net/Http/Managed/HttpConnection.cs:line 313  ----- Inner Stack Trace -----  at Interop.OpenSsl.Decrypt(SafeSslHandle context, Byte[] outBuffer, Int32 offset, Int32 count, SslErrorCode& errorCode) in /root/corefx-1259674/src/Common/src/Interop/Unix/System.Security.Cryptography.Native/Interop.OpenSsl.cs:line 269  at System.Net.Security.SslStreamPal.EncryptDecryptHelper(SafeDeleteContext securityContext, ReadOnlyMemory`1 input, Int32 offset, Int32 size, Boolean encrypt, Byte[]& output, Int32& resultSize) in /root/corefx-1259674/src/System.Net.Security/src/System/Net/Security/SslStreamPal.Unix.cs:line 207  ----- Inner Stack Trace -----  ```    ## History of failures    Lots of failures in CI:  * 12/2-12/18 - 58 failures (avg 3+/day) - see https://github.com/dotnet/corefx/issues/25676#issuecomment-353659053 for details on first failures on 12/2  * 12/19-1/5 - 44 failures (avg 2.5/day)  * 1/6-1/14 - 44 failures (avg 5/day)    Day | Build | OS | Details  --- | --- | --- | ---  1/3 | 20180103.03 | Fedora25 | [ManagedHandler] [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180103.03/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.ManagedHandler_HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test~2FSetDelegate_ConnectionSucceeds(acceptedProtocol:%20Tls,%20requestOnlyThisProtocol:%20False))    # Original report    Related to #25646? cc: @Drawaes
25677	area-System.IO	Don't directly throw Exception System.IO.FileSystem.AccessControl	Hi @JeremyKuhne, @pjanotti, i'm working on this #23748. I did some change on exception type [here](https://github.com/dotnet/corefx/compare/master...MarcoRossignoli:issue_23748_Filesystem), what do you think?(tests on my x64 platform are ok)
25680	area-System.Net	Making sure errors with the BIO's are picked up	Currently just an investigation of #25676
25681	area-System.Xml	 XmlReader.Read shouldn't throw AggregateException 	Fixes https://github.com/dotnet/corefx/issues/25653.
25682	area-Infrastructure	'Implicit conversion loses integer precision' error	Of the last 5 builds, 4 have failed with the following:    > /root/corefx-1191223/src/Native/Unix/System.Native/pal_networking.c:2286:29: error: implicit conversion loses integer precision: 'unsigned long' to 'int' [-Werror,-Wshorten-64-to-32]    Links to these:    https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1190370  https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1191223  https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1191695  https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1192572
25683	area-System.Runtime	Add composition assembly to rd.xml to unblock reflection on exceptions	Fixes https://github.com/dotnet/corefx/issues/25675    Currently building locally to validate.
25684	area-Infrastructure	build.cmd fails when only VS pre-release is installed	On this line    https://github.com/dotnet/corefx/blob/master/run.cmd#L24    I only have VS2017 15.6 which is pre-release. `vswhere.exe` fails to list it as it now requires the `-prerelease` flag to list these versions. It then falls back to VS14 and fails to build binary assets.    
25685	area-Meta	Fix Alpine Linux dependency chain	"The alpine Linux has incorrect parent set to ""any"" instead of ""unix"".  This change fixes that."
25688	area-System.IO	Fix tests for path validation changes on Windows	The tests broke after removing the check for invalid characters api. This Pr fixes the test for the windows platform while keeping them disabled for other platforms
25689	area-Infrastructure	Including pre-release versions of VS for builds	Fixes #25684
25690	area-Infrastructure	CoreFX downloads cli every build	Hi, is there a way to prevent the system from downloading the cli tools every time I build? I'm trying to build on a laptop using a hotspot and it seems unnecessary to download a binary tool every time.
25691	area-System.IO	Explore making state part of the find data	Making the change to put state in RawFindData as suggested by @svick on https://github.com/dotnet/designs/pull/24#issuecomment-348785224. I think this way is better- note that I haven't added state to the transform delegate before, but it is intended to have it per the spec.    @svick, @danmosemsft, @terrajobst  
25692	area-System.Net	Fix Alpine CURL concurrency issue	On Alpine Linux, CURL uses LibreSSL for its HTTPS needs. That creates  the same concurrency issue that we had with LibreSSL on OSX. It was  fixed for OSX only in the past by detecting which SSL library CURL uses  and using shared MultiAgent for all CurlHandler instances.  This change extends it to all Unixes, since if CURL uses LibreSSL on a  Linux distro, we need the same workaround.
25693	area-System.ComponentModel	Fix ArgumentNullException in case of IValidatableObject returns null 	- GetObjectValidationErrors method was updated with checking validate results for null;  - A several unit tests were appended;    (#25495)
25694	area-System.Net	Add missing Shutdown calls in HTTP loopback servers	General goodness, but potentially the cause of https://github.com/dotnet/corefx/issues/25640 and maybe some other issues.    cc: @davidsh, @wfurt, @Priya91 
25696	area-System.IO	Don't directly throw Exception System.IO.FileSystem.AccessControl	Close #25677.  @JeremyKuhne @pjanotti could be System.SecurityException a proper exception to throw?I haven't found any exception class defined under System.Security.AccessControl.
25697	area-System.Threading	Add NS1.3 support to Channels	Fix https://github.com/dotnet/corefx/issues/25121    @weshaggard is this correct?    cc @joshfree there is a cost to supporting other versions -- @weshaggard suggest we not do it unless there's real value. It's your call.
25698	area-System.Data	Don't directly throw Exception System.Data.SqlClient	"@saurabh500 i've found other place where there are ""throw new Exception()"" what do you think?Instead of ArgumentException i found also a more specialized exception InvalidUdtException(but i'm not sure if make sense). "
25699	area-System.Net	MulticastInterface set to loopback index does not work on OSX	setsockopt with IP_MULTICAST_IF value should be a struct in_addr    See  https://github.com/dotnet/corefx/blob/9a563e12649a5f407d57605dc07a82637a22ef48/src/Native/Unix/System.Native/pal_networking.c#L2172    This is call from  https://github.com/dotnet/corefx/blob/8f8b04afb41156aba5530992e3ed062d8bfad611/src/System.Net.Sockets/src/System/Net/Sockets/SocketPal.Unix.cs#L1135    So far seems to me we are just passing an interface index as an integer when linux setsockopt expects and in_addr struct    [EDIT] Link the source code (don't reference master) by @karelz
25702	area-System.Numerics	API Proposal: Add System.Numerics.Half 16 bit floating point number conforming to IEEE 754:2008 binary16	This proposal introduce `System.Half` numeric structure conforming to IEEE 754:2008 `binary16` specification and defines it mainly as a interchange format used at interface between managed code and external code capable of handling `binary16` arithmetic operations. It can be extended to support full `binary16` arithmetic when required coreclr runtime support will be available. Additional extension of functionality could be available in future via language support for new floating-point number literals.     Rationale and Proposed API  ==================  Changing computation requirements have led to extension of IEEE 754 floating point standard with new floating-point number sizes named as `binary16`, `binary32` (equivalent to float), `binary64` (equivalent to double) and `binary128`. Any further extensions are possible in 32 bits increments. Current computation workloads in AI, graphics, media and gaming take advantage of `binary16` format to simultaneously speed up calculations and keep data size small. Increasing number of hardware supports `binary16` (or similar) arithmetic: graphics cards from Nvidia and AMD, Arm processors, Arm and Intel SIMD conversion instructions.    Adding `System.Numerics.Half` API should enable implementation and usage of F16C Intel conversion intrinsics as well as of several Arm intrinsics. In addition `System.Numerics.Half` can be used to support partially IEEE 754 conforming Arm floating-point 16 bit arithmetic.     `System.Numerics.Half` format can represent normalized positive and negative values in the range of `2^{-14}` to `65504`.    System.Numerics.Half API  -----------------    `System.Numerics.Half` is a binary - power of 2 floating point number and its bit representation is as follows: (i) 1 bit represents sign, (ii) 5 bits represent mantissa, and (iii) 11 bits (10 explicitly stored) represent significand.    ```C#  namespace System.Numerics  {      //      // Summary:      //     Represents a half-precision floating-point number.      public struct Half : IComparable, IFormattable, IComparable<Half>, IEquatable<Half>      {          public static readonly Half MinValue;            public static readonly Half Epsilon;            public static readonly Half MaxValue;            public static readonly Half PositiveInfinity;            public static readonly Half NegativeInfinity;            public static readonly Half NaN;            public static bool IsInfinity(Half h);            public static bool IsNaN(Half h);            public static bool IsNegativeInfinity(Half h);            public static bool IsPositiveInfinity(Half h);            public static bool IsNormal(Half h);            public static bool IsSubnormal(Half h);            public static bool IsNegative(Half h);            public static Half Parse(string s);            public static Half Parse(string s, NumberStyles style);            public static Half Parse(string s, NumberStyles style, IFormatProvider provider);            public static Half Parse(string s, IFormatProvider provider);            public bool TryFormat(Span<char> destination, out int charsWritten, ReadOnlySpan<char> format = default, IFormatProvider provider = null);            public static bool TryParse(string s, out Half result);            public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out Half result);            public static bool TryParse(ReadOnlySpan<char> s, out Half result);            public static bool TryParse(ReadOnlySpan<char> s, NumberStyles style, IFormatProvider provider, out Half result);            public int CompareTo(object value);            public int CompareTo(Half value);            public bool Equals(Half obj);            public override bool Equals(object obj);            public override int GetHashCode();            public TypeCode GetTypeCode();            public string ToString(IFormatProvider provider);            public string ToString(string format);            public string ToString(string format, IFormatProvider provider);            public override string ToString();            public static bool operator ==(Half left, Half right);            public static bool operator !=(Half left, Half right);            public static bool operator <(Half left, Half right);            public static bool operator >(Half left, Half right);            public static bool operator <=(Half left, Half right);            public static bool operator >=(Half left, Half right);            public static implicit operator Single(Half value);            public static implicit operator Double(Half value);            public static implicit operator Int32(Half value);            public static implicit operator Int64(Half value);            public static implicit operator Half(Byte value);            public static implicit operator Half(SByte value);            public static implicit operator Half(Int16 value);            public static explicit operator Half(Single value);            public static explicit operator Half(Double value);            public static explicit operator Byte(Half value);            public static explicit operator SByte(Half value);            public static explicit operator Int16(Half value);            public static explicit operator Half(Int32 value);            public static explicit operator Half(Int64 value);      }  }  ```    Naming  ---------  Existing implementations use either Half or _FloatN (_Float16, _Float32) as the name of type implementing IEEE 754 binary16. _FloatN is alredy defined in ISO/IEC TS 18661-3:2015 C language standard. Since IEEE 754 specifies extended binary floating-point types it was naturally adopted by C2x ISO standard as _FloatNx, i.e. _Float64x. Similar naming convention could be useful in .NET framework where besides Single and Double there could be defined IEEE 754:2008 binaryN, binaryNx conformant `System.Numerics.Float8`, `System.Numerics.Float16`, `System.Numerics.Float32`, `System.Numerics.Float64`, `System.Numerics.Float128` etc. types and equivalent to binaryNx `System.Numerics.Float8Ext` ... `System.Numerics.Float64Ext`, `System.Numerics.Float128Ext` types.    This type of naming convention would be intuitively very familiar to programmers due to signed and unsigned integer naming and in addition similar naming convention could be used in the case of implementing decimal numbers covering wider range of bit sizes.    Language support  --------------------  Despite that this part of proposal should go into csharplang repository for the sake of completeness it is included here as well.    Full support of new `System.Numerics.Half` numeric type would require introduction of new numeric literals allowing for type initialization in code. C#/VB/F# language support may be achieved with new numeric floating-point literal suffixes `fxx` for all floating-point type initialization:  ```  Half h = 0.45e-11f16;  Single f = 0.45768e-35f32;  Double d = 0.45678342987e-57f64;  ```  Such scheme would be future proof by allowing support of any size of floating point literal by adjusting `fxx` numeric value. Furthermore, it would allow  to support extended precision binary floating-point literals just by adding `e` or `x` at the end of the suffix i.e. `f64e` or `f64x`.    It is not necessary to introduce new language keyword i.e. `half` to provide language level support for new type, however, it could be beneficial. The timing for such support should be dependent on arithmetic operations support by the runtime.    Arithmetic operations  ------------------------  It is possible to support arithmetic operations on `System.Numerics.Half` on all architectures by implicitly promoting it to `System.Single` and performing calculation using `System.Single` native CPU support and converting result back to `System.Half` and alternatively by using partial support available currently on some Arm processors. Arm `Half` implementation is similar but not conforming to IEEE 754:2008 as it does not support infinities or NaNs. Instead, the range of exponents is extended, so that this format can represent normalized values in the range of 2^{-14} to 131008.    Several vendors are in process of implementing support for Half IEEE 754:2008 arithmetic in silicon and full support for hardware based arithmetic operations should be coming soon.    Updates  ---------  Converted `const Half` syntax to `static readonly`.    Added implicit conversion operators to `Single` and `Double` and explicit conversion operators from `Single` and `Double` and additional possible implicit integer conversions with matching reverse explicit conversions.    Open Problems  -----------------  ### Namespace  It is not entirely clear in which namespace `Half` should be defined. Should it be `System.Half` or `System.Numerics.Half`. C11 standard defines _FloatN (_Float16, _Float32) as supported basic types, therefore, due to C# being in a C language family could follow C.    ### Naming  Referring to existing standardization efforts in C2x it could be desired to keep naming scheme similar and consistent with current naming scheme for integrals. Additional types introduced in IEEE 754:2008 and emergence of 8bit binary float usage may support using FloatNN naming scheme i.e. Float16, Float32, Float64 and in near future Float8 and Float128.  
25703	area-Serialization	Pull out the SerializeAndDeseriaze method into common	Pull out the SerializeAndDeseriaze method into common so the other team can use it for the DCS tests of their types.    #20329    @shmao @zhenlan @mconnew 
25704	area-System.Runtime	In-place Array.Resize	Is there anything blocking us from providing in-place `Array.Resize` experience when the new size is smaller than the current size of the array? It would leave empty space in the heap, but that would be fixed the next time GC compaction runs.
25705	area-System.Net	Dotnet Core 2.0.3 Migration | Encoding unable to translate bytes [8B]	"Hi folks,    Im not sure if this is the correct place for this issue so please tell me if i should move it.    I recently have upgraded one of my apps to use dotnet core 2.0.3 from 1.1.4.    Everything works fine locally but when I deploy to my app service in azure I get the following exception.    ```c#      System.Text.DecoderFallbackException: Unable to translate bytes [8B] at index 1 from specified code page to Unicode.   ```    The code that calls it is a httpclient that talks between the apps.    ```c#      public async Task<T1> Get<T1>(string url, Dictionary<string, string> urlParameters = null) where T1 : DefaultResponse, new()      {          var authToken = _contextAccessor.HttpContext.Request.Cookies[""authToken""];          using (var client = new HttpClient().AcceptJson().Acceptgzip().AddAuthToken(authToken))          {              var apiResponse = await client.GetAsync(CreateRequest(url, urlParameters));                T1 output;              if (apiResponse.IsSuccessStatusCode)              {                  output = await apiResponse.Content.ReadAsAsync<T1>();                  //output.Succeeded = true;              }              else              {                  output = new T1();                  var errorData = GlobalNonSuccessResponseHandler.Handle(apiResponse);                  output.Succeeded = false;                  output.Messages.Add(errorData);              }              return output;          }      }        public static HttpClient AcceptJson(this HttpClient client)      {          client.DefaultRequestHeaders.Clear();          client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(""application/json""));          return client;      }        public static HttpClient Acceptgzip(this HttpClient client)      {          // Commenting this out fixes the issue.          //client.DefaultRequestHeaders.AcceptEncoding.Add(StringWithQualityHeaderValue.Parse(""gzip""));          client.DefaultRequestHeaders.AcceptEncoding.Add(StringWithQualityHeaderValue.Parse(""deflate""));          return client;      }        public static HttpClient AddAuthToken(this HttpClient client, string authToken)      {          client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(""Bearer"", authToken);          return client;      }  ```    I'm a bit stumped as to whats going on.    So I have 2 apps which we call client and server from now on.    Client uses the above code to talk to the server.    Locally this is fine on azure not so, this all worked fine before upgrading.    So I setup the client locally to talk to the server on azure I was able to replicate the issue.    I had a look at the response in fiddler and it is able to correctly decode it.    I decided to remove gzip and then everything started working.    ```c#      client.DefaultRequestHeaders.AcceptEncoding.Add(StringWithQualityHeaderValue.Parse(""gzip""));  ```    Can anyone explain this?    SO question for ref  https://stackoverflow.com/questions/47625708/dotnet-core-2-0-3-migration-encoding-unable-to-translate-bytes-8b    [EDIT] Add C# syntax highlighting by @karelz"
25706	area-System.Runtime	RuntimeInformation.OSArchitecture returns wrong value between net461 and netstandard2.0 and loads two different assemblies	"## **Example:**  Create a new application and a new library:  `dotnet new console`    Repro.cs:  ```csharp  using System;  using System.Runtime.InteropServices;    namespace Repro  {      class Program      {          public static void Main()          {              Console.WriteLine(RuntimeInformation.OSArchitecture + typeof(RuntimeInformation).AssemblyQualifiedName);              var temp = typeof(Environment).GetProperty(""Is64BitOperatingSystem"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static);              if (temp != null)              {                  temp.GetValue(null);                  Console.WriteLine(""Is64BitOS: "" + temp.GetValue(null));              }              ReproLibrary.Class1.Print();          }      }  }  ```  Repro.csproj:  ```csproj  <Project Sdk=""Microsoft.NET.Sdk"">      <PropertyGroup>      <OutputType>Exe</OutputType>      <TargetFramework>net461</TargetFramework>    </PropertyGroup>      <ItemGroup>      <ProjectReference Include=""..\ReproLibrary\ReproLibrary.csproj"" />    </ItemGroup>    </Project>  ```    Now create a class library called ReproLibrary.  ReproLibrary.cs  `dotnet new classlib`    ```csharp  using System;  using System.Runtime.InteropServices;    namespace ReproLibrary  {      public class Class1      {          public static void Print()          {              Console.WriteLine(RuntimeInformation.OSArchitecture + typeof(RuntimeInformation).AssemblyQualifiedName);              var temp = typeof(Environment).GetProperty(""Is64BitOperatingSystem"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static);              if (temp != null)              {                  temp.GetValue(null);                  Console.WriteLine(""Is64BitOS: "" + temp.GetValue(null));              }          }      }  }  ```  ReproLibrary.csproj  ```csproj  <Project Sdk=""Microsoft.NET.Sdk"">      <PropertyGroup>      <TargetFramework>netstandard2.0</TargetFramework>    </PropertyGroup>    </Project>    ```    ## **Expected Result:**  I expect both RuntimeInformation.OSArchitecture to return the same assembly and return the same results. I also expect them both to return x64 as my OS is 64 bit.    ## **Actual Results:**  ```  X64 System.Runtime.InteropServices.RuntimeInformation, System.Runtime.InteropServices.RuntimeInformation, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a  Is64BitOS: True  X86 System.Runtime.InteropServices.RuntimeInformation, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089  Is64BitOS: True  ```    There seems to be two issues here. One is that that the mscorlib library is return x86, which it should not. Secondly, referencing netstandard2.0 and net461 brings two different versions of System.Runtime.InteropServices.RuntimeInformation, which have different behavior. This could be because the machine has net471 on it and the associated issues with it, however it is hard to tell if it is installed.    cc/ @pranavkm @pakrym "
25707	area-System.Runtime	System.Runtime.CompilerServices.Unsafe package needs an updated version for other runtimes	As C# 7.2 is now released there is a need for an updated S.R.CS.Unsafe on runtimes other than .NET Core. I couldn't find any way to get an updated nuget package for S.R.CS.Unsafe, can't even build it from source and the last preview version is from September.
25709	area-System.Diagnostics	Send notification about HTTP response without content (netfx)	On netfx, HttpClient (WebRequests) is not instrumented with DiagnosticSource events.  Instead, DiagnosticSource implements the reflection-based hook that injects instrumentation at runtime if the user enabled it.    The hook does not properly notify about async responses that have 0-length content.  This case is treated specially here: http://referencesource.microsoft.com/#System/net/System/Net/HttpWebResponse.cs,525    It happens because at the hook is called moment, HttpWebRequest does not yet have `_HttpResponse` property assigned (that is used by the hook).    However, it has `_CoreResponse` data holding status code and response headers (that is what we expect listeners to be interested in).    This changes fires a 'Stop' event (with a new name) and new payload (status and headers).    The fix is needed for ApplicationInsights (https://github.com/Microsoft/ApplicationInsights-dotnet-server/issues/739) as it cannot track 0-length responses done with HttpClient on .net fx.    Request to document internal API is submitted - TFS 533155.    @brahmnes @vancem @zakimaksyutov
25710	area-System.IO	Fix tests for path validation changes on Unix	Rebase on PR  #25688  Fixes #25665
25711	area-Microsoft.CSharp	Remove dead code from MS.CSharp's BadOperatorTypesError and related methods	* Remove dead paths in `BadOperatorTypesError`    `pOperand1` is never null, and neither operand can ever have a null or `ErrorType` type, so remove path for those possibilities.    It's worth noting the possible call paths here, and what types they can possibly give to the operands    ```  BadOperatorTypesError      BindLiftedStandardUnop          BindStandardUnaryOperator              Recurse (predef)              RB.BindUnaryOperation (creates the operands, never with ErrorType)      bindNullEqualityComparison          BindStandardBinop              BindBinaryOperation (creates the operands, never with ErrorType)      BadOperatorTypesError (overload)          BindIntegerNeg              BindIntOp                  BindEnumUnaOp (predef)                  BindEnumBinOp (predef)                  BindIntUnaOp (predef-always binding)                  BindIntBinOp (predef-always binding)          BindStandardUnaryOperator (see above)          BindStandardBinop (see above)          BindStandardBinopCore              BindStandardBinop (see above)  ```    * Remove unused parameters from `BadOperatorTypesError`    `ek` and `pTypeErr` are never used, so remove them. Merges the overloads.    * Change `BadOperatorTypesError` to return rather than throwing exceptions    Since it throws in every path, have the error thrown at the call site, making it more clearly an error path.    * Remove `UnwrapExpression`    The only place `ExprWraps` are produced outside of the `ExpressionTreeRewriter` is in `BindUserBoolOp` which passes them to `bindUDUnop`. There's no path that can bring them to `BadOperatorTypesError` which calls `UnwrapExpression`.    * Have `CalculateExprAndUnaryOpKinds` return a value tuple and throw ICE on failure.    Rather than have an impossible condition checked for outside of it.  (ICE is more appropriate, too).    * Have GetBinopKindAndFlags return value tuple and throw ICE on failure.    Rather than have an impossible condition checked for outside of it.  
25712	area-System.Memory	Test failure: System.SpanTests.ReadOnlySpanTests/Overlap(x1: 100, y1: 200, x2: 0, y2: 200, expected: True)	Opened on behalf of @Sunny-pu  The test `System.SpanTests.ReadOnlySpanTests/Overlap(x1: 100, y1: 200, x2: 0, y2: 200, expected: True)` has failed.  System.ArgumentException : Overlapping spans have mismatching alignment.          Stack Trace:             at System.SpanTests.ReadOnlySpanTests.Overlap(Int32 x1, Int32 y1, Int32 x2, Int32 y2, Boolean expected) in E:\A\_work\1835\s\corefx\src\System.Memory\tests\ReadOnlySpan\Overlaps.cs:line 987        at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetVIIIII<System.Int32, System.Int32, System.Int32, System.Int32, System.Boolean>(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall)        at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean isTargetThisCall)        at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566      Build : Master - 20171205.04 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x86   - Release 
25713	area-System.Net	Add several more shutdown calls to sockets tests	Potentially fixes https://github.com/dotnet/corefx/issues/14673.  cc: @wfurt, @davidsh
25715	area-Microsoft.CSharp	MS.CSharp Remove some dead paths for impossible errors in FillInArgInfoFromArgList & BindMethodGroupToArguments	Like #25711 this has more path following and verification than changes, but like it it knocks out an impossible use of `ErrorType` that could allow for a bigger pay-off in simplification when they're all gone.    * Remove `typeErrors` `out` parameter from `CountArguments`    Never used.    * Remove `ref` qualifier from `BindMethodGroupToArgumentsCore` argument.    Never written back.    * Remove unreachable error case from `FillInArgInfoFromArgList`    `arg.Type` can never be null, so remove branch for that happening.    The tributaries of `FillInArgInfoFromArgList`, so to speak are as follows, noting which argument goes on to provide the `arg` local within `FillInArgInfoFromArgList`.    ```  FillInArgInfoFromArgList      ReorderArgumentsForNamedAndOptional (result.OptionalArguments)          BindCall (Creates arguments from ArgumentObjects, which always have type)          CreateIndexer              BindProperty (from ArgumentObject)      BindUDBinop (arg1, arg2)          BindUserDefinedBinOp (info)              BindStandardBinop (arg1, arg2)                  BindBinaryOperation (from ArgumentObject)          BindUserDefinedBinOp (info)              BindStandardBinop (above)      BindMethodGroupToArgumentsCore (args)          BindMethodGroupToArguments (args)              BindWinRTEventAccessor (one from ArgumentObject, one or two with MethodGroupType type)              BindCall (above)              CreateIndexer (above)      bindUDUnop (arg)          BindUnaryOperation (from ArgumentObject)          BindUserBoolOp (pCall.OptionalArguments.OptionalElement)              BindUserDefinedBinOp (above)          PopulateSignatureList (pArgument)              BindStandardUnaryOperator (pArgument)                  BindUnaryOperation (above)                  BindUnaryOperation (predef type)                      BindStandardUnaryOperator (cast to predef type)          PopulateSignatureList (above)  ```    * Remove dead path for impossible error from BindMethodGroupToArguments    `grp.Name` could never be null.    Tracking calls to `BindMethodGroupToArguments` and where `grp.Name` comes from:  ```  BindMethodGroupToArguments      BindWinRTEventAccessor (always predefined named)      BindCall (from payload name)          CreateMemberGroupEXPR (string overload, guarantees always non-null name)      CreateIndexer          CreateMemberGroupEXPR (as above).  ```
25716	area-System.Runtime	Exposed RuntimeWrappedException constructor.	Fixes #24946
25717	area-System.Security	Error to create X509Certificate2 instance	Hi  I try to create an instance from the class X509Certificate2 insight a container using microsoft/aspnetcore:2.0.3-nanoserver-1709 as base image.    Thats the code I use:  ```  var buffer = Convert.FromBase64String(certStringInBase64);  return new X509Certificate2(buffer, password, X509KeyStorageFlags.MachineKeySet);  ```    It works everywhere besides the image I pointed out on top.   On nanoserver 1709 I get the following exception:  ```  Application startup exception: Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException: Object was not found     at Internal.Cryptography.Pal.CertificatePal.FilterPFXStore(Byte[] rawData, SafePasswordHandle password, PfxCertStoreFlags pfxCertStoreFlags)     at Internal.Cryptography.Pal.CertificatePal.FromBlobOrFile(Byte[] rawData, String fileName, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags)     at System.Security.Cryptography.X509Certificates.X509Certificate..ctor(Byte[] rawData, SecureString password, X509KeyStorageFlags keyStorageFlags)     at Sportflash.Extensions.Hosting.Kestrel.Store.Get(SecureString password)     at Sportflash.Extensions.Hosting.Kestrel.AppServiceHostBuilder.GetCertificateOptions()     at Sportflash.Extensions.Hosting.Kestrel.AppServiceHostBuilder.<>c.<UseKestreDependOnEnvironment>b__2_2(ListenOptions c)     at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions.Listen(IPEndPoint endPoint, Action`1 configure)     at Sportflash.Extensions.Hosting.Kestrel.AppServiceHostBuilder.<>c__DisplayClass2_0.<UseKestreDependOnEnvironment>b__1(KestrelServerOptions o)     at Microsoft.Extensions.Options.OptionsFactory`1.Create(String name)     at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)     at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)     at System.Lazy`1.CreateValue()     at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.CreateServiceContext(IOptions`1 options, ILoggerFactory loggerFactory)     at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer..ctor(IOptions`1 options, ITransportFactory transportFactory, ILoggerFactory loggerFactory)  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider)     at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)     at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)     at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider provider)     at Microsoft.AspNetCore.Hosting.Internal.WebHost.EnsureServer()     at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()    Unhandled Exception: Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException: Object was not found     at Internal.Cryptography.Pal.CertificatePal.FilterPFXStore(Byte[] rawData, SafePasswordHandle password, PfxCertStoreFlags pfxCertStoreFlags)     at Internal.Cryptography.Pal.CertificatePal.FromBlobOrFile(Byte[] rawData, String fileName, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags)     at System.Security.Cryptography.X509Certificates.X509Certificate..ctor(Byte[] rawData, SecureString password, X509KeyStorageFlags keyStorageFlags)     at Sportflash.Extensions.Hosting.Kestrel.Store.Get(SecureString password)     at Sportflash.Extensions.Hosting.Kestrel.AppServiceHostBuilder.GetCertificateOptions()     at Sportflash.Extensions.Hosting.Kestrel.AppServiceHostBuilder.<>c.<UseKestreDependOnEnvironment>b__2_2(ListenOptions c)     at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions.Listen(IPEndPoint endPoint, Action`1 configure)     at Sportflash.Extensions.Hosting.Kestrel.AppServiceHostBuilder.<>c__DisplayClass2_0.<UseKestreDependOnEnvironment>b__1(KestrelServerOptions o)     at Microsoft.Extensions.Options.OptionsFactory`1.Create(String name)     at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)     at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)     at System.Lazy`1.CreateValue()     at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.CreateServiceContext(IOptions`1 options, ILoggerFactory loggerFactory)     at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer..ctor(IOptions`1 options, ITransportFactory transportFactory, ILoggerFactory loggerFactory)  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider)     at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)     at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)     at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider provider)     at Microsoft.AspNetCore.Hosting.Internal.WebHost.EnsureServer()     at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()     at Microsoft.AspNetCore.Hosting.WebHostBuilder.Build()     at Sportflash.Extensions.Hosting.Kestrel.AppServiceHostBuilder.Build[TStartup](Int32 port, String[] args)     at Sportflash.Data.Router.Program.Main(String[] args) in E:\Build\AGENT01\_work\16\s\Sportflash.Data.Router\Program.cs:line 10  ```      
25719	area-Meta	Serverless performance analysis	Investigate the performance of Azure Functions
25720	area-Meta	Profile Guided Optimizations: PGO tuning	PGO tuning of native components in the .NET Core stack
25721	area-Meta	Performance scenarions: RWC workloads	Bring up Real World Code scenarios for benchmarking
25722	area-Meta	Cross-platform performance analysis: Linux/Mac/Windows	Cross-platform performance analysis: Linux/Mac/Windows
25723	area-Meta	Competitive performance analysis	Competitive performance analysis across various managed stacks and environments
25725	area-Meta	Performance data publicly available	Per PR/Commit publicly available performance data coming out of the performance reporting systems.
25726	area-System.Collections	Add tests for DataContractSerializer serializing collection types	We need have tests covering DataContractSerializer serializing the following types.  Refer https://github.com/dotnet/corefx/blob/master/src/System.Runtime.Serialization.Xml/tests/DataContractSerializer.cs on how to add the DCS tests using the common helper method.  #20329     - [ ] System.Collections.Generic.LongEnumEqualityComparer`1[[System.Runtime.Serialization.Formatters.Tests.UInt64Enum]]  - [ ] System.Collections.Generic.EnumEqualityComparer`1[[System.Runtime.Serialization.Formatters.Tests.UInt32Enum]]  - [ ] System.Collections.Generic.SByteEnumEqualityComparer`1[[System.Runtime.Serialization.Formatters.Tests.SByteEnum]]  - [ ] System.Collections.Generic.ShortEnumEqualityComparer`1[[System.Runtime.Serialization.Formatters.Tests.Int16Enum]]  - [ ] System.Collections.Generic.SortedList`2[[System.Int32],[System.Runtime.Serialization.Formatters.Tests.Point]]  - [ ] System.Collections.ObjectModel.ObservableCollection`1[[System.Int32]] // The implementations between core and netfx are completely different. I don't think serialization works here without a custom serialization routine  - [ ] System.Collections.ObjectModel.ReadOnlyDictionary`2[[System.Int32],[System.String]]  - [ ] System.Collections.ObjectModel.ReadOnlyObservableCollection`1[[System.Int32]]  - [ ] System.Collections.Specialized.ListDictionary  - [ ] System.Collections.Specialized.StringCollection
25727	area-System.ComponentModel	Add tests for DataContractSerializer serializing BindingList types	We need have tests covering DataContractSerializer serializing the following type.  Refer https://github.com/dotnet/corefx/blob/master/src/System.Runtime.Serialization.Xml/tests/DataContractSerializer.cs on how to add the DCS tests using the common helper method.  #20329    - [ ] System.ComponentModel.BindingList`1[[System.Runtime.Serialization.Formatters.Tests.Point]]
25728	area-System.Data	Add tests for DataContractSerializer serializing SqlTypes types	We need have tests covering DataContractSerializer serializing the following types.  Refer https://github.com/dotnet/corefx/blob/master/src/System.Runtime.Serialization.Xml/tests/DataContractSerializer.cs on how to add the DCS tests using the common helper method.  #20329    - [ ] System.Data.SqlTypes.SqlBoolean  - [ ] System.Data.SqlTypes.SqlByte  - [ ] System.Data.SqlTypes.SqlDateTime  - [ ] System.Data.SqlTypes.SqlDouble  - [ ] System.Data.SqlTypes.SqlInt16  - [ ] System.Data.SqlTypes.SqlInt32  - [ ] System.Data.SqlTypes.SqlInt64  - [ ] System.Data.SqlTypes.SqlString
25729	area-System.Drawing	Add tests for DataContractSerializer serializing System.Drawing types	We need have tests covering DataContractSerializer serializing the following types.  Refer https://github.com/dotnet/corefx/blob/master/src/System.Runtime.Serialization.Xml/tests/DataContractSerializer.cs on how to add the DCS tests using the common helper method.  #20329    - [ ] System.Drawing.Point  - [ ] System.Drawing.PointF  - [ ] System.Drawing.Rectangle  - [ ] System.Drawing.RectangleF  - [ ] System.Drawing.Size  - [ ] System.Drawing.SizeF
25730	area-System.Globalization	Add tests for DataContractSerializer serializing System.Globalization types	We need have tests covering DataContractSerializer serializing the following types.  Refer https://github.com/dotnet/corefx/blob/master/src/System.Runtime.Serialization.Xml/tests/DataContractSerializer.cs on how to add the DCS tests using the common helper method.  #20329    - [ ] System.Globalization.CompareInfo  - [ ] System.Globalization.SortVersion
25731	area-System.Net	Add tests for DataContractSerializer serializing System.Net.Cookie types	We need have tests covering DataContractSerializer serializing the following types.  Refer https://github.com/dotnet/corefx/blob/master/src/System.Runtime.Serialization.Xml/tests/DataContractSerializer.cs on how to add the DCS tests using the common helper method.  #20329    - [ ] System.Net.Cookie  - [ ] System.Net.CookieCollection // I expect issues here as netfx and core are using different types in serialized fields  - [ ] System.Net.CookieContainer
25732	area-Serialization	Add tests for DataContractSerializer serializing System types	We need have tests covering DataContractSerializer serializing the following types.  Refer https://github.com/dotnet/corefx/blob/master/src/System.Runtime.Serialization.Xml/tests/DataContractSerializer.cs on how to add the DCS tests using the common helper method.  #20329    - [x] System.Boolean  - [x] System.Byte  - [x] System.Char  - [x] System.Int16  - [x] System.Int32  - [x] System.Int64  - [ ] System.Lazy`1[[System.Int32]]  - [x] System.SByte  - [x] System.Single  - [x] System.UInt16  - [x] System.UInt32  - [x] System.UInt64
25733	area-System.Security	.Net Core cryptography 	I want to sign a xml file with net core 2     ```c#      using System;      using System.Collections.Generic;      using System.IO;      using System.Linq;      using System.Security.Cryptography;      using System.Security.Cryptography.X509Certificates;      using System.Security.Cryptography.Xml;      using System.Security.Cryptography.Pkcs;      using System.Text;      using System.Threading.Tasks;      RSACryptoServiceProvider rsa = OpenKeyFile(filename, pPassword);      RSAParameters rsaParameters = rsa.ExportParameters(true);        X509Certificate cert = new X509Certificate(pCerFile);      KeyInfoX509Data keyData = new KeyInfoX509Data(cert);        string X509SerialNumber = (System.Text.Encoding.ASCII.GetString(cert.GetSerialNumber())).Reverse();      string X509IssuerName = cert.Issuer.RemoveDiacritics();            X509IssuerSerial xserial;  ```  The X509IssuerSerial  declaration show the following error:   The type name 'X509IssuerSerial' could not be found in the namespace 'System.Security.Cryptography.XML'.   This type has been forwarded to assembly 'System.Security.Cryptography.Pkcs    The documentation shows that I should be in the System.Security.Cryptography.Xml namespace.     Is the other way should I use?     Thanks  Alberto Lopez    [EDIT] Add C# syntax highlighting by @karelz
25734	area-System.Security	Convert Marvin hashing to use ReadOnlySpan	Current managed implementation is using references and Unsafe.Add. This code is virtually unsafe and is problematic when i.e. passed length is invalid. Converting the code to use ReadOnlySpan would mitigate any issues of this kind. Currently it is a caller responsibility to make sure of that.
25736	area-System.Linq	 Replace S.L.Expression's CanCache with the use of Type.IsCollectible	Much more dependable than the conservative approach of only considering mscorlib types collectible.    * Use RunAndCollect on dynamic assemblies used for tests.    Allows for a path to be followed for collectible types (and they should probably have been collectible anyway).
25738	area-System.Collections	Implementing ItemRef API Proposal (C# 7.2 constructs to S.C.I)	Contributes to #25189    * Adds `ItemRef()` to `ImmutableArray<V>` and `ImmutableArray<V>.Builder`.  * Adds `ItemRef()` to `ImmutableList<V>` and `ImmutableList<V>.Builder`.  * Adds `ItemRef()` to `ImmutableSortedSet<V>` and `ImmutableSortedSet<V>.Builder`.  * Adds `PeekRef()` to `ImmutableQueue<V>` and `ImmutableStack<V>`.  * Adds `ValueRef()` to `ImmutableSortedDictionary<V>` and `ImmutableSortedDictionary<V>.Builder`.
25739	area-System.Reflection	System.Reflection.Metadata intermittent failures on RHEL	https://mc.dot.net/#/user/krwq/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/e7eb637d18b531e46e64997fe9de55ae1d52521e/workItem/System.Reflection.Metadata.Tests    All of the errors look more or less like:    ```  System.BadImageFormatException : Invalid COR20 header signature.       at System.Reflection.Metadata.MetadataReader.ReadMetadataHeader(BlobReader& memReader, String& versionString) in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/src/System/Reflection/Metadata/MetadataReader.cs:line 185     at System.Reflection.Metadata.MetadataReader..ctor(Byte* metadata, Int32 length, MetadataReaderOptions options, MetadataStringDecoder utf8Decoder) in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/src/System/Reflection/Metadata/MetadataReader.cs:line 97     at System.Reflection.Metadata.Tests.MetadataReaderTests.GetMetadataReader(Byte[] peImage, Int32& metadataStartOffset, Boolean isModule, MetadataReaderOptions options, MetadataStringDecoder decoder) in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/MetadataReaderTests.cs:line 81     at System.Reflection.Metadata.Tests.AssemblyDefinitionTests.ValidateAssemblyNameForAssemblyDefinition() in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/src/System.Reflection.Metadata/tests/Metadata/TypeSystem/AssemblyDefinitionTests.cs:line 84  ```    
25740	area-Serialization	Add stable version for SGEN	@shmao @zhenlan @mconnew 
25741	area-System.Net	Making a web request with CachePolicy and Fiddler on causes null-reference exception	"This bug occurs in .NET FX (tested .NET Framework 4.5.2 and 4.7). It only occurs when Fiddler is running as well.  The reproducer is a simple GET request with the cache policy enabled:  ```cs  var httpClient = new HttpClient(new WebRequestHandler() { CachePolicy = new RequestCachePolicy(RequestCacheLevel.Default) });  var address = ""http://coastwatch.pfeg.noaa.gov/erddap/wms/jplAmsreSstMon_LonPM180/request?VERSION=1.3.0&SERVICE=WMS&REQUEST=GetCapabilities"";  var str = await httpClient.GetStringAsync(new Uri(address));  ```    This request will fail with a `HttpRequestException`, but if you look at the inner exceptions, what's really happening is a `NullReferenceException` in `HttpWebRequest.CheckCacheUpdateOnResponse():`    https://github.com/Microsoft/referencesource/blob/7de0d30c7c5ef56ab60fee41fcdb50005d24979a/System/net/System/Net/HttpWebRequest.cs#L4310    ![oc7vba1b](https://user-images.githubusercontent.com/1378165/33637297-03c2cd24-d9d5-11e7-8ed1-62885397273f.jpg)    It doesn't seem to happen with all URLs. The above URL has an attachment in the response, which I suspect is related.    /CC @fragmer"
25742	area-System.Data	Reduce blocking calls throughout SqlConnection.OpenAsync() and other async APIs on SqlClient	This is a follow up to the discussion at https://github.com/dotnet/corefx/issues/25620#issuecomment-349428958.     ## TL;DR  the managed SNI implementation in SqlClient contains code that performs the DNS resolution and initiates the socket connection in a blocking manner. Ideally we should replace this with proper async code.     ## Details  We now know about these cases in the constructor of https://github.com/dotnet/corefx/blob/master/src/System.Data.SqlClient/src/System/Data/SqlClient/SNI/SNITcpHandle.cs and we know that it impacts OpenAsync. But there could be other APIs impacted and other parts of the implementation that use blocking calls.     Currently the code in the constructor of `SNITcpHandle` is actually invoking the async versions of the methods (`Dns.GetHostAddressesAsync()` and `Socket.ConnectAsync()`) but then they are blocking on Task.Result.     @saurabh500 has proposed that we switch to the sync versions of those APIs in the constructor as part of the fix for #25620 in the short term.     However in the long term we should look into refactoring the code out of the constructor (e.g. defer the work to a `EnsureConnectedAsync()` private method) so that I can be made proper async.   
25743	area-Meta	Adding a preprocessor check for which C library the compiler is using.	This is related to this issue: https://github.com/dotnet/core-eng/issues/2204    The problem was related to the prototype/implementation of the ioctl function in the MUSL library used by the Alpine OS.    The Alpine OS uses a C library implementation called MUSL. This library declares/implements the ioctl function as ioctl(int, int, ...). However, most Linux distros use the Glibc which declares/implements the ioctl function as ioctl(int, unsigned long, ...). Since a parameter was used to tell the compiler to consider as error the conversions from wider types (unsigned long) to smaller ones (int) the compilation was halting.    A preprocessor check was added to check whether the program is being compiled using the Glibc or not.
25744	area-Microsoft.CSharp	Remove Microsoft.CSharp's BindBinaryAssignmentFailedNullReference	Uncallable as `arguments[0].Type` can never be null (and would have thrown 4 lines previous if it ever was).
25745	area-System.Data	Test failure: System.Data.Common.Tests.DbConnectionTests/ProviderFactoryTest	Opened on behalf of @Sunny-pu  The test `System.Data.Common.Tests.DbConnectionTests/ProviderFactoryTest` has failed.  Assert.NotNull() Failure          Stack Trace:             at System.Data.Common.Tests.DbConnectionTests.ProviderFactoryTest() in E:\A\_work\1434\s\corefx\src\System.Data.Common\tests\System\Data\Common\DbConnectionTests.cs:line 154        at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetV(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall)        at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean isTargetThisCall)        at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566      Build : Master - 20171205.06 (UWP ILC Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x64   - Release 
25746	area-System.Console	Support Console.beep on Linux (Fedora/RHEL)	@chiddekel commented on [Tue Dec 05 2017](https://github.com/dotnet/core/issues/1130)  Run on OS: Fedora 27    Kernel Linux:  4.13.16-302.fc27.x86_64      Step zero: `yum install beep`    First, run` sudo modprobe pcspkr` and then beep should work.      Additional uncomment the /etc/modprobe.d/beep.conf line at:  `# alias platform:pcspkr pcspkr`  to  `alias platform:pcspkr pcspkr`  For automatic load pcspkr module       Run application beep e.g -  `/usr/bin/beep  -f 2000 -l 1000 `    The beep in this case equal to n = 2000 Hz and duration 1000 ms    This is tiny, small C source includes, of beep application.    https://goo.gl/E3kfPy      The portion of this code can be re-write to C# and use in Console.beep implementation for Linux platform.    
25748	area-System.Memory	Implement Span LastIndexOf extension method and add tests	Part of https://github.com/dotnet/corefx/issues/24839    Following IndexOf vectorization from this PR: https://github.com/dotnet/corefx/pull/17143    **Left to do:** LastIndexOfAny APIs    Also did a lot of cleaning and code formatting.    cc @benaadams, @KrzysztofCwalina, @GrabYourPitchforks, @jkotas, @stephentoub 
25749	area-System.Console	Handling of SIGINT, SIGQUIT when SIG_IGN	When dotnet is started with SIGINT, SIGQUIT set to SIG_IGN it should not change the disposition of those signals.    A shell may set these to SIG_IGN to ensure a background process it not killed.  See https://unix.stackexchange.com/questions/356408/strange-problem-with-trap-and-sigint    When set to SIG_IGN, we should keep it at that value because it also affects child processes. If the disposition is changed, the child process will reset to the SIG_DFL.    This means the `Console.CancelKeyPress` will no longer fire. I think this matches with what the shell is trying to achieve.
25750	area-Infrastructure	Build fails `ApiCompat error : 0 : Unable to resolve assembly 'Assembly(Name=System.Private.CoreLib`	I have tried building corefx `master` branch for some time on Windows. It has yet to succeed for me. I've tried on multiple windows machines. Followed the build instructions for windows. Yet it never works. Tried different commits and lately the one below with Visual Studio 15.5 installed. Still fails.    Almost everytime I want to do a contribution I hit these things, spent countless hours building and failing, trying to figure out what is wrong, but fail. It is a bit frustrating ??     I even tried a release branch but it still failed.    What am I doing wrong?    commit: 749194e8d9813d1116520530042c261474341ce8  [init-tools.log](https://github.com/dotnet/corefx/files/1534914/init-tools.log)  [msbuild.log](https://github.com/dotnet/corefx/files/1534897/msbuild.log)  ```  EXEC : ApiCompat error : 0 : Unable to resolve assembly 'Assembly(Name=System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e)' referenced by the implementation assembly 'Ass  embly(Name=mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089)'. [D:\oss\corefx\src\shims\ApiCompat.proj]  EXEC : ApiCompat error : 0 : Unable to resolve assembly 'Assembly(Name=System.Private.Uri, Version=4.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a)' referenced by the implementation assembly 'Assembl  y(Name=System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089)'. [D:\oss\corefx\src\shims\ApiCompat.proj]  EXEC : ApiCompat error : 0 : Unable to resolve assembly 'Assembly(Name=System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e)' referenced by the implementation assembly 'Ass  embly(Name=System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089)'. [D:\oss\corefx\src\shims\ApiCompat.proj]  D:\oss\corefx\src\shims\ApiCompat.proj(76,5): error : TypesMustExist : Type 'Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid' does not exist in the implementation but it does exist in the contract.  D:\oss\corefx\src\shims\ApiCompat.proj(76,5): error : TypesMustExist : Type 'Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid' does not exist in the implementation but it does exist in the con  tract.  D:\oss\corefx\src\shims\ApiCompat.proj(76,5): error : TypesMustExist : Type 'Microsoft.Win32.SafeHandles.SafeFileHandle' does not exist in the implementation but it does exist in the contract.  D:\oss\corefx\src\shims\ApiCompat.proj(76,5): error : TypesMustExist : Type 'Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid' does not exist in the implementation but it does exist in the contract.  D:\oss\corefx\src\shims\ApiCompat.proj(76,5): error : TypesMustExist : Type 'Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid' does not exist in the implementation but it does exist in the contrac  t.  D:\oss\corefx\src\shims\ApiCompat.proj(76,5): error : TypesMustExist : Type 'Microsoft.Win32.SafeHandles.SafeWaitHandle' does not exist in the implementation but it does exist in the contract.  D:\oss\corefx\src\shims\ApiCompat.proj(76,5): error : TypesMustExist : Type 'System.AccessViolationException' does not exist in the implementation but it does exist in the contract.  D:\oss\corefx\src\shims\ApiCompat.proj(76,5): error : TypesMustExist : Type 'System.Action' does not exist in the implementation but it does exist in the contract.  ```  
25752	area-System.Net	Access is denied when calling SystemIPGlobalProperties.GetActiveUdpListeners on UWP	I have a UWP application (minimum version set to 16299, Fall Creators Update) that consumes a .NET Standard 2.0 class library.    When calling `SystemIPGlobalProperties.GetActiveUdpListeners()`, I get an *Access is denied* `NetworkInformationException`.    I have enabled internet (client and server) and intranet capabilities as well as enterprise authentication and system information, all to no avail.     Am I doing something wrong? Limitation? Bug?    >System.Net.NetworkInformation.NetworkInformationException    HResult=0x80004005    Message=Access is denied    Source=System.Net.NetworkInformation    StackTrace:     at System.Net.NetworkInformation.SystemIPGlobalProperties.GetActiveUdpListeners()     at SIPSorcery.Sys.Net.FreePort.FindNextAvailableUDPPort(Int32 startPort)     at ...
25753	area-System.Console	Don't change SIGINT/SIGQUIT handling when they are set to SIG_IGN	Implements https://github.com/dotnet/corefx/issues/25749    CC @stephentoub
25755	area-System.IO	DirectoryInfo.CreateSubdirectory bug allows creation above itself	"`DirectoryInfo.CreateSubdirectory()` throws on absolute paths, or when navigating using ""..\dirname"" above the current location. I think that is by design. However, this invariant breaks if the name after the dots is prefixed with the parent directory name.    Repro:  ```csharp  var info = new DirectoryInfo(@""c:\demo"");  info.Create();  info.CreateSubdirectory(@""..\demo2\sub"");  ```    Which creates ""c:\demo2\sub"" without errors. I believe this is unintended behavior, caused by the next incorrect check: https://github.com/dotnet/corefx/blob/eb0d4388c339288a589bdd7f5e0c9fcd61da4362/src/System.IO.FileSystem/src/System/IO/DirectoryInfo.cs#L84-L87    "
25756	area-System.Threading	Task.WhenAll support for Tuples	`Task.WhenAll` should have a (set of) overload(s) to support returning the wrapped Tasks' results in a strongly typed `Tuple`.    An oversimplified implementation of this would look something like this  ```csharp  public static async Task<(T1, T2)> WhenAll<T1, T2>(Task<T1> task1, Task<T2> task2)  {      return (await task1, await task2);  }  ```  ... and the usage would look something like this  ```csharp  var (x, y) = await Task.WhenAll(AsyncMethod1(), AsyncMethod2());  ```    I believe it would be relatively easy to implement but its value is huge as it allows to write simple but very efficient code that executes in parallel.     Think about initialization logic when we have to gather information from different parts of the system, doing a bunch of `async` calls and either `await`-ing them one-by-one or collect the `Task`s, throw them in a `Task.WhenAll` and then extract the `Result`s.     With `Tuple` being supported on a language level with decomposition, I think this would be a logical addition to the `Task` library.
25757	area-System.Net	Cannot load System.Net.Http, Version=4.0.0.0	I'm using VS 2017.  I have a WinForms application that targets .NET Framework 4.6.1 and I am publishing as a ClickOnce app.  It uses my own Nuget package that targets .NET Standard 1.4.  The Nuget package references System.Net.Http.  When I install the application on a client computer. System.Net.Http.dll is not installed, even though it is referenced in the WinForms application.  App.config references 4.1.1.1.  I have tried copying multiple versions of System.Net.Http to the installed directory, but I get the following error:    ```  System.IO.FileLoadException: Could not load file or assembly 'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)  File name: 'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'    === Pre-bind state information ===  LOG: DisplayName = System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a   (Fully-specified)  LOG: Appbase = file:///C:/Users/.../AppData/Local/Apps/2.0/P14YD5BC.CHQ/B0M3BHKE.N0L/reso..tion_e8792805a00774ea_0001.0000_1ce3e8cb7fcdab99/  LOG: Initial PrivatePath = NULL  Calling assembly : IdentityModel.OidcClient, Version=2.2.0.0, Culture=neutral, PublicKeyToken=null.  ===  LOG: This bind starts in default load context.  LOG: Using application configuration file: C:\Users\...\AppData\Local\Apps\2.0\P14YD5BC.CHQ\B0M3BHKE.N0L\reso..tion_e8792805a00774ea_0001.0000_1ce3e8cb7fcdab99\Resolve.ROI.QC.ClientWF.exe.config  LOG: Using host configuration file:   LOG: Using machine configuration file from C:\Windows\Microsoft.NET\Framework\v4.0.30319\config\machine.config.  LOG: Redirect found in application configuration file: 4.0.0.0 redirected to 4.1.1.1.  LOG: Post-policy reference: System.Net.Http, Version=4.1.1.1, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a  LOG: Attempting download of new URL file:///C:/Users/.../AppData/Local/Apps/2.0/P14YD5BC.CHQ/B0M3BHKE.N0L/reso..tion_e8792805a00774ea_0001.0000_1ce3e8cb7fcdab99/System.Net.Http.DLL.  WRN: Comparing the assembly name resulted in the mismatch: Minor Version  ERR: Failed to complete setup of assembly (hr = 0x80131040). Probing terminated.  ```    [EDIT] Mark log as code by @karelz
25759	area-System.Memory	Consolidate UTF8 inspection / processing APIs to a single assembly	This is a tracking issue for our ZenHub Security Epic.
25760	area-System.Linq	S.L.Expressions rejects valid conversions	"Given an interface `IInterface` and an unsealed class `UnsealedClass` that does not implement it, then the following delegate is valid, and works:    ```C#  Func<NotSealed[], IInterface[]> f = x => (IInterface[])x;  ```    It will fail at runtime if we call `f(new UnsealedClass[0])` but could work if there was a derived class that implemented `IInterface` and we called `f(new Derived[0])`, etc.    However the equivalent expression:    ```C#  Expression<Func<NotSealed[], IInterface[]>> f = x => (IInterface[])x;  ```    fails with `InvalidOperationException`, ""No coercion operator is defined between types 'NotSealed[]' and 'IInterface[]'.""    This is the root cause of #25754"
25761	area-System.Data	Failing connections after multiple requests 	Originally filed by @sebastianroesch as https://github.com/aspnet/EntityFrameworkCore/issues/10494    I have an ASP.NET Core Web application using EF Core 2.0. When performing a bunch of requests that retrieve data from the database, EF Core throws an error after approx. 100 requests. The database is an Azure SQL database and firewall settings are correct. Retrieving data works 80-90% of the times.    This issue has occurred on MacOS and Linux, we did not see it on Windows yet. It happens both on my development machine (Mac) as well as online (Linux). Since our production services are running in Docker, this creates a problem for us.    This is the stack trace of the error:    ```  fail: Microsoft.EntityFrameworkCore.Database.Connection[20004]        An error occurred using the connection to database 'databasename' on server 'azure-database'.  System.Data.SqlClient.SqlException (0x80131904): A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: TCP Provider, error: 40 - Could not open a connection to SQL Server)     at System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, Object providerInfo, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, Boolean applyTransientFaultHandling)     at System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)     at System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)     at System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)     at System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)     at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)     at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)     at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)     at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)     at System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)     at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)     at System.Data.SqlClient.SqlConnection.Open()     at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Open(Boolean errorsExpected)  ClientConnectionId:00000000-0000-0000-0000-000000000000  ```    After a couple of these exceptions, the application crashes with the following error:    ```  dotnet(66933,0x700003cf5000) malloc: *** error for object 0x7fd47fac86d0: pointer being freed was not allocated  *** set a breakpoint in malloc_error_break to debug  ```    The queries that are being performed before the error occurs look like this:    ```  Microsoft.EntityFrameworkCore.Database.Command:Information: Executed DbCommand (27ms) [Parameters=[@___teamId_0='XXX' , @__p_1='X', @__p_2='X'], CommandType='Text', CommandTimeout='30']  SELECT [e.ProjectMembers].[Id], [e.ProjectMembers].[CreatedBy], [e.ProjectMembers].[CreatedOn], [e.ProjectMembers].[DeletedBy], [e.ProjectMembers].[DeletedOn], [e.ProjectMembers].[IsResponsible], [e.ProjectMembers].[ProjectId], [e.ProjectMembers].[ProjectRoleId], [e.ProjectMembers].[TeamId], [e.ProjectMembers].[UpdatedBy], [e.ProjectMembers].[UpdatedOn], [e.ProjectMembers].[UserId]  FROM [projects].[ProjectMembers] AS [e.ProjectMembers]  INNER JOIN (      SELECT DISTINCT [t1].*      FROM (          SELECT [e1].[Id]          FROM [projects].[Projects] AS [e1]          LEFT JOIN [projects].[ProjectTypes] AS [e.ProjectType1] ON [e1].[ProjectTypeId] = [e.ProjectType1].[Id]          LEFT JOIN [projects].[ProjectTypes] AS [e.SalesType1] ON [e1].[SalesTypeId] = [e.SalesType1].[Id]          LEFT JOIN [projects].[ProjectStatuses] AS [e.ProjectStatus1] ON [e1].[ProjectStatusId] = [e.ProjectStatus1].[Id]          WHERE ([e1].[TeamId] = @___teamId_0) AND [e1].[DeletedOn] IS NULL          ORDER BY [e1].[Id]          OFFSET @__p_1 ROWS FETCH NEXT @__p_2 ROWS ONLY      ) AS [t1]  ) AS [t2] ON [e.ProjectMembers].[ProjectId] = [t2].[Id]  ORDER BY [t2].[Id]  ```    ### Steps to reproduce  We use the new Context Pooling like this:    ```c#  services.AddDbContextPool<TDbContext>(                  options => options.UseSqlServer(connectionString,                      sqlOptions =>                      {                          sqlOptions.EnableRetryOnFailure(maxRetryCount: 5,                          maxRetryDelay: TimeSpan.FromSeconds(3),                          errorNumbersToAdd: null);                      })                      .EnableSensitiveDataLogging()                  );  ```    The connection string looks like this (everything else is default):    ```  Data Source=azure-database;Initial Catalog=databasename;Integrated Security=False;User ID=XXX;Password=XXX  ```    ### Further technical details  EF Core version: 2.0.0  Database Provider: Microsoft.EntityFrameworkCore.SqlServer, Azure SQL  Operating system: MacOS  IDE: VS Code 1.18.1  
25762	area-System.Collections	Allow creating a comparer from key selector	### Suggestion    Please make another overload of the `Comparer<T>.Create` method that takes a `Func<T, object>` as a property selector, and will generate a comparer for the selected property.    ### Motive    Currently, if we want to create a comparer for a specific property in an item, we have this option (would love to hear about others):        var set = new SortedSet<User>(       Comparer<User>.Create((u1, u2) => Comparer<string>.Default.Compare(u1.UserName, u2.UserName)));    My suggestion is that instead of having to create another comparer for the property, we should be able to create a comparer for any type by just specifying the property items should be compared by.  So referring to the last example, it would look like this:        var set = new SortedList<User>(Comparer<User>.Create(u => u.UserName));    ### API Change    Expand the [`System.Collections.Generic.Comparer<T>`](https://source.dot.net/#System.Private.CoreLib/src/System/Collections/Generic/Comparer.cs,23592232e4d01ea4) class by adding the following overload of the `Create` method:        public static Comparer<T> Create(Func<T, object> propertySelector);    Which will build a `Comparison<T>` based on the provided lambda property.
25763	area-System.Net	[release/2.0.0] Ensure HttpListener request buffer is aligned as required by the host processor	On Windows, the HttpRecieveHttpRequest function requires a buffer with a memory alignment greater than or equal to the required alignment of the HTTP_REQUEST struct.    This fix ensures that alignment requirements are respected when allocating buffers in HttpListener RequestContextBase. Since HttpReceiveHttpRequest copies both the HTTP_REQUEST struct and the variable length request body into the buffer, we need to be able to allocate a buffer with variable size and with a set alignment. Since C# does not provide a method for specifying the alignment of byte arrays, I switched the underlying buffer to be unmanaged. This unmanaged buffer is allocated using Marshal.AllocHGlobal, which allocates memory at the maximum alignment required by the host processor. This fix differs from the 2.1.0 fix in how it zeros out allocated memory, as 2.0.0 disables support for Span.    Fixes #25289
25764	area-System.Diagnostics	Span tag in the xml documentation for System.Diagnostics.DiagnosticSource.4.4.1	"There's a span tag being generated in the System.Diagnostics.DiagnosticSource.xml file  `<?xml version=""1.0"" encoding=""utf-8""?><span>  <doc>    <assembly>      <name>System.Diagnostics.DiagnosticSource</name>    </assembly>`    I was unable to figure out how or where the span tag is getting added."
25765	area-System.IO	IsolatedStorage random test failures UnauthorizedAccessException / DirectoryNotFoundException on Win 10 RS4 Insider Preview	**repro**  ./clean.cmd --all  ./build.cmd  ./build-tests.cmd    **output snippet:**    UnauthorizedAccessException  ```[Microsoft (R) .NET Core Xml Serialization Generation Utility, Version 1.0.0-preview1]    Copyright (C) Microsoft Corporation. All rights reserved.    Using D:\dd\corefx\bin\testhost\netcoreapp-Windows_NT-Debug-x64\ as the test runtime folder.    Executing in D:\dd\corefx\bin\tests\System.IO.IsolatedStorage.Tests\netcoreapp-Windows_NT-Debug-x64\    Running tests... Start time: 13:32:08.18    xUnit.net console test runner (64-bit .NET Core)    Copyright (C) 2014 Outercurve Foundation.      Discovering: System.IO.IsolatedStorage.Tests    Serialization Code File Name: D:\dd\corefx\bin\tests\Microsoft.XmlSerializer.Generator.Tests\netcoreapp-Windows_NT-Debug-x64\Microsoft.XmlSerializer.Generator.Tests.XmlSerializers.cs.    Generated serialization code for assembly D:\dd\corefx\bin\tests\Microsoft.XmlSerializer.Generator.Tests\netcoreapp-Windows_NT-Debug-x64\Microsoft.XmlSerializer.Generator.Tests.dll --> 'D:\dd\corefx\bin\tests\Microsoft.XmlSerializer.Generator.Tests\netcoreapp-Windows_NT-Debug-x64\Microsoft.XmlSerializer.Generator.Tests.XmlSerializers.cs'.    Discovered:  System.IO.IsolatedStorage.Tests    Starting:    System.IO.IsolatedStorage.Tests    Finished:    Microsoft.XmlSerializer.Generator.Tests      === TEST EXECUTION SUMMARY ===       Microsoft.XmlSerializer.Generator.Tests  Total: 73, Errors: 0, Failed: 0, Skipped: 0, Time: 1.634s       System.IO.IsolatedStorage.ContainsUnknownFilesTests.ContainsUnknownFiles_CleanStore(scope: MachineStoreForDomain) [FAIL]          System.UnauthorizedAccessException : Access to the path 'C:\ProgramData\IsolatedStorage\jdnr2up3.r5o\tzo0ywlm.ejr\StrongName.523eyfdtenor3l0btjpf240vsoo5jc3i\StrongName.523eyfdtenor3l0btjpf240vsoo5jc3i\Files\' is denied.          Stack Trace:    Finished running tests.  End time=13:32:09.26, Exit code = 0             D:\dd\corefx\src\System.IO.FileSystem\src\System\IO\Win32FileSystem.cs(157,0): at System.IO.Win32FileSystem.CreateDirectory(String fullPath)             D:\dd\corefx\src\System.IO.FileSystem\src\System\IO\Directory.cs(41,0): at System.IO.Directory.CreateDirectory(String path)             D:\dd\corefx\src\System.IO.IsolatedStorage\src\System\IO\IsolatedStorage\Helper.Win32.cs(17,0): at System.IO.IsolatedStorage.Helper.CreateDirectory(String path, IsolatedStorageScope scope)             D:\dd\corefx\src\System.IO.IsolatedStorage\src\System\IO\IsolatedStorage\IsolatedStorageFile.cs(665,0): at System.IO.IsolatedStorage.IsolatedStorageFile.Initialize(IsolatedStorageScope scope)             D:\dd\corefx\src\System.IO.IsolatedStorage\src\System\IO\IsolatedStorage\IsolatedStorageFile.cs(590,0): at System.IO.IsolatedStorage.IsolatedStorageFile.GetStore(IsolatedStorageScope scope)             D:\dd\corefx\src\System.IO.IsolatedStorage\src\System\IO\IsolatedStorage\IsolatedStorageFile.cs(584,0): at System.IO.IsolatedStorage.IsolatedStorageFile.GetMachineStoreForDomain()             D:\dd\corefx\src\System.IO.IsolatedStorage\tests\System\IO\IsolatedStorage\IsoStorageTest.cs(61,0): at System.IO.IsolatedStorage.IsoStorageTest.GetPresetScope(PresetScopes scope)             D:\dd\corefx\src\System.IO.IsolatedStorage\tests\System\IO\IsolatedStorage\ContainsUnknownFilesTests.cs(22,0): at System.IO.IsolatedStorage.ContainsUnknownFilesTests.ContainsUnknownFiles_CleanStore(PresetScopes scope)    Finished:    System.IO.IsolatedStorage.Tests      === TEST EXECUTION SUMMARY ===  D:\dd\corefx\Tools\tests.targets(484,5): warning :    System.IO.IsolatedStorage.Tests  Total: 237, Errors: 0, Failed: 1, Skipped: 0, Time: 1.211s [D:\dd\corefx\src\System.IO.IsolatedStorage\tests\System.IO.IsolatedStorage.Tests.csproj]    Finished running tests.  End time=13:32:10.07, Exit code = 1  ```        DirectoryNotFoundException   ```    Discovering: System.IO.IsolatedStorage.Tests    Discovered:  System.IO.IsolatedStorage.Tests    Serialization Code File Name: D:\dd\corefx\bin\tests\Microsoft.XmlSerializer.Generator.Tests\netcoreapp-Windows_NT-Debug-x64\Microsoft.XmlSerializer.Generator.Tests.XmlSerializers.cs.    Generated serialization code for assembly D:\dd\corefx\bin\tests\Microsoft.XmlSerializer.Generator.Tests\netcoreapp-Windows_NT-Debug-x64\Microsoft.XmlSerializer.Generator.Tests.dll --> 'D:\dd\corefx\bin\tests\Microsoft.XmlSerializer.Generator.Tests\netcoreapp-Windows_NT-Debug-x64\Microsoft.XmlSerializer.Generator.Tests.XmlSerializers.cs'.    Starting:    System.IO.IsolatedStorage.Tests       System.IO.IsolatedStorage.ContainsUnknownFilesTests.ContainsUnknownFiles_NotOkDirectory(scope: MachineStoreForAssembly) [FAIL]          System.IO.DirectoryNotFoundException : Could not find a part of the path 'C:\ProgramData\IsolatedStorage\rd4lgwfs.xdt\f0v0e01q.wwi\StrongName.523eyfdtenor3l0btjpf240vsoo5jc3i\AssemFiles\'.          Stack Trace:             D:\dd\corefx\src\System.IO.FileSystem\src\System\IO\Win32FileSystem.cs(157,0): at System.IO.Win32FileSystem.CreateDirectory(String fullPath)             D:\dd\corefx\src\System.IO.FileSystem\src\System\IO\Directory.cs(41,0): at System.IO.Directory.CreateDirectory(String path)             D:\dd\corefx\src\System.IO.IsolatedStorage\src\System\IO\IsolatedStorage\Helper.Win32.cs(17,0): at System.IO.IsolatedStorage.Helper.CreateDirectory(String path, IsolatedStorageScope scope)             D:\dd\corefx\src\System.IO.IsolatedStorage\src\System\IO\IsolatedStorage\IsolatedStorageFile.cs(665,0): at System.IO.IsolatedStorage.IsolatedStorageFile.Initialize(IsolatedStorageScope scope)             D:\dd\corefx\src\System.IO.IsolatedStorage\src\System\IO\IsolatedStorage\IsolatedStorageFile.cs(590,0): at System.IO.IsolatedStorage.IsolatedStorageFile.GetStore(IsolatedStorageScope scope)             D:\dd\corefx\src\System.IO.IsolatedStorage\src\System\IO\IsolatedStorage\IsolatedStorageFile.cs(579,0): at System.IO.IsolatedStorage.IsolatedStorageFile.GetMachineStoreForAssembly()             D:\dd\corefx\src\System.IO.IsolatedStorage\tests\System\IO\IsolatedStorage\IsoStorageTest.cs(59,0): at System.IO.IsolatedStorage.IsoStorageTest.GetPresetScope(PresetScopes scope)             D:\dd\corefx\src\System.IO.IsolatedStorage\tests\System\IO\IsolatedStorage\ContainsUnknownFilesTests.cs(77,0): at System.IO.IsolatedStorage.ContainsUnknownFilesTests.ContainsUnknownFiles_NotOkDirectory(PresetScopes scope)    Finished:    Microsoft.XmlSerializer.Generator.Tests      === TEST EXECUTION SUMMARY ===       Microsoft.XmlSerializer.Generator.Tests  Total: 73, Errors: 0, Failed: 0, Skipped: 0, Time: 1.339s    Finished running tests.  End time=13:53:49.03, Exit code = 0    Finished:    System.IO.IsolatedStorage.Tests      === TEST EXECUTION SUMMARY ===  D:\dd\corefx\Tools\tests.targets(484,5): warning :    System.IO.IsolatedStorage.Tests  Total: 237, Errors: 0, Failed: 1, Skipped: 0, Time: 1.306s [D:\dd\corefx\src\System.IO.IsolatedStorage\tests\System.IO.IsolatedStorage.Tests.csproj]  ```  
25766	area-Infrastructure	MSB3277 warnings when building aspnetcore while referencing newest 2.1 runtime	"Scanning through our build logs after we tried to ingest the newest shared runtime, I'm beginning to see warnings from msbuild: `C:\Users\johluo\.dotnet\x64\sdk\2.2.0-preview1-007522\Microsoft.Common.CurrentVersion.targets(2041,5): warning MSB3277: Found conflicts between different versions of ""System.Security.Cryptography.Cng"" that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed. [C:\gh\tp\TestDeps\TestDeps.csproj]`. A simplified repro is available at https://github.com/JunTaoLuo/PackageConflictWarnings. I've also included the diagnostic build log as build.log in the repro.    cc @weshaggard @pranavkm @natemcmaster     related: https://github.com/aspnet/Universe/issues/671    `dotnet --info`:  ```  .NET Command Line Tools (2.2.0-preview1-007522)    Product Information:   Version:            2.2.0-preview1-007522   Commit SHA-1 hash:  d58fc6120d    Runtime Environment:   OS Name:     Windows   OS Version:  10.0.16299   OS Platform: Windows   RID:         win10-x64   Base Path:   C:\Users\johluo\.dotnet\x64\sdk\2.2.0-preview1-007522\    Microsoft .NET Core Shared Framework Host      Version  : 2.1.0-preview1-25914-0    Build    : 352f0c04c28a53a47eaec4fccff002a813e40c60  ```"
25768	area-System.Linq	Have S.L.Expressions accept conversions it incorrectly rejects.	Extend the conversion checks to allow array-related explicit reference conversions that were rejected by `Expression.Convert` and `Expression.CheckedConvert`.    Fixes #25760, and hence fixes #25754
25769	area-Serialization	Update Sgen Package Version to 1.1.0	
25770	area-System.Memory	Change Pin to take an optional integer offset	Resolves: https://github.com/dotnet/corefx/issues/25229    ~Depends on similar changes to be made in coreclr first for CI to pass - https://github.com/dotnet/coreclr/pull/15410~    Depends on the following for the CI to pass: https://github.com/dotnet/coreclr/pull/15946    cc @KrzysztofCwalina, @jkotas, @stephentoub, @pakrym, @davidfowl
25771	area-System.Text	Regex - Support Possessive Quantifiers	Current popular regex engines like `java.util.regex` or `PCRE` support greedy, lazy and possessive quantifiers. The current .NET regex engine does only support the former two. Though possessive quantifiers are syntactic sugar and can be mimicked with atomic grouping today, consider supporting them as they gained popularity over the last years.     Abstract:  Possessive quantifiers work the same as greedy quantifiers but without backtracking on the input string. That means that the following pattern `D++[A-Z]+` matches the input string `DDDDE` but not `DDDD`.  
25773	area-Infrastructure	System.Net.Http v4.2.0.0 being copied/loaded from MSBuild tooling	"This issue was mentioned in the following comment, but that thread seemed to deal primarily with a different scenario.  @karelz requested a separate issue be filed and it doesn't seem that happened.    https://github.com/dotnet/corefx/issues/22781#issuecomment-322691420    The issue seems to be that when adding a reference to certain nuget packages, the version of System.Net.Http in the bin directory gets copied from   C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\Microsoft\Microsoft.NET.Build.Extensions\net461\lib\System.Net.Http.dll which is a later version than what is available on nuget.    Here is the simplest repro I could come up with:    1. Using VS Enterprise 15.5, create a new console app 'ConsoleApp1' that targets .net 4.6.1  2. Create a new class library 'ClassLibrary1' that targets .net 4.6.1  3. ConsoleApp1 references ClassLibrary1  4. Add nuget package System.Net.Http v4.3.3 to ConsoleApp1  5. Add nuget package System.Net.Http v4.3.3 to ClassLibrary1  6. ClassLibrary1.Class1 needs to instantiate HttpClient and ConsoleApp1.Program needs to instantiate HttpClient and ClassLibrary1.Class1  7. At this point everything builds/runs fine.       a.  Version of System.Net.Http in both bin directories is v4.1.1.2 dated 9/5/2017.       b.  If you look at the System.Net.Http reference in the VS properties window of solution explorer, it will show the version as 4.1.1.2.       c.  In the properties window ClassLibrary1 shows the path {solution_dir}\packages\System.Net.Http.4.3.3\lib\net46\System.Net.Http.dll  8. Add nuget package System.Collections.Immutable v1.4.0 to ClassLibrary1  9. At this point there are problems    a.  Building will generate the warning ""Found conflicts between different versions of 'System.Net.Http' that could not be resolved""    b.  Running the app will generate a run-time exception: ""Unhandled Exception: System.IO.FileLoadException: Could not load file or assembly 'System.Net.Http, Version=4.2.0.0""    c.  Version of System.Net.Http in the ClassLibrary1 bin directory is v4.2.0.0 and dated 12/4/2017    d.  The reference properties window in VS for ClassLibrary1 shows the path as C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\Microsoft\Microsoft.NET.Build.Extensions\net461\lib\System.Net.Http.dll    In short, for some reason after adding nuget package for System.Collections.Immutable v1.4.0, the MSBuild version of System.Net.Http seems to get introduced into the project and causes problems.    I don't know if System.Collections.Immutable is unique in triggering this scenario. The previous issue/comment suggests that other packages might also trigger this (System.Threading.Tasks.Dataflow)    I can work around this issue with the following binding redirect:    ````    <runtime>      <assemblyBinding xmlns=""urn:schemas-microsoft-com:asm.v1"">        <dependentAssembly>          <assemblyIdentity name=""System.Net.Http"" publicKeyToken=""b03f5f7f11d50a3a"" culture=""neutral"" />          <bindingRedirect oldVersion=""0.0.0.0-4.2.0.0"" newVersion=""4.1.1.2"" />        </dependentAssembly>      </assemblyBinding>    </runtime>  ````  But it seems incorrect to have to redirect backwards like that."
25774	area-System.Net	The type initializer for 'System.Net.Http.CurlHandler' threw an exception	"Hi,    I'm getting a weird error while running my server under CentOS. It said it is **""Unable to load DLL 'System.Net.Http.Native'""** (see exception below), and it only occurs when I start the server during startup using systemd or manually in Linux Screen, not in regular shell (Bash, PuTTY).     Why is this happening? From what I have found on Google, it seems to be an issue with openssl-libs, but how come it is working in the shell?    Being quite new to Linux I don't know the difference between the environments.     More details below  ---------  I use the same user in all cases.  The systemd .service is minimal, default type, only an After=network.target  The server does not use TLS/SSL encryption.     CentOS Linux release 7.4.1708 (Core)  Dotnet --version 2.0.3    Here is a list of the [dependencies](https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x) (according to Yum). I've updated all packages so there are not later version available (in Yum).      ```  libunwind.x86_64         2:1.2-2.el7   lttng-ust.x86_64         2.4.1-4.el7)  libcurl.x86_64           7.29.0-42.el7_4.1   openssl-libs.x86_64      1:1.0.2k-8.el7   libuuid.x86_64           2.23.2-43.el7_4.2  krb5-libs.x86_64         1.15.1-8.el7     libicu.x86_64            50.1.2-15.el7       zlib.x86_64              1.2.7-17.el7   ```    ```  System.TypeInitializationException: The type initializer for 'System.Net.Http.CurlHandler' threw an exception. ---> System.TypeInitializationException: The type initializer for 'Http' threw an exception. ---> System.TypeInitializationException: The type initializer for 'HttpInitializer' threw an exception. ---> System.DllNotFoundException: Unable to load DLL 'System.Net.Http.Native': The specified module or one of its dependencies could not be found.   (Exception from HRESULT: 0x8007007E)     at Interop.Http.GetSslVersionDescription()     at Interop.HttpInitializer..cctor()     --- End of inner exception stack trace ---     at Interop.Http..cctor()     --- End of inner exception stack trace ---     at Interop.Http.GetSupportedFeatures()     at System.Net.Http.CurlHandler..cctor()     --- End of inner exception stack trace ---     at System.Net.Http.CurlHandler..ctor()     at System.Net.Http.HttpClientHandler..ctor()     at Veridict.LiveMap.ServerPlatform.Modules.GtfsRt.GtfsRtModule.Run()     at System.Threading.Thread.ThreadMain_ThreadStart()     at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)  ```"
25776	area-System.Net	Linux Dns.GetHostEntry doesn't work on Linux	"The Dns.GetHostEntry doesn't work at all on netcore 2.0.0 on Ubuntu.  It do work on windows netcore 2.0.0    Helpfully Dns.Resolve works on Linux as expected.    System.Net.Dns.GetHostEntry(""192.168.1.21"");  //fails with unreachable host  System.Net.Dns.Resolve(""192.168.1.21""); // works on the same station on Linux.    I can see the same issue closed #15640 but I can reproduce this bug."
25777	area-System.Memory	Span: Add BinarySearch(...) extension methods for ReadOnlySpan<T> (and Span<T>)	"Implements https://github.com/dotnet/corefx/issues/15818    This is currently an early work-in-progress with the current status:  - [x] Basic binary search implemented based on coreclr implementation.  - [x] Basic tests  - [x] Can we remove the `try/catch` in the implementation? Why is it there? REMOVED, per review comment.  - [x]  Tests for all overloads.  - [x] Add overflow test (Q: Not in OuterLoop currently, since pretty fast, should it be still?)  - [x] Compute median in `uint` with single add and shift  - [x] Revise API to use `in` on e.g. `TComparer`, `TComparable`. Commented on initial proposal to change this.  - [x] Undo use of `in` since it will always pass by `ref` which will not be good for small types.  - [x] Fix xml comments, currently quick-copy-paste (Q: Where are the XML docs for `Array.BinarySearch`? couldn't find them, copy from VS F12)  - [x] Tests, tests, tests. (Q: `coreclr` has a lot of ""weird"" tests, guidance on tests needed here would be good? Not using these... seem unnecessary)  - [x] SKIPPED Performance tests.  (Q: again `coreclr` has a lot of ""weird"" tests, guidance on tests needed here would be good? What scenarios? Also see code comments.)  - [x] Investigate assembly and do quick benchmark, see comments.  - [x] Address review issues.  - [x] Finalize and clean up.    cc: @karelz a heads up, since I started preliminary work on this. Hopefully after this I can continue with `Sort`.  cc: @jkotas if you could review and perhaps answer some questions, thank you."
25778	area-Infrastructure	Enable Alpine Linux CI	This change enables CI build for Alpine Linux. It only builds the  product, but it doesn't run the test yet since there is no Alpine queue  support in Helix yet.    The Alpine build is automatically enabled for all PRs.
25779	area-System.Numerics	Add a BCL tensor API to represent multi-dimensional data for machine learning	"# Rationale    See https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/ for rationale.    The main tagline:  The motivation behind introducing Tensor<T> is to make it easy for Machine Learning library vendors like CNTK, Tensorflow, Caffe, Scikit-Learn to port their libraries over to .NET with minimal dependencies in place.    # Usage:    ### Scenario 1 - convert an Bitmap to Tensor to prepare the data to pass into a machine learning algorithm. Taken from [here](https://github.com/dotnet-architecture/MNISTTensorCNTK/blob/1f9660e4208458d5d70e015bcefe333b3bce4285/Digitz/DigitRecognizer.cs#L35-L59)  ```C#          /// <summary>          /// Converts the image into the expected data for the MNIST model.          /// </summary>          private Tensor<float> ConvertImageToTensorData(Bitmap image)          {              int width = _mnistInput.Shape.Dimensions[0];              int height = _mnistInput.Shape.Dimensions[1];              image = ResizeImage(image, new Size(width, height));                Tensor<float> imageData = new DenseTensor<float>(new[] { width, height }, reverseStride: true); // CNTK uses ColumnMajor layout                for (int x = 0; x < width; x++)              {                  for (int y = 0; y < height; y++)                  {                      Color color = image.GetPixel(x, y);                      float pixelValue = (color.R + color.G + color.B) / 3;                        // Turn to black background and white digit like MNIST model expects                      imageData[x, y] = (255 - pixelValue);                  }              }                return imageData;          }  ```    ### Scenario 2 - Pass Tensor data into a native library that does math operations. Taken from [here](https://github.com/eerhardt/TensorLinearAlgebra/blob/e3f98eebad6af91a851131164b89c6e02f3e19fd/LinearAlgebra.cs#L12)  ```C#          /// <summary>          /// Solves the system of linear equations AX = B for X, where A, B, and X are general matrices.          /// </summary>          /// <param name=""a""></param>          /// <param name=""b""></param>          /// <returns></returns>          public static DenseTensor<double> Solve(DenseTensor<double> a, DenseTensor<double> b)          {              if (a.Rank != 2) throw new ArgumentException(""a must be a square matrix"", nameof(a));              if (a.Dimensions[0] != a.Dimensions[1]) throw new ArgumentException(""a must be a square matrix"", nameof(a));              if (b.Rank != 2) throw new ArgumentException(""b must be a matrix"", nameof(b));              if (a.Dimensions[0] != b.Dimensions[0]) throw new ArgumentException(""The number of rows in b must match the number of rows in a"", nameof(b));                // need to clone the inputs because LAPack will mutate the values              var aClone = (DenseTensor<double>)a.Clone();              var bClone = (DenseTensor<double>)b.Clone();                unsafe              {                  Span<int> pivotIntegers = stackalloc int[a.Dimensions[1]];                  fixed (double* aPtr = &aClone.Buffer.Span.DangerousGetPinnableReference())                  fixed (double* bPtr = &bClone.Buffer.Span.DangerousGetPinnableReference())                  fixed (int* ipiv = &pivotIntegers.DangerousGetPinnableReference())                  {                      LAPACKE_dgesv(                          a.IsReversedStride ? LAPACK_COL_MAJOR : LAPACK_ROW_MAJOR,                           a.Dimensions[0],                           b.Dimensions[1],                           aPtr,                           a.Dimensions[1],                           ipiv,                           bPtr,                           b.Dimensions[1]);                  }              }                return bClone;          }            [DllImport(""liblapacke.dll"")]          static extern unsafe int LAPACKE_dgesv(int matrix_layout, int n, int nrhs, double* a, int lda, int* ipvt, double* bx, int ldb);      }  ```    # Proposed API    ```C#  namespace System.Numerics.Tensors  {      // All interface members will be implemented explicitly unless exposed below      public abstract class Tensor<T> : ICollection, ICollection<T>, IEnumerable, IEnumerable<T>, IList, IList<T>, IReadOnlyCollection<T>, IReadOnlyList<T>, IStructuralComparable, IStructuralEquatable      {          protected Tensor(Array fromArray, bool reverseStride);          protected Tensor(int length);          protected Tensor(ReadOnlySpan<int> dimensions, bool reverseStride);            public ReadOnlySpan<int> Dimensions { get; }          public bool IsFixedSize { get; }          public bool IsReadOnly { get; }          public bool IsReversedStride { get; }          public long Length { get; }          public int Rank { get; }          public ReadOnlySpan<int> Strides { get; }            public virtual T this[params int[] indices] { get; set; }          public virtual T this[ReadOnlySpan<int> indices] { get; set; }            public abstract Tensor<T> Clone();          public virtual Tensor<T> CloneEmpty();          public virtual Tensor<T> CloneEmpty(ReadOnlySpan<int> dimensions);          public virtual Tensor<TResult> CloneEmpty<TResult>();          public abstract Tensor<TResult> CloneEmpty<TResult>(ReadOnlySpan<int> dimensions);            protected virtual bool Contains(T item);          protected virtual void CopyTo(T[] array, int arrayIndex);          protected virtual int IndexOf(T item);            public virtual void Fill(T value);            public string GetArrayString(bool includeWhitespace=true);            public Tensor<T> GetDiagonal();          public Tensor<T> GetDiagonal(int offset);            public Tensor<T> GetTriangle();          public Tensor<T> GetTriangle(int offset);            public Tensor<T> GetUpperTriangle();          public Tensor<T> GetUpperTriangle(int offset);            public abstract T GetValue(int index);          public abstract void SetValue(int index, T value);            public Tensor<T> MatrixMultiply(Tensor<T> right);            public abstract Tensor<T> Reshape(ReadOnlySpan<int> dimensions);            public Tensor<T> Slice(params Range[] ranges);          public virtual Tensor<T> Slice(ReadOnlySpan<Range> ranges);            public virtual CompressedSparseTensor<T> ToCompressedSparseTensor();          public virtual DenseTensor<T> ToDenseTensor();          public virtual SparseTensor<T> ToSparseTensor();            public static int Compare(Tensor<T> left, Tensor<T> right);          public static bool Equals(Tensor<T> left, Tensor<T> right);            public static Tensor<T> operator +(Tensor<T> left, Tensor<T> right);          public static Tensor<T> operator +(Tensor<T> tensor, T scalar);          public static Tensor<T> operator &(Tensor<T> left, Tensor<T> right);          public static Tensor<T> operator &(Tensor<T> tensor, T scalar);          public static Tensor<T> operator |(Tensor<T> left, Tensor<T> right);          public static Tensor<T> operator |(Tensor<T> tensor, T scalar);          public static Tensor<T> operator --(Tensor<T> tensor);          public static Tensor<T> operator /(Tensor<T> left, Tensor<T> right);          public static Tensor<T> operator /(Tensor<T> tensor, T scalar);          public static Tensor<T> operator ^(Tensor<T> left, Tensor<T> right);          public static Tensor<T> operator ^(Tensor<T> tensor, T scalar);          public static Tensor<T> operator ++(Tensor<T> tensor);          public static Tensor<T> operator <<(Tensor<T> tensor, int value);          public static Tensor<T> operator %(Tensor<T> left, Tensor<T> right);          public static Tensor<T> operator %(Tensor<T> tensor, T scalar);          public static Tensor<T> operator *(Tensor<T> left, Tensor<T> right);          public static Tensor<T> operator *(Tensor<T> tensor, T scalar);          public static Tensor<T> operator >>(Tensor<T> tensor, int value);          public static Tensor<T> operator -(Tensor<T> left, Tensor<T> right);          public static Tensor<T> operator -(Tensor<T> tensor, T scalar);          public static Tensor<T> operator -(Tensor<T> tensor);          public static Tensor<T> operator +(Tensor<T> tensor);      }        public class DenseTensor<T> : Tensor<T>      {          public DenseTensor(int length);          public DenseTensor(Memory<T> memory, ReadOnlySpan<int> dimensions, bool reverseStride=false);          public DenseTensor(ReadOnlySpan<int> dimensions, bool reverseStride=false);            public Memory<T> Buffer { get; }            public override Tensor<T> Clone();          public override Tensor<TResult> CloneEmpty<TResult>(ReadOnlySpan<int> dimensions);            protected override void CopyTo(T[] array, int arrayIndex);          protected override int IndexOf(T item);            public override T GetValue(int index);          public override void SetValue(int index, T value);            public override Tensor<T> Reshape(ReadOnlySpan<int> dimensions);      }        public class CompressedSparseTensor<T> : Tensor<T>      {          public CompressedSparseTensor(Memory<T> values, Memory<int> compressedCounts, Memory<int> indices, int nonZeroCount, ReadOnlySpan<int> dimensions, bool reverseStride=false);          public CompressedSparseTensor(ReadOnlySpan<int> dimensions, bool reverseStride=false);          public CompressedSparseTensor(ReadOnlySpan<int> dimensions, int capacity, bool reverseStride=false);            public int Capacity { get; }          public Memory<int> CompressedCounts { get; }          public Memory<int> Indices { get; }          public int NonZeroCount { get; }          public Memory<T> Values { get; }            public override T this[ReadOnlySpan<int> indices] { get; set; }            public override Tensor<T> Clone();          public override Tensor<TResult> CloneEmpty<TResult>(ReadOnlySpan<int> dimensions);            public override T GetValue(int index);          public override void SetValue(int index, T value);            public override Tensor<T> Reshape(ReadOnlySpan<int> dimensions);            public override CompressedSparseTensor<T> ToCompressedSparseTensor();          public override DenseTensor<T> ToDenseTensor();          public override SparseTensor<T> ToSparseTensor();      }        public class SparseTensor<T> : Tensor<T>      {          public SparseTensor(ReadOnlySpan<int> dimensions, bool reverseStride=false, int capacity=0);            public int NonZeroCount { get; }            public override Tensor<T> Clone();          public override Tensor<TResult> CloneEmpty<TResult>(ReadOnlySpan<int> dimensions);            public override T GetValue(int index);          public override void SetValue(int index, T value);            public override Tensor<T> Reshape(ReadOnlySpan<int> dimensions);            public override CompressedSparseTensor<T> ToCompressedSparseTensor();          public override DenseTensor<T> ToDenseTensor();          public override SparseTensor<T> ToSparseTensor();      }        public static class ArrayTensorExtensions      {          public static CompressedSparseTensor<T> ToCompressedSparseTensor<T>(this Array array, bool reverseStride=false);          public static CompressedSparseTensor<T> ToCompressedSparseTensor<T>(this T[,,] array, bool reverseStride=false);          public static CompressedSparseTensor<T> ToCompressedSparseTensor<T>(this T[,] array, bool reverseStride=false);          public static CompressedSparseTensor<T> ToCompressedSparseTensor<T>(this T[] array);            public static SparseTensor<T> ToSparseTensor<T>(this Array array, bool reverseStride=false);          public static SparseTensor<T> ToSparseTensor<T>(this T[,,] array, bool reverseStride=false);          public static SparseTensor<T> ToSparseTensor<T>(this T[,] array, bool reverseStride=false);          public static SparseTensor<T> ToSparseTensor<T>(this T[] array);            public static DenseTensor<T> ToTensor<T>(this Array array, bool reverseStride=false);          public static DenseTensor<T> ToTensor<T>(this T[,,] array, bool reverseStride=false);          public static DenseTensor<T> ToTensor<T>(this T[,] array, bool reverseStride=false);          public static DenseTensor<T> ToTensor<T>(this T[] array);      }        public static class Tensor      {          public static Tensor<T> Add<T>(Tensor<T> left, Tensor<T> right);          public static void Add<T>(Tensor<T> left, Tensor<T> right, Tensor<T> result);          public static Tensor<T> Add<T>(Tensor<T> tensor, T scalar);          public static void Add<T>(Tensor<T> tensor, T scalar, Tensor<T> result);            public static Tensor<T> And<T>(Tensor<T> left, Tensor<T> right);          public static void And<T>(Tensor<T> left, Tensor<T> right, Tensor<T> result);          public static Tensor<T> And<T>(Tensor<T> tensor, T scalar);          public static void And<T>(Tensor<T> tensor, T scalar, Tensor<T> result);            public static Tensor<T> Contract<T>(Tensor<T> left, Tensor<T> right, int[] leftAxes, int[] rightAxes);          public static void Contract<T>(Tensor<T> left, Tensor<T> right, int[] leftAxes, int[] rightAxes, Tensor<T> result);            public static Tensor<T> CreateFromDiagonal<T>(Tensor<T> diagonal);          public static Tensor<T> CreateFromDiagonal<T>(Tensor<T> diagonal, int offset);            public static Tensor<T> CreateIdentity<T>(int size);          public static Tensor<T> CreateIdentity<T>(int size, bool columMajor);          public static Tensor<T> CreateIdentity<T>(int size, bool columMajor, T oneValue);            public static Tensor<T> Decrement<T>(Tensor<T> tensor);          public static void Decrement<T>(Tensor<T> tensor, Tensor<T> result);            public static Tensor<T> Divide<T>(Tensor<T> left, Tensor<T> right);          public static void Divide<T>(Tensor<T> left, Tensor<T> right, Tensor<T> result);          public static Tensor<T> Divide<T>(Tensor<T> tensor, T scalar);          public static void Divide<T>(Tensor<T> tensor, T scalar, Tensor<T> result);            public static Tensor<Boolean> Equals<T>(Tensor<T> left, Tensor<T> right);          public static void Equals<T>(Tensor<T> left, Tensor<T> right, Tensor<Boolean> result);            public static Tensor<Boolean> GreaterThan<T>(Tensor<T> left, Tensor<T> right);          public static void GreaterThan<T>(Tensor<T> left, Tensor<T> right, Tensor<Boolean> result);            public static Tensor<Boolean> GreaterThanOrEqual<T>(Tensor<T> left, Tensor<T> right);          public static void GreaterThanOrEqual<T>(Tensor<T> left, Tensor<T> right, Tensor<Boolean> result);            public static Tensor<T> Increment<T>(Tensor<T> tensor);          public static void Increment<T>(Tensor<T> tensor, Tensor<T> result);            public static Tensor<T> LeftShift<T>(Tensor<T> tensor, int value);          public static void LeftShift<T>(Tensor<T> tensor, int value, Tensor<T> result);            public static Tensor<Boolean> LessThan<T>(Tensor<T> left, Tensor<T> right);          public static void LessThan<T>(Tensor<T> left, Tensor<T> right, Tensor<Boolean> result);            public static Tensor<Boolean> LessThanOrEqual<T>(Tensor<T> left, Tensor<T> right);          public static void LessThanOrEqual<T>(Tensor<T> left, Tensor<T> right, Tensor<Boolean> result);            public static Tensor<T> Modulo<T>(Tensor<T> left, Tensor<T> right);          public static void Modulo<T>(Tensor<T> left, Tensor<T> right, Tensor<T> result);          public static Tensor<T> Modulo<T>(Tensor<T> tensor, T scalar);          public static void Modulo<T>(Tensor<T> tensor, T scalar, Tensor<T> result);            public static Tensor<T> Multiply<T>(Tensor<T> left, Tensor<T> right);          public static void Multiply<T>(Tensor<T> left, Tensor<T> right, Tensor<T> result);          public static Tensor<T> Multiply<T>(Tensor<T> tensor, T scalar);          public static void Multiply<T>(Tensor<T> tensor, T scalar, Tensor<T> result);            public static Tensor<Boolean> NotEquals<T>(Tensor<T> left, Tensor<T> right);          public static void NotEquals<T>(Tensor<T> left, Tensor<T> right, Tensor<Boolean> result);            public static Tensor<T> Or<T>(Tensor<T> left, Tensor<T> right);          public static void Or<T>(Tensor<T> left, Tensor<T> right, Tensor<T> result);          public static Tensor<T> Or<T>(Tensor<T> tensor, T scalar);          public static void Or<T>(Tensor<T> tensor, T scalar, Tensor<T> result);            public static Tensor<T> RightShift<T>(Tensor<T> tensor, int value);          public static void RightShift<T>(Tensor<T> tensor, int value, Tensor<T> result);            public static Tensor<T> Subtract<T>(Tensor<T> left, Tensor<T> right);          public static void Subtract<T>(Tensor<T> left, Tensor<T> right, Tensor<T> result);          public static Tensor<T> Subtract<T>(Tensor<T> tensor, T scalar);          public static void Subtract<T>(Tensor<T> tensor, T scalar, Tensor<T> result);            public static Tensor<T> UnaryMinus<T>(Tensor<T> tensor);          public static void UnaryMinus<T>(Tensor<T> tensor, Tensor<T> result);            public static Tensor<T> UnaryPlus<T>(Tensor<T> tensor);          public static void UnaryPlus<T>(Tensor<T> tensor, Tensor<T> result);            public static Tensor<T> Xor<T>(Tensor<T> left, Tensor<T> right);          public static void Xor<T>(Tensor<T> left, Tensor<T> right, Tensor<T> result);          public static Tensor<T> Xor<T>(Tensor<T> tensor, T scalar);          public static void Xor<T>(Tensor<T> tensor, T scalar, Tensor<T> result);      }  }    namespace System  {      struct Range      {          public Range(int start, int end);          public int Start { get; }          public int End { get; }      }  }  ```    # Details  * A `Range` type is needed in order to support the `Tensor.Slice` method.  The proposal is to introduce a `System.Range struct` to the `System.Memory` package.  Note that this Range is also necessary for the [new range syntax proposed for C#](https://github.com/dotnet/roslyn/blob/features/range/docs/features/range.md).  * Tensor doesn't need a `long` Range type, because all the dimensions are represented by `int`.  * It would be very convenient to have unbounded Ranges in both start and end for Tensor, so users can easily say ""I want all rows with these columns"", or ""I want all columns with these rows"", etc.  * I haven't found a concrete user scenario for Ranges with ""steps"" (ex. ""I want every other row"" or ""every fourth row""). The current proposal is to not support slicing with steps in v1."
25780	area-System.IO	Consolidate common Compression tests and apply fixes	- Fix a bug in DeflateStream where we will always read to the end of the input stream even if the Deflater has finished.  - Fix a bug in DeflateStream where disposing the Deflater with an in-progress async operation would trigger a failed Debug.Assert.  - Move DeflateStream/GZipStream unit and perf tests to Common and abstract them out. This makes them usable for any future streamable compression implementation (e.g. broti), minimizes duplication, and asserts that the behavior is equal among any current and future compression stream implementations.  - Increases code coverage for DeflateStream and GZipStream  - The test changes of this PR are a precursor to the completion of https://github.com/dotnet/corefx/issues/24826     resolves https://github.com/dotnet/corefx/issues/25647    cc: @ViktorHofer @stephentoub @GrabYourPitchforks @ahsonkhan @krwq 
25781	area-System.ComponentModel	System.ComponentModel.Composition has internals visible to	We are currently testing internals in System.ComponentModel.Composition, we should consider removing those if they don't add much value/bring more interesting code coverage. Also if we can't test them from the public APIs maybe we have some dead code there :)    cc: @weshaggard @maryamariyan @danmosemsft 
25782	area-System.Net	SocketAsyncEventArgs returns null when accessing buffer then throws when trying to set BufferList	We have the following code now throwing `SR.net_ambiguousbuffers` after https://github.com/dotnet/corefx/pull/25402    ```  if (_eventArgs.Buffer != null)  {      _eventArgs.SetBuffer(null, 0, 0);  }    _eventArgs.BufferList = GetBufferList(buffers); // throws   ```    The reason is we do `_eventArgs.SetBuffer(buffer); // buffer is Memory<byte>` earlier, then when checking if `_eventArgs.Buffer` is null it returns null since the `_bufferIsExplicitArray` was set to false when using `Memory<byte>`
25783	area-Infrastructure	Alpine.3.6 x64 Debug Build build fails	"```  chmod: cannot access '/mnt/j/workspace/dotnet_corefx/master/alpine-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/bin/testhost/netcoreapp-Linux-Debug-x64/dotnet': No such file or directory  12:16:36 /mnt/j/workspace/dotnet_corefx/master/alpine-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/external/runtime/runtime.depproj(73,5): error MSB3073: The command ""chmod +x /mnt/j/workspace/dotnet_corefx/master/alpine-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/bin/testhost/netcoreapp-Linux-Debug-x64/dotnet"" exited with code 1.  ```    https://ci3.dot.net/job/dotnet_corefx/job/master/job/alpine-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/14/consoleFull  "
25784	area-System.Diagnostics	fix [System.Diagnostics.Process]::GetProcesses(computer)	for https://github.com/dotnet/corefx/issues/24357    CC @stephentoub @joperezr @SteveL-MSFT    Local testing confirmed we get the correct processes for a remote machine with this change, but without multi-machine testing in CI we can't automate testing for this, so I just added a test for the negative case.
25785	area-System.IO	Add Brotli Compression to CoreFX	# System.IO.Compression.Brotli    ## Introduction    Brotli is a generic-purpose lossless compression algorithm that compresses data  using a combination of a modern variant of the LZ77 algorithm, Huffman coding  and 2nd order context modeling, with a compression ratio comparable to the best  currently available general-purpose compression methods. It is similar in speed  to deflate but offers more dense compression.    The specification of the Brotli Compressed Data Format is defined in [RFC 7932](https://www.ietf.org/rfc/rfc7932.txt).    Brotli encoding is supported by most web browsers, major web servers, and some CDNs (Content Delivery Networks).    ## BrotliStream  ### Proposed API  The API surface area for BrotliStream is identical to that of DeflateStream but with added `bufferSize` constructors.    ```C#  public partial class BrotliStream : System.IO.Stream  {      public BrotliStream(System.IO.Stream stream, System.IO.Compression.CompressionLevel compressionLevel);      public BrotliStream(System.IO.Stream stream, System.IO.Compression.CompressionLevel compressionLevel, bool leaveOpen);      public BrotliStream(System.IO.Stream stream, System.IO.Compression.CompressionLevel compressionLevel, bool leaveOpen, int bufferSize);      public BrotliStream(System.IO.Stream stream, System.IO.Compression.CompressionMode mode);      public BrotliStream(System.IO.Stream stream, System.IO.Compression.CompressionMode mode, bool leaveOpen);      public BrotliStream(System.IO.Stream stream, System.IO.Compression.CompressionMode mode, bool leaveOpen, int bufferSize);      public System.IO.Stream BaseStream { get; }      public override bool CanRead { get; }      public override bool CanSeek { get; }      public override bool CanWrite { get; }      public override long Length { get; }      public override long Position { get; set; }      protected override void Dispose(bool disposing);      public override void Flush();      public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);      public override int EndRead(IAsyncResult asyncResult);      public override int Read(byte[] array, int offset, int count);      public override System.Threading.Tasks.Task<int> ReadAsync(byte[] array, int offset, int count, System.Threading.CancellationToken cancellationToken);      public override long Seek(long offset, System.IO.SeekOrigin origin);      public override void SetLength(long value);      public override IAsyncResult BeginWrite(byte[] array, int offset, int count, AsyncCallback asyncCallback, object asyncState);      public override void EndWrite(IAsyncResult asyncResult);      public override void Write(byte[] array, int offset, int count);      public override System.Threading.Tasks.Task WriteAsync(byte[] array, int offset, int count, System.Threading.CancellationToken cancellationToken);  }  ```    ### Example Usage  The BrotliStream behavior is the same as that of DeflateStream or GZipStream to allow easily converting DeflateStream/GZipStream code to use BrotliStream.    ```C#  public static Stream Compress_Stream(Stream inputStream)  {      var outputStream = new MemoryStream();      var compressor = new BrotliStream(outputStream, CompressionMode.Compress, true);      inputStream.CopyTo(compressor);      compressor.Dispose();      return outputStream;  }    public static Stream Decompress_Stream(Stream inputStream)  {      var outputStream = new MemoryStream();      var decompressor = new BrotliStream(inputStream, CompressionMode.Decompress, true);      decompressor.CopyTo(outputStream);      decompressor.Dispose();      return outputStream;  }  ```    ## BrotliEncoder & BrotliDecoder  ### Proposed API  The goal of the streamless implementation is to provide a non-allocating, performant Brotli implementation free from Streams. It contains simple Compress/Decompress operations that return an enum indicating the success of the operation as well as static CompressFully/DecompressFully operations that allow single-pass compression/decompression without the need for a BrotliEncoder/BrotliDecoder instance.  ```C#  public struct BrotliDecoder : System.IDisposable  {      public System.Buffers.OperationStatus Decompress(System.ReadOnlySpan<byte> source, System.Span<byte> destination, out int bytesConsumed, out int bytesWritten) { bytesConsumed = default(int); bytesWritten = default(int); throw null; }      public static bool DecompressFully(System.ReadOnlySpan<byte> source, System.Span<byte> destination, out int bytesWritten) { bytesWritten = default(int); throw null; }      public void Dispose() { }  }  public struct BrotliEncoder : System.IDisposable  {      public System.Buffers.OperationStatus Compress(System.ReadOnlySpan<byte> source, System.Span<byte> destination, out int bytesConsumed, out int bytesWritten) { bytesConsumed = default(int); bytesWritten = default(int); throw null; }      public static bool CompressData(System.ReadOnlySpan<byte> source, System.Span<byte> destination, out int bytesWritten) { bytesWritten = default(int); throw null; }      public static bool CompressData(System.ReadOnlySpan<byte> source, System.Span<byte> destination, out int bytesWritten, int quality, int window) { bytesWritten = default(int); throw null; }      public System.Buffers.OperationStatus CompressFinal(System.Span<byte> destination, out int bytesWritten) { bytesWritten = default(int); throw null; }      public void Dispose() { }      public static int GetMaximumCompressedSize(int inputSize) { throw null; }      public void SetQuality(int quality) { }      public void SetWindow(int window) { }  }  ```    ### Design Questions  Should we allow setting the Quality/Window via `Set_` functions of make them constructor variables? They must be set before encoding either way.    #### BrotliEncoder SetQuality/SetWindows vs constructor overloads:  ```C#  public struct BrotliEncoder : System.IDisposable  {  ...      public void SetQuality(int quality) { }      public void SetWindow(int window) { }  }    public struct BrotliEncoder : System.IDisposable  {      public BrotliEncoder() {}      public BrotliEncoder(int quality, int window) {}  ...  }    ```    #### Flush vs Finalize  Should there be an option for intermediate flushes or only for finalize? The main use case of an intermediate Flush is if you want to get more of the outputted bytes but arent yet done supplying input to the compressor.  ```C#  // Allow Intermediate Flushes  public partial struct BrotliEncoder : System.IDisposable  {  ...      public System.Buffers.OperationStatus Compress(System.ReadOnlySpan<byte> source, System.Span<byte> destination, out int bytesConsumed, out int bytesWritten) { bytesConsumed = default(int); bytesWritten = default(int); throw null; }      public System.Buffers.OperationStatus CompressFinal(System.Span<byte> destination, out int bytesWritten, bool isFinished = true) { bytesWritten = default(int); throw null; }  ...  }    // Disallow Intermediate Flushes  public partial struct BrotliEncoder : System.IDisposable  {  ...      public System.Buffers.OperationStatus Compress(System.ReadOnlySpan<byte> source, System.Span<byte> destination, out int bytesConsumed, out int bytesWritten) { bytesConsumed = default(int); bytesWritten = default(int); throw null; }      public System.Buffers.OperationStatus CompressFinal(System.Span<byte> destination, out int bytesWritten) { bytesWritten = default(int); throw null; }  ...  }  ```    #### Allow input to Flush/Finalize?  I prefer the simpler Flush/Finalize that dont take input, but the underlying call allows input if we decide thats more usable. If we go that route then we could potentially just condense the API down to one function.    ```C#  // Do not allow input to Finalize/Flush  public partial struct BrotliEncoder : System.IDisposable  {  ...      public System.Buffers.OperationStatus Compress(System.ReadOnlySpan<byte> source, System.Span<byte> destination, out int bytesConsumed, out int bytesWritten) { bytesConsumed = default(int); bytesWritten = default(int); throw null; }      public System.Buffers.OperationStatus CompressFinal(System.Span<byte> destination, out int bytesWritten) { bytesWritten = default(int); throw null; }  ...  }    // Allow input to Finalize/Flush  public partial struct BrotliEncoder : System.IDisposable  {  ...      public System.Buffers.OperationStatus Compress(System.ReadOnlySpan<byte> source, System.Span<byte> destination, out int bytesConsumed, out int bytesWritten) { bytesConsumed = default(int); bytesWritten = default(int); throw null; }      public System.Buffers.OperationStatus CompressFinal(System.ReadOnlySpan<byte> source, System.Span<byte> destination, out int bytesConsumed, out int bytesWritten) { bytesConsumed = default(int); bytesWritten = default(int); throw null; }  ...  }    // Allow finalization in the Compress method.  public partial struct BrotliEncoder : System.IDisposable  {  ...      public System.Buffers.OperationStatus Compress(System.ReadOnlySpan<byte> source, System.Span<byte> destination, out int bytesConsumed, out int bytesWritten, bool isFinished = false) { bytesConsumed = default(int); bytesWritten = default(int); throw null; }  ...  }  ```    #### Naming  ```C#  // Static single-pass compress/decompress  BrotliEncoder.TryCompress(...) vs BrotliEncoder.TryCompressData(...) vs BrotliEncoder.CompressFully(...) vs BrotliEncoder.CompressSingle vs BrotliEncoder.CompressData    // Iterative compress/decompress  BrotliEncoderInstance.Compress vs BrotliEncoderInstance.CompressSegment  ```    ### Example Usage  ```C#  public interface IOutput  {      Span<byte> Buffer { get; };      void Commit(int bytes);      void Resize(int minimumSize);  }    // This code is very naive, but it does illustrate a pipe scenario  public static void Compress_WithState(ReadOnlyMemory<byte>[] inputs, IOutput output)  {      BrotliEncoder encoder;        for(int i=0; i<inputs.Length; i++)       {          var input = inputs[i];          while (!input.IsEmpty)          {              var buffer = output.Buffer;              encoder.Compress(input, buffer, out int bytesConsumed, out int written);              output.Commit(written);              input = input.Slice(bytesConsumed);                 }      }      encoder.Flush(output, out int bytesWritten, isFinished: true);      encoder.DIspo  }    public static void Decompress_WithState(ReadOnlySpan<byte>[] inputs, IOutput output)  {      BrotliDecoder decoder;      for(int i=0; i<inputs.Length; i++)       {          var input = inputs[i];          while (!decoder.IsFinished() && !input.IsEmpty)          {              var buffer = output.Buffer;              decoder.Decompress(input, buffer, out int bytesConsumed, out int written);              output.Commit(written);              input = input.Slice(bytesConsumed);                 }      }      decoder.Dispose();  }    public static void Compress_WithoutState(ReadOnlySpan<byte> input, Span<byte> output)  {      BrotliEncoder.CompressFully(input, output, out int bytesWritten);  }    public static void Decompress_WithoutState(ReadOnlySpan<byte> input, Span<byte> output)  {      BrotliDecoder.DecompressFully(input, output, out int bytesWritten);  }  ```    ## Implementation  The implementation will be based around the c code provided by [Google](https://github.com/google/brotli) that will be inserted into our existing native Compression libraries ([clrcompression (Windows)](https://github.com/dotnet/corefx/tree/master/src/Native/Windows/clrcompression) and [System.IO.Compression.Native (Unix)](https://github.com/dotnet/corefx/tree/master/src/Native/Unix/System.IO.Compression.Native). In CoreFX we'll have a managed wrapper to pinvoke into the native brotli implementation and provide the above API around it, same as we do for zlib. See https://github.com/dotnet/corefxlab/issues/1673 for a discussion on the pros of cons of a fully managed implementation and my justification for using the native approach (at least for now). Performance testing to come later, with the implementation PR.    This proposal is an evolution of [the CoreFXLab implementation of Brotli](https://github.com/dotnet/corefxlab/tree/master/src/System.IO.Compression.Brotli).    This is a component of https://github.com/dotnet/corefx/issues/24826    PTAL: @joshfree @KrzysztofCwalina @GrabYourPitchforks @ViktorHofer @stephentoub @terrajobst @ahsonkhan @JeremyKuhne 
25788	area-System.IO	Fix tests for path validation changes on Windows And Unix	The Null check was added to GetFullPath function in the coreclr. These tests are in respond to that.  Fixes #25665 
25789	area-System.Memory	Add {RO}Span GetReference and ROMemory TryGetArray to MemoryMarshal	Part of:  https://github.com/dotnet/corefx/issues/25412  https://github.com/dotnet/corefx/issues/25615    Depends on the PR in coreclr - https://github.com/dotnet/coreclr/pull/15417    cc @jkotas, @stephentoub, @KrzysztofCwalina 
25790	area-Infrastructure	Fix Alpine Linux dotnet host restore for tests	The dependencies.props refer to an old version of dotnet host that  predates the first version we have ever had available for Alpine.  This change moves the version to a recent one, the same one that  MicrosoftNETCoreAppPackageVersion is set to.
25791	area-System.Drawing	Don't directly throw Exception System.Drawing	Close #25526.  Contributes to #23748.  cc: @safern 
25792	area-System.IO	NamedPipeServerStream creates a socket not a fifo on ubuntu	"I expected to use NamedPipeServerStream  to create a fifo file on linux,  but it created a socket Named ""CoreFxPipe_1.fifo""  in /tmp directory.  here is test code:  ```c#              NamedPipeServerStream fifo = new NamedPipeServerStream(""1.fifo"",PipeDirection.InOut);              fifo.WaitForConnection();  ```  what is the reason? how to create a fifo on linux?    [EDIT] Add C# syntax highlighint by @karelz"
25793	area-System.Net	UnixNetworkInterface: when no physical address, use PhysicalAddress.None and ensure index is set	Fixes https://github.com/dotnet/corefx/issues/25264
25794	area-Meta	Sync Interop.GetCwd with coreclr	Sync changes made in https://github.com/dotnet/coreclr/pull/15229
25795	area-Microsoft.CSharp	Microsoft.CSharp should support non-trailing named parameters	C# now allows them, so so should Microsoft.CSharp.    Support directly on `dynamic` would depend on changes from Roslyn, but Roslyn can't offer that support until it will work with the library.    Support should match the behaviour of statically-bound C#, except for treating the case of a name that was changed in an override the same as the current dynamic behaviour, since in static C# that depends on the variable type in a way that doesn't follow for dynamic code.
25796	area-Serialization	Don't directly throw Exception System.Runtime.Serialization.Json	Contributes to #23748.  I found one place where generic Exception could reach user. I split tests because netfx throw System.Runtime.CallbackException but it doesn't exist on netcoreapp. Maybe we should add System.Runtime.CallbackException to netcore.   Found also one helper method [here](https://github.com/MarcoRossignoli/corefx/blob/362ebe743a3d7cedb14a29a7a9f60d16545d5488/src/System.Private.DataContractSerialization/src/System/Runtime/Serialization/DiagnosticUtility.cs#L78) throws generic Exception, but i didn't found any useful test.  cc: @shmao, @zhenlan
25798	area-Infrastructure	Fix pre-build cleanup step.	"skip ci please  This is an official build change only.  ""Remove-Item -Recurse"" has a known issue (https://docs.microsoft.com/en-us/powershell/module/Microsoft.PowerShell.Management/Remove-Item?view=powershell-6).  This causes builds to have errors like this trying to run the cleanup:  [error]Remove-Item : Cannot remove item E:\A\_work\742\s\corefx: The directory is not empty.  This change makes us do the recursive delete ourselves by enumerating the files, sorting them so the longest filenames occur first, and then deleting them."
25800	area-System.Net	HttpClient throws unexpected TaskCanceledException when HttpClient is reused	"**This is the raw stack trace from the exception that occurs**:  ```  FATAL: Unhandled exception (A task was canceled.).  DEBUG:    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()     at System.Net.Http.HttpClient.<FinishSendAsyncUnbuffered>d__59.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at QuarkHttp.QNewHttpClient.<SendNewAsync>d__5.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at QuarkHttp.QHttpClient.<SendAsync>d__1.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at DataApi.<GetDataAsync>d__4.MoveNext() in C:\...\DataApi.cs:line 84  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at DataPoller.<RefreshChangesAsync>d__18.MoveNext() in C:\...\DataPoller.cs:line 121  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at DataPoller.<RunPollCycle>d__17.MoveNext() in C:\...\DataPoller.cs:line 98  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)     at System.Threading.ThreadPoolWorkQueue.Dispatch()  ```    **The issue**:  My problem originates with the `HttpWebRequest` API being depricated and a significantly lower performance version being used in .NET Core 2.0. I use a library (QuarkHttp) that is a tiny wrapper around the `HttpWebRequest` API. When porting this wrapper library to .NET Core, I used a shared `HttpClient` instance to avoid the overhead of creating new connections each time (following @geoffkizer's [comment](https://github.com/dotnet/corefx/issues/18237#issuecomment-294366064) /cc @davidsh). My code looks like this:    ```c#  static QNewHttpClient()  {      _defaultHttpClient = CreateHttpClient((false, null));      _proxyHttpClients = new ConcurrentDictionary<(bool, IWebProxy), HttpClient>();  }    public static async Task<QHttpWrapNewResponse> SendNewAsync(this QHttpRequest request, bool fetchResponse = true, bool isAllowRedirects = false, int timeout = 100000, IWebProxy proxy = null)  {      HttpClient httpClientToUse = _defaultHttpClient;      if (isAllowRedirects || proxy != null)          httpClientToUse = _proxyHttpClients.GetOrAdd((isAllowRedirects, proxy), CreateHttpClient);        DateTime startTime = DateTime.Now;        HttpRequestMessage requestMessage = CreateHttpRequestMessage(request);      HttpCompletionOption completionOption = (fetchResponse ? HttpCompletionOption.ResponseContentRead : HttpCompletionOption.ResponseHeadersRead);      HttpResponseMessage responseMessage;        try      {          responseMessage = await httpClientToUse.SendAsync(requestMessage, completionOption, (new CancellationTokenSource(timeout)).Token).ConfigureAwait(false);      }      catch (Exception ex) when (ex is TaskCanceledException || ex is OperationCanceledException)      {          Log.Error($""{ex.GetType()} thrown (Time taken: {(DateTime.Now - startTime).TotalSeconds}s)."");          Log.Debug($""URL: {request.Url}\tMethod: {request.Method}"");          throw;      }        return new QHttpWrapNewResponse(responseMessage, fetchResponse);  }    private static HttpClient CreateHttpClient((bool allowRedirects, IWebProxy proxy) properties)  {      HttpClientHandler clientHandler = new HttpClientHandler      {          AllowAutoRedirect = properties.allowRedirects,          AutomaticDecompression = DecompressionMethods.Deflate | DecompressionMethods.GZip,          UseCookies = false      };        if (properties.proxy != null)      {          if (!clientHandler.SupportsProxy)              throw new Exception(""Proxy not supported."");            clientHandler.UseProxy = true;          clientHandler.Proxy = properties.proxy;      }        return new HttpClient(clientHandler)      {          Timeout = TimeSpan.FromMilliseconds(Int32.MaxValue)      };  }    private static HttpRequestMessage CreateHttpRequestMessage(QHttpRequest request)  {      HttpRequestMessage requestMessage = new HttpRequestMessage(new HttpMethod(request.Method.Name()), request.Url);      requestMessage.Version = request.Version;      if (request.Referrer != null)          requestMessage.Headers.TryAddWithoutValidation(""referer"", request.Referrer);        foreach (string curHeader in request.Headers)      {          string normalizedHeader = curHeader.ToLower();          if (normalizedHeader != ""content-type"")                  //requestMessage.Headers.Add(curHeader, request.Headers[curHeader]);              if (!requestMessage.Headers.TryAddWithoutValidation(curHeader, request.Headers[curHeader]))                  throw new Exception(""Header invalid."");      }        if (request.Payload != null)      {          requestMessage.Content = request.Payload;          requestMessage.Content.Headers.ContentType = MediaTypeHeaderValue.Parse(request.ContentType);      }        return requestMessage;  }  ```    The exception occurs on this line  ```  responseMessage = await httpClientToUse.SendAsync(requestMessage, completionOption, (new CancellationTokenSource(timeout)).Token).ConfigureAwait(false);  ```  In the exception handler, I measure the time taken myself to ensure that I wasn't missing something obvious. This is the output of that logging:  ```  [2017/12/08 16:37:43.742 QuarkHttp.QNewHttpClient] ERROR: System.Threading.Tasks.TaskCanceledException thrown (Time taken: 100.0041412s).  [2017/12/08 16:37:43.742 QuarkHttp.QNewHttpClient] DEBUG: URL: https://some.site/url Method: Get  ```    One point to note is that this issue occurs across atleast 5 different domains that I know of, but have never seen this issue anywhere in the past. It works as expected on the .NET framework 4.5.x,4.6.x,4.7.x and Mono 4.x.x/5.x.x. However, on .NET Core, the issue occurs very often (many times an hour in my application).    **This is why I think this is a framework issue rather than my own error**:  In the `SendNewAsync` method, the line `HttpClient httpClientToUse = _defaultHttpClient;` causes the reuse of the default HttpClient. When this line is changed to `HttpClient httpClientToUse = CreateHttpClient((false, null));` (which is used to initialize the default HttpClient in the first place as seen in the constructor), a new HttpClient is used for every request. This makes things slower, but the issue disappears. It only occurs when the same `HttpClient` is reused.     I have no code that modifies the `HttpClient` in any way after it is initially created. In my specific application, the proxy and allowRedirects options are never changed, so the `HttpClient` that's used wasn't taken from `_proxyHttpClients` either.    I'm not sure how to debug this issue further. I could definitely test things if anyone has ideas.    My .NET Core version is 2.0.2, and it runs on Ubuntu 16.04."
25801	area-System.Security	Should the Span-based Try* methods be renamed?	As part of the (awesome) Span work, many `Try*` methods have been introduced in a bunch of places (e.g https://github.com/dotnet/corefx/blob/master/src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/RSA.cs).    Historically, the `Try*` pattern has almost always been used [for methods that don't throw under normal circumstances and instead return a boolean indicating whether the operation was successful or not](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/exceptions-and-performance#try-parse-pattern). Yet, many of these new methods don't respect this pattern and only use the boolean to indicate whether the destination `Span` was large enough (e.g `RSA.TryDecrypt()` will throw an exception if the source data is invalid).    Using the `Try*` prefix for methods that actually throw is extremely confusing. Couldn't you remove it and use [`OperationStatus`](https://github.com/dotnet/corefx/blob/master/src/System.Memory/src/System/Buffers/OperationStatus.cs) instead of the boolean?
25802	area-System.IO	Re-enable DriveInfo test on Windows Subsystem for Linux	Related https://github.com/dotnet/corefx/issues/11570
25803	area-System.IO	`dotnet pack` product broken .nupkg with the latest daily build(2.2.0-preview1)	_From @yyjdelete on December 7, 2017 1:34_  Test with dotnet sdk `2.2.0-preview1-007736`/7622/7460, Windows 10 x64(17064).  And `2.1.1` in VS15.5preview5 works well.    # Step:  1. Install the latest daily build of sdk  2. `dotnet new classlib`  3. `dotnet pack`  4. Open the output .nupkg with `NuGet Package Explorer` or some zip manager( and try unpack it), and get an error.  5. Found the `.nuspec` file in the `nupkg` has wrong CRC(but the packed data is right)  _Copied from original issue: dotnet/sdk#1801_
25804	area-System.Runtime	Iterating over a string builder by index becomes ~exponentially slow for large builders	This is motivated by [this issue ](https://github.com/Microsoft/msbuild/issues/1593) originally opened against MSBuild, which internally in its reuseable string builder factory compares string builders by index. It happens to start from the end, but that doesn't seem to matter. The opener observed this can be enormously slower that creating a string first.    Using [this benchmark program](https://gist.github.com/danmosemsft/873f5bd1086d3af1cf5471edca564b91) I get the following results:    ```  BenchmarkDotNet=v0.10.11, OS=Windows 10 Redstone 3 [1709, Fall Creators Update] (10.0.16299.98)  Processor=Intel Xeon CPU E5-1620 0 3.60GHz, ProcessorCount=8  Frequency=3507174 Hz, Resolution=285.1299 ns, Timer=TSC    [Host]     : .NET Framework 4.7 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.2600.0    DefaultJob : .NET Framework 4.7 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.2600.0                Method |    N |         Mean |       Error |      StdDev |  ---------------- |----- |-------------:|------------:|------------:|     ToStringFirst |  100 |     2.028 us |   0.0403 us |   0.0465 us |   IndexedBackward |  100 |    21.399 us |   0.4123 us |   0.5063 us |    IndexedForward |  100 |    23.020 us |   0.4461 us |   0.4581 us |     ToStringFirst | 1000 |    43.210 us |   0.5032 us |   0.4202 us |   IndexedBackward | 1000 |   323.959 us |   7.3317 us |   6.8581 us |    IndexedForward | 1000 |   335.538 us |   6.3072 us |   5.8997 us |     ToStringFirst | 5000 |   217.657 us |   4.1058 us |   4.3931 us |   IndexedBackward | 5000 | 6,542.491 us | 131.7964 us | 223.8003 us |    IndexedForward | 5000 | 6,301.246 us | 102.0129 us |  90.4317 us |  ```    64 bit   ```  BenchmarkDotNet=v0.10.11, OS=Windows 10 Redstone 3 [1709, Fall Creators Update] (10.0.16299.98)  Processor=Intel Xeon CPU E5-1620 0 3.60GHz, ProcessorCount=8  Frequency=3507174 Hz, Resolution=285.1299 ns, Timer=TSC    [Host]     : .NET Framework 4.7 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.7.2600.0    DefaultJob : .NET Framework 4.7 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.7.2600.0                Method |    N |         Mean |       Error |      StdDev |  ---------------- |----- |-------------:|------------:|------------:|     ToStringFirst |  100 |     1.944 us |   0.0369 us |   0.0410 us |   IndexedBackward |  100 |    22.955 us |   0.2145 us |   0.1902 us |    IndexedForward |  100 |    22.674 us |   0.2493 us |   0.2332 us |     ToStringFirst | 1000 |    40.258 us |   0.4520 us |   0.4007 us |   IndexedBackward | 1000 |   325.231 us |   4.6369 us |   4.3374 us |    IndexedForward | 1000 |   332.819 us |   8.0014 us |   7.4845 us |     ToStringFirst | 5000 |   200.979 us |   1.2610 us |   1.1179 us |   IndexedBackward | 5000 | 7,950.240 us | 157.2641 us | 253.9522 us |    IndexedForward | 5000 | 8,137.382 us | 161.3316 us | 251.1739 us |  ```    Clearly indexing is going to have a lot of overhead such as bounds checking. But I would expect that to be proportional to N, and we see a big jump when N gets large. Related to fragmentation of the SB? Can we do better?
25805	area-Serialization	Add DisableWarning parameter when compile the sgen generated code.	Disable the warning when compile the sgen generated code. Will disable the warning 219 and 162 by default. The customer can also customize the warning they want to disable by adding the following parameter in their project.     ```  <PropertyGroup>    <SerializationAssemblyDisabledWarnings>215;313</SerializationAssemblyDisabledWarnings>  </PropertyGroup>    ```  Fix #25616     @shmao @zhenlan @mconnew 
25806	area-Infrastructure	Hotfix for the Alpine CI issue	The Alpine CI is failing due to an old version of dotnet host package  specified in the dependencies.props file. There are no Alpine packages  for that version. However, updating that version causes Invariant.Tests  tests to fail for an unclear reason.  So I am making this change that disables building tests for Alpine in  the CI. That means we will still build both native and managed code of  corefx. This change is temporary until the Invariant test issue is  understood and fixed.
25807	area-System.IO	Re-enable additional tests on WSL	Related https://github.com/Microsoft/BashOnWindows/issues/1011 and https://github.com/Microsoft/BashOnWindows/issues/308
25808	area-System.Net	Implement basic cancellation for the async IO in sslstream.	cc @stephentoub @wfurt @karelz     @Drawaes @Tratcher  Can you help running this commit with the asp.net benchmark runs, to ensure this change doesn't cause perf issues?    fixes #25206 
25809	area-System.Console	Extra newline in Linux on console input	I have the following code targeted at .NET Core 2.0    ```c#  while (true)  {      Console.WriteLine(DateTime.Now);      // do some work      Console.ReadKey();  }  ```    When the program is run on Windows, typing `enter` a few times results in output like:    ```  12/9/2017 12:14:15 AM  12/9/2017 12:14:16 AM  12/9/2017 12:14:17 AM  ```    However, on Ubuntu, the output is  ```  12/9/17 6:13:55 AM    12/9/17 6:14:07 AM    12/9/17 6:14:08 AM  ```    I believe this is because on Windows, typing the enter key on `Console.ReadKey()` does not actually print the `\n` character, whereas on Linux it does.    Is this something that can be fixed?
25810	area-System.Net	WebClient.DownloadString() method hangs sometimes (Ubuntu)	WebClient.DownloadString() method hangs sometimes when called on Ubuntu platform. There is no system (at least I couldn't find it), but there are possibly many parallel HTTP requests called from PLINQ query, and the target sites are rather slow. In couple with the fact that .Core platform doesn't allow to abort threads, it leads to plenty of threads and retained data hanged forever.  Well, DownloadStringTaskAsync + Task.Delay somehow save the day, but there can be resource leakage when download task hangs.  All HttpWebRequest timeouts (Timeout and ReadWriteTimeout) are explicitly set to 1 minute.    Ubuntu 16.10 and 17.10  .NET Core 2.0.0
25811	area-Infrastructure	My build is failing  on Windows 10 	I have been getting build errors for a couple of days. I  just updated to ec6014e and it's the same error so I don't suspect the code. The following is an example:    C:\Users\russh\Git\dotnet\corefx\src\shims\ApiCompat.proj(76,5): error : TypesMustExist : Type 'System.ComponentModel.Composition.AttributedModelServices' does not exi  st in the implementation but it does exist in the contract.    The complete output is here: https://pastebin.com/4pjSMYnp    The errors seem to start after the following warning:    EXEC : ApiCompat warning : 0 : Found 'System.ComponentModel.Composition' with PublicKeyToken 'b77a5c561934e089' instead of 'b03f5f7f11d50a3a'. [C:\Users\russh\Git\dotn  et\corefx\src\shims\ApiCompat.proj]    Can anyone tell me what I've done wrong?
25813	area-Infrastructure	Fix Alpine CI step 2	"I have found that the ""Build tests"" phase needs to be excluded too until  we can update the dotnet host package version."
25816	area-System.Net	Core doesn't read the server certificate	"@hammond-of-texas commented on [Fri Dec 08 2017](https://github.com/dotnet/core/issues/1142)    # Issue Title    Core doesn't read the server certificate    # General    In general, a simple request like this will work in .Net:    ```c#          static void Main(string[] args)          {              HttpWebRequest request = (HttpWebRequest)WebRequest.Create(""https://www.sbb.ch"");              HttpWebResponse response = (HttpWebResponse) request.GetResponse();              X509Certificate cert = request.ServicePoint.Certificate;          }  ```    The same thing will fail in core 2.0 with a ""System.PlatformNotSupportedException: 'Operation is not supported on this platform.'"" exception.    ---    @richlander commented on [Sat Dec 09 2017](https://github.com/dotnet/core/issues/1142#issuecomment-350486532)    PTAL @davidsh     "
25817	area-System.Net	Core does't read the server certificate	"@hammond-of-texas commented on [Fri Dec 08 2017](https://github.com/dotnet/core/issues/1142)  # Issue Title    Core doesn't read the server certificate    # General    In general, a simple request like this will work in .Net:            static void Main(string[] args)          {              HttpWebRequest request = (HttpWebRequest)WebRequest.Create(""https://www.sbb.ch"");              HttpWebResponse response = (HttpWebResponse) request.GetResponse();              X509Certificate cert = request.ServicePoint.Certificate;          }    The same thing will fail in core 2.0 with a ""System.PlatformNotSupportedException: 'Operation is not supported on this platform.'"" exception.  ---  @richlander commented on [Sat Dec 09 2017](https://github.com/dotnet/core/issues/1142#issuecomment-350486532)  PTAL @davidsh   "
25818	area-System.Runtime	Exception object should have a non-localized version for exception message	https://twitter.com/archiecoder/status/939532182107951104    Have the message only in Japanese or Chinese does not help the developer.    Having both the localized and non-localized versions would also help analytics service to sort by English message only.
25819	area-Microsoft.CSharp	Implement non-trailing named arguments in Microsoft.CSharp	Closes #25795    First few commits refactor `CMethodIterator`, `MemberLookup`, `GroupToArgsBinder` and `GroupToArgsBinderResult` to clear some complications before the implementation:    * Remove `CMethodIterator._bcanIncludeExtensionsInResults`    Always false.    * Remove `CMethodIterator._allowBogusAndInaccessible`    Always true.    * Remove `MemberLookup._results`    Never used (legacy of static compiler's extension handling).    * Remove paths for `_pContainingTypes` being empty.    Never happens. (Would be possible when static compiler was looking for extension methods).    * Remove `_bAtEnd`    Check on correct use unnecessary in internal class.    * Remove unused parameters    * Replace private field-only properties with field access.    * Getter methods to properties; auto when appropriate.    * Remove `_bIsCheckingInstanceMethods`    Always true.    * Readonly fields where possible.    * Rename Hungarian-style names and remove redundant initializers.    * `GroupToArgsBinderResult` members to auto properties.    * Remove `InconvertibleResult`/`_inconvertibleResults`    Set but never accessed.    * Match error code numbers to corresponding C# errors.    Not clear why these were ever different, but matching them makes the connection clearer.    # Now the implementation    * Add some initial (not yet passing) tests.    * Allow non-trailing arguments (remove prohibition)    * Detect misnamed arguments in iterator.    * Exclude methods from consideration if non-trailing names don't match.    * Correct error for name not found in non-trailing.    * Catch CS8328 errors.    * Return temporarily removed assertion.    * Correctly handle correctly naming the first of several `params` arguments    * Add tests based on Roslyn's tests for non-trailing named arguments.    * Fix handling when name is changed in an override.    Use the name defined on the type of the argument if `UseCompileTimeType` or the type of the object, otherwise.
25820	area-System.Xml	XmlDocument and XDocument .Load badly resolves the path	"I am porting our server console app from .NET Framework 4.6.1 to .NET Core and after I made it compile, then I got a lot of runtime exceptions of XmlDocument and XDocument not loading.    I made a quick repro with this:  ![https://i.imgur.com/79hOFVR.png](https://i.imgur.com/79hOFVR.png)  ```c#      class Program      {          static void Main(string[] args)          {              var doc = new XmlDocument();              doc.Load(""test.xml"");              var doc2 = XDocument.Load(""test.xml"");          }      }  ```    The problem is, when this file `test.xml` is located at path that contains character `#`.   For me it is at `""C:\\dev\\c#\\Test\\ConsoleApp1""` and that produces the above error."
25823	area-System.Reflection	Codecoverage corefx\src\System.Reflection.Metadata\src\System\Reflection\Metadata\MetadataReader.cs	Add code coverage in reference to https://github.com/dotnet/corefx/issues/931  Completed coverage for InitializeStreamReaders, ReadStreamHeaders, GetMetadataKind, ReadMetadataHeader, and one constructor.
25824	area-Microsoft.CSharp	Microsoft.CSharp fails on ones-complement on enums smaller than 32-bit in size in checked context	```C#  public enum Int8Enum : byte  {   A,   B,   C,   D,   E  }   /*  */    dynamic d = Int8Enum.A;  checked{  var result = ~d; // Throws OverflowException  }  ```    I'm afraid I introduced this regression with 184d882d which was meant to remove all of the setting of `CheckedNormal` and `CheckedNormal` (since merged as `Checked`) and leave the false default, but it left the redundant setting of it before then, so it can now be set wrong (it should always be false, but that will set it to true if the initial context is checked).    The same regression can cause assignments to have slightly less good (but still reasonable) error messages.
25825	area-Microsoft.CSharp	Microsoft.CSharp: Set temporary unchecked context correctly.	Fixes #25824    Fix also makes `ConstOutOfRange` and `ConstOutOfRangeChecked` reachable (were made erroneously unreachable by #25824), so contributes to #22470    * Don't optimise out casts in enum unary operations.    Fixes #25826
25826	area-Microsoft.CSharp	Microsoft.CSharp throws InvalidCast on complement of constant enum value	"```C#  var cs =CallSite<Func<CallSite, object, object>>.Create(   Microsoft.CSharp.RuntimeBinder. Binder.UnaryOperation(    CSharpBinderFlags.CheckedContext , ExpressionType.OnesComplement, GetType(),    new[] { CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.Constant, null) }));  cs.Target(cs, StringComparison.CurrentCulture);  ```  or  ```C#  var cs =CallSite<Func<CallSite, object, object>>.Create(   Microsoft.CSharp.RuntimeBinder. Binder.UnaryOperation(    CSharpBinderFlags.None , ExpressionType.OnesComplement, GetType(),    new[] { CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.Constant, null) }));  cs.Target(cs, StringComparison.CurrentCulture);  ```  Throws `InvalidCastException` ""Unable to cast object of type 'Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCONSTANT' to type 'Microsoft.CSharp.RuntimeBinder.Semantics.EXPRCAST'.""    Same issue exists in NetFX."
25827	area-Microsoft.CSharp	Tests for ambiguous interface member errors in Microsoft.CSharp	Tests error cases that were not possible as a consequence of #14752 but are now correctly possible due to that issue being fixed.    Demonstrates `ERR_AmbigMember` is usable, contributes to #22470
25828	area-System.Security	Creation of X509Certificate2 fails on Linux but works on Windows	"@secana commented on [Sun Dec 10 2017](https://github.com/dotnet/core/issues/1145)  # Creation of X509Certificate2 fails on Linux but works on Windows    Creating a X509Certificate2 instance from a byte array works on Windows but fails on Linux with a ""CryptographicException"".    # General    Tested Systems:  Windows 10  Ubuntu 16.04, Ubuntu 17.10  OpenSuse 42    All tested with:  **Dotnet Core Version: 2.0.2**    Example code:  ```  static void Main(string[] args)  {        var cert = new X509Certificate2(Cert.CertBytes);  }  ```  On Windows: Valid X509Certificate2 instance is created  On Linux: An exception is thrown:  ```  {System.Security.Cryptography.CryptographicException: Cannot find the original signer.     at Internal.Cryptography.Pal.PkcsFormatReader.TryReadPkcs7(SafePkcs7Handle pkcs7, Boolean single, ICertificatePal& certPal, List`1& certPals)     at Internal.Cryptography.Pal.PkcsFormatReader.TryReadPkcs7Der(Byte[] rawData, Boolean single, ICertificatePal& certPal, List`1& certPals)     at Internal.Cryptography.Pal.CertificatePal.FromBlob(Byte[] rawData, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags)     at System.Security.Cryptography.X509Certificates.X509Certificate..ctor(Byte[] data)     at System.Security.Cryptography.X509Certificates.X509Certificate2..ctor(Byte[] rawData)     at CertTest.Program.Main(String[] args) in /home/CertTest/Program.cs:line 14}  ```    If the certificate is first parsed by BouncyCastle and then converted into a X509Certificate2 it works.  Example which works on Linux  ```  static void Main(string[] args)  {         var bouncy = new Org.BouncyCastle.X509.X509CertificateParser();         var bcert = bouncy.ReadCertificate(Cert.CertBytes);         var wcert = new System.Security.Cryptography.X509Certificates.X509Certificate2(bcert.GetEncoded());  }  ```    "
25829	area-System.Reflection	Checksum is calculated before signing in System.Reflection.Metadata.PEBuilder	Look here at the code to verify the checksum:    https://github.com/dotnet/corefx/blob/45b724f6b6391910edea8a70f3f22a4a7996696d/src/System.Reflection.Metadata/tests/PortableExecutable/PEBuilderTests.cs#L665-L685    Note that there are no binary modifications before calculating the checksum, so the checksum should include everything in the binary except for the checksum blob itself.    But now look at the signing code: https://github.com/dotnet/corefx/blob/45b724f6b6391910edea8a70f3f22a4a7996696d/src/System.Reflection.Metadata/src/System/Reflection/PortableExecutable/PEBuilder.cs#L496-L505    The checksum is calculated before writing the strong name signature, so it's calculated with the zero value. This doesn't look correct to me, and my tests with the CLR signing code seem to indicate that the checksum should include the strong name signature.
25831	area-Infrastructure	Ignore placeholder build configurations in build all configurations targets	In order to support negative build configurations we need to ignore them when building all configurations in the vertical.     Contributes to: https://github.com/dotnet/corefx/issues/24903    I need to explore more scenarios to see if we need more changes in corefx side to support this. Still going through them but this at least will allow us to add the negative configurations for the vertical.     cc: @danmosemsft 
25832	area-System.Memory	Add ReadOnlySpan<T>(Span<T>) constructor	"It would be very nice to add the constructor overload `ReadOnlySpan<T>(Span<T>)` to the [list of constructors](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.server.kestrel.internal.system.readonlyspan-1.-ctor) of `ReadOnlySpan<T>`.    Indeed, right now, it's not possible to have a method taking `Span<T>` as input and returning `ReadOnlySpan<T>` as output - the result being a fragment of the input. As a result, the logic end-up relying on ""soft"" immutability as `Span<T>` are returned (but never written to), as opposed to benefit from ""hard"" immutability, where writes would not even be possible."
25833	area-System.Net	Abnormal High Memory Usage when using HttpClient	"This is a continuation of the following issue:  [https://github.com/PowerShell/PowerShell/issues/5609](url)    Steps to reproduce  ------------------  Server: [https://gist.github.com/markekraus/b16f0991a843d2d2459aa4178dfe55b5#file-express-js](url)  ```javascript  const express = require('express')  const app = express()    app.get('/api', function (req, res)  {      res.send('0')  })    app.listen(5001, function ()  {      console.log('Example app listening on port 5001')  })    ```    Client: [https://gist.github.com/markekraus/b16f0991a843d2d2459aa4178dfe55b5#file-program-cs](url)    ```csharp  using System;  using System.Diagnostics;  using System.IO;  using System.Net.Http;    namespace MemLeakRepro  {      class Program      {          static void Main(string[] args)          {              if(args.Length != 2)              {                  System.Console.WriteLine(""usage: <Uri> <Count>"");                  Environment.Exit(1);              }                            DateTime start = DateTime.Now;              System.Console.WriteLine(""Start: {0}"", start);                Uri uri = new Uri(args[0]);              Int32 count;                if(!Int32.TryParse(args[1], out count))              {                  count = 500000;              }                for (int i = 0; i < count; i++)              {                  HttpClientHandler handler = new HttpClientHandler();                  HttpClient client = new HttpClient(handler);                  HttpResponseMessage response = client.GetAsync(uri).GetAwaiter().GetResult();                  StreamReader reader = new StreamReader(response.Content.ReadAsStreamAsync().GetAwaiter().GetResult());                  string result = reader.ReadToEnd();                  reader.Dispose();              }                DateTime end = DateTime.Now;              System.Console.WriteLine(""End: {0}"", end);              TimeSpan time = end - start;              System.Console.WriteLine(""Run: {0}"", time);              Process currentProcess = Process.GetCurrentProcess();              double memoryInMB = currentProcess.WorkingSet64 / 1048576;              System.Console.WriteLine(""Memory: {0:N2} mb"", memoryInMB);                Console.WriteLine(""Press any key to exit..."");              Console.ReadKey();          }      }  }    ```    Output  ------------------  After 6,000,000 Api calls.    ```  Apple:MemLeakRepro air$ dotnet run http://localhost:5001/api 6000000  Start: 12/10/2017 09:23:05  End: 12/11/2017 01:11:15  Run: 15:48:10.0077740  Memory: 491.00 mb  Press any key to exit...  Apple:MemLeakRepro air$  ```    ![memleakrepro](https://user-images.githubusercontent.com/20641653/33831094-a89199ea-de9c-11e7-9d38-8b9f91af4ae9.png)    Environment data  ----------------  MacOS Sierra Version 0.12.6  Dotnet SDK 2.0.2  "
25834	area-System.Data	SqlClient 4.4.1 not published to NuGet	SqlClient 4.4.1 resolves https://github.com/dotnet/corefx/issues/13422.  The November Update release notes indicate SqlClient 4.4.1 is released https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.3.md  Howvere the latest version on NuGet appears to be 4.4.0 https://www.nuget.org/packages/System.Data.SqlClient/  Am I misunderstanding?  cc @saurabh500   
25835	area-System.Net	Fixing possible NullReferenceException when using X509Certificate.	# Problem  When using a `System.Net.Security.LocalCertificateSelectionCallback` that returns a `System.Security.Cryptography.X509Certificates.X509Certificate` created with the default constructor (`new X509Certificate()`) the `System.Net.Security.SslStream` would throw a `NullReferenceException` when calling `AuthenticateAsClient`.    ## Cause  `System.Net.Security.SecureChannel.EnsurePrivateKey(X509Certificate certificate)` does not handle `X509Certificate` types that have a `IntPtr.Zero` handle which can happen if the `X509Certificate` has been created with the default constructor. The call to `SecureChannel.MakeEx(certificate)` would return `null` which then would throw a `NullPointerException` when trying to compute the `certHash` right after.    ## Solution  Move the certHash assignment into the `certEx != null` if block and provide a alternative `certHash` assignment for `X509Certificate` types that have a `IntPtr.Zero` handle.    ### Notes  I have not added any tests for this particular problem as I am not sure on where to exactly put such a test. I would be willing to add a test if someone would be able to give me some guidance on where to start. Also I wasn't sure if little patches like this need to have a ticket/issue attached or not. Apologies if they do.
25836	area-System.Linq	Update byref of custom S.L.Expressions convert method in interpreter	While conversion operators cannot normally use methods with `ref` parameters, Expressions does allow them if the method in question is explicitly requested. The interpreter however does not write-back the parameter of the call.    Correct this.    Fixes #18445
25837	area-Meta	Strengthen runtime tamper-proofing of managed applications	This is a placeholder for work to be performed under the Security Epic. Summary: enable compiler and OS runtime security features to make it more difficult for adversaries to modify managed applications as they're executing.
25839	area-Infrastructure	Enable automatic updating of dotnet host version	The MicrosoftNETCoreDotNetHostPackageVersion and MicrosoftNETCoreDotNetHostPolicyPackageVersion properties in dependencies.props are not updated automatically. We should enable their updating using the @dotnet-maestro-bot  like we do for versions of MicrosoftNETCoreAppPackageVersion and other similar properties.  The change will need to wait until the https://github.com/dotnet/core-setup/issues/3510 is fixed though, because the recent dotnet host packages have broken handling of System.Globalization.Invariant property.
25840	area-Infrastructure	Reenable Alpine optional CI	After fixing the issue with the CI build of tests, I am re-enabling the  CI again. Still as optional only, I will update it to automatic one  after testing it manually.
25842	area-System.IO	Improve GetFiles performance (Unix)	Extend the efficiency wins to Unix. Will require some care with UTF8.    Cost from @JeremyKuhne     Windows part https://github.com/dotnet/corefx/issues/25387
25844	area-System.IO	Upgrade our ZLib version for Windows	We've missed a few releases of zlib and should update [our version of zlib](https://github.com/dotnet/corefx/tree/master/src/Native/Windows/clrcompression) from [1.2.8 to 1.2.11](https://www.zlib.net/ChangeLog.txt).    If possible, we should retain the perf improvements contributed by the Intel folks (cc: @bjjones).    @bjjones @ViktorHofer 
25846	area-System.Runtime	Add StringBuilder.Equals(string) to efficiently compare a StringBuilder with a string.	## Issue   There is no efficient way to compare the content of a large StringBuilder with a string. If you iterate with the string builder indexer, you hit [pathological performance](https://github.com/dotnet/corefx/issues/25804) on chunky StringBuilders (the typical case). If instead you create a temporary string from the builder, you have a large string that has to be garbage collected.    ## Rationale  MSBuild has to compare StringBuilder with String in two hot paths ([one ](https://github.com/Microsoft/msbuild/blob/d075c6f7c09bb2d766b45ac740d867ecf08ff6bb/src/Shared/ReuseableStringBuilder.cs#L86) and [two](https://github.com/Microsoft/msbuild/blob/3986423a4cd2e7a716ab0c0d6ef28485f1844977/src/Shared/OpportunisticIntern.cs#L309)). Right now it does it with indexes. If the string is large, which it can be if it was created by reading a file into an item list, [a customer observed this](https://github.com/Microsoft/msbuild/issues/1593) to be pathologically slow. They can take a change to fall back to making a temporary string for long builders, but that's an extra branch and they have to pick a cut over point. However it would be easy for a StringBuilder to efficiently compare itself with a string, because it just walks its chunks.    ## Proposal  ```c#      public sealed partial class StringBuilder : ...      {          public bool Equals(System.Text.StringBuilder sb) { throw null; } // already exists          public bool Equals(System.String value) { throw null; } // proposed      }  ```  The implementation would produce a result equivalent to   ```c#      return String.Equals(this.ToString(), s, StringComparison.Ordinal);  ```  but be implemented by walking the chunks and the string together. There are various ways this could be optimzed, but the goal here is to just not be awful.    
25847	area-System.Text	System.Text.RegularExpressions.Tests.RegexReplaceTests/Replace OutOfMemoryException on two Regex tests on 64 bit Windows	"These two regex tests have recently started failing consistently  ```              yield return new object[] { ""([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z])))))))))))))))"", ""abcdefghiklmnop"", ""$15"", RegexOptions.None, 15, 0, ""p"" };              yield return new object[] { ""([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z])))))))))))))))"", ""abcdefghiklmnop"", ""$3"", RegexOptions.None, 15, 0, ""cdefghiklmnop"" };  ```  on 64 bit Windows runs  ```  Unhandled Exception of Type System.OutOfMemoryException  Message :  System.OutOfMemoryException : Exception of type 'System.OutOfMemoryException' was thrown.  Stack Trace :     at Go18(RegexRunner )     at System.Text.RegularExpressions.RegexRunner.Scan(Regex regex, String text, Int32 textbeg, Int32 textend, Int32 textstart, Int32 prevlen, Boolean quick, TimeSpan timeout)     at System.Text.RegularExpressions.Regex.Run(Boolean quick, Int32 prevlen, String input, Int32 beginning, Int32 length, Int32 startat)     at System.Text.RegularExpressions.Regex.Match(String input, Int32 startat)     at System.Text.RegularExpressions.RegexReplacement.Replace(Regex regex, String input, Int32 count, Int32 startat)     at System.Text.RegularExpressions.Regex.Replace(String input, String replacement)     at System.Text.RegularExpressions.Tests.RegexReplaceTests.Replace(String pattern, String input, String replacement, RegexOptions options, Int32 count, Int32 start, String expected)  ```    Nothing has changed in regex code/tests. It's also odd that the OOM is 64 bit only.    @maririos is the repro system ready and working for such a case?"
25848	area-System.Memory	 Adding Span LastIndexOfAny APIs and tests	Fixes https://github.com/dotnet/corefx/issues/24839    Related PR https://github.com/dotnet/corefx/pull/25748    cc @benaadams, @KrzysztofCwalina, @GrabYourPitchforks, @jkotas, @stephentoub 
25849	area-System.ComponentModel	Porting remaining System.ComponentModel.Composition tests	Ported test project has around 1500 tests now.   Increases line/branch coverage to 88% and 80% respectively from 73% and 65%    Around 80 tests are still disabled on all platforms  another 70 tests are only disabled on unix and need troubleshooting   (these disabled tests are linked with issue 25498.)    cc: @danmosemsft 
25850	area-System.Memory	Add MemoryExtension APIs to get parity with array APIs	"As part of completing the  MemoryExtensions feature - https://github.com/dotnet/corefx/issues/24880 - here are the proposed Span extension APIs that should get added to get parity with the available APIs on array.    ## Proposed API Additions  ```C#  public static class MemoryExtensions  {      // Slice + CopyTo APIs can be used instead, hence we don't need the overloads      //public static void Copy<T>(this ReadOnlySpan<T> sourceSpan, Span<T> destinationSpan, int length);      //public static void Copy<T>(this ReadOnlySpan<T> sourceSpan, int sourceIndex, Span<T> destinationSpan, int destinationIndex, int length);            // Span CopyTo API is already ""constrained"" in that if it throws an exception, the destination remains unchanged. Hence, we don't need this API      //public static void ConstrainedCopy<T>(this ReadOnlySpan<T> sourceSpan, int sourceIndex, Span<T> destinationSpan, int destinationIndex, int length);            public static bool Exists<T>(this ReadOnlySpan<T> span, Predicate<T> match);        public static T Find<T>(this ReadOnlySpan<T> span, Predicate<T> match);      public static int FindIndex<T>(this ReadOnlySpan<T> span, Predicate<T> match);      // Slice the span before calling the method above, hence we don't need the overloads      //public static int FindIndex<T>(this ReadOnlySpan<T> span, int startIndex, Predicate<T> match);      //public static int FindIndex<T>(this ReadOnlySpan<T> span, int startIndex, int count, Predicate<T> match);            public static T FindLast<T>(this ReadOnlySpan<T> span, Predicate<T> match);      public static int FindLastIndex<T>(this ReadOnlySpan<T> span, Predicate<T> match);      // Slice the span before calling the method above, hence we don't need the overloads      //public static int FindLastIndex<T>(this ReadOnlySpan<T> span, int startIndex, Predicate<T> match);      //public static int FindLastIndex<T>(this ReadOnlySpan<T> span, int startIndex, int count, Predicate<T> match);            // Requires allocation      public static T[] FindAll<T>(this ReadOnlySpan<T> span, Predicate<T> match);      // Alternative to avoid allocation      public static bool TryFindAll<T>(this ReadOnlySpan<T> span, Predicate<T> match, Span<T> result);        public static void Reverse<T>(this Span<T>);      // Slice the span before calling the method above, hence we don't need the overload      //public static void Reverse<T>(this Span<T>, int index, int length);         public static bool TrueForAll<T>(this ReadOnlySpan<T> span, Predicate<T> match);    }  ```      ## Sample Usage and Rationale  The API usage should be almost identical to the Array API usage. Getting API parity with array makes it easier for customers to port their array-based code to Span wherever possible.    Example sample usage:  ```C#  public static void UseTrueForAll()  {      ReadOnlySpan<string> values1 = new string[] { ""Y2K"", ""A2000"", ""DC2A6"", ""MMXIV"", ""0C3"" };      ReadOnlySpan<string> values2 = new string[] { ""Y2"", ""A2000"", ""DC2A6"", ""MMXIV_0"", ""0C3"" };        Assert.False(values1.TrueForAll(value =>       {          return int.TryParse(value.Substring(value.Length - 1), out int s);      }));      Assert.True(values2.TrueForAll(value =>       {          return int.TryParse(value.Substring(value.Length - 1), out int s);      }));        Assert.False(values1.TrueForAll(EndsWithANumber));      Assert.True(values2.TrueForAll(EndsWithANumber));  }    private static bool EndsWithANumber(string value)  {      return int.TryParse(value.Substring(value.Length - 1), out int s);  }  ```    cc @KrzysztofCwalina, @dotnet/corefxlab-contrib, @stephentoub, @jkotas "
25851	area-System.Data	Update comment in S.D.SqlClient about why GC.KeepAlive isn't needed.	The comment says it isn't needed because of `OnStateChange`, but this appears outdated. It's still not needed though because the `ReRegisterForFinalize` below it will keep it rooted.    Closes #6116
25854	area-System.Net	How do I utilize HTTP caching with WinHttpHandler and HttpClient?	"I'm using .NET Framework 4.7, but creating issue here because [System.Net.Http.WinHttpHandler](https://www.nuget.org/packages/System.Net.Http.WinHttpHandler/) NuGet package release notes lead to .NET Core repository, and another [issue](https://github.com/dotnet/core/issues/1023) about `WinHttpHandler` was moved from .NET Core repository to CoreFx repository.    It is stated in many places accross .NET Framework documentation that WinINET is not suppose to be used in server enviroment, for example [Caching](https://msdn.microsoft.com/en-us/library/windows/desktop/aa383928(v=vs.85).aspx) page on MSDN:  > **Note**  WinINet does not support server implementations. In addition, it should not be used from a service. For server implementations or services use [Microsoft Windows HTTP Services (WinHTTP)](https://msdn.microsoft.com/en-us/library/windows/desktop/aa384273(v=vs.85).aspx).     Moreover, WinINET caching is not always working in IIS. See [HttpClient enable cache on server](https://stackoverflow.com/questions/47715084/httpclient-enable-cache-on-server), [HttpClient not using cache on staging server](https://stackoverflow.com/questions/22375795/httpclient-not-using-cache-on-staging-server), [HttpWebRequest's cache is not working for ASP.NET Application on Windows Server 2012 R2](https://social.technet.microsoft.com/Forums/windows/en-US/1725a82d-7e21-41a3-9c7d-19a6b5819369/httpwebrequests-cache-is-not-working-for-aspnet-application-on-windows-server-2012-r2?forum=winservercore) questions and [IIS Hosted Web API Not Caching Internal HTTP Responses](http://chrisoldwood.blogspot.ru/2015/01/iis-hosted-web-api-not-caching-internal.html) article.    So if I need to communicate with other HTTP servers in my server application (Web API or windows service) I need to use WinHTTP. I couldn't find any way to switch from WinINET to WinHTTP except using [`WinHttpHandler`](https://msdn.microsoft.com/en-us/library/system.net.http.winhttphandler(v=vs.105).aspx) class from [System.Net.Http.WinHttpHandler](https://www.nuget.org/packages/System.Net.Http.WinHttpHandler/) NuGet package:  ```csharp  var client = new HttpClient(new WinHttpHandler())  {      BaseAddress = new Uri(""http://myresourceserver.com/"")  };    var response = await client.GetAsync(""resource"");  var result = await response.Content.ReadAsStringAsync();  ```  Now with this handler `HttpClient` is not using cache by default. I use following command to configure WinHTTP to use Fiddler proxy: `netsh winhttp set proxy 127.0.0.1:8888 ""<-loopback>""` and confirm that cache is not used.  With `WinHttpHandler` I can't explicitly specify `CachePolicy` like I can with `WebRequestHandler`. It also seems like `WinHttpHandler` ignores `<requestCaching>` configuration file section and `HttpWebRequest.DefaultCachePolicy` static property.     I found no information about caching in WinHTTP in official [documentation](https://msdn.microsoft.com/en-us/library/windows/desktop/aa384273(v=vs.85).aspx). "
25855	area-System.Diagnostics	Expose Parent/Child Process Information via System.Diagnostics.Process	"## Issue  .Net Standard does not seem to provide a means to identify the parent or child processes of a given process.     In the Windows world, this information can be obtained or extrapolated using [WMI's Win32_Process management object](https://stackoverflow.com/a/7189381/117424), [performance counters](https://stackoverflow.com/a/2336322/117424) or [P/Invoke](https://stackoverflow.com/a/3346055/117424).     However, there doesn't seem to be a cross-platform .Net Standard way to do this. (If there is, please let me know! :-))    ## Rationale  The ability to determine which processes are children (or grandchildren or great-grandchildren, etc.) of a process is needed in order to be able to kill a process tree without using platform-specific code.    For example, [`Microsoft.DotNet.Tools.Test.Utilities.ProcessExtension`](https://github.com/dotnet/cli/blob/master/test/Microsoft.DotNet.Tools.Tests.Utilities/Extensions/ProcessExtensions.cs) relies on different code paths to handle killing a process tree on Windows and Linux. Both code paths involve invoking one or more command-line processes. If this proposal were implemented, this logic could potentially be replaced with OS-agnostic .Net Standard code that iterates through the process's children, calls [Kill](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.process.kill?view=netstandard-2.0) on each of them, then calls Kill on the parent. No multiple code paths. No need to invoke command-line processes.    For completeness, it would be nice to have the ability to navigate both up (parent process) and down (child processes) the process tree.    ## Proposal        public partial class Process : ....    {          public int GetParentProcessId() { ... } // returns parent process Id currently associated with this process          public Process GetParentProcess() {  } // returns parent process currently associated with this process          public Process[] GetChildProcesses(bool includeAllDescendants = false) { ... } // setting the parameter to true results in grandchildren, great-grandchildren, etc., being included in the results; otherwise, only direct children are returned      }    At first glance, it might seem more appropriate to make the first two methods properties (e.g. `public int ParentProcessId { get { ... }}`). However, a process's parent can change. The API design guidelines suggest preferring a method over a property when ""calling the member twice in succession results in different results.""  "
25856	area-Infrastructure	DIA SDK missing error message is wrong/misleading	"When trying to build CoreFX I ran `.\build.cmd`. I got the following error message:    ```  if exist ""%VSINSTALLDIR%DIA SDK"" goto GenVSSolution  echo Error: DIA SDK is missing at ""%VSINSTALLDIR%DIA SDK"". ^  This is due to a bug in the Visual Studio installer. It does not install DIA SDK at ""%VSINSTALLDIR%"" but rather ^  at VS install location of previous version. Workaround is to copy DIA SDK folder from VS install location ^  of previous version to ""%VSINSTALLDIR%"" and then resume build.  :: DIA SDK not included in Express editions  echo Visual Studio Express does not include the DIA SDK. ^  You need Visual Studio 2015 or 2017 (Community is free).  echo See: https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/developer-guide.md#prerequisites  exit /b 1  ```    The DIA SDK is now correctly installed by the installer. However I forgot to select the correct components when installing VS Community 2017.    I am creating a PR to change the error message."
25857	area-System.Runtime	Command line tokenization reconciling	Using PasteArguments from Environment to avoid code duplication while  getting command line.    Issue #21267. Command Line tokenization is done all over the place and inconsistently.
25860	area-System.ComponentModel	No dump found on fedora.25.amd64.Open:Release-x64	https://mc.dot.net/#/user/maryamariyan/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/12cbeed85897de05d63181974602cd977ea30966/workItem/System.ComponentModel.Composition.Tests/wilogs  ```  2017-12-11 21:09:52,527: INFO: proc(54): run_and_log_output: Output: /home/helixbot/dotnetbuild/work/1014c683-ec6f-487d-993a-1b6b74b767bc/Work/9f535837-9b48-4c90-93de-22f855e4574e/Unzip/RunTests.sh: line 87:  4381 Segmentation fault      (core dumped) $RUNTIME_PATH/dotnet xunit.console.netcore.exe System.ComponentModel.Composition.Tests.dll -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=OuterLoop -notrait category=failing  2017-12-11 21:09:52,577: INFO: proc(54): run_and_log_output: Output: Trying to find crash dumps for project: System.ComponentModel.Composition.Tests  2017-12-11 21:09:52,577: INFO: proc(54): run_and_log_output: Output: No new dump file was found in /home/helixbot/dotnetbuild/work/1014c683-ec6f-487d-993a-1b6b74b767bc/Work/9f535837-9b48-4c90-93de-22f855e4574e/Unzip  2017-12-11 21:09:52,583: INFO: proc(54): run_and_log_output: Output: ~/dotnetbuild/work/1014c683-ec6f-487d-993a-1b6b74b767bc/Work/9f535837-9b48-4c90-93de-22f855e4574e/Unzip  ```    Opening an issue to see whether this is consistent.
25861	area-System.Diagnostics	Process BasePriority test failure on WSL	"1 Process test consistently fails on WSL on the latest RS4 Insiders Preview build:     ````        <test name=""System.Diagnostics.Tests.ProcessTests.TestBasePriorityOnUnix"" type=""System.Diagnostics.Tests.ProcessTests"" method=""TestBasePriorityOnUnix"" time=""0.062201"" result=""Fail"">          <traits>            <trait name=""category"" value=""requireselevation"" />          </traits>          <failure exception-type=""Xunit.Sdk.EqualException"">            <message><![CDATA[Assert.Equal() Failure\nExpected: 19\nActual:   -19]]></message>            <stack-trace><![CDATA[   at System.Diagnostics.Tests.ProcessTests.SetAndCheckBasePriority(ProcessPriorityClass exPriorityClass, Int32 priority) in /home/jfree/dd/corefx/src/System.Diagnostics.Process/tests/ProcessTests.cs:line 45     at System.Diagnostics.Tests.ProcessTests.TestBasePriorityOnUnix() in /home/jfree/dd/corefx/src/System.Diagnostics.Process/tests/ProcessTests.Unix.cs:line 241]]></stack-trace>          </failure>        </test>  ```` "
25863	area-System.IO	Investigate improving GetFiles array perf.	The APIs that return arrays currently use an enumerable internally. We could potentially write optimized solutions for these that take into account the result will be a flat array (i.e. forgo some of the enumerable overhead).    ``` C#  namespace System.IO  {      public static class Directory      {          public static string[] GetDirectories(string path, string searchPattern, SearchOption searchOption);          public static string[] GetFiles(string path, string searchPattern, SearchOption searchOption);          public static string[] GetFileSystemEntries(string path, string searchPattern, SearchOption searchOption);      }        public sealed class DirectoryInfo : FileSystemInfo      {          public DirectoryInfo[] GetDirectories(string searchPattern, SearchOption searchOption);          public FileInfo[] GetFiles(string searchPattern, SearchOption searchOption);          public FileSystemInfo[] GetFileSystemInfos(string searchPattern, SearchOption searchOption);       }  }  ```    Mono had some optimizations along these lines. https://github.com/dotnet/designs/pull/24#issuecomment-351102126
25864	area-Infrastructure	Fix Alpine CI build last issue	By accident, I've put in the stage for executing tests although we  cannot do that until we have Alpine queue in Helix working.  This change removes that, which should be the last thing preventing the  CI from succeeding.
25866	area-System.Diagnostics	Fix triple+ quote parsing on Unix	
25867	area-System.IO	Adding System.IO.Compression.ZipFile to net471 support package	cc: @weshaggard @safern @AlexGhiondea     These changes will add System.IO.Compression.ZipFile to the support package and will cause a conflict so that the right binding redirect is generated for it.
25868	area-Infrastructure	Reenable automatic Alpine leg in CI	This change reenables automatic running of Alpine tests on every PR. It  also removed two unused variables in the alpine.3.6.groovy file.
25869	area-System.Diagnostics	Disable Process BasePriority test on WSL	https://github.com/dotnet/corefx/issues/25861
25870	area-System.Security	System.Security.Cryptography.Cng netstandard 2.0 version is incorrect	see https://github.com/dotnet/corefx/issues/25766    The netstandard 2.0 version is currently 4.3.1.0 but the netcorepp 2.0 version is 4.3.0.0. Given the netstandard2.0 is supported on netcoreapp2.0 the versions need to match. One of two things needs to happen:    1) The NS2.0 ref needs to be frozen to 4.3.0.0 to match what is inbox on netcoreapp2.0  2) We need to ship a newer version of the library that works on netcoreapp2.0 in the nuget package OOB, that has version 4.3.1.0    Given there isn't any new API surface I suggest we go with option (1) in the future if we need to add new API then we can decide to unfreeze it and also update our netcoreapp2.0 implementation to match.    cc @bartonjs @ericstj 
25873	area-System.IO	Add file enumeration extensibility points	"We need low-allocating high-performance extensibility points to build solutions for enumerating files.    (This is the API review for https://github.com/dotnet/designs/pull/24)    ## Rationale and Usage    Enumerating files in .NET provides limited configurability. You can specify a simple DOS style pattern and whether or not to look recursively. More complicated filtering requires post filtering all results which can introduce a significant performance drain.    Recursive enumeration is also problematic in that there is no way to handle error states such as access issues or cycles created by links.    These restrictions have a significant impact on file system intensive applications, a key example being MSBuild. This document proposes a new set of primitive file and directory traversal APIs that are optimized for providing more flexibility while keeping the overhead to a minimum so that enumeration becomes both more powerful as well as more performant.    To write a wrapper that gets files with a given set of extensions you would need to write something similar to:    ``` C#  public static IEnumerable<string> GetFilePathsWithExtensions(string directory, bool recursive, params string[] extensions)  {      return new DirectoryInfo(directory)          .GetFiles(""*"", recursive ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly)          .Where(f => extensions.Any(e => f.Name.EndsWith(e, StringComparison.OrdinalIgnoreCase)))          .Select(r => r.FullName);  }  ```    Not complicated to write, but this can do an enormous amount of extra allocations. You have to create full strings and `FileInfo`'s for every single item in the file system. We can cut this down significantly with the extension point:    ``` C#  public static IEnumerable<string> GetFileFullPathsWithExtension(string directory,      bool recursive, params string[] extensions)  {      return new FileSystemEnumerable<string>(          directory,          (ref FileSystemEntry entry) => entry.ToFullPath(),          new EnumerationOptions() { RecurseSubdirectories = recursive })          {              ShouldIncludePredicate = (ref FileSystemEntry entry) =>              {                  if (entry.IsDirectory) return false;                  foreach (string extension in extensions)                  {                      if (Path.GetExtension(entry.FileName).EndsWith(extension, StringComparison.OrdinalIgnoreCase))                          return true;                  }                  return false;              }          };  }  ```    The number of allocation reductions with the above solution is significant.    - No `FileInfo` allocations  - No fullpath string allocations for paths that don't match  - No filename allocations for paths that don't match (as the filename will still be in the native buffer at this point)    > Note that while you can write a solution that doesn't allocate a `FileInfo` by using the `string[]` APIs and `GetFullPath()` it would still allocate unneeded strings and introduce costly normalization overhead.    ## Proposed API    ``` C#  namespace System.IO  {      public static partial class Directory      {          public static IEnumerable<string> EnumerateDirectories(string path, string searchPattern, EnumerationOptions enumerationOptions);          public static IEnumerable<string> EnumerateFiles(string path, string searchPattern, EnumerationOptions enumerationOptions);          public static IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, EnumerationOptions enumerationOptions);          public static string[] GetDirectories(string path, string searchPattern, EnumerationOptions enumerationOptions);          public static string[] GetFiles(string path, string searchPattern, EnumerationOptions enumerationOptions);          public static string[] GetFileSystemEntries(string path, string searchPattern, EnumerationOptions enumerationOptions);      }        public sealed partial class DirectoryInfo      {          public IEnumerable<DirectoryInfo> EnumerateDirectories(string searchPattern, EnumerationOptions enumerationOptions);          public IEnumerable<FileSystemInfo> EnumerateFileSystemInfos(string searchPattern, EnumerationOptions enumerationOptions);          public IEnumerable<FileInfo> EnumerateFiles(string searchPattern, EnumerationOptions enumerationOptions);          public DirectoryInfo[] GetDirectories(string searchPattern, EnumerationOptions enumerationOptions);          public FileInfo[] GetFiles(string searchPattern, EnumerationOptions enumerationOptions);          public FileSystemInfo[] GetFileSystemInfos(string searchPattern, EnumerationOptions enumerationOptions);      }        public enum MatchType      {          /// <summary>          /// Match using '*' and '?' wildcards.          /// </summary>          Simple,            /// <summary>          /// Match using DOS style matching semantics. '*', '?', '&lt;', '&gt;', and '""'          /// are all considered wildcards.          /// </summary>          Dos      }        public enum MatchCasing      {          /// <summary>          /// Match the default casing for the given platform          /// </summary>          PlatformDefault,            /// <summary>          /// Match respecting character casing          /// </summary>          CaseSensitive,            /// <summary>          /// Match ignoring character casing          /// </summary>          CaseInsensitive      }        public class EnumerationOptions      {          /// <summary>          /// Should we recurse into subdirectories while enumerating?          /// Default is false.          /// </summary>          public bool RecurseSubdirectories { get; set; }            /// <summary>          /// Skip files/directories when access is denied (e.g. AccessDeniedException/SecurityException).          /// Default is true.          /// </summary>          public bool IgnoreInaccessible { get; set; }            /// <summary>          /// Suggested buffer size, in bytes. Default is 0 (no suggestion).          /// </summary>          /// <remarks>          /// Not all platforms use user allocated buffers, and some require either fixed buffers or a          /// buffer that has enough space to return a full result. One scenario where this option is          /// useful is with remote share enumeration on Windows. Having a large buffer may result in          /// better performance as more results can be batched over the wire (e.g. over a network          /// share). A ""large"" buffer, for example, would be 16K. Typical is 4K.          ///           /// We will not use the suggested buffer size if it has no meaning for the native APIs on the          /// current platform or if it would be too small for getting at least a single result.          /// </remarks>          public int BufferSize { get; set; }            /// <summary>          /// Skip entries with the given attributes. Default is FileAttributes.Hidden | FileAttributes.System.          /// </summary>          public FileAttributes AttributesToSkip { get; set; }            /// <summary>          /// For APIs that allow specifying a match expression this will allow you to specify how          /// to interpret the match expression.          /// </summary>          /// <remarks>          /// The default is simple matching where '*' is always 0 or more characters and '?' is a single character.          /// </remarks>          public MatchType MatchType { get; set; }            /// <summary>          /// For APIs that allow specifying a match expression this will allow you to specify case matching behavior.          /// </summary>          /// <remarks>          /// Default is to match platform defaults, which are gleaned from the case sensitivity of the temporary folder.          /// </remarks>          public MatchCasing MatchCasing { get; set; }            /// <summary>          /// Set to true to return ""."" and "".."" directory entries. Default is false.          /// </summary>          public bool ReturnSpecialDirectories { get; set; }      }  }    namespace System.IO.Enumeration  {      public ref struct FileSystemEntry      {          /// <summary>          /// The full path of the directory this entry resides in.          /// </summary>          public ReadOnlySpan<char> Directory { get; }            /// <summary>          /// The full path of the root directory used for the enumeration.          /// </summary>          public ReadOnlySpan<char> RootDirectory { get; }            /// <summary>          /// The root directory for the enumeration as specified in the constructor.          /// </summary>          public ReadOnlySpan<char>  OriginalRootDirectory { get; }            public ReadOnlySpan<char> FileName { get; }          public FileAttributes Attributes { get; }          public long Length { get; }          public DateTimeOffset CreationTimeUtc { get; }          public DateTimeOffset LastAccessTimeUtc { get; }          public DateTimeOffset LastWriteTimeUtc { get; }          public bool IsDirectory { get; }          public FileSystemInfo ToFileSystemInfo();            /// <summary>          /// Returns the full path for find results, based on the initially provided path.          /// </summary>          public string ToSpecifiedFullPath();            /// <summary>          /// Returns the full path of the find result.          /// </summary>          public string ToFullPath();      }      public abstract class FileSystemEnumerator<TResult> : CriticalFinalizerObject, IEnumerator<TResult>      {          public FileSystemEnumerator(string directory, EnumerationOptions options = null);            /// <summary>          /// Return true if the given file system entry should be included in the results.          /// </summary>          protected virtual bool ShouldIncludeEntry(ref FileSystemEntry entry);            /// <summary>          /// Return true if the directory entry given should be recursed into.          /// </summary>          protected virtual bool ShouldRecurseIntoEntry(ref FileSystemEntry entry);            /// <summary>          /// Generate the result type from the current entry;          /// </summary>          protected abstract TResult TransformEntry(ref FileSystemEntry entry);            /// <summary>          /// Called whenever the end of a directory is reached.          /// </summary>          /// <param name=""directory"">The path of the directory that finished.</param>          protected virtual void OnDirectoryFinished(ReadOnlySpan<char> directory);            /// <summary>          /// Called when a native API returns an error. Return true to continue, or false          /// to throw the default exception for the given error.          /// </summary>          /// <param name=""error"">The native error code.</param>          protected virtual bool ContinueOnError(int error);            public TResult Current { get; }          object IEnumerator.Current { get; }          public bool MoveNext();          public void Reset();          public void Dispose();          protected virtual void Dispose(bool disposing);      }        /// <summary>      /// Enumerable that allows utilizing custom filter predicates and tranform delegates.      /// </summary>      public class FileSystemEnumerable<TResult> : IEnumerable<TResult>      {          public FileSystemEnumerable(string directory, FindTransform transform, EnumerationOptions options = null) { }          public FindPredicate ShouldRecursePredicate { get; set; }          public FindPredicate ShouldIncludePredicate { get; set; }          public IEnumerator<TResult> GetEnumerator();          IEnumerator GetEnumerator();            /// <summary>          /// Delegate for filtering out find results.          /// </summary>          public delegate bool FindPredicate(ref FileSystemEntry entry);            /// <summary>          /// Delegate for transforming raw find data into a result.          /// </summary>          public delegate TResult FindTransform(ref FileSystemEntry entry);      }      public static class FileSystemName      {          /// <summary>          /// Change unescaped '*' and '?' to '&lt;', '&gt;' and '""' to match Win32 behavior. For compatibility, Windows          /// changes some wildcards to provide a closer match to historical DOS 8.3 filename matching.          /// </summary>          public static string TranslateDosExpression(string expression);            /// <summary>          /// This matcher uses the Windows wildcards (which includes `*`, `?`, `>`, `<`, and `""`).          /// </summary>          public static bool MatchesDosExpression(ReadOnlySpan<char> expression, ReadOnlySpan<char> name, bool ignoreCase = true);            /// <summary>          /// This matcher will only process `*` and `?`.          /// </summary>                 public static bool MatchesSimpleExpression(ReadOnlySpan<char> expression, ReadOnlySpan<char> name, bool ignoreCase = true);      }  }  ```    ## Implementation Notes    ### Changes to existing behavior  - Match expressions will no longer consider 8.3 filenames      - This obscure behavior is costly and gives unexpected results      - 8.3 filename generation is not always on, can be disabled      - `*.htm` will no longer match `*.html` if 8.3 filenames exist  - Option defaults (when calling new APIs)      - System & hidden files/directories are skipped by default      - Access denied folders are skipped by default (no errors are thrown)      - Simple matching is used by default (`*.*` means any file with a period, `foo.*` matches `foo.txt`, not `foo`)    ### FileSystemEnumerable  - `directory`, and `transform` will throw `ArgumentNullException` if null.  - If predicates are not specified, all entries will be accepted    ### FileSystemEnumerator  - `directory`, and `transform` will throw `ArgumentNullException` if null.  - all directory entries will be returned before processing additional directories (e.g. subdirectories)  - order of directory entries is not guaranteed  - timing of opening subdirectories is not guaranteed    ### FileSystemEntry  - translation of data that has non-trivial cost will be lazily done (applies specifically to Unix)      - properties that require an additional OS call      - UTF-8 to UTF-16 conversion      - initial property values can potentially be unexpected based on timing of accessing data (i.e. the underlying file could disappear)  - property values will **not** change after being accessed  - `FileSystemEntry` should **not** be cached      - `FileName` will only contain valid data for the duration of filter/transform calls, hence the struct being passed by ref    ### Matchers  - Matchers will support escaping of supported wildcards and `\` using the `\` character      - `\*`, `\\`, `?` (and `\>`, `\<`, `\""` for `MatchesDosExpression`)  - Empty `expresion` will match all  "
25874	area-System.Xml	Remove obsolete attribute from XslTransform	Some customers hesitate in using `XslTransform` even when recommended because of the presence of this attribute.    Depending on the scenario it could be better to use `XslTransform` instead of `XslCompiledTransform`, however, `XslTransform` was marked as obsolete back in .NET 2.0 which creates the impression that eventually it is going to be pulled out, however this is not really happening.  In UWP is even stranger since `XslCompiledTransform` is not available at all and only the *deprecated* one is available.    
25875	area-System.IO	Add overloads to enumeration APIs that take FindOptions flags	This is contingent on https://github.com/dotnet/corefx/issues/25873. If that API proposal is done, we should also expose overloads on the existing APIs that allow you to get at the new options.    ## Rationale and Usage    Customers have been asking for the ability to tweak enumeration for common scenarios. Our new extensibility proposal (https://github.com/dotnet/corefx/issues/25873) has a new set of `FindOptions` flags that we should support to get:    - Recursion  - Ability to skip inaccessible files  - Ability to specify larger buffers for remote access  - No locking optimization for thread-bound enumeration    ## Proposed API    As proposed in https://github.com/dotnet/corefx/issues/25873, the Flags would be:    ``` C#      [Flags]      public enum FindOptions      {          None = 0x0,            // Enumerate subdirectories          Recurse = 0x1,            // Skip files/directories when access is denied (e.g. AccessDeniedException/SecurityException)          IgnoreInaccessible = 0x2,            // Hint to use larger buffers for getting data (notably to help address remote enumeration perf)          UseLargeBuffer = 0x4            // Future: Add flags for tracking cycles, etc.       }  ```    The new API surface area would be:    ``` C#      public static class Directory      {          public static IEnumerable<string> EnumerateDirectories(string path, string searchPattern, FindOptions findOptions);          public static IEnumerable<string> EnumerateFiles(string path, string searchPattern, FindOptions findOptions);          public static IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, FindOptions findOptions);          public static string[] GetDirectories(string path, string searchPattern, FindOptions findOptions);          public static string[] GetFiles(string path, string searchPattern, FindOptions findOptions);          public static string[] GetFileSystemEntries(string path, string searchPattern, FindOptions findOptions);      }        public sealed class DirectoryInfo : FileSystemInfo      {          public IEnumerable<DirectoryInfo> EnumerateDirectories(string searchPattern, FindOptions findOptions);          public IEnumerable<FileInfo> EnumerateFiles(string searchPattern, FindOptions findOptions);          public IEnumerable<FileSystemInfo> EnumerateFileSystemInfos(string searchPattern, FindOptions findOptions);          public DirectoryInfo[] GetDirectories(string searchPattern, FindOptions findOptions);          public FileInfo[] GetFiles(string searchPattern, FindOptions findOptions);          public FileSystemInfo[] GetFileSystemInfos(string searchPattern, FindOptions findOptions);       }  ```    ## Implementation Notes    - Won't check flags to allow light-up scenarios
25876	area-System.IO	Platform-dependent FileStream permissions behavior?	I might be missing something obvious, but it's strange to me that this throws an IOException on Windows but not on Ubuntu:    ```  var willWork = File.Open(myPath, FileMode.Create, FileAccess.ReadWrite, FileShare.Read);  var willThrowOnlyOnWin = File.Open(myPath, FileMode.Create, FileAccess.ReadWrite, FileShare.Read);  ```    However, this will throw on both:    ```  var willWork = File.Open(myPath, FileMode.Create, FileAccess.ReadWrite, **FileShare.None**);  var willThrowEverywhere = File.Open(myPath, FileMode.Create, FileAccess.ReadWrite, FileShare.Read);  ```    Is this expected?
25877	area-System.IO	NamedPipeClient connect throws TimeoutException when appropriate 	"Fixes #24635    Changing the code to ERROR_SEM_TIMEOUT changes the exception from  IOException(""The semaphore timeout period has expired"") to a  TimeoutException when the pipe is busy.    Another change in behavior: if there was a good cancellationToken (i.e.:  CanBeCancelled was true) with a timeout larger than 50ms and the pipe  was busy it was failing with the IOException on first try (after waiting  50ms). However it was waiting for the whole user timeout if the token  could not be cancelled. This change will make it wait for the full user  timeout independently of cancellationToken.CanBeCancelled value."
25878	area-System.Net	Test failure: System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test	Opened on behalf of @karelz    Failed tests:  * `GetAsync_SupportedSSLVersion_Succeeds` - 75 failures per run (all executions on Windows/Linux/Mac)  * `GetAsync_UnsupportedSSLVersion_Throws` - 22 failures per run (all executions on Linux-only)    Affected (4) runs: [20171211.01](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171211.01/workItem/System.Net.Http.Functional.Tests), [20171210.03](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171210.03/workItem/System.Net.Http.Functional.Tests), [20171210.01](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171210.01/workItem/System.Net.Http.Functional.Tests), [20171209.03](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171209.03/workItem/System.Net.Http.Functional.Tests)    ### GetAsync_SupportedSSLVersion_Succeeds    * [test source code](https://github.com/dotnet/corefx/blob/4bf90198c5e7710ea67b7c1b467e859ec8bb78e5/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.SslProtocols.cs#L133-L161)    Windows:  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The operation timed out     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in E:\A\_work\1955\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test.<GetAsync_SupportedSSLVersion_Succeeds>d__6.MoveNext() in E:\A\_work\1955\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.SslProtocols.cs:line 158  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Threading.Tasks.RendezvousAwaitable`1.GetResult() in E:\A\_work\1955\s\corefx\src\Common\src\System\Threading\Tasks\RendezvousAwaitable.cs:line 62     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() in E:\A\_work\1955\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 856  ```    Mac:  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.CurlException : SSL connect error     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in /Users/buildagent/agent/_work/320/s/corefx/src/System.Net.Http/src/System/Net/Http/HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test.<GetAsync_SupportedSSLVersion_Succeeds>d__6.MoveNext() in /Users/buildagent/agent/_work/320/s/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.SslProtocols.cs:line 158  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Net.Http.CurlHandler.ThrowIfCURLEError(CURLcode error) in /Users/buildagent/agent/_work/320/s/corefx/src/System.Net.Http/src/System/Net/Http/Unix/CurlHandler.cs:line 663     at System.Net.Http.CurlHandler.MultiAgent.FinishRequest(StrongToWeakReference`1 easyWrapper, CURLcode messageResult) in /Users/buildagent/agent/_work/320/s/corefx/src/System.Net.Http/src/System/Net/Http/Unix/CurlHandler.MultiAgent.cs:line 883  ```    Linux:  ```  System.Threading.Tasks.TaskCanceledException : A task was canceled.     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in /root/corefx-1211504/src/System.Net.Http/src/System/Net/Http/HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test.<GetAsync_SupportedSSLVersion_Succeeds>d__6.MoveNext() in /root/corefx-1211504/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.SslProtocols.cs:line 158  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ```    ### GetAsync_UnsupportedSSLVersion_Throws    * [test source code](https://github.com/dotnet/corefx/blob/4bf90198c5e7710ea67b7c1b467e859ec8bb78e5/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.SslProtocols.cs#L169-L194)    Linux (only):  ```  Assert.Throws() Failure  Expected: typeof(System.Net.Http.HttpRequestException)  Actual:   typeof(System.Threading.Tasks.TaskCanceledException): A task was canceled.     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in /root/corefx-1210954/src/System.Net.Http/src/System/Net/Http/HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---  ```
25879	area-System.Net	Use generic test handling for remote server failures.	cc @karelz @wfurt @davidsh     fixes #25878 
25880	area-System.Net	Test failure: System.Net.Http.Functional.Tests.HttpProtocolTests / GetAsync_ExpectedStatusCodeAndReason_Success	## Type of failures    ### The operation has been canceled    Failure: [20171208.04](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171208.04/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpProtocolTests~2FGetAsync_ExpectedStatusCodeAndReason_Success(statusLine:%20%5C%22HTTP~2F1.1%20400%20Bad%20Request%5C%22,%20expectedStatusCode:%20400,%20expectedReason:%20%5C%22Bad%20Request%5C%22))  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The operation has been canceled     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in E:\A\_work\1355\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpProtocolTests.<>c__DisplayClass1_0.<<GetAsync_ExpectedStatusCodeAndReason_Success>b__0>d.MoveNext() in E:\A\_work\1355\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpProtocolTests.cs:line 47  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass3_0.<CreateServerAsync>b__0(Task t) in E:\A\_work\1355\s\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 67     at System.Threading.Tasks.ContinuationTaskFromTask.InnerInvoke() in E:\A\_work\1993\s\src\mscorlib\src\System\Threading\Tasks\TaskContinuation.cs:line 59     at System.Threading.Tasks.Task.<>c.<.cctor>b__278_1(Object obj) in E:\A\_work\1993\s\src\mscorlib\src\System\Threading\Tasks\Task.cs:line 2480     at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state) in E:\A\_work\1993\s\src\mscorlib\shared\System\Threading\ExecutionContext.cs:line 151     at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) in E:\A\_work\1993\s\src\mscorlib\src\System\Threading\Tasks\Task.cs:line 2440  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpProtocolTests.<GetAsync_ExpectedStatusCodeAndReason_Success>d__1.MoveNext() in E:\A\_work\1355\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpProtocolTests.cs:line 42  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Threading.Tasks.RendezvousAwaitable`1.GetResult() in E:\A\_work\1355\s\corefx\src\Common\src\System\Threading\Tasks\RendezvousAwaitable.cs:line 62     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() in E:\A\_work\1355\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 856  ```    ### The handle is invalid    Failure: [20171205.06](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171205.06/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpProtocolTests_Dribble~2FGetAsync_ExpectedStatusCodeAndReason_Success(statusLine:%20%5C%22HTTP~2F1.1%20201%20Created%5C%22,%20expectedStatusCode:%20201,%20expectedReason:%20%5C%22Created%5C%22))  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The handle is invalid     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in E:\A\_work\2046\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpProtocolTests.<>c__DisplayClass1_0.<<GetAsync_ExpectedStatusCodeAndReason_Success>b__0>d.MoveNext() in E:\A\_work\2046\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpProtocolTests.cs:line 54  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass3_0.<CreateServerAsync>b__0(Task t) in E:\A\_work\2046\s\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 68     at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state) in E:\A\_work\1613\s\src\mscorlib\shared\System\Threading\ExecutionContext.cs:line 151     at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) in E:\A\_work\1613\s\src\mscorlib\src\System\Threading\Tasks\Task.cs:line 2440  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpProtocolTests.<GetAsync_ExpectedStatusCodeAndReason_Success>d__1.MoveNext() in E:\A\_work\2046\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpProtocolTests.cs:line 42  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Net.Http.WinHttpException.ThrowExceptionUsingLastError() in E:\A\_work\2046\s\corefx\src\Common\src\System\Net\Http\WinHttpException.cs:line 44     at System.Net.Http.WinHttpHandler.SetRequestHandleRedirectionOptions(SafeWinHttpHandle requestHandle) in E:\A\_work\2046\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 1082     at System.Net.Http.WinHttpHandler.SetRequestHandleOptions(WinHttpRequestState state) in E:\A\_work\2046\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 956     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() in E:\A\_work\2046\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 833  ```    ### An existing connection was forcibly closed by the remote host    Failure: [20171205.02](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171205.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpProtocolTests_Dribble~2FGetAsync_ExpectedStatusCodeAndReason_Success\(statusLine:%20%5C%22HTTP~2F1.1%20600%20still%20valid%5C%22,%20expectedStatusCode:%20600,%20expectedReason:%20%5C%22sti...)  ```  System.IO.IOException : Unable to transfer data on the transport connection: An existing connection was forcibly closed by the remote host.  ---- System.Net.Sockets.SocketException : An existing connection was forcibly closed by the remote host     at System.Net.Http.Functional.Tests.HttpProtocolTests_Dribble.DribbleStream.<WriteAsync>d__2.MoveNext() in E:\A\_work\436\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpProtocolTests.cs:line 126  --- End of stack trace from previous location where exception was thrown ---     at System.IO.StreamWriter.<FlushAsyncInternal>d__70.MoveNext() in E:\A\_work\436\s\corefx\src\System.Runtime.Extensions\src\System\IO\StreamWriter.cs:line 982  --- End of stack trace from previous location where exception was thrown ---     at System.IO.StreamWriter.<WriteAsyncInternal>d__55.MoveNext() in E:\A\_work\436\s\corefx\src\System.Runtime.Extensions\src\System\IO\StreamWriter.cs:line 627  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.<ReadWriteAcceptedAsync>d__8.MoveNext() in E:\A\_work\436\s\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 104  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.<AcceptSocketAsync>d__11.MoveNext() in E:\A\_work\436\s\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 180  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpProtocolTests.<>c__DisplayClass1_0.<<GetAsync_ExpectedStatusCodeAndReason_Success>b__0>d.MoveNext() in E:\A\_work\436\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpProtocolTests.cs:line 54  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass3_0.<CreateServerAsync>b__0(Task t) in E:\A\_work\436\s\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 68     at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state) in E:\A\_work\1762\s\src\mscorlib\shared\System\Threading\ExecutionContext.cs:line 151     at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) in E:\A\_work\1762\s\src\mscorlib\src\System\Threading\Tasks\Task.cs:line 2440  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpProtocolTests.<GetAsync_ExpectedStatusCodeAndReason_Success>d__1.MoveNext() in E:\A\_work\436\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpProtocolTests.cs:line 42  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----  ```    ## History of failures    Day | Build | Queue | FailureMessage  -- | -- | -- | --  10/25 | 20171025.04 | Win7 | The handle is invalid  11/3 | 20171103.07 | Win7 | The handle is invalid  11/3 | 20171103.11 | Win7 | The operation has been canceled  11/4 | 20171104.03 | Win7 | The operation has been canceled  11/6 | 20171106.03 | Win7 | The handle is invalid  11/7 | 20171107.02 | Win8.1 | The operation has been canceled  11/7 | 20171107.02 | Win7 | The handle is invalid  11/7 | 20171107.04 | Win8.1 | The operation has been canceled  11/15 | 20171115.01 | Win7 | An existing connection was forcibly closed by the remote host  11/19 | 20171119.02 | Win8.1 | The operation has been canceled  11/22 | 20171122.02 | Win7 | The handle is invalid  11/24 | 20171124.01 | Win7 | The handle is invalid  11/27 | 20171127.06 | Win7 | The handle is invalid  12/5 | 20171205.02 | Win7 | An existing connection was forcibly closed by the remote host  12/5 | 20171205.05 | Win7 | The handle is invalid  12/5 | 20171205.06 | Win7 | The handle is invalid  12/8 | 20171208.04 | Win8.1 | The operation has been canceled  12/13 | 20171213.01 | Win7 | The handle is invalid - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171213.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpProtocolTests~2FGetAsync_ExpectedStatusCodeAndReason_Success(statusLine:%20%5C%22HTTP~2F1.1%20201%20Created%5C%22,%20expectedStatusCode:%20201,%20expectedReason:%20%5C%22Created%5C%22))  12/13 | 20171213.06 | Win8.1 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171213.06/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpProtocolTests~2FGetAsync_ExpectedStatusCodeAndReason_Success\(statusLine:%20%5C%22HTTP~2F1.1%20200%20Sure%20why%20not%3F%5C%22,%20expectedStatusCode:%20200,%20expectedReason:%20%5C%22Sure%20why%20...)  12/13 | 20171213.06 | Win7 | An existing connection was forcibly closed by the remote host - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171213.06/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpProtocolTests_Dribble~2FGetAsync_ExpectedStatusCodeAndReason_Success\(statusLine:%20%5C%22HTTP~2F1.1%20202%20Accepted%5C%22,%20expectedStatusCode:%20202,%20expectedReason:%20%5C%22Accept...)  12/17 | 20171217.02 | Win7 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171217.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpProtocolTests_Dribble~2FGetAsync_ExpectedStatusCodeAndReason_Success\(statusLine:%20%5C%22HTTP~2F1.1%20600%20still%20valid%5C%22,%20expectedStatusCode:%20600,%20expectedReason:%20%5C%22sti...)  12/29 | 20171229.01 | Win8.1 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171229.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpProtocolTests~2FGetAsync_ExpectedStatusCodeAndReason_Success(statusLine:%20%5C%22HTTP~2F1.1%20600%20still%20valid%5C%22,%20expectedStatusCode:%20600,%20expectedReason:%20%5C%22still%20valid%5C%22))  12/31 | 20171231.02 | Win8.1 | The handle is invalid - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171231.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpProtocolTests_Dribble~2FGetAsync_ExpectedStatusCodeAndReason_Success(statusLine:%20%5C%22HTTP~2F1.1%20202%20Accepted%5C%22,%20expectedStatusCode:%20202,%20expectedReason:%20%5C%22Accepted%5C%22))  1/10 | 20180110.03 | Win7 | The handle is invalid - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180110.03/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpProtocolTests_Dribble~2FGetAsync_ExpectedStatusCodeAndReason_Success(statusLine:%20%5C%22HTTP~2F1.1%20201%20Created%5C%22,%20expectedStatusCode:%20201,%20expectedReason:%20%5C%22Created%5C%22))  1/11 | 20180111.02 | Win7 | The handle is invalid - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180111.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpProtocolTests_Dribble~2FGetAsync_ExpectedStatusCodeAndReason_Success(statusLine:%20%5C%22HTTP~2F1.1%20500%20Internal%20Server%20Error%5C%22,%20expectedStatusCode:%20500,%20expectedReason:%20%5C%22Inter))  1/13 | 20180113.03 | Win8.1 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180113.03/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpProtocolTests~2FGetAsync_ExpectedStatusCodeAndReason_Success(statusLine:%20%5C%22HTTP~2F1.1%20200%20Sure%20why%20not%3F%5C%22,%20expectedStatusCode:%20200,%20expectedReason:%20%5C%22Sure%20why%20not%3F))  1/15 | 20180115.01 | Win8.1 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180115.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpProtocolTests~2FGetAsync_ExpectedStatusCodeAndReason_Success(statusLine:%20%5C%22HTTP~2F1.1%20500%20Internal%20Server%20Error%5C%22,%20expectedStatusCode:%20500,%20expectedReason:%20%5C%22Inter))  1/16 | 20180116.01 | Win7 | The operation has been canceled - only in [catastrophic failure logs](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180116.01/workItem/System.Net.Http.Functional.Tests/wilogs)  1/20 | 20180120.01 | Win7 | An existing connection was forcibly closed by the remote host - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180120.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpProtocolTests_Dribble~2FGetAsync_ExpectedStatusCodeAndReason_Success(statusLine:%20%5C%22HTTP~2F1.1%20500%20Internal%20Server%20Error%5C%22,%20expectedStatusCode:%20500,%20expectedReason:%20%5C%22Inter))  1/23 | 20180123.01 | Win7 | The handle is invalid - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180123.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpProtocolTests~2FGetAsync_ExpectedStatusCodeAndReason_Success(statusLine:%20%5C%22HTTP~2F1.1%20200%20OK%C2%80%5C%22,%20expectedStatusCode:%20200,%20expectedReason:%20%5C%22OK%3F%5C%22))  1/23 | 20180123.01 | Win8.1 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180123.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpProtocolTests~2FGetAsync_ExpectedStatusCodeAndReason_Success(statusLine:%20%5C%22HTTP~2F1.1%20600%20still%20valid%5C%22,%20expectedStatusCode:%20600,%20expectedReason:%20%5C%22still%20valid%5C%22))  1/23 | 20180123.04 | Win8.1 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180123.04/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpProtocolTests~2FGetAsync_ExpectedStatusCodeAndReason_Success(statusLine:%20%5C%22HTTP~2F1.1%20200%20Sure%20why%20not%3F%5C%22,%20expectedStatusCode:%20200,%20expectedReason:%20%5C%22Sure%20why%20not%3F))  1/25 | 20180125.01 | Win7 | An existing connection was forcibly closed by the remote host - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180125.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpProtocolTests_Dribble~2FGetAsync_ExpectedStatusCodeAndReason_Success(statusLine:%20%5C%22HTTP~2F1.1%20201%20Created%5C%22,%20expectedStatusCode:%20201,%20expectedReason:%20%5C%22Created%5C%22))  2/1 | 20180201.05 | Win7 | The handle is invalid - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180201.05/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpProtocolTests~2FGetAsync_ExpectedStatusCodeAndReason_Success(statusLine:%20%5C%22HTTP~2F1.1%20200%20OK%C2%80%5C%22,%20expectedStatusCode:%20200,%20expectedReason:%20%5C%22OK%3F%5C%22))  2/1 | 20180201.05 | Win8.1 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180201.05/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpProtocolTests~2FGetAsync_ExpectedStatusCodeAndReason_Success(statusLine:%20%5C%22HTTP~2F1.1%20200%20O%20K%5C%22,%20expectedStatusCode:%20200,%20expectedReason:%20%5C%22O%20K%5C%22))  2/6 | 20180206.05 | Win7 | An existing connection was forcibly closed by the remote host - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180206.05/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpProtocolTests_Dribble~2FGetAsync_ExpectedStatusCodeAndReason_Success(statusLine:%20%5C%22HTTP~2F1.1%20201%20Created%5C%22,%20expectedStatusCode:%20201,%20expectedReason:%20%5C%22Created%5C%22))  2/8 | 20180208.01 | Win7 | 2x The handle is invalid - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180208.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpProtocolTests~2FGetAsync_ExpectedStatusCodeAndReason_Success(statusLine:%20%5C%22HTTP~2F1.1%20200%20O%20K%5C%22,%20expectedStatusCode:%20200,%20expectedReason:%20%5C%22O%20K%5C%22)) and [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180208.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpProtocolTests~2FGetAsync_ExpectedStatusCodeAndReason_Success(statusLine:%20%5C%22HTTP~2F1.1%20600%20still%20valid%5C%22,%20expectedStatusCode:%20600,%20expectedReason:%20%5C%22still%20valid%5C%22))  2/10 | 20180210.01 | Win7 | An existing connection was forcibly closed by the remote host - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180210.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpProtocolTests_Dribble~2FGetAsync_ExpectedStatusCodeAndReason_Success(statusLine:%20%5C%22HTTP~2F1.1%20200%20O%20K%5C%22,%20expectedStatusCode:%20200,%20expectedReason:%20%5C%22O%20K%5C%22))  2/10 | 20180210.01 | Win7 | The handle is invalid - only in [catastrophic failure logs](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180210.01/workItem/System.Net.Http.Functional.Tests/wilogs)  2/20 | 20180220.08 | Win7 | The handle is invalid  2/21 | 20180221.01 | Win7 | The handle is invalid  2/25 | 20180225.01 | Win7 | The handle is invalid - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180225.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpProtocolTests_Dribble~2FGetAsync_ExpectedStatusCodeAndReason_Success(statusLine:%20%5C%22HTTP~2F1.1%20200%20O%20K%5C%22,%20expectedStatusCode:%20200,%20expectedReason:%20%5C%22O%20K%5C%22))  2/28 | 20180228.03 | Win10 | The operation has been canceled  3/1 | 20180301.01 | Win7 | The handle is invalid  3/3 | 20180303.01 | Win10 | 2x The operation has been canceled  3/4 | 20180304.03 | Win10 | The operation has been canceled  3/6 | 20180306.02 | Win10 | The operation has been canceled  3/7 | 20180307.03 | Win7 | The handle is invalid  3/8 | 20180308.01 | Win7 | The handle is invalid  3/10 | 20180310.01 | Win10 | The operation has been canceled  3/10 | 20180310.02 | Win7 | The handle is invalid  3/14 | 20180314.01 | Win7 | The handle is invalid      Similar exceptions / errors as in #25896 and #25902 and #25912
25882	area-Infrastructure	Make init-tools.sh work against a Windows drive mounted on Linux	So far the only issue I've hit is that the 3 files we read in for literal values will end in \r\n, causing the environment variables to end with \r. This fixes that.
25883	area-System.Net	Match connect timeout values between curlhandler and winhttphandler.	refer discussion     https://github.com/dotnet/corefx/pull/25879#discussion_r156539561    
25884	area-System.IO	.NET does not have async file enumerators	This presents a problem when enumerating slow/remote or offline/asleep volumes.    Things to consider:    - Work being done around extensibility https://github.com/dotnet/designs/blob/master/accepted/file-enumeration.md  - Potential `IAsyncEnumerable<T>` https://github.com/dotnet/csharplang/blob/master/proposals/async-streams.md  - Lack of low-level OS support (at least on Windows, not sure about Unix)    Related issue: #25863     @danmosemsft, @pjanotti 
25885	area-System.Runtime	Nullable TryParse	Please add `TryParse` API that return nullable value for each static `TryParse` function    ```C#  public struct Int32  {       // original       public static bool TryParse(string s, out Int32 result);         // proposed        public static Int32? TryParse(string value) => TryParse(value,out var result) ? result : (decimal?)null;  }  ```    This should be added to all number struct at least
25887	area-System.Threading	Multiple thread pools per appdomain and correspond ThreadpoolTaskScheduler	Current thread pool implementation is based on old windows thread pool api(https://msdn.microsoft.com/en-us/library/windows/desktop/ms686766(v=vs.85).aspx).   Windows support multiple thread pools per process since Vista.    Multiple thread pools per appdomain is useful for advanced scenarios, especially in the TPL scenario.   For example, some tasks may take more priority than others. These tasks should be executed as soon as they are queued. Complicated customized TaskScheduler could achieve this goal. But multiple thread pools per appdomain and correspond ThreadpoolTaskScheduler may achieve this goal by few lines, with elegant and robust code.
25888	area-System.Net	Linux: Fix NetworkAddressChange NullReferenceException on AddressChange when no Availability subscribers	Fixes https://github.com/dotnet/corefx/issues/25081    This also fixes race conditions between availability subscriptions and timer events.    CC @stephentoub @davidsh @Const-me
25889	area-Infrastructure	Enable autoupdate of dotnet host package version	Closes #25839
25890	area-System.Xml	When .NET Standard is updated remove pragmas around XslTransform	This is related to #25874.     For the pragmas around `XslTransform` to be removed we need to update the .NET Standard in CoreFX,  to one in which the obsolete attribute was removed. This is issue is to track that when the standard is updated the pragmas get removed.    Alternatively we could change xml tests to target netcoreapp instead but in general I prefer to keep the tests with the more general target.
25891	area-System.Data	String-based way to specify datatypes on ADO.NET parameters	"The ADO.NET API includes two enums which specify database types: DbType for standard types and the provider-specific *DbType (SqlDbType, NpgsqlDbType, and so on). DbType allows for database-independent programming, providing a close list of ""universal"" data types that are expected to be supported in all databases (although some DbType values are clearly SqlServer-specific or at least inspired).    On the other hand, using an enum to specify a provider-specific data type seems like a poor API choice, and is not a good fit for databases with open type systems such as PostgreSQL. Here are some issues:    * PostgreSQL allows new data types to be defined by extensions, and Npgsql 3.3 will allow external plugins to support those types. However, being an enum, NpgsqlDbType is totally un-extensible - it's a closed list that exists within Npgsql. A string name would allow users to specify PostgreSQL types that are totally unknown to Npgsql, but are supported by plugins.  * PostgreSQL supports enum and composite types, where the user can define arbitrary data types. `NpgsqlDbType.Enum` and `NpgsqlDbType.Composite` are not sufficient, and must be combined with another value which specifies *which* enum or composite is meant.    A simple way to fix the above is to add a string property to DbParameter, called `DataType` or `ColumnType`. This would allow the user to directly specify the name of the database type needed, without passing through an enum, similar to [how EF Core allows data types to be configured via an attribute or the fluent API](https://docs.microsoft.com/en-us/ef/core/modeling/relational/data-types).    It seems to make sense to add this property to DbParameter, without causing any issues to providers which don't support it. First, it makes sense for this to be on DbParameter rather than on individual providers' parameter classes - it would allow cross-database code to set the type name (even if the type names themselves are provider-specific). Providers which don't (yet) support this property would simply ignore it with no negative consequences, while providers that do can use it."
25892	area-System.Net	Use consistent test reporting api to record remote server failure in networking tests.	One such method was proposed in this PR: #25879     Several opinions on the thread was voiced:    1. What's the motivation of doing this, does this add value or only adds more clutter - @davidsh  @wfurt   2. Use xunit apis for the same - proposed by @wfurt 
25893	area-System.Memory	Investigate optimizations for vectorized Span<byte> {Last}IndexOf{Any} APIs	From https://github.com/dotnet/corefx/pull/25848#discussion_r156750679    Consider avoiding the memory alignment checks and only loop byte at a time until we get Vector.Count aligned.    The APIs to consider optimizing (for typeof(T) == byte):  ```C#  public static int IndexOf<T>(this Span<T> span, T value) where T : IEquatable<T> { throw null; }  public static int IndexOf<T>(this Span<T> span, ReadOnlySpan<T> value) where T : IEquatable<T> { throw null; }    public static int IndexOfAny(this Span<byte> span, byte value0, byte value1) { throw null; }  public static int IndexOfAny(this Span<byte> span, byte value0, byte value1, byte value2) { throw null; }  public static int IndexOfAny(this Span<byte> span, ReadOnlySpan<byte> values) { throw null; }    public static int LastIndexOf<T>(this Span<T> span, T value) where T : IEquatable<T> { throw null; }  public static int LastIndexOf<T>(this Span<T> span, ReadOnlySpan<T> value) where T : IEquatable<T> { throw null; }    public static int LastIndexOfAny<T>(this Span<T> span, T value0, T value1) where T : IEquatable<T> { throw null; }  public static int LastIndexOfAny<T>(this Span<T> span, T value0, T value1, T value2) where T : IEquatable<T> { throw null; }  public static int LastIndexOfAny<T>(this Span<T> span, ReadOnlySpan<T> values) where T : IEquatable<T> { throw null; }  ```    + the equivalent ReadOnlySpan extension methods    See current implementation here:  https://github.com/dotnet/corefx/blob/c20881a8ea94a40e1f1f98f79ffdef9f6fc87c44/src/System.Memory/src/System/SpanHelpers.byte.cs#L91    cc @KrzysztofCwalina, @GrabYourPitchforks, @benaadams 
25894	area-System.Net	Test failure: System.Net.Sockets.Tests.SendReceiveMemoryNativeTask / SendRecvPollSync_TcpListener_Socket	## Type of failures    ### Timeout 30000    Failure [20171211.01](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171211.01/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.SendReceiveMemoryNativeTask~2FSendRecvPollSync_TcpListener_Socket(listenAt:%20::1,%20pollBeforeOperation:%20False)):  ```  System.TimeoutException : WhenAllOrAnyFailed timed out after 30000     at System.Threading.Tasks.TaskTimeoutExtensions.<WhenAllOrAnyFailed>d__2.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Sockets.Tests.SendReceive`1.<SendRecvPollSync_TcpListener_Socket>d__7.MoveNext() in E:\A\_work\1973\s\corefx\src\System.Net.Sockets\tests\FunctionalTests\SendReceive.cs:line 629  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ```    ### Read poll after completion should have succeeded    Failure [20171202.01](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171202.01/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.SendReceiveMemoryNativeTask~2FSendRecvPollSync_TcpListener_Socket(listenAt:%20127.0.0.1,%20pollBeforeOperation:%20False)):  ```  Read poll after completion should have succeeded  Expected: True  Actual:   False     at System.Net.Sockets.Tests.SendReceive`1.<>c__DisplayClass7_1.<<SendRecvPollSync_TcpListener_Socket>b__0>d.MoveNext() in E:\A\_work\704\s\corefx\src\System.Net.Sockets\tests\FunctionalTests\SendReceive.cs:line 582  --- End of stack trace from previous location where exception was thrown ---     at System.Threading.Tasks.TaskTimeoutExtensions.<WhenAllOrAnyFailed>d__2.MoveNext() in E:\A\_work\704\s\corefx\src\Common\tests\System\Threading\Tasks\TaskTimeoutExtensions.cs:line 49  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Sockets.Tests.SendReceive`1.<SendRecvPollSync_TcpListener_Socket>d__7.MoveNext() in E:\A\_work\704\s\corefx\src\System.Net.Sockets\tests\FunctionalTests\SendReceive.cs:line 627  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ```    With earlier variant wrapped in `AggregateException` in failure [20171113.03](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171113.03/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.SendReceiveSync~2FSendRecvPollSync_TcpListener_Socket(listenAt:%20127.0.0.1,%20pollBeforeOperation:%20False)):  ```  System.AggregateException : One or more errors occurred. (Read poll after completion should have succeeded  Expected: True  Actual:   False)  ---- Read poll after completion should have succeeded  Expected: True  Actual:   False     at System.Threading.Tasks.Task.WaitAllCore(Task[] tasks, Int32 millisecondsTimeout, CancellationToken cancellationToken) in E:\A\_work\1531\s\src\mscorlib\src\System\Threading\Tasks\Task.cs:line 4651     at System.Net.Sockets.Tests.SendReceive`1.SendRecvPollSync_TcpListener_Socket(IPAddress listenAt, Boolean pollBeforeOperation) in E:\A\_work\1163\s\corefx\src\System.Net.Sockets\tests\FunctionalTests\SendReceive.cs:line 625  ----- Inner Stack Trace -----     at System.Net.Sockets.Tests.SendReceive`1.<>c__DisplayClass7_1.<<SendRecvPollSync_TcpListener_Socket>b__0>d.MoveNext() in E:\A\_work\1163\s\corefx\src\System.Net.Sockets\tests\FunctionalTests\SendReceive.cs:line 582  ```    ### SocketException: An existing connection was forcibly closed by the remote host    Older variant of the test failure in May-July (potentially different bug).  Failure [20170706.02](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20170706.02/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.SendReceiveSync~2FSendRecvPollSync_TcpListener_Socket(listenAt:%20::1,%20pollBeforeOperation:%20True)):  ```  System.AggregateException : One or more errors occurred. (An existing connection was forcibly closed by the remote host)  ---- System.Net.Sockets.SocketException : An existing connection was forcibly closed by the remote host     at System.ThrowHelper.ThrowAggregateException(List`1 exceptions)     at System.Threading.Tasks.Task.WaitAll(Task[] tasks, Int32 millisecondsTimeout, CancellationToken cancellationToken)     at System.Net.Sockets.Tests.SendReceive.SendRecvPollSync_TcpListener_Socket(IPAddress listenAt, Boolean pollBeforeOperation)  ----- Inner Stack Trace -----     at System.Net.Sockets.Tests.SendReceive.<>c__DisplayClass25_1.<<SendRecvPollSync_TcpListener_Socket>b__0>d.MoveNext()  ```    ## History of failures    Day | Build | OS | Error message  -- | -- | -- | --  5/1 | 20170501.01 | Win7 | SocketException: An existing connection was forcibly closed by the remote host  5/2 | 20170502.02 | Win7 | Aggregate: Read poll after completion should have succeeded  5/13 | 20170513.01 | Win8.1 | SocketException: An existing connection was forcibly closed by the remote host  5/30 | 20170530.06 | Win7 | SocketException: An existing connection was forcibly closed by the remote host  6/13 | 20170613.02 | Mac | Wait timed out - changed to TimeoutException in https://github.com/dotnet/corefx/commit/779171fea3d9f0b25d4058e281ca05b2b6eec323#diff-5d77ee23eb2ea596e218f9c1ef09d793 on 7/21  6/21 | 20170621.02 | Win8.1 | SocketException: An existing connection was forcibly closed by the remote host  7/6 | 20170706.02 | Win10 | SocketException: An existing connection was forcibly closed by the remote host  7/14 | 20170714.01 | Win7 | Aggregate: Read poll after completion should have succeeded  8/1 | 20170801.03 | Win10 | Aggregate: Read poll after completion should have succeeded  8/6 | 20170806.01 | Win10 | Aggregate: Read poll after completion should have succeeded  8/10 | 20170810.02 | Win10 | Aggregate: Read poll after completion should have succeeded  9/14 | 20170914.01 | Win7 | Aggregate: Read poll after completion should have succeeded  9/26 | 20170926.05 | Win8.1 | Aggregate: Read poll after completion should have succeeded  11/7 | 20171107.01 | Win8.1 | Aggregate: Read poll after completion should have succeeded  11/10 | 20171110.05 | Win7 | Aggregate: Read poll after completion should have succeeded  11/13 | 20171113.03 | Win10 | Aggregate: Read poll after completion should have succeeded  11/25 | 20171125.02 | Win7 | Timeout 30000  11/30 | 20171130.02 | Win10 | Timeout 30000  12/1 | 20171201.03 | Win7 | Timeout 30000  12/1 | 20171201.03 | Win7 | Timeout 30000  12/1 | 20171201.03 | Win7 | Timeout 30000  12/2 | 20171202.01 | Win8.1 | Read poll after completion should have succeeded  12/9 | 20171209.03 | Win10 | Timeout 30000  12/11 | 20171211.01 | Win7 | Timeout 30000  12/13 | 20171213.05 | Win7 | Timeout 30000 - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171213.05/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.SendReceiveMemoryArrayTask~2FSendRecvPollSync_TcpListener_Socket(listenAt:%20::1,%20pollBeforeOperation:%20True))  12/28 | 20171228.01 | Win8.1 | Timeout 30000 - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171228.01/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.SendReceiveMemoryArrayTask~2FSendRecvPollSync_TcpListener_Socket(listenAt:%20127.0.0.1,%20pollBeforeOperation:%20True))  1/4 | 20180104.02 | Win10 | Timeout 30000 - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180104.02/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.SendReceiveTask~2FSendRecvPollSync_TcpListener_Socket(listenAt:%20::1,%20pollBeforeOperation:%20False))  1/13 | 20180113.01 | Win7 | Timeout 30000 - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180113.01/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.SendReceiveMemoryArrayTask~2FSendRecvPollSync_TcpListener_Socket(listenAt:%20::1,%20pollBeforeOperation:%20False))  3/13 | 20180313.03 | Win8.1 | Timeout 30000  3/14 | 20180314.02 | Win7 | Timeout 30000  3/15 | 20180315.01 | Win7 | Timeout 30000  3/17 | 20180317.01 | Win10 | Read poll after completion should have succeeded  3/22 | 20180322.01 | Win8.1 | 3x Timeout 30000  3/22 | 20180322.06 | Win7 | Timeout 30000  3/29 | 20180329.01 | Win10 | 2x Timeout 30000  3/31 | 20180331.03 | Win7 | 2x Timeout 30000    Timeout similar to #25979. Sometimes correlated failures (12/28, 12/13, 1/4).
25895	area-System.Memory	Make Span IndexOfAny a generic method with special case for byte	Similar to LastIndexOfAny (added here - https://github.com/dotnet/corefx/pull/25848), change the IndexOfAny APIs to be generic. The premise is that there should be little performance degradation for the byte case when we make this change. This needs to be confirmed by comparing performance results before/after.    **Change:**  ```C#  public static int IndexOfAny(this Span<byte> span, byte value0, byte value1) { throw null; }  public static int IndexOfAny(this Span<byte> span, byte value0, byte value1, byte value2) { throw null; }  public static int IndexOfAny(this Span<byte> span, ReadOnlySpan<byte> values) { throw null; }    public static int IndexOfAny(this ReadOnlySpan<byte> span, byte value0, byte value1) { throw null; }  public static int IndexOfAny(this ReadOnlySpan<byte> span, byte value0, byte value1, byte value2) { throw null; }  public static int IndexOfAny(this ReadOnlySpan<byte> span, ReadOnlySpan<byte> values) { throw null; }  ```    To:  ```C#  public static int IndexOfAny<T>(this Span<T> span, T value0, T value1) where T : IEquatable<T> { throw null; }  public static int IndexOfAny<T>(this Span<T> span, T value0, T value1, T value2) where T : IEquatable<T> { throw null; }  public static int IndexOfAny<T>(this Span<T> span, ReadOnlySpan<T> values) where T : IEquatable<T> { throw null; }    public static int IndexOfAny<T>(this ReadOnlySpan<T> span, T value0, T value1) where T : IEquatable<T> { throw null; }  public static int IndexOfAny<T>(this ReadOnlySpan<T> span, T value0, T value1, T value2) where T : IEquatable<T> { throw null; }  public static int IndexOfAny<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> values) where T : IEquatable<T> { throw null; }  ```    Example implementation change:  ```C#  public static int IndexOfAny<T>(this Span<T> span, T value0, T value1)      where T : IEquatable<T>  {      if (typeof(T) == typeof(byte))          return SpanHelpers.IndexOfAny(              ref Unsafe.As<T, byte>(ref span.DangerousGetPinnableReference()),              Unsafe.As<T, byte>(ref value0),              Unsafe.As<T, byte>(ref value1),              span.Length);      return SpanHelpers.IndexOfAny(ref span.DangerousGetPinnableReference(), value0, value1, span.Length);  }  ```    Then implement the following to SpanHelpers.T.cs  ```C#  public static unsafe int IndexOfAny<T>(ref T searchSpace, T value0, T value1, int length)              where T : IEquatable<T>  ```    Should be relatively easy. cc @karelz     cc @KrzysztofCwalina, @GrabYourPitchforks 
25896	area-System.Net	Test failure: System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test / GetAsync_MaxLimited_ConcurrentCallsStillSucceed	## Type of failures    ### The operation has been canceled    Failure [20171208.01](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171208.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test~2FGetAsync_MaxLimited_ConcurrentCallsStillSucceed(maxConnections:%203,%20numRequests:%202,%20secure:%20True)):  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The operation has been canceled     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in E:\A\_work\625\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test.<GetAsync_MaxLimited_ConcurrentCallsStillSucceed>d__3.MoveNext() in E:\A\_work\625\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.MaxConnectionsPerServer.cs:line 74  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Threading.Tasks.RendezvousAwaitable`1.GetResult() in E:\A\_work\625\s\corefx\src\Common\src\System\Threading\Tasks\RendezvousAwaitable.cs:line 62     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() in E:\A\_work\625\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 856  ```    Variant from Linux - failure [20171003.01](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171003.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.ManagedHandler_HttpClientHandler_MaxConnectionsPerServer_Test~2FGetAsync_MaxLimited_ConcurrentCallsStillSucceed(maxConnections:%201,%20numRequests:%205,%20secure:%20False)):  ```  System.OperationCanceledException : The operation was canceled.     at System.Net.Http.HttpClient.HandleFinishSendAsyncError(Exception e, CancellationTokenSource cts) in /root/corefx-1032002/src/System.Net.Http/src/System/Net/Http/HttpClient.cs:line 506     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in /root/corefx-1032002/src/System.Net.Http/src/System/Net/Http/HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test.<GetAsync_MaxLimited_ConcurrentCallsStillSucceed>d__3.MoveNext() in /root/corefx-1032002/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.MaxConnectionsPerServer.cs:line 74  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  ```    ### The handle is in the wrong state for the requested operation    Failure [20171128.05](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171128.05/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test~2FGetAsync_MaxLimited_ConcurrentCallsStillSucceed(maxConnections:%203,%20numRequests:%202,%20secure:%20False)):  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The handle is in the wrong state for the requested operation     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in E:\A\_work\1790\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test.<GetAsync_MaxLimited_ConcurrentCallsStillSucceed>d__3.MoveNext() in E:\A\_work\1790\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.MaxConnectionsPerServer.cs:line 74  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Threading.Tasks.RendezvousAwaitable`1.GetResult() in E:\A\_work\1790\s\corefx\src\Common\src\System\Threading\Tasks\RendezvousAwaitable.cs:line 62     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() in E:\A\_work\1790\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 856  ```    ### CurlException : SSL connect error    Failure [20171022.02](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171022.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test~2FGetAsync_MaxLimited_ConcurrentCallsStillSucceed(maxConnections:%201,%20numRequests:%205,%20secure:%20False)):  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.CurlException : SSL connect error     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in /root/coreclr/src/mscorlib/src/System/Runtime/ExceptionServices/ExceptionServicesCommon.cs:line 130     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) in /root/coreclr/src/mscorlib/src/System/Runtime/CompilerServices/TaskAwaiter.cs:line 152     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in /root/corefx-1079211/src/System.Net.Http/src/System/Net/Http/HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in /root/coreclr/src/mscorlib/src/System/Runtime/ExceptionServices/ExceptionServicesCommon.cs:line 130     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) in /root/coreclr/src/mscorlib/src/System/Runtime/CompilerServices/TaskAwaiter.cs:line 152     at System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test.<GetAsync_MaxLimited_ConcurrentCallsStillSucceed>d__3.MoveNext() in /root/corefx-1079211/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.MaxConnectionsPerServer.cs:line 74  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in /root/coreclr/src/mscorlib/src/System/Runtime/ExceptionServices/ExceptionServicesCommon.cs:line 130     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) in /root/coreclr/src/mscorlib/src/System/Runtime/CompilerServices/TaskAwaiter.cs:line 152  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in /root/coreclr/src/mscorlib/src/System/Runtime/ExceptionServices/ExceptionServicesCommon.cs:line 130     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) in /root/coreclr/src/mscorlib/src/System/Runtime/CompilerServices/TaskAwaiter.cs:line 152  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in /root/coreclr/src/mscorlib/src/System/Runtime/ExceptionServices/ExceptionServicesCommon.cs:line 130     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) in /root/coreclr/src/mscorlib/src/System/Runtime/CompilerServices/TaskAwaiter.cs:line 152  ----- Inner Stack Trace -----     at System.Net.Http.CurlHandler.ThrowIfCURLEError(CURLcode error) in /root/corefx-1079211/src/System.Net.Http/src/System/Net/Http/Unix/CurlHandler.cs:line 652     at System.Net.Http.CurlHandler.MultiAgent.FinishRequest(StrongToWeakReference`1 easyWrapper, CURLcode messageResult) in /root/corefx-1079211/src/System.Net.Http/src/System/Net/Http/Unix/CurlHandler.MultiAgent.cs:line 883  ```    ### A security error occurred    Failure [20171213.09](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171213.09/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test~2FGetAsync_MaxLimited_ConcurrentCallsStillSucceed(maxConnections:%203,%20numRequests:%202,%20secure:%20False)):  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : A security error occurred     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in E:\A\_work\1973\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test.<GetAsync_MaxLimited_ConcurrentCallsStillSucceed>d__3.MoveNext() in E:\A\_work\1973\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.MaxConnectionsPerServer.cs:line 74  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Threading.Tasks.RendezvousAwaitable`1.GetResult() in E:\A\_work\1973\s\corefx\src\Common\src\System\Threading\Tasks\RendezvousAwaitable.cs:line 62     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() in E:\A\_work\1973\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 856  ```    ### The handle is invalid    Failure [20171218.02](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171218.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test~2FGetAsync_MaxLimited_ConcurrentCallsStillSucceed(maxConnections:%203,%20numRequests:%202,%20secure:%20True)):  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The handle is invalid     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in E:\A\_work\798\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test.<GetAsync_MaxLimited_ConcurrentCallsStillSucceed>d__3.MoveNext() in E:\A\_work\798\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.MaxConnectionsPerServer.cs:line 74  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Net.Http.WinHttpException.ThrowExceptionUsingLastError() in E:\A\_work\798\s\corefx\src\Common\src\System\Net\Http\WinHttpException.cs:line 44     at System.Net.Http.WinHttpHandler.SetRequestHandleRedirectionOptions(SafeWinHttpHandle requestHandle) in E:\A\_work\798\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 1073     at System.Net.Http.WinHttpHandler.SetRequestHandleOptions(WinHttpRequestState state) in E:\A\_work\798\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 956     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() in E:\A\_work\798\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 831  ```    ## History of failures    Day | Build | OS | Error message  -- | -- | -- | --  9/3 | 20170903.01 | RedHat | The operation has been canceled  9/25 | 20170925.03 | Win7 | The handle is in the wrong state for the requested operation  10/3 | 20171003.01 | Ubuntu | The operation has been canceled  10/5 | 20171005.01 | Win7 | The operation has been canceled  10/9 | 20171009.01 | Win7 | The operation has been canceled  10/11 | 20171011.02 | Win7 | The operation has been canceled  10/16 | 20171016.02 | Win7 | The operation has been canceled  10/18 | 20171018.01 | Fedora | CurlException : SSL connect error  10/18 | 20171018.01 | Win7 | The handle is in the wrong state for the requested operation  10/19 | 20171019.02 | Win7 | The operation has been canceled  10/22 | 20171022.02 | RedHat | CurlException : SSL connect error  11/3 | 20171103.07 | Win7 | The handle is in the wrong state for the requested operation  11/6 | 20171106.02 | Win8.1 | The operation has been canceled  11/7 | 20171107.02 | Win7 | The handle is in the wrong state for the requested operation  11/7 | 20171107.04 | Win8.1 | The operation has been canceled  11/11 | 20171111.01 | Win8.1 | The operation has been canceled  11/28 | 20171128.05 | Win7 | The handle is in the wrong state for the requested operation  11/28 | 20171128.02 | Win7 | The operation has been canceled  12/8 | 20171208.01 | Win7 | The operation has been canceled  12/13 | 20171213.06 | Win8.1 | The operation has been canceled  12/13 | 20171213.09 | Win7 | A security error occurred  12/18 | 20171218.02 | Win7 | The handle is invalid - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171218.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test~2FGetAsync_MaxLimited_ConcurrentCallsStillSucceed(maxConnections:%203,%20numRequests:%202,%20secure:%20True))  12/19 | 20171219.01 | Win7 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171219.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test~2FGetAsync_MaxLimited_ConcurrentCallsStillSucceed(maxConnections:%203,%20numRequests:%205,%20secure:%20False))  12/23 | 20171223.01 | Win8.1 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171223.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test~2FGetAsync_MaxLimited_ConcurrentCallsStillSucceed(maxConnections:%203,%20numRequests:%205,%20secure:%20False))  12/23 | 20171223.01 | Win7 | The handle is invalid - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171223.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test~2FGetAsync_MaxLimited_ConcurrentCallsStillSucceed(maxConnections:%203,%20numRequests:%202,%20secure:%20True))  12/24 | 20171224.02 | Win7 | The handle is invalid - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171224.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test~2FGetAsync_MaxLimited_ConcurrentCallsStillSucceed(maxConnections:%203,%20numRequests:%202,%20secure:%20True))  12/25 | 20171225.01 | Win8.1 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171225.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test~2FGetAsync_MaxLimited_ConcurrentCallsStillSucceed(maxConnections:%203,%20numRequests:%205,%20secure:%20False))  12/29 | 20171229.02 | RedHat73 | CurlException : SSL connect error - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171229.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test~2FGetAsync_MaxLimited_ConcurrentCallsStillSucceed(maxConnections:%201,%20numRequests:%205,%20secure:%20False))  1/6 | 20180106.01 | Win7 | The handle is in the wrong state for the requested operation - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180106.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test~2FGetAsync_MaxLimited_ConcurrentCallsStillSucceed(maxConnections:%203,%20numRequests:%205,%20secure:%20False))  1/11 | 20180111.02 | Win7 | The handle is in the wrong state for the requested operation - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180111.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test~2FGetAsync_MaxLimited_ConcurrentCallsStillSucceed(maxConnections:%203,%20numRequests:%205,%20secure:%20False))  1/11 | 20180111.03 | Win8.1 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180111.03/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test~2FGetAsync_MaxLimited_ConcurrentCallsStillSucceed(maxConnections:%203,%20numRequests:%202,%20secure:%20True))  1/23 | 20180123.01 | Win7 | The handle is invalid - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180123.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test~2FGetAsync_MaxLimited_ConcurrentCallsStillSucceed(maxConnections:%203,%20numRequests:%205,%20secure:%20False))  1/23 | 20180123.04 | Win7 | The handle is in the wrong state for the requested operation - only in [catastrophic failure logs](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180123.04/workItem/System.Net.Http.Functional.Tests/wilogs)  1/29 | 20180129.05 | Win7 | The handle is invalid - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180129.05/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test~2FGetAsync_MaxLimited_ConcurrentCallsStillSucceed(maxConnections:%203,%20numRequests:%202,%20secure:%20True))  1/31 | 20180131.05 | Win7 | The handle is in the wrong state for the requested operation - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180131.05/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test~2FGetAsync_MaxLimited_ConcurrentCallsStillSucceed(maxConnections:%203,%20numRequests:%202,%20secure:%20False))  2/1 | 20180201.01 | Win7 | The handle is invalid - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180201.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test~2FGetAsync_MaxLimited_ConcurrentCallsStillSucceed(maxConnections:%203,%20numRequests:%205,%20secure:%20False))  2/1 | 20180201.05 | Win7 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180201.05/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test~2FGetAsync_MaxLimited_ConcurrentCallsStillSucceed(maxConnections:%203,%20numRequests:%202,%20secure:%20False))  2/6 | 20180206.05 | Win7 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180206.05/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test~2FGetAsync_MaxLimited_ConcurrentCallsStillSucceed(maxConnections:%203,%20numRequests:%202,%20secure:%20False))  2/10 | 20180210.01 | Win7 | The handle is invalid - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180210.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test~2FGetAsync_MaxLimited_ConcurrentCallsStillSucceed(maxConnections:%203,%20numRequests:%205,%20secure:%20False))  2/26 | 20180226.02 | Win8.1 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180226.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_MaxConnectionsPerServer_Test~2FGetAsync_MaxLimited_ConcurrentCallsStillSucceed(maxConnections:%203,%20numRequests:%202,%20secure:%20True))  3/5 | 20180305.05 | Win7 | The operation has been canceled  3/7 | 20180307.03 | Win7 | The handle is invalid  3/14 | 20180314.05 | Win7 | The operation has been canceled  3/14 | 20180314.05 | Win10 | The operation has been canceled  3/14 | 20180314.05 | Win10 | The operation has been canceled  3/17 | 20180317.03 | Win7 | The handle is invalid  3/18 | 20180318.03 | Win10 | The operation has been canceled  3/19 | 20180319.06 | Win10 | The operation has been canceled  3/22 | 20180322.01 | Fedora26 | CurlException : SSL connect error      Similar exceptions / errors as in #25896 and #25902 and #25912 
25897	area-System.Xml	Remove obsolete attribute from XslTransform	Fixes #25874
25898	area-System.Threading	CS0433 compiler error: ValueTask<TResult> is defined in both System.Runtime and System.Threading.Tasks.Extensions	**Repro steps:**    1. git clone https://github.com/aspnet/Common.git  2. Checkout this commit: https://github.com/aspnet/Common/commit/2c4a50456614ea3b0a21aef00adf13581299cafd  3. build.cmd    **Result**:  ```  C:\dev\aspnet\Universe\modules\Common\test\Microsoft.Extensions.Internal.Test\ObjectMethodExecutorTest.cs(500,20):   error CS0433: The type 'ValueTask<TResult>' exists in both 'System.Threading.Tasks.Extensions, Version=4.1.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' and 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' [C:\dev\aspnet\Universe\modules\Common\test\Microsoft.Extensions.Internal.Test\Microsoft.Extensions.Internal.Test.csproj]  C:\dev\aspnet\Universe\modules\Common\test\Microsoft.Extensions.Internal.Test\ObjectMethodExecutorTest.cs(505,20):   error CS0433: The type 'ValueTask<TResult>' exists in both 'System.Threading.Tasks.Extensions, Version=4.1.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' and 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' [C:\dev\aspnet\Universe\modules\Common\test\Microsoft.Extensions.Internal.Test\Microsoft.Extensions.Internal.Test.csproj]  ```    **Details**:    Using   System.Threading.Tasks.Extensions/4.5.0-preview1-26008-09  Microsoft.NETCore.App/2.1.0-preview1-26009-01    **Log**  [msbuild.binlog.zip](https://github.com/dotnet/corefx/files/1557047/msbuild.binlog.zip)      cc @dagood @weshaggard 
25899	area-System.IO	Expose ZipArchiveEntry.Crc32 and fix crc bug	- Exposes ZipArchiveEntry.Crc32 field  - Fixes a bug in our CRC calculation  - Adds tests for the crc32 field    Progression of https://github.com/dotnet/corefx/pull/25204 by @reaction1989    resolves https://github.com/dotnet/corefx/issues/22292, https://github.com/dotnet/corefx/issues/25803    cc: @stephentoub @ViktorHofer @livarcocc   
25900	area-System.Data	Check if full-text index exists before running WarningsBeforeRowsTest.	"WarningBeforeRowsTest uses some ""contains()"" queries for warning checking, but a full-text index is required for contains(). Since the Northwind sample DB doesn't have full-text indexed columns by default, I'm making this test optional."
25901	area-System.IO	Compression tests broken	"@ianhays, all or most of the compression tests have started failing:  https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171213.10/workItem/System.IO.Compression.Performance.Tests  example --   The test `System.IO.Compression.GzipStreamPerfTests/Decompress_Canterbury(innerIterations: 1, uncompressedFilePath: \""UncompressedTestFiles/TestDocument.doc\"", compressLevel: Fastest)` has failed.  System.IO.DirectoryNotFoundException : Could not find a part of the path '/Users/dotnet-bot/dotnetbuild/work/22a01f14-296f-4811-9db4-685fa4c585f9/Work/78a1bc7b-a47f-48b7-8b89-c9a38f2774fb/Unzip/GZTestData/TestDocument.doc.gz'.          Stack Trace:             at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter) in /Users/buildagent/agent/_work/304/s/src/mscorlib/shared/Interop/Unix/Interop.IOErrors.cs:line 23        at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode) in /Users/buildagent/agent/_work/304/s/src/mscorlib/shared/Microsoft/Win32/SafeHandles/SafeFileHandle.Unix.cs:line 78        at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options) in /Users/buildagent/agent/_work/304/s/src/mscorlib/shared/System/IO/FileStream.cs:line 229        at System.IO.File.InternalReadAllBytes(String path)        at System.IO.Compression.CompressionStreamPerfTestBase.Decompress_Canterbury(Int32 innerIterations, String uncompressedFilePath, CompressionLevel compressLevel) in /Users/buildagent/agent/_work/320/s/corefx/src/Common/tests/System/IO/Compression/CompressionStreamPerfTestBase.cs:line 71 Build : Master - 20171213.10 (Core Tests) Failing configurations: - OSX.1013.Amd64-x64   - Release - OSX.1012.Amd64-x64   - Release - fedora.25.amd64-x64   - Release - SLES.12.Amd64-x64   - Release - suse.422.amd64-x64   - Release - Ubuntu.1710.Amd64-x64   - Release - Ubuntu.1704.Amd64-x64   - Release - Ubuntu.1604.Amd64-x64   - Release - Ubuntu.1404.Amd64-x64   - Release - Debian.90.Amd64-x64   - Release - Debian.87.Amd64-x64   - Release"
25902	area-System.Net	Test failure: System.Net.Http.Functional.Tests.HttpClientHandlerTest / PostAsync_CallMethod_StreamContent	## Types of failures    ### The operation has been canceled    Failure [20171209.01](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171209.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandlerTest~2FPostAsync_CallMethod_StreamContent\(remoteServer:%20https:~2F~2Fcorefx-net.cloudapp.net~2FVerifyUpload.ashx,%20content:%20StreamContentWithSyncAsyncCo...):  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The operation has been canceled     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in E:\A\_work\772\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<PostAsync_CallMethod_StreamContent>d__80.MoveNext() in E:\A\_work\772\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.cs:line 1463  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Threading.Tasks.RendezvousAwaitable`1.GetResult() in E:\A\_work\772\s\corefx\src\Common\src\System\Threading\Tasks\RendezvousAwaitable.cs:line 62     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() in E:\A\_work\772\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 856  ```    ### The handle is in the wrong state for the requested operation    Failure [20171106.02](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171106.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandlerTest~2FPostAsync_CallMethod_StreamContent\(remoteServer:%20http:~2F~2Fcorefx-net.cloudapp.net~2FVerifyUpload.ashx,%20content:%20StreamContentWithSyncAsyncCop...):  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The handle is in the wrong state for the requested operation     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in E:\A\_work\1586\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<PostAsync_CallMethod_StreamContent>d__79.MoveNext() in E:\A\_work\1586\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.cs:line 1435  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Threading.Tasks.RendezvousAwaitable`1.GetResult() in E:\A\_work\1586\s\corefx\src\Common\src\System\Threading\Tasks\RendezvousAwaitable.cs:line 62     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() in E:\A\_work\1586\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 856  ```    ### The handle is invalid    Failure [20171025.08](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171025.08/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandlerTest~2FPostAsync_CallMethod_StreamContent\(remoteServer:%20http:~2F~2Fcorefx-net.cloudapp.net~2FVerifyUpload.ashx,%20content:%20StreamContentWithSyncAsyncCop...):  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The handle is invalid     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<PostAsync_CallMethod_StreamContent>d__74.MoveNext()  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Net.Http.WinHttpException.ThrowExceptionUsingLastError()     at System.Net.Http.WinHttpHandler.SetRequestHandleRedirectionOptions(SafeWinHttpHandle requestHandle)     at System.Net.Http.WinHttpHandler.SetRequestHandleOptions(WinHttpRequestState state)     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext()  ```    ### The operation timed out    Failure [20180226.01](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180226.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandlerTest~2FPostAsync_CallMethod_StreamContent(remoteServer:%20http:~2F~2Fcorefx-net.cloudapp.net~2FVerifyUpload.ashx,%20content:%20FormUrlEncodedContent%20%7B%20Hea))  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The operation timed out    at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in E:\A\_work\14\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 469  at System.Net.Http.Functional.Tests.HttpClientHandlerTest.PostAsync_CallMethod_StreamContent(Uri remoteServer, HttpContent content, Byte[] expectedData) in E:\A\_work\14\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.cs:line 2099  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----  at System.Threading.Tasks.RendezvousAwaitable`1.GetResult() in E:\A\_work\14\s\corefx\src\Common\src\System\Threading\Tasks\RendezvousAwaitable.cs:line 62  at System.Net.Http.WinHttpHandler.StartRequest(WinHttpRequestState state) in E:\A\_work\14\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 856  ```    ### A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond    Failure [20180226.01](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180226.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest~2FPostAsync_CallMethod_StreamContent(remoteServer:%20https:~2F~2Fcorefx-net.cloudapp.net~2FVerifyUpload.ashx,%20content:%20StreamContentWithSyncAsync))  ```  System.Net.Http.HttpRequestException : A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond  ---- System.Net.Sockets.SocketException : A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond    at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in E:\A\_work\14\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ConnectHelper.cs:line 98  at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in E:\A\_work\14\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 221  at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask) in E:\A\_work\14\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 350  at System.Net.Http.HttpConnectionPool.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in E:\A\_work\14\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnectionPool.cs:line 189  at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in E:\A\_work\14\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\RedirectHandler.cs:line 30  at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in E:\A\_work\14\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 469  at System.Net.Http.Functional.Tests.HttpClientHandlerTest.PostAsync_CallMethod_StreamContent(Uri remoteServer, HttpContent content, Byte[] expectedData) in E:\A\_work\14\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.cs:line 2099  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----  at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in E:\A\_work\14\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ConnectHelper.cs:line 78  ```    ## History of failures    Day | Build | OS | Error message  -- | -- | -- | --  5/19 | 20170519.01 | Win8.1 | The operation has been canceled  5/19 | 20170519.04 | Win7 | The handle is invalid  5/30 | 20170530.01 | Win10 | The operation has been canceled  6/1 | 20170601.03 | Win10 | The operation has been canceled  6/4 | 20170604.02 | Win7 | The operation has been canceled  6/14 | 20170614.01 | Win7 | The handle is invalid  10/9 | 20171009.03 | Win10 | The operation has been canceled  10/11 | 20171011.02 | Win7 | The handle is invalid  10/13 | 20171013.01 | Win10 | The operation has been canceled  10/17 | 20171017.02 | Win8.1 | The operation has been canceled  10/22 | 20171022.01 | Win8.1 | The operation has been canceled  10/25 | 20171025.08 | Win7 | The handle is invalid  11/5 | 20171105.01 | Win8.1 | The operation has been canceled  11/6 | 20171106.02 | Win7 | The handle is in the wrong state for the requested operation  11/13 | 20171112.01 | Win7 | The handle is in the wrong state for the requested operation  11/14 | 20171114.02 | Win7 | The operation has been canceled  11/16 | 20171116.54 | Win7 | The operation has been canceled  11/21 | 20171121.02 | Win7 | The operation has been canceled  11/27 | 20171127.02 | Win10 | The operation has been canceled  12/9 | 20171209.01 | Win10 | The operation has been canceled  12/18 | 20171218.01 | Win10 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171218.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandlerTest~2FPostAsync_CallMethod_StreamContent\(remoteServer:%20https:~2F~2Fcorefx-net.cloudapp.net~2FVerifyUpload.ashx,%20content:%20FormUrlEncodedContent%20%7B%20Head...)  12/31 | 20171231.01 | Win8.1 | The operation has been canceled - only in [full logs](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171231.01/workItem/System.Net.Http.Functional.Tests/wilogs)  1/11 | 20180111.01 | Win7 | The operation has been canceled - only in [full logs](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180111.01/workItem/System.Net.Http.Functional.Tests/wilogs)  1/19 | 20180119.02 | Win10 | The operation has been canceled - only in [full logs](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180119.02/workItem/System.Net.Http.Functional.Tests/wilogs)  2/26 | 20180226.01 | Win8.1 | A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180226.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest~2FPostAsync_CallMethod_StreamContent(remoteServer:%20https:~2F~2Fcorefx-net.cloudapp.net~2FVerifyUpload.ashx,%20content:%20StreamContentWithSyncAsync))  2/26 | 20180226.01 | Win8.1 | The operation timed out - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180226.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandlerTest~2FPostAsync_CallMethod_StreamContent(remoteServer:%20http:~2F~2Fcorefx-net.cloudapp.net~2FVerifyUpload.ashx,%20content:%20FormUrlEncodedContent%20%7B%20Hea))    Similar exceptions / errors as in #25896
25904	area-System.Net	Test failure: System.Net.Http.Functional.Tests.HttpClientHandlerTest / PostAsync_ReuseRequestContent_Success	## Type of failures    ### The operation was canceled    Failure [20171128.05](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171128.05/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandlerTest~2FPostAsync_ReuseRequestContent_Success(remoteServer:%20http:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx)):  ```  System.OperationCanceledException : The operation was canceled.     at System.Threading.Tasks.RendezvousAwaitable`1.GetResult() in E:\A\_work\1790\s\corefx\src\Common\src\System\Threading\Tasks\RendezvousAwaitable.cs:line 62     at System.Net.Http.WinHttpResponseStream.<CopyToAsyncCore>d__18.MoveNext() in E:\A\_work\1790\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpResponseStream.cs:line 127  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.NoWriteNoSeekStreamContent.<>c.<SerializeToStreamAsync>b__4_0(Task t, Object s) in E:\A\_work\1790\s\corefx\src\Common\src\System\Net\Http\NoWriteNoSeekStreamContent.cs:line 52     at System.Threading.Tasks.ContinuationTaskFromTask.InnerInvoke() in E:\A\_work\1380\s\src\mscorlib\src\System\Threading\Tasks\TaskContinuation.cs:line 65     at System.Threading.Tasks.Task.<>c.<.cctor>b__278_1(Object obj) in E:\A\_work\1380\s\src\mscorlib\src\System\Threading\Tasks\Task.cs:line 2480     at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state) in E:\A\_work\1380\s\src\mscorlib\shared\System\Threading\ExecutionContext.cs:line 151     at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) in E:\A\_work\1380\s\src\mscorlib\src\System\Threading\Tasks\Task.cs:line 2440  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.HttpContent.<LoadIntoBufferAsyncCore>d__49.MoveNext() in E:\A\_work\1790\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs:line 407  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in E:\A\_work\1790\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<PostAsync_ReuseRequestContent_Success>d__91.MoveNext() in E:\A\_work\1790\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.cs:line 1747  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ```    Similar error in failure [20171126.02](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171126.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandlerTest~2FPostAsync_ReuseRequestContent_Success(remoteServer:%20https:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx)):  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The operation has been canceled     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in E:\A\_work\686\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<PostAsync_ReuseRequestContent_Success>d__91.MoveNext() in E:\A\_work\686\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.cs:line 1747  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Threading.Tasks.RendezvousAwaitable`1.GetResult() in E:\A\_work\686\s\corefx\src\Common\src\System\Threading\Tasks\RendezvousAwaitable.cs:line 62     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() in E:\A\_work\686\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 858  ```    ### The handle is in the wrong state for the requested operation    Failure [20171115.02](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171115.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandlerTest~2FPostAsync_ReuseRequestContent_Success(remoteServer:%20https:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx)):  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The handle is in the wrong state for the requested operation     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in E:\A\_work\1790\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<PostAsync_ReuseRequestContent_Success>d__91.MoveNext() in E:\A\_work\1790\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.cs:line 1747  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Net.Http.WinHttpException.ThrowExceptionUsingLastError() in E:\A\_work\1790\s\corefx\src\Common\src\System\Net\Http\WinHttpException.cs:line 44     at System.Net.Http.WinHttpHandler.SetRequestHandleOptions(WinHttpRequestState state) in E:\A\_work\1790\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 962     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() in E:\A\_work\1790\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 833  ```    Similar error wrapped in `IOException` in failure [20171210.03](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171210.03/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandlerTest~2FPostAsync_ReuseRequestContent_Success(remoteServer:%20http:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx)):  ```  System.Net.Http.HttpRequestException : Error while copying content to a stream.  ---- System.IO.IOException : The write operation failed, see inner exception.  -------- System.Net.Http.WinHttpException : The handle is in the wrong state for the requested operation     at System.Net.Http.HttpContent.<CopyToAsyncCore>d__45.MoveNext() in E:\A\_work\1324\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs:line 340  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.WinHttpHandler.<InternalSendRequestBodyAsync>d__131.MoveNext() in E:\A\_work\1324\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 1356  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() in E:\A\_work\1324\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 860  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in E:\A\_work\1324\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<PostAsync_ReuseRequestContent_Success>d__91.MoveNext() in E:\A\_work\1324\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.cs:line 1747  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Net.Http.HttpContent.<CopyToAsyncCore>d__45.MoveNext() in E:\A\_work\1324\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs:line 336  ----- Inner Stack Trace -----  ```    ### IOException: The handle is invalid    Failure [20171202.01](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171202.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandlerTest~2FPostAsync_ReuseRequestContent_Success(remoteServer:%20http:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx)):  ```  System.Net.Http.HttpRequestException : Error while copying content to a stream.  ---- System.IO.IOException : The write operation failed, see inner exception.  -------- System.Net.Http.WinHttpException : The handle is invalid     at System.Net.Http.HttpContent.<CopyToAsyncCore>d__45.MoveNext() in E:\A\_work\704\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs:line 340  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.WinHttpHandler.<InternalSendRequestBodyAsync>d__131.MoveNext() in E:\A\_work\704\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 1359  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() in E:\A\_work\704\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 863  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in E:\A\_work\704\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<PostAsync_ReuseRequestContent_Success>d__91.MoveNext() in E:\A\_work\704\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.cs:line 1747  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Net.Http.HttpContent.<CopyToAsyncCore>d__45.MoveNext() in E:\A\_work\704\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs:line 336  ----- Inner Stack Trace -----  ```    ## History of failures    Day | Build | OS | Error message  -- | -- | -- | --  9/3 | 20170903.01 | RedHat | OperationCanceledException : The operation was canceled.  10/8 | 20171008.02 | Win7 | The handle is in the wrong state for the requested operation  10/23 | 20171023.02 | Win7 | OperationCanceledException : The operation was canceled.  11/7 | 20171107.02 | Win7 | The handle is in the wrong state for the requested operation  11/15 | 20171115.02 | Win7 | The handle is in the wrong state for the requested operation  11/26 | 20171126.02 | Win8.1 | WinHttpException: The operation has been canceled  11/28 | 20171128.05 | Win7 | OperationCanceledException: The operation was canceled.  12/2 | 20171202.01 | Win7 | IOException: The handle is invalid  12/10 | 20171210.03 | Win7 | IOException: The handle is in the wrong state for the requested operation  12/19 | 20171219.01 | Win7 | The handle is in the wrong state for the requested operation - only in [catastrophic failure logs](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171219.01/workItem/System.Net.Http.Functional.Tests/wilogs)  1/1 | 20180101.02 | Win8.1 | OperationCanceledException: The operation was canceled. - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180101.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandlerTest~2FPostAsync_ReuseRequestContent_Success(remoteServer:%20https:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx))  1/22 | 20180122.02 | Win7 | WinHttpException: The operation has been canceled - only in [catastrophic failure logs](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180122.02/workItem/System.Net.Http.Functional.Tests/wilogs)  1/23 | 20180123.04 | Win7 | WinHttpException: The handle is in the wrong state for the requested operation - only in [catastrophic failure logs](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180123.04/workItem/System.Net.Http.Functional.Tests/wilogs)  1/24 | 20180124.06 | Win7 | WinHttpException: The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180124.06/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandlerTest~2FPostAsync_ReuseRequestContent_Success(remoteServer:%20http:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx))  1/25 | 20180125.01 | Win7 | WinHttpException: The handle is invalid - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180125.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandlerTest~2FPostAsync_ReuseRequestContent_Success(remoteServer:%20http:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx))
25906	area-System.Reflection	ReflectionTypeLoadException's ToString() should include inner exceptions	As thrown by the runtime, ReflectionTypeLoadException always has its default message, which is:  `Unable to load one or more of the requested types. Retrieve the LoaderExceptions property for more information.`    The information is only in LoaderExceptions and that can contain many possible messages along the lines of type X could not be loaded due to reason Y.    AggregateException is analogous and includes these inner exceptions in its ToString(). Unfortunately RuntimeTypeLoadException does not. This means in console output that records the crash, the information is gone and irretrievable. So I am faced with a test log that just says     ```  System.Reflection.ReflectionTypeLoadException: Unable to load one or more of the requested types. Retrieve the LoaderExceptions property for more information.     at System.Reflection.RuntimeModule.GetTypes(RuntimeModule module)     at System.Reflection.Assembly.GetTypes()     at repro.Program.Main() in C:\Users\danmose\source\repos\ConsoleApp32\Program.cs:line 32  ```    If it did the same as AggregateException it would look like    ```  System.Reflection.ReflectionTypeLoadException: Unable to load one or more of the requested types.       at System.Reflection.RuntimeModule.GetTypes(RuntimeModule module)     at System.Reflection.Assembly.GetTypes()     at repro.Program.Main() in C:\Users\danmose\source\repos\ConsoleApp32\Program.cs:line 32    Could not load type 'repro.StructA' from assembly 'ConsoleApp32, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.  Could not load type 'repro.StructB' from assembly 'ConsoleApp32, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'  ```    Which makes it easier to figure out what happened.     Note the inner exceptions often do not have callstacks - just messages - if they don't have stacks, the output should not show any.  Note also I removed the text `Retrieve the LoaderExceptions property for more information.` which becomes essentially redundant.  
25907	area-System.IO	Fix GZip perf test location	resolves https://github.com/dotnet/corefx/issues/25901
25909	area-System.Linq	Fill some test gaps in S.L.Expression's LambdaCompiler	Contributes to #11409
25910	area-System.Net	Use generic test handling for remote server failures.	"cc @karelz @wfurt @davidsh     fixes #25878   fixes #25892     When any test with remote server dependency fails, it will output something like this:    ```  System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test.GetAsync_UnsupportedSSLVersion_Throws(name: \""SSLv2\"", url: \""https://www.ssllabs.com:10200/\"") [FAIL]  System.Net.Test.Common.RemoteServerException : Likely external issue with remote server : https://www.ssllabs.com:10200/  ---- System.Net.Http.HttpRequestException : An error occurred while sending the request.  -------- System.Net.Http.WinHttpException : A connection with the server could not be established  Stack Trace:     E:\corefx\src\Common\tests\System\Net\RemoteServerQuery.cs(65,0): at System.Net.Test.Common.RemoteServerQuery.<ThrowsAsync>d__1`1.MoveNext()     --- End of stack trace from previous location where exception was thrown ---     E:\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.SslProtocols.cs(220,0): at System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test.<GetAsync_UnsupportedSSLVersion_Throws>d__9.MoveNext()     --- End of stack trace from previous location where exception was thrown ---     --- End of stack trace from previous location where exception was thrown ---     --- End of stack trace from previous location where exception was thrown ---     ----- Inner Stack Trace -----     E:\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs(464,0): at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext()     --- End of stack trace from previous location where exception was thrown ---     E:\corefx\src\Common\tests\System\Net\RemoteServerQuery.cs(56,0): at System.Net.Test.Common.RemoteServerQuery.<ThrowsAsync>d__1`1.MoveNext()     ----- Inner Stack Trace -----     E:\corefx\src\System.Runtime.Extensions\src\System\Environment.cs(176,0): at System.Environment.get_StackTrace()     E:\corefx\src\Common\src\System\Runtime\ExceptionServices\ExceptionStackTrace.cs(23,0): at System.Runtime.ExceptionServices.ExceptionStackTrace.AddCurrentStack(Exception exception)     E:\corefx\src\Common\src\System\Net\Http\WinHttpException.cs(56,0): at System.Net.Http.WinHttpException.CreateExceptionUsingError(Int32 error)     E:\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpRequestCallback.cs(324,0): at System.Net.Http.WinHttpRequestCallback.OnRequestError(WinHttpRequestState state, WINHTTP_ASYNC_RESULT asyncResult)     E:\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpRequestCallback.cs(104,0): at System.Net.Http.WinHttpRequestCallback.RequestCallback(IntPtr handle, WinHttpRequestState state, UInt32 internetStatus, IntPtr statusInformation, UInt32 statusInformationLength)     E:\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpRequestCallback.cs(47,0): at System.Net.Http.WinHttpRequestCallback.WinHttpCallback(IntPtr handle, IntPtr context, UInt32 internetStatus, IntPtr statusInformation, UInt32 statusInformationLength)     --- End of stack trace from AddCurrentStack ---     E:\corefx\src\Common\src\System\Threading\Tasks\RendezvousAwaitable.cs(62,0): at System.Threading.Tasks.RendezvousAwaitable`1.GetResult()     E:\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs(856,0): at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext()  ```"
25911	area-Meta	Confused Versions	Why are you using different versions?   Which one is major? SDK version? Corefx release version?  Where can I find the SDK release version such as (2.1.2 , 2.1.3) ?
25912	area-System.Net	Test failure: System.Net.Http.Functional.Tests.HttpClientHandler_ServerCertificates_Test / UseCallback_NotSecureConnection_CallbackNotCalled	## Type of failures    ### The handle is in the wrong state for the requested operation    Failure [20171210.03](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171210.03/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_ServerCertificates_Test~2FUseCallback_NotSecureConnection_CallbackNotCalled):  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The handle is in the wrong state for the requested operation     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in E:\A\_work\1324\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpClientHandler_ServerCertificates_Test.<UseCallback_NotSecureConnection_CallbackNotCalled>d__8.MoveNext() in E:\A\_work\1324\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.ServerCertificates.cs:line 119  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Threading.Tasks.RendezvousAwaitable`1.GetResult() in E:\A\_work\1324\s\corefx\src\Common\src\System\Threading\Tasks\RendezvousAwaitable.cs:line 62     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() in E:\A\_work\1324\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 856  ```    ### The operation has been canceled    Failure [20171126.02](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171126.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_ServerCertificates_Test~2FUseCallback_NotSecureConnection_CallbackNotCalled):  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The operation has been canceled     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in E:\A\_work\686\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpClientHandler_ServerCertificates_Test.<UseCallback_NotSecureConnection_CallbackNotCalled>d__8.MoveNext() in E:\A\_work\686\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.ServerCertificates.cs:line 119  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Threading.Tasks.RendezvousAwaitable`1.GetResult() in E:\A\_work\686\s\corefx\src\Common\src\System\Threading\Tasks\RendezvousAwaitable.cs:line 62     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() in E:\A\_work\686\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 858  ```    ### The handle is invalid    Failure [20171128.07](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171128.07/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_ServerCertificates_Test~2FUseCallback_NotSecureConnection_CallbackNotCalled):  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The handle is invalid     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in E:\A\_work\1153\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpClientHandler_ServerCertificates_Test.<UseCallback_NotSecureConnection_CallbackNotCalled>d__8.MoveNext() in E:\A\_work\1153\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.ServerCertificates.cs:line 119  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Net.Http.WinHttpHandler.InternalReceiveResponseHeadersAsync(WinHttpRequestState state) in E:\A\_work\1153\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 1365     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() in E:\A\_work\1153\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 863  ```    ## History of failures    Day | Build | OS | Error message  -- | -- | -- | --  5/19 | 20170519.03 | Win10 | The operation has been canceled  8/22 | 20170822.01 | Win7 | The operation has been canceled  8/31 | 20170831.01 | Win10 | The operation has been canceled  9/26 | 20170926.06 | Win7 | The handle is in the wrong state for the requested operation  10/3 | 20171003.01 | Win7 | The handle is in the wrong state for the requested operation  10/4 | 20171004.01 | Win7 | The handle is in the wrong state for the requested operation  10/22 | 20171022.01 | Win8.1 | The operation has been canceled  11/3 | 20171103.07 | Win7 | The handle is in the wrong state for the requested operation  11/3 | 20171103.11 | Win7 | The handle is in the wrong state for the requested operation  11/4 | 20171104.04 | Win7 | The handle is in the wrong state for the requested operation  11/6 | 20171106.02 | Win8.1 | The operation has been canceled  11/9 | 20171109.05 | Win7 | The handle is in the wrong state for the requested operation  11/19 | 20171119.02 | Win8.1 | The operation has been canceled  11/26 | 20171126.02 | Win8.1 | The operation has been canceled  11/28 | 20171128.07 | Win10 | The handle is invalid  12/10 | 20171210.03 | Win7 | The handle is in the wrong state for the requested operation  1/2 | 20180102.02 | Win7 | The handle is in the wrong state for the requested operation<br/>Note: Only in [catastrophic failure logs](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180102.02/workItem/System.Net.Http.Functional.Tests/wilogs)  1/11 | 20180111.01 | Win7 | The handle is in the wrong state for the requested operation - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180111.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_ServerCertificates_Test~2FUseCallback_NotSecureConnection_CallbackNotCalled)  1/11 | 20180111.02 | Win7 | The handle is in the wrong state for the requested operation - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180111.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_ServerCertificates_Test~2FUseCallback_NotSecureConnection_CallbackNotCalled)  1/15 | 20180115.04 | Win7 | The handle is invalid - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180115.04/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_ServerCertificates_Test~2FUseCallback_NotSecureConnection_CallbackNotCalled)  1/22 | 20180122.02 | Win7 | The handle is in the wrong state for the requested operation<br/>Note: Only in [catastrophic failure logs](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180122.02/workItem/System.Net.Http.Functional.Tests/wilogs)  2/6 | 20180206.05 | Win7 | The handle is invalid - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180206.05/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_ServerCertificates_Test~2FUseCallback_NotSecureConnection_CallbackNotCalled)    Similar exceptions / errors as in #25896 and #25902
25914	area-System.Net	Managed sockets binding regression on linux 	"@tmds @stephentoub     Starting with runtime build 2.1.0-preview1-25915-01, it is now possible to bind multiple times simultaneously to the exact same TCP address on linux without setting any special options.    ### SampleApp:    ```c#  using System;  using System.Net;  using System.Net.Sockets;    namespace DoubleBind  {      class Program      {          static void Main(string[] args)          {              using (var socket1 = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp))              {                  socket1.Bind(new IPEndPoint(IPAddress.Loopback, 5000));                    using (var socket2 = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp))                  {                      socket2.Bind(new IPEndPoint(IPAddress.Loopback, 5000));                  }              }                Console.WriteLine(""Success!?"");          }      }  }  ```    ### Expected output:    ```  DoubleBind$ dotnet run    Unhandled Exception: System.Net.Sockets.SocketException: Address already in use     at System.Net.Sockets.Socket.UpdateStatusAfterSocketErrorAndThrowException(SocketError error, String callerName)     at System.Net.Sockets.Socket.DoBind(EndPoint endPointSnapshot, SocketAddress socketAddress)     at System.Net.Sockets.Socket.Bind(EndPoint localEP)     at DoubleBind.Program.Main(String[] args) in /Users/shalter/source/halter73/DoubleBind/Program.cs:line 17  ```    This is what is seen today on Windows and macOS.    ### Actual output:    ```  DoubleBind$ dotnet run  Success!?  ```    This is the behavior on Linux (tested on Ubuntu 16.04.3 LTS) starting with the 2.1.0-preview1-25915-01 build.    ### My theory    [Here](https://github.com/dotnet/corefx/compare/25f80ade543903293ae08ac091cffd457a7a9ad4...7eba4bf88983ac276348ea1626c81595e1b237c6) are the changes introduced in the 2.1.0-preview1-25915-01 build. But even without looking at that, it stands to reason that #24809 is the likely cause of this change in behavior.    Setting the SO_REUSEADDR option by itself should not cause this behavior (this is what we've been doing manually in Kestrel for a couple months now), so maybe SO_REUSEPORT is getting set when it shouldn't be."
25916	area-System.Console	Console.ReadLine echoes first few hundred milliseconds of input on Linux/Mac	"## Background  I am not a console programmer, but was helping someone learn some foundations of programming and fundamental syntax of C# in a _.NET Core_ console application. When demonstrating loops I found that following simple code has an unexpected behavior. On the first pass through the while loop, the input is echoed to *stdout*.     ### Example Program                            var retries = 10;              var input = string.Empty;              var answer = ""Cod3"";              while(retries-- > 0 && input != answer){                   input = Console.ReadLine();              }              Console.WriteLine(retries > 0 ? ""CONGRATS!"" : ""GAME OVER!"");    ### Example Output 1: Values entered at slow pace  If I slowly entered the numbers 1 through 10 and hit return after each value, the following will result:            1          1  <-- Echoed to stdout, delayed several hundred milliseconds from the input.          2          3          4          5          6          7          8          9          10          GAME OVER!  ### Example Output 2: Values entered at rapid pace  If I rapidly entered the numbers 1 through 10 and hit return after each value, the following will result:             1           2           3           4           4           51  <-- Echo           2  <-- Echo           3  <-- Echo           4  <-- Echo           4  <-- Echo           5  <-- Echo           6           7           8           9           GAME OVER!    #### Environment  **OS**: OS X v10.13.1  **Shell**: _zsh v5.3_, _GNU bash v3.2.57_  **.Net Core**: v2.0.3"
25917	area-System.Diagnostics	build -tests fail	"when I executed build-tests after executed build command, I got below error:  ```  ""C:\Users\peter.chen\Documents\Code\Self\corefx\src\System.Diagnostics.PerformanceCounter\tests\System.Diagnostics.Perf  ormanceCounter.Tests.csproj"" (BuildAndTest ??) (1) ->  (CoreCompile ??) ->    CounterCreationDataTests.cs(8,6): error CS1001: Identifier expected [C:\Users\peter.chen\Documents\Code\Self\corefx\s  rc\System.Diagnostics.PerformanceCounter\tests\System.Diagnostics.PerformanceCounter.Tests.csproj]    CounterCreationDataTests.cs(8,6): error CS1002: ; expected [C:\Users\peter.chen\Documents\Code\Self\corefx\src\System  .Diagnostics.PerformanceCounter\tests\System.Diagnostics.PerformanceCounter.Tests.csproj]    CounterCreationDataTests.cs(8,14): error CS0116: A namespace cannot directly contain members such as fields or method  s [C:\Users\peter.chen\Documents\Code\Self\corefx\src\System.Diagnostics.PerformanceCounter\tests\System.Diagnostics.Pe  rformanceCounter.Tests.csproj]    CounterCreationDataTests.cs(8,6): error CS1056: Unexpected character '?' [C:\Users\peter.chen\Documents\Code\Self\cor  efx\src\System.Diagnostics.PerformanceCounter\tests\System.Diagnostics.PerformanceCounter.Tests.csproj]    CounterCreationDataTests.cs(8,28): error CS1022: Type or namespace definition, or end-of-file expected [C:\Users\pete  r.chen\Documents\Code\Self\corefx\src\System.Diagnostics.PerformanceCounter\tests\System.Diagnostics.PerformanceCounter  .Tests.csproj]  ```    Then, I opened `CounterCreationDataTests.cs` in notepad, I found a garbled character at line 8  ```  using?System.ComponentModel;  ```    After I removed it and entered a white space, It works fine now.    Is this a problem?    Thanks."
25918	area-System.ComponentModel	Allow RangeAttribute use to request InvariantCulture conversions.	Adds a `ParseLimitsInInvariantCulture` that affects the interpretation of the extrema set, and `ConvertValueInInvariantCulture` that affects the interpretation of values.    Separate properties allows for e.g. a component assuming a dot-decimal-separator culture defining a property with the attribute (so invariant culture should be used) the use of the property is done in a comma-decimal-separator (so the current culture should be used), or any permutation of the two booleans.    Fixes #2648    CC @lajones 
25919	area-System.Data	Intellisense tooltip for SqlCommand's CommandTimeout doesn't describe units	"The Visual Studio tooltip for SqlCommand.CommandTimeout doesn't say whether units are seconds or milliseconds.The tooltip says ""Gets or sets the wait time before terminating the attempt to execute a command and generating an error.""    [MSDN](https://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlcommand.commandtimeout(v=vs.110).aspx) has a bettter description: ""The time in seconds to wait for the command to execute. The default is 30 seconds."""
25920	area-System.Security	Bring SignedCms to CoreFx	"With this change there become 4 builds of the Pkcs package:    * netstandard    * Used by UWP    * EnvelopedCms: no    * SignedCms:      * RSA-PKCS1: yes      * RSA-PSS: limited verification, no signature      * ECDSA: yes      * DSA: no (not defined in netstandard20)      * The silent option to signing has no effect  * netcoreapp-Windows_NT    * Used by .NET Core on Windows    * EnvelopedCms: yes (same as .NET Core 1.0 implementaiton)    * SignedCms:      * RSA-PKCS1: yes      * RSA-PSS: limited verification, no signature      * ECDSA: yes      * DSA: yes (FIPS-186-3)      * The silent option to signing is respected  * netcoreapp    * Used by .NET Core on Linux, macOS    * EnvelopedCms: no    * SignedCms:      * RSA-PKCS1: yes      * RSA-PSS: limited verification, no signature      * ECDSA: yes      * DSA: yes (FIPS-186-3)      * The silent option to signing has no effect  * netfx    * The current state of .NET Framework is    * EnvelopedCms: yes    * SignedCms:      * RSA-PKCS1: yes      * RSA-PSS: no      * ECDSA: no      * DSA: FIPS-186-2 only      * The silent option to signing is respected    For RSA-PSS, it is supported if all of  * the platform supports it  * MGF1 is used  * the message digest algorithm, PSS digest algorithm, and MGF1 digest algorithm all match  * the PSS salt size is the same as the digest size  * the standard PSS trailer identifier (1) is used    Since there is no API to indicate RSA-PKCS1 or RSA-PSS at signing time, only  RSA-PKCS1 signatures can be generated for RSA keys.    The SignedCms implementation for .NET Core does the CMS message  packing and unpacking directly (via the ASN.1 serializer), using the existing  system-based cryptographic primitives where applicable.    Several files are split-built netcoreapp vs netstandard to take advantage of netcoreapp Span-based API.    Random factoid:  The state of the tests (as of creating the PR) has (by itself) 59% line coverage of the ASN.1 serializer, 20% line coverage of the ASN.1 reader, and 42% line coverage of the ASN.1 writer. (Debug.Fail blocks and unhit exceptions are in the ""uncovered"" lines, they were not normalized away)    References:    * [IETF RFC 5652](https://tools.ietf.org/html/rfc5652#section-5.1) (section 5.1: SignedData)    Fixes #14197."
25921	area-Infrastructure	Ensure build of netcoreapp vertical of CoreFx can be done without past packages	Fixes: https://github.com/dotnet/corefx/issues/23220    I'm not sure if we should only enable the external/netcoreapp/netcoreapp.depproj when BuildAllConfigurations=true?     It is easier to review per commit.     I also ran UpdateVSConfigurations    cc: @weshaggard @danmosemsft 
25922	area-System.Drawing	Share as much Bitmap code with Windows as possible	Slight WIP, let's see what the CI says :D
25923	area-System.IO	"Revert ""Adding System.IO.Compression.ZipFile to net471 support package(#25867)"""	This reverts commit 0596ee27edd37bd635ded793b7f89dea479cab92.    cc: @weshaggard @AlexGhiondea     Given that this change didn't force the binding redirect, then we decided it's better to remove it.
25924	area-Infrastructure	SupportedFramework apply to all versions of a reference assembly	When applying SupportedFramework metadata to a reference assembly in pkgproj it applies to all files in all configurations for the reference assembly project. This causes some invalid validation errors when the reference assembly pins the assembly version for some configurations but not others.     It ends up expecting some frameworks to support both versions of the reference assembly instead of just the lower version.
25926	area-System.Runtime	"Several x86 intrinsic APIs are ""missing"""	"In the process of adding the APIs for #23519 (see https://github.com/dotnet/coreclr/pull/15341), I found several non-scalar x86 intrinsic APIs that are ""missing"".    We should determine which of these need to be added and which were explicitly excluded.    ```  int _mm_movemask_ps (__m128 a)                                      // movmskps    __m128d _mm_loadh_pd (__m128d a, double const* mem_addr)            // movhpd  __m128d _mm_loadl_pd (__m128d a, double const* mem_addr)            // movlpd  __m128i _mm_loadl_epi64 (__m128i const* mem_addr)                   // movq    void _mm_stream_si32 (int* mem_addr, int a)                         // movnti  void _mm_stream_si64 (__int64* mem_addr, __int64 a)                 // movnti    __m256i _mm256_permute2f128_si256 (__m256i a, __m256i b, int imm8)  // vperm2f128    __m256i _mm256_stream_load_si256 (__m256i const* mem_addr)          // vmovntdqa    // The following 8 have intrinsics which take an imm8 and emit the same underlying instruction  __m128i _mm_sll_epi16 (__m128i a, __m128i count)                    // psllw  __m128i _mm_sll_epi32 (__m128i a, __m128i count)                    // pslld  __m128i _mm_sll_epi64 (__m128i a, __m128i count)                    // psllq  __m128i _mm_sra_epi16 (__m128i a, __m128i count)                    // psraw  __m128i _mm_sra_epi32 (__m128i a, __m128i count)                    // psrad  __m128i _mm_srl_epi16 (__m128i a, __m128i count)                    // psrlw  __m128i _mm_srl_epi32 (__m128i a, __m128i count)                    // psrld  __m128i _mm_srl_epi64 (__m128i a, __m128i count)                    // psrlq    // The following 6 have the corresponding _mm256 forms exposed  __m128i _mm_sllv_epi32 (__m128i a, __m128i count)                   // vpsllvd  __m128i _mm_sllv_epi64 (__m128i a, __m128i count)                   // vpsllvq  __m128i _mm_srav_epi32 (__m128i a, __m128i count)                   // vpsravd  __m128i _mm_srlv_epi32 (__m128i a, __m128i count)                   // vpsrlvd  __m128i _mm_srlv_epi64 (__m128i a, __m128i count)                   // vpsrlvq  ```"
25928	area-System.Runtime	"Add ""Create"" method to EqualityComparer<> class"	_From @ViIvanov on December 14, 2017 20:15_  Now we have a `Create` method in [Comparer<> class](https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Collections/Generic/Comparer.cs#L21):  ```cs  public static Comparer<T> Create(Comparison<T> comparison)  ```    I think, it will be usable to have an analog in EqualityComparer<>:  ```cs  public static EqualityComparer<T> Create(Func<T, T, bool> equals, Func<T, int> getHashCode)  ```  _Copied from original issue: dotnet/coreclr#15526_
25929	area-System.Memory	Reference Unsafe APIs from CoreLib in System.Memory	As part of https://github.com/dotnet/corefx/issues/24090#issuecomment-351041295, referencing the Unsafe APIs from CoreLib for the inbox version of System.Memory.    Waiting on new CoreCLR to be picked up that has this change in https://github.com/dotnet/coreclr/pull/15527    cc @jkotas, @KrzysztofCwalina, @joshfree 
25930	area-System.Runtime	EventArgs type not Serializable	MSBuild uses EventArgs base class to derive all build events and messages (see [BuildEventArgs](https://github.com/Microsoft/msbuild/blob/6851538897f5d7b08024a6d8435bc44be5869e53/src/Framework/BuildEventArgs.cs#L30)).    As part of our effort to migrate to `netstandard2.0`, we need this type to be marked Serializable in order to maintain compatibility between full framework and Core versions. Ideally this needs to be included in 2.0 servicing in the VS15.6 timeframe.    @danmosemsft 
25932	area-System.Threading	Freeze the assembly version for System.Threading.Tasks.Extensions	The APIs in System.Threading.Tasks.Extensions have been put inbox on  .NET Core 2.0 and UAp and also type-forwarded into System.Runtime. This  means the APIs in the contract can no longer version for the netstandard  reference. Any new API's have to be added to the platform specific reference  assembly.    This also updates the package to include the inbox placeholders for  netcoreapp and uap.    cc @ericstj @stephentoub 
25933	area-System.Runtime	Create new label for hardware intrinsics i.e. area-System.Runtime.Intrinsics	There is a growing number of issues and PRs in both coreclr and corefx repos which are result of ongoing work in implementation of Intel and Arm hardware instrinsics. It would be very helpful in managing the information flow if that area would have it's own labels to better organize work and information flow.    cc: @karelz @jkotas @tannergooding @CarolEidt  @fiigii @sdmaclea 
25934	area-System.Threading	Tests To recognize the ApartmentStateThreadAttribute on Main  Function	Related PR - https://github.com/dotnet/coreclr/pull/15512  New PR - #26001 
25935	area-System.Diagnostics	Replace garbled character with white space	Resolves #25917 
25936	area-Meta	Convert uses of the Dangerous APIs to use MemoryMarshal.GetReference	Part of:  https://github.com/dotnet/corefx/issues/25412  https://github.com/dotnet/corefx/issues/25615    Related to (and depends on): https://github.com/dotnet/coreclr/pull/15532    **Note:** Expecting this failure for now until we have resolved whether we should add `Unsafe.AsRef<T>(in T)` or not. See: https://github.com/dotnet/coreclr/pull/15532#issuecomment-351896709  ```text  Cannot use method 'MemoryMarshal.GetReference<char>(ReadOnlySpan<char>)' as a ref or out value because it is a readonly variable  ```    Following the staging plan from here: https://github.com/dotnet/corefx/issues/23881#issuecomment-343767740    - [x] Add MemoryExtensions.GetReference/TryGetArray  - [ ] Convert all uses of DangerousGetPinnableReference/DangerousTryGetArray in coreclr, corefx, corert, corefxlab, aspnet, ... to MemoryExtensions.GetReference  - [ ] Change DangerousGetPinnableReference to whatever we like to make it fit the pinning pattern and remove DangerousTryGetArray.    Doing it this way will avoid the need for complex staging or things being on the floor for extensive periods of time.    cc @jkotas, @stephentoub, @KrzysztofCwalina, @davidfowl, @pakrym, @joshfree   
25937	area-System.Linq	Add LookUp(TKey, TElement).Empty() API	# Issue    Recently we are dealing with a scenario which is to provide an API that returns an `ILookup<TKey, TElement>` instance. The design is, before actually performing queries, the API checks whether the parameters will cause empty result. If so, an empty `ILookup<TKey, TElement>` is returned. Currently we manually create a static field as below:    ```csharp    static readonly ILookup<int, Something> Empty = Array.Empty<Something>().ToLookup(s => s.ID);    ```  However, if there is a built-in API similar to `Enumerable.Empty<T>()` and `Array.Empty<T>()`, it could be helpful. Manual declaration above is no longer needed.     # Rational    Since we already have  `Enumerable.Empty<T>()` and `Array.Empty<T>()`, and `ILookup<TKey, TElement>` instance cannot be modified, it is reasonable that we can have similar static method that serves same purpose.    # Proposal    Similar to `Enumerable.Empty<T>()` and `Array.Empty<T>()`, the proposed API shall look like following code snippet:    ```csharp    public ILookup<int, Something> FindSomethings(DateTime from, DateTime to)  {      if (from <= WhenTheBusinessLaunched && to <= WhenTheBusinessLaunched)           return Lookup<int, Something>.Empty(); // Here        var result = default(ILookup<int, Something>);      // Do something      return result;  }    ```    where the `Empty()` method has syntax below:    ```csharp    public static ILookup<TKey, TElement> Lookup<TKey, TElement>.Empty();     ```     or can be something like this with new `Lookup` class:    ```csharp    public static ILookup<TKey, TElement> Lookup.Empty<TKey, TElement>();     ```     Please take a look at the proposal above. Thanks.   
25938	area-System.Collections	Test failure: System.Collections.Concurrent.Tests.ConcurrentBagTests/BlockingCollection_WrappingCollection_ExpectedElementsTransferred(numThreadsPerConsumerProducer: 4, numItemsPerThread: 100000, producerSp...	Opened on behalf of @Sunny-pu  The test `System.Collections.Concurrent.Tests.ConcurrentBagTests/BlockingCollection_WrappingCollection_ExpectedElementsTransferred(numThreadsPerConsumerProducer: 4, numItemsPerThread: 100000, producerSp...` has failed.  Assert.NotEqual() Failure\r     Expected: Not 0\r     Actual:   0          Stack Trace:             at System.Collections.Concurrent.Tests.ProducerConsumerCollectionTests.<>c__DisplayClass41_0.<BlockingCollection_WrappingCollection_ExpectedElementsTransferred>b__3() in E:\A\_work\1973\s\corefx\src\System.Collections.Concurrent\tests\ProducerConsumerCollectionTests.cs:line 508        at System.Threading.Tasks.Task.InnerInvoke()        at System.Threading.Tasks.Task.<>c.<.cctor>b__278_1(Object obj)        at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)        at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)     --- End of stack trace from previous location where exception was thrown ---        at System.Collections.Concurrent.Tests.ProducerConsumerCollectionTests.WaitAllOrAnyFailed(Task[] tasks) in E:\A\_work\1973\s\corefx\src\System.Collections.Concurrent\tests\ProducerConsumerCollectionTests.cs:line 1016        at System.Collections.Concurrent.Tests.ProducerConsumerCollectionTests.BlockingCollection_WrappingCollection_ExpectedElementsTransferred(Int32 numThreadsPerConsumerProducer, Int32 numItemsPerThread, Int32 producerSpin) in E:\A\_work\1973\s\corefx\src\System.Collections.Concurrent\tests\ProducerConsumerCollectionTests.cs:line 513 Build : Master - 20171215.02 (UWP F5 Tests) Failing configurations: - Windows.10.Arm64-arm   - Release  Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fuwp~2F/build/20171215.02/workItem/System.Collections.Concurrent.Tests/analysis/xunit/System.Collections.Concurrent.Tests.ConcurrentBagTests~2FBlockingCollection_WrappingCollection_ExpectedElementsTransferred(numThreadsPerConsumerProducer:%204,%20numItemsPerThread:%20100000,%20producerSp...
25939	area-System.Collections	Test failure: System.Collections.Concurrent.Tests.ConcurrentBagTests/ManyConcurrentAddsTakes_ForceContentionWithToArray(seconds: 1)	Opened on behalf of @Sunny-pu  The test `System.Collections.Concurrent.Tests.ConcurrentBagTests/ManyConcurrentAddsTakes_ForceContentionWithToArray(seconds: 1)` has failed.  System.IndexOutOfRangeException : Index was outside the bounds of the array.          Stack Trace:             at System.Collections.Concurrent.ConcurrentBag`1.ToArray() in E:\A\_work\1973\s\corefx\src\System.Collections.Concurrent\src\System\Collections\Concurrent\ConcurrentBag.cs:line 346        at System.Collections.Concurrent.Tests.ProducerConsumerCollectionTests.ManyConcurrentAddsTakes_ForceContentionWithToArray(Double seconds) in E:\A\_work\1973\s\corefx\src\System.Collections.Concurrent\tests\ProducerConsumerCollectionTests.cs:line 910 Build : Master - 20171215.02 (UWP F5 Tests) Failing configurations: - Windows.10.Arm64-arm   - Release  Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fuwp~2F/build/20171215.02/workItem/System.Collections.Concurrent.Tests/analysis/xunit/System.Collections.Concurrent.Tests.ConcurrentBagTests~2FManyConcurrentAddsTakes_ForceContentionWithToArray(seconds:%201)
25940	area-System.Runtime	Add tests for EventArgs serialization	Relates to https://github.com/dotnet/corefx/issues/25930  Requires https://github.com/dotnet/coreclr/pull/15541
25945	area-System.Runtime	Implement public partial sort Array API	## Rationale  - In [PowerShell repo](https://github.com/PowerShell/PowerShell) we have Sort-Object cmdlet enhanced with `-Top` and `-Bottom` parameters  - their implementation is based on partial sorting.   - Currently Linq uses [`Array.Sort`](https://github.com/dotnet/corefx/pull/24116) but own internal (not public API) implementation of [PartialQuickSort](https://github.com/stephentoub/corefx/blob/a6aff797a33e606a60ec0c9ca034a161c609620f/src/System.Linq/src/System/Linq/OrderedEnumerable.cs#L592).  - It seems this is a very popular scenario for web interface to show sorted result by pages. Users use only top items and rarely go to the following pages.    ## Proposed API ##  ```c#  public abstract partial class Array : System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.ICloneable  {      public static void SortPartial(array array, int index, int length) { }      public static void SortPartial(array keys, array items, int index, int length) { }      public static void SortPartial(array array, int index, int length, System.Collections.IComparer comparer) { }      public static void SortPartial(array keys, array items, int index, int length, System.Collections.IComparer comparer) { }      public static void SortPartial[T](T[] array, int index, int length) { }      public static void SortPartial[TKey, TValue](TKey[] keys, TValue[] items, int index, int length) { }      public static void SortPartial[T](T[] array, int index, int endIndex, System.Collections.Generic.IComparer[T] comparer) { }      public static void SortPartial[TKey, TValue](TKey[] keys, TValue[] items, int index, int length, System.Collections.Generic.IComparer [TKey] comparer) { }  }    public partial class List<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IReadOnlyList<T>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList  {      public void SortPartial(int index, int count, System.Collections.Generic.IComparer<T> comparer) { }  }  ```  ## Useful links ##  https://en.wikipedia.org/wiki/Partial_sorting  https://blogs.msdn.microsoft.com/devdev/2006/01/18/efficient-selection-and-partial-sorting-based-on-quicksort/  ## Updates ##  1. Replace `startIndex` and `endIndex` with `index` and `length`.  2. Add class names.  
25946	area-System.Reflection	Unsafe behaviour of MetadataReaderProvider	I spent quite a while debugging some non-deterministic behaviour of the `System.Reflection.Metadata.MetadataReader` class. It would randomly start throwing `BadImageFormatException`.    Example:    ```c#  System.Reflection.MetadataReader GetReader()  {    System.Reflection.Metadata.MetadataReaderProvider provider = ...;    return provider.GetMetadataReader();  }    void Test()  {    var peReader = GetReader();    // provider gets garbage collected    // future uses of peReader throw BadImageFormatException  }  ```    It turns out that the underlying `System.Reflection.Metadata.MetadataReaderProvider` class had been garbage collected, and the unsafe pointers used internally in `System.Reflection.Metadata` became invalid.    I think that this API is too unsafe. The error only became apparent under heavy multi-threaded use.    My personal suggestion is that `System.Reflection.Metadata` should contain an `object` that can optionally reference the `MetadataReaderProvider`, such that an application that only keeps a reference to the `Metadata` object will not have its internal pointers dangling.    [EDIT] Ad C# syntax highlighting by @karelz
25948	area-System.Security	Consolidate HashAlgorithmName->HashAlgorithm lookup tables	There are a fair number of copies of HashAlgorithmName to HashAlgorithm resolvers.  They should be consolidated into one place, and probably just be public API.    `HashAlgorithm.Create(HashAlgorithmName algName)`, perhaps?
25949	area-System.Net	Intermittent WinHttpException on Azure	"I have had an issue running ASP.NET Core 2.0 app in Azure and have had a conversation with the Azure support team. They have, after some investigation, suggested I open the issue here for further help.    The scenario is as follows. I have a completely standard, out of the box, ASP.NET Core app that I published to Azure. The only modification I've made to this application is I've added a singleton `HttpClient` to the service container like this: `services.TryAddSingleton<HttpClient>();`    I've also modified the About.cshtml.cs file with the following additions:  ```c#  private readonly HttpClient _client;    public AboutModel(HttpClient client)  {      _client = client;  }    public string Message { get; set; }    public async Task OnGet()  {      Message = ""Your application description page."";      var responses = new List<HttpResponseMessage>();        responses.Add(await _client.GetAsync(""https://cdn.contentful.com/spaces/qz0n5cdakyl9/entries/?access_token=secretTokenHere""));      responses.Add(await _client.GetAsync(""https://cdn.contentful.com/spaces/qz0n5cdakyl9/entries/?access_token=secretTokenHere&content_type=layout""));      responses.Add(await _client.GetAsync(""https://cdn.contentful.com/spaces/qz0n5cdakyl9/entries/?access_token=secretTokenHere&content_type=lessonCopy""));        if(responses.Any(c => c.IsSuccessStatusCode == false))      {          throw new Exception(""Got a !200 code"");      }  }  ```    Basically the about page now makes 3 outgoing http requests. When I run this application under some simulated load (around 3000 req/min) every now and then one of the httprequests fail with an HttpException.    ### An error occurred while sending the request.The connection with the server was terminated abnormally    > System.Net.Http.HttpRequestException:  >    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw (System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e)  > Inner exception System.Net.Http.WinHttpException handled at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw:  >    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw (System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e)  >    at System.Threading.Tasks.RendezvousAwaitable`1.GetResult (System.Net.Http, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a)  >    at System.Net.Http.WinHttpHandler+<StartRequest>d__105.MoveNext (System.Net.Http, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a)    I've cut out part of the outer exception stack trace as I doubt it's relevant, but let me know if you want to see it.    I've skimmed through the source code and from the looks of it the problem arises from somewhere around here https://github.com/dotnet/corefx/blob/master/src/System.Net.Http.WinHttpHandler/src/System/Net/Http/WinHttpHandler.cs#L791  or here:  https://github.com/dotnet/corefx/blob/master/src/System.Net.Http.WinHttpHandler/src/System/Net/Http/WinHttpHandler.cs#L824    I should also add that this happens very infrequently (while I was screen sharing with Azure support I ran 6000 requests over about 5 minutes and this happened 4 times) and immediately retrying the exact same requests works fine.    Grateful if someone could try to shed some light on this.    Many thanks!    [EDIT] Add C# syntax highlighting by @karelz"
25950	area-System.IO	Mark Write7BitEncodedInt and Read7BitEncodedInt as public	7-bits encoding are useful in many situations. Yet, the method [BinaryWriter.Write7BitEncodedInt(int)](https://msdn.microsoft.com/en-us/library/system.io.binarywriter.write7bitencodedint(v=vs.110).aspx) is `protected` (idem for [BinaryReader.Read7BitEncodedInt](https://msdn.microsoft.com/en-us/library/system.io.binaryreader.read7bitencodedint(v=vs.110).aspx)) are not public. As a result, codebases end-up implementing a variant of `DummyBinaryReader` just access through inheritance the two properties. It would be much nicer if those two methods could be made public directly.
25951	area-Meta	Properly obsolete insecure types we no longer want people to use	This is a placeholder for future work to be performed under the Security Epic.
25955	area-System.Diagnostics	Add Command Line parser comment	Add useful comment raised during code review by @AtsushiKan (https://github.com/dotnet/corefx/pull/21339#pullrequestreview-45963854).
25956	area-Infrastructure	Update ILLink version.	I verified that this causes no assembly trimming diffs.    This change also exposes a new ILLink capability.  Setting `ILLinkClearInitLocals=true` will cause the linker to clear  initlocals flag on all methods. This is off by default and is exposed  for perf experiments.
25958	area-System.Memory	General code clean up of System.Memory	- Use explicit type instead of var where type can't be inferred easily.  - Removing unnecessary use of 'unsafe' keyword and generic type specifiers.    As an aside, change comment in LinuxNetworkInterface.cs to the right type - OperationalStatus (to avoid confusion with OperationStatus)    cc @KrzysztofCwalina, @jkotas, @stephentoub
25960	area-System.Runtime	 ASP.NET Core 2.0 using System.DirectoryServices.AccountManagement GroupPrincipal GetMembers Throws System.Exception: An operations error occurred.	"Repo: https://github.com/benhysell/AspNetCoreGroupPrincipal    Manual steps to reproduce:    - Create empty ASP.NET Core 2.0 Template, select React/Redux  - Add Microsoft.Windows.Compatibility 2.0.0-preview1-25914-04 to the project via NuGet  - Replace ```Index``` on ```HomeController.cs``` with the following to trigger a lookup of all users in a group:    ```c#  public IActionResult Index()  {      using (var pc = new PrincipalContext(ContextType.Domain, ""YOUR_DOMAIN_HERE"", ""USERNAME"", ""PW""))      {          SortedSet<string> ldapResults;                                         using (var gp = GroupPrincipal.FindByIdentity(pc, IdentityType.Name, ""GROUP_TO_LOOKUP""))          {              ldapResults = gp == null ? null : new SortedSet<string>(gp.GetMembers(true).Select(u => u.SamAccountName));          }      }      return View();  }  ```  - Start debugging    - Throws the following:  ```  fail: Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware[0]        An unhandled exception has occurred while executing the request  System.Exception: An operations error occurred.       at System.DirectoryServices.Interop.UnsafeNativeMethods.IAds.GetInfoEx(Object vProperties, Int32 lnReserved)     at System.DirectoryServices.DirectoryEntry.RefreshCache(String[] propertyNames)     at System.DirectoryServices.AccountManagement.RangeRetriever.GetNextChunk()     at System.DirectoryServices.AccountManagement.RangeRetriever.MoveNext()     at System.DirectoryServices.AccountManagement.ADDNLinkedAttrSet.GetNextEnum()     at System.DirectoryServices.AccountManagement.ADDNLinkedAttrSet.MoveNextMemberEnum()     at System.DirectoryServices.AccountManagement.ADDNLinkedAttrSet.MoveNext()     at System.DirectoryServices.AccountManagement.FindResultEnumerator`1.MoveNext()     at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()     at System.Collections.Generic.EnumerableHelpers.ToArray[T](IEnumerable`1 source, Int32& length)     at System.Collections.Generic.SortedSet`1..ctor(IEnumerable`1 collection, IComparer`1 comparer)     at System.Collections.Generic.SortedSet`1..ctor(IEnumerable`1 collection)     at AspNetCoreGroupPrinicipal.Controllers.HomeController.Index() in C:\jobs\AspNetCoreGroupPrinicipal\AspNetCoreGroupPrinicipal\Controllers\HomeController.cs:line 21  ```  Expected - Users are returned.    Environment - Windows 10  dotnet --version   2.1.2    [EDIT] Add C# syntax highlighting by @karelz"
25962	area-System.Diagnostics	Process pipes aren't garbage collected	"@myrup commented on [Sat Dec 16 2017](https://github.com/dotnet/core/issues/1166)    # Process pipes aren't garbage collected  # General  When using redirection for StandardOutput (and possibly StandardError, StandardInput as well) the pipes aren't garbage collected when the Process reference is collected.    The following silly piece of code lives (probably) forever in mono, but crashes in dotnet after 217 iterations on my machine:    ```c#  public static void Main() {              for (int i = 0; i < int.MaxValue; i++) {                  Process.Start(new ProcessStartInfo {                      FileName = ""ls"",                      UseShellExecute = false,                      RedirectStandardOutput = true                  });                  Console.WriteLine(i);              }  }  ```  Adding a ```.StandardOutput.Close()``` extends lifetime 5 fold, indicating other things are not being collected.    ```  .NET Command Line Tools (2.0.2)    Product Information:   Version:            2.0.2   Commit SHA-1 hash:  a04b4bf512    Runtime Environment:   OS Name:     Mac OS X   OS Version:  10.13   OS Platform: Darwin   RID:         osx.10.12-x64   Base Path:   /usr/local/share/dotnet/sdk/2.0.2/    Microsoft .NET Core Shared Framework Host      Version  : 2.0.0    Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d  ```    [EDIT] Add C# syntax highlighting by @karelz"
25963	area-System.Reflection	TypeDefinition.IsNested Property	Closes #5377.    First time PR, so here are some of the questions I wasn't sure of:    * Property placement with struct definition for ref/ and src/.  * Library version changes.  * Need for tests for such a simple API addition. I wrote a few and put in a separate commit for easy reset.    I tried reading contributing docs and applying anything relevant, as well as keeping codestyle consistent in the file.
25964	area-System.Memory	Remove DangerousTryGetArray and hide DangerousGetPinnableReference	Fixes:  https://github.com/dotnet/corefx/issues/25412  https://github.com/dotnet/corefx/issues/25615    Also fixes https://github.com/dotnet/corefx/issues/23881    **Depends on the following PR (hence blocked):** https://github.com/dotnet/coreclr/pull/15557    Following the staging plan from here: https://github.com/dotnet/corefx/issues/23881#issuecomment-343767740    - [x] Add MemoryExtensions.GetReference/TryGetArray  - [x] Convert all uses of DangerousGetPinnableReference/DangerousTryGetArray in coreclr, corefx, corert, corefxlab, aspnet, ... to MemoryExtensions.GetReference  - [x] Change DangerousGetPinnableReference to whatever we like to make it fit the pinning pattern and remove DangerousTryGetArray.    Doing it this way will avoid the need for complex staging or things being on the floor for extensive periods of time.    cc @jkotas, @stephentoub, @KrzysztofCwalina, @davidfowl 
25966	area-Serialization	ASP.NET Core 2.0 WriteStartElementAsync in XmlDictionaryWriter	"Hello!    I`m trying to create a SOAP protocol middleware for ASP.NET Core based on [Microsoft article: Custom ASP.NET Core Middleware Example](https://blogs.msdn.microsoft.com/dotnet/2016/09/19/custom-asp-net-core-middleware-example/). And I ran into a problem of a WSDL generation.    ---    On the second line I get  **`System.NotImplementedException: ""The method or operation is not implemented.""`**    ```  await writer.WriteStartElementAsync(""xs"", ""schema"", http://www.w3.org/2001/XMLSchema"");  await writer.WriteAttributeStringAsync(null, ""someName"", null,""someValue"");  await writer.WriteEndElementAsync();  ```  ---    If I use `writer.WriteAttributeString( ""someName"",""someValue"");` , it works fine.    I saw [a few issues](https://github.com/dotnet/corefx/issues/18899) about` Async` methods in `XmlDictionaryWriter`, but there is nothing about `WriteAttributeStringAsync`    Thanks!  - dotnet --info  ```  Product Information:   Version:            2.1.2    Runtime Environment:   OS Name:     Windows   OS Version:  10.0.16299   OS Platform: Windows   RID:         win10-x64   Base Path:   C:\Program Files\dotnet\sdk\2.1.2\    Microsoft .NET Core Shared Framework Host      Version  : 2.0.3  ```  cc: @shmao "
25967	area-System.Runtime	long.TryParse return false for negative numbers in ubuntu	I have an asp core 1.1.5 app and I'm running it in Ubuntu with docker  In Windows (Dev environment) It's OK but in Ubuntu I found that long.TryParse return false for negative inputs. I think its a bug  currently I use this code to solve the problem:    ```c#  public static bool TryParseLong(string input, out long output)   {     var isNegetive = false;     if (input[0] == '-')     {                  input = input.Substring(1);                  isNegetive = true;              }                if (long.TryParse(input, out long longValue))              {                  if (isNegetive)                  {                      output = -longValue;                  }                  else                  {                      output = longValue;                  }                    return true;              }                output = 0;              return false;          }  ```    [EDIT] Add C# syntax highlighting by @karelz
25968	area-System.Reflection	[Reflection] typeof vs Type.GetType: return different result of .netfx and .net core	"A console app:  ```          static void Main(string[] args)          {              Console.WriteLine(""Type.GetType:"" + Type.GetType(""System.Environment"").GetProperty(""OSVersion""));              Console.WriteLine(""typeof: "" + typeof(System.Environment).GetProperty(""OSVersion""));          }  ```  run under netcore:  ```  C:\Work\Learn\dotnet\gettype>dotnet run --framework netcoreapp2.0  Type.GetType:  typeof: System.OperatingSystem OSVersion  ```    The same code under netfx returns:  ```  C:\Work\Learn\dotnet\gettype>dotnet run --framework net462  typeof: System.OperatingSystem OSVersion  Type.GetType:System.OperatingSystem OSVersion  ```"
25970	area-System.Memory	SpanHelpers IndexOfAny-methods use sentinel-value	Instead of having _valueLength_-times an if-check in the loop, a sentinel value is used and hence only one final checks needs to done.    Perf-win depends on the size of _valueLength_, the greater the more win.  
25972	area-System.Linq	Linq.Expressions.Tests: Assert failure: Thread::IsObjRefValid(&objref) testing against checked coreclr	"Coreclr issue: https://github.com/dotnet/coreclr/issues/15537 though only happens for these tests    Windows_NT x64 Checked corefx_baseline failure  ```    Assert failure(PID 6704 [0x00001a30], Thread: 4120 [0x1018]): Thread::IsObjRefValid(&objref)  19:18:16     19:18:16   CORECLR! OBJECTREF::OBJECTREF + 0x11D (0x00007ffd`63f1505d)  19:18:16   CORECLR! ExceptionNative::GetStackTracesDeepCopy + 0x490 (0x00007ffd`64275a80)  19:18:16   SYSTEM.PRIVATE.CORELIB! <no symbol> + 0x0 (0x00007ffd`6389c6f7)  19:18:16   SYSTEM.PRIVATE.CORELIB! <no symbol> + 0x0 (0x00007ffd`6389c7ac)  19:18:16   <no module>! <no symbol> + 0x0 (0x00007ffd`0596fd2d)  19:18:16   <no module>! <no symbol> + 0x0 (0xffffffff`fffffffe)  19:18:16   <no module>! <no symbol> + 0x0 (0x000000fc`4589b450)  19:18:16   <no module>! <no symbol> + 0x0 (0x00000000`00000001)  19:18:16   CORECLR! GetClrDebugState + 0x23 (0x00007ffd`63e38c8f)  19:18:16   CORECLR! ENABLESTRESSHEAP + 0xE (0x00007ffd`63f188de)  19:18:16       File: d:\j\workspace\x64_checked_w---d7295605\src\vm\object.cpp Line: 2662  19:18:16       Image: D:\j\workspace\x64_checked_w---d7295605\_\fx\bin\testhost\netcoreapp-Windows_NT-Release-x64\dotnet.exe  19:18:16     19:18:16   Finished running tests.  End time=19:18:16.96, Exit code = 123456789  19:18:16 D:\j\workspace\x64_checked_w---d7295605\_\fx\Tools\tests.targets(484,5):   warning MSB3073: The command ""D:\j\workspace\x64_checked_w---d7295605\_\fx\bin/tests/System.Linq.Expressions.Tests/netcoreapp-Windows_NT-Release-x64//RunTests.cmd   D:\j\workspace\x64_checked_w---d7295605\_\fx\bin/testhost/netcoreapp-Windows_NT-Release-x64/""   exited with code 123456789.   [D:\j\workspace\x64_checked_w---d7295605\_\fx\src\System.Linq.Expressions\tests\System.Linq.Expressions.Tests.csproj]  ```"
25973	area-System.Runtime	Array.Sort of primitive array using Comparer.Default 100x slower compared to .NET Framework	`Array.Sort(new int[1000000], System.Collections.Comparer.Default)` is ~100x slower on .NET Core vs. NET Framework. See discussion at https://github.com/dotnet/corefx/issues/25968#issuecomment-352402058.
25974	area-System.Numerics	"Use ""in"" at Matrix4x4"	It might be better to use in keyword at some methods of Matrix4x4    ## Benchmark  ``` csharp  static Matrix4x4 Add(Matrix4x4 value1, Matrix4x4 value2);  static Matrix4x4 InAdd(in Matrix4x4 value1,in Matrix4x4 value2);  static Matrix4x4 Multiply(Matrix4x4 value1, Matrix4x4 value2);  static Matrix4x4 InMultiply(in Matrix4x4 value1, in Matrix4x4 value2);    Matrix4x4 matrix_1;  Matrix4x4 matrix_2;  Matrix4x4 result;  Matrix4x4 CreateRandom();    [GlobalSetup]  public void SetUp()  {      matrix_1 = CreateRandom();      matrix_2 = CreateRandom();  }    [Benchmark]  public void Add()  {      result = Add(matrix_1, matrix_2);  }    [Benchmark]  public void InAdd()  {      result = InAdd(matrix_1, matrix_2);  }    [Benchmark]  public void Multiply()  {      result = Multiply(matrix_1, matrix_2);  }    [Benchmark]  public void InMultiply()  {      result = InMultiply(matrix_1, matrix_2);  }  ```  ``` ini    BenchmarkDotNet=v0.10.10, OS=Windows 10 Redstone 3 [1709, Fall Creators Update] (10.0.16299.125)  Processor=Intel Core i7-7700K CPU 4.20GHz (Kaby Lake), ProcessorCount=8  .NET Core SDK=2.1.2    [Host]     : .NET Core 2.0.3 (Framework 4.6.25815.02), 64bit RyuJIT  [AttachedDebugger]    DefaultJob : .NET Core 2.0.3 (Framework 4.6.25815.02), 64bit RyuJIT      ```  | Method |     Mean |     Error |    StdDev |  |------- |---------:|----------:|----------:|  |    Add | 14.01 ns | 0.1274 ns | 0.1130 ns |  |  InAdd | 13.11 ns | 0.0094 ns | 0.0088 ns |  |    Multiply | 30.34 ns | 0.0397 ns | 0.0287 ns |  |  InMultiply | 29.36 ns | 0.1664 ns | 0.1557 ns |
25975	area-Serialization	Don't directly throw Exception System.Private.Xml	Contributes to #23748 .     ```csharp  System.Private.Xml/src/System/Xml/BinaryXml/XmlBinaryReader.cs:3217 --> #if DEBUG   System.Private.Xml/src/System/Xml/BinaryXml/XmlBinaryReader.cs:3219 --> #if DEBUG   System.Private.Xml/src/System/Xml/Serialization/XmlSerializationWriter.cs:1925 --> comment out  ```    cc: @krwq, @pjanotti 
25976	area-System.Net	disable MulticastInterface_Set_AnyInterface_Succeeds 	while investigating failures on Fedora 25, Redhat 7.2 and 7.3 (#24114)  They are probably caused by environment - packet filter rules as previous failures.     
25977	area-System.Net	Test failure: System.Net.Http.Functional.Tests.PostScenarioTest / PostUsingContentLengthSemantics_Success	## Type of failures    ### The handle is invalid    Failure [20171218.01](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171218.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.PostScenarioTest~2FPostUsingContentLengthSemantics_Success(serverUri:%20http:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx)):  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The handle is invalid     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in E:\A\_work\888\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.PostScenarioTest.<PostHelper>d__24.MoveNext() in E:\A\_work\888\s\corefx\src\System.Net.Http\tests\FunctionalTests\PostScenarioTest.cs:line 204  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.PostScenarioTest.<PostUsingContentLengthSemantics_Success>d__13.MoveNext() in E:\A\_work\888\s\corefx\src\System.Net.Http\tests\FunctionalTests\PostScenarioTest.cs:line 79  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Net.Http.WinHttpException.ThrowExceptionUsingLastError() in E:\A\_work\888\s\corefx\src\Common\src\System\Net\Http\WinHttpException.cs:line 44     at System.Net.Http.WinHttpHandler.SetRequestHandleRedirectionOptions(SafeWinHttpHandle requestHandle) in E:\A\_work\888\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 1073     at System.Net.Http.WinHttpHandler.SetRequestHandleOptions(WinHttpRequestState state) in E:\A\_work\888\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 956     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() in E:\A\_work\888\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 831  ```    ### A certificate is required to complete client authentication    Failure [20171128.01](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171128.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.PostScenarioTest~2FPostUsingContentLengthSemantics_Success(serverUri:%20http:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx)):  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : A certificate is required to complete client authentication     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in E:\A\_work\798\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.PostScenarioTest.<PostHelper>d__24.MoveNext() in E:\A\_work\798\s\corefx\src\System.Net.Http\tests\FunctionalTests\PostScenarioTest.cs:line 204  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.PostScenarioTest.<PostUsingContentLengthSemantics_Success>d__13.MoveNext() in E:\A\_work\798\s\corefx\src\System.Net.Http\tests\FunctionalTests\PostScenarioTest.cs:line 79  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Threading.Tasks.RendezvousAwaitable`1.GetResult() in E:\A\_work\798\s\corefx\src\Common\src\System\Threading\Tasks\RendezvousAwaitable.cs:line 62     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() in E:\A\_work\798\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 856  ```    ### The operation has been canceled    Failure [20171127.02](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171127.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.PostScenarioTest~2FPostUsingContentLengthSemantics_Success(serverUri:%20http:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx)):  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The operation has been canceled     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in E:\A\_work\686\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.PostScenarioTest.<PostHelper>d__24.MoveNext() in E:\A\_work\686\s\corefx\src\System.Net.Http\tests\FunctionalTests\PostScenarioTest.cs:line 204  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.PostScenarioTest.<PostUsingContentLengthSemantics_Success>d__13.MoveNext() in E:\A\_work\686\s\corefx\src\System.Net.Http\tests\FunctionalTests\PostScenarioTest.cs:line 79  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Threading.Tasks.RendezvousAwaitable`1.GetResult() in E:\A\_work\686\s\corefx\src\Common\src\System\Threading\Tasks\RendezvousAwaitable.cs:line 62     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() in E:\A\_work\686\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 858  ```    ### IOException: The handle is invalid    Failure [20171117.04](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171117.04/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.PostScenarioTest~2FPostUsingContentLengthSemantics_Success(serverUri:%20https:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx)):  ```  System.Net.Http.HttpRequestException : Error while copying content to a stream.  ---- System.IO.IOException : The write operation failed, see inner exception.  -------- System.Net.Http.WinHttpException : The handle is invalid     at System.Net.Http.HttpContent.<CopyToAsyncCore>d__45.MoveNext() in E:\A\_work\708\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs:line 340  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.WinHttpHandler.<InternalSendRequestBodyAsync>d__131.MoveNext() in E:\A\_work\708\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 1359  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() in E:\A\_work\708\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 863  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in E:\A\_work\708\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.PostScenarioTest.<PostHelper>d__24.MoveNext() in E:\A\_work\708\s\corefx\src\System.Net.Http\tests\FunctionalTests\PostScenarioTest.cs:line 204  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.PostScenarioTest.<PostUsingContentLengthSemantics_Success>d__13.MoveNext() in E:\A\_work\708\s\corefx\src\System.Net.Http\tests\FunctionalTests\PostScenarioTest.cs:line 79  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Net.Http.HttpContent.<CopyToAsyncCore>d__45.MoveNext() in E:\A\_work\708\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpContent.cs:line 336  ----- Inner Stack Trace -----  ```    ### A security error occurred    Failure [20171030.05](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171030.05/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.PostScenarioTest~2FPostUsingContentLengthSemantics_Success(serverUri:%20https:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx)):  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : A security error occurred     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in E:\A\_work\1541\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.PostScenarioTest.<PostHelper>d__24.MoveNext() in E:\A\_work\1541\s\corefx\src\System.Net.Http\tests\FunctionalTests\PostScenarioTest.cs:line 204  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.PostScenarioTest.<PostUsingContentLengthSemantics_Success>d__13.MoveNext() in E:\A\_work\1541\s\corefx\src\System.Net.Http\tests\FunctionalTests\PostScenarioTest.cs:line 79  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Threading.Tasks.RendezvousAwaitable`1.GetResult() in E:\A\_work\1541\s\corefx\src\Common\src\System\Threading\Tasks\RendezvousAwaitable.cs:line 62     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() in E:\A\_work\1541\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 856  ```    ### The handle is in the wrong state for the requested operation    Failure [20171025.04](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171025.04/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.PostScenarioTest~2FPostUsingContentLengthSemantics_Success(serverUri:%20https:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx)):  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The handle is in the wrong state for the requested operation     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Net.Http.Functional.Tests.PostScenarioTest.<PostHelper>d__24.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Net.Http.Functional.Tests.PostScenarioTest.<PostUsingContentLengthSemantics_Success>d__13.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  ----- Inner Stack Trace -----     at System.Net.Http.WinHttpException.ThrowExceptionUsingLastError()     at System.Net.Http.WinHttpHandler.SetRequestHandleClientCertificateOptions(SafeWinHttpHandle requestHandle, Uri requestUri)     at System.Net.Http.WinHttpHandler.SetRequestHandleOptions(WinHttpRequestState state)     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext()  ```    ## History of failures    Day | Build | OS | Details  -- | -- | -- | --  9/25 | 20170925.03 | Win7 | The operation has been canceled  10/4 | 20171004.01 | Win7 | The operation has been canceled  10/25 | 20171025.04 | Win7 | The handle is in the wrong state for the requested operation - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171025.04/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.PostScenarioTest~2FPostUsingContentLengthSemantics_Success(serverUri:%20https:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx))  10/27 | 20171027.03 | Win7 | The handle is invalid  10/31 | 20171030.05 | Win7 | A security error occurred - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171030.05/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.PostScenarioTest~2FPostUsingContentLengthSemantics_Success(serverUri:%20https:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx))  11/17 | 20171117.04 | Win7 | IOException: The handle is invalid - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171117.04/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.PostScenarioTest~2FPostUsingContentLengthSemantics_Success(serverUri:%20https:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx))  11/27 | 20171127.02 | Win7 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171127.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.PostScenarioTest~2FPostUsingContentLengthSemantics_Success(serverUri:%20http:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx))  11/28 | 20171128.01 | Win7 | A certificate is required to complete client authentication - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171128.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.PostScenarioTest~2FPostUsingContentLengthSemantics_Success(serverUri:%20http:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx))  12/18 | 20171218.01 | Win7 | The handle is invalid - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171218.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.PostScenarioTest~2FPostUsingContentLengthSemantics_Success(serverUri:%20http:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx))  12/22 | 20171222.02 | Win8.1 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171222.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.PostScenarioTest~2FPostUsingContentLengthSemantics_Success(serverUri:%20http:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx))  1/11 | 20180111.01 | Win7 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180111.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.PostScenarioTest~2FPostUsingContentLengthSemantics_Success(serverUri:%20http:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx))  1/19 | 20180119.04 | Win7 | The handle is invalid - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180119.04/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.PostScenarioTest~2FPostUsingContentLengthSemantics_Success(serverUri:%20http:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx))  2/6 | 20180206.04 | Win7 | The handle is in the wrong state for the requested operation - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180206.04/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.PostScenarioTest~2FPostUsingContentLengthSemantics_Success(serverUri:%20https:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx))  2/6 | 20180206.05 | Win7 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180206.05/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.PostScenarioTest~2FPostUsingContentLengthSemantics_Success(serverUri:%20http:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx))
25978	area-System.Diagnostics	Throw ArgumentException for non-absolute path in GetVersionInfo	For issue https://github.com/dotnet/corefx/issues/281    @jkotas PTAL - is this the right fix? The added test is passing locally.   Also CC @morganbr in case there are any related security issues.
25979	area-System.Net	Test failure: System.Net.Sockets.Tests.SendFileTest / SendFile_APM	## Type of failures    ### WhenAllOrAnyFailed timed out after 30000    Failure [20171213.05](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171213.05/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.SendFileTest~2FSendFile_APM(listenAt:%20127.0.0.1,%20sendPreAndPostBuffers:%20False,%20bytesToSend:%20512)):  ```  System.TimeoutException : WhenAllOrAnyFailed timed out after 30000     at System.Threading.Tasks.TaskTimeoutExtensions.<WhenAllOrAnyFailed>d__2.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Sockets.Tests.SendFileTest.<SendFile_APM>d__7.MoveNext() in E:\A\_work\1400\s\corefx\src\System.Net.Sockets\tests\FunctionalTests\SendFile.cs:line 234  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ```    ### Neither client nor server task completed within allowed time    Before `SendFile_APM` test change in https://github.com/dotnet/corefx/commit/779171fea3d9f0b25d4058e281ca05b2b6eec323#diff-479492e701f07787f80f44f18ef076f8 on 2017/11/21    Failures [20171022.02](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171022.02/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.SendFileTest~2FSendFile_APM(listenAt:%20127.0.0.1,%20sendPreAndPostBuffers:%20False,%20bytesToSend:%20512)):  ```  Neither client nor server task completed within allowed time  Expected: True  Actual:   False     at System.Net.Sockets.Tests.SendFileTest.SendFile_APM(IPAddress listenAt, Boolean sendPreAndPostBuffers, Int32 bytesToSend) in /root/corefx-1079212/src/System.Net.Sockets/tests/FunctionalTests/SendFile.cs:line 233  ```    ## History of failures    Day | Build | OS | Error message  -- | -- | -- | --  7/11 | 20170711.04 | OSX10.13 | Neither client nor server task completed within allowed time  9/4 | 20170904.01 | OSX10.12 | Neither client nor server task completed within allowed time  10/22 | 20171022.02 | RedHat69 | Neither client nor server task completed within allowed time - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171022.02/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.SendFileTest~2FSendFile_APM(listenAt:%20127.0.0.1,%20sendPreAndPostBuffers:%20False,%20bytesToSend:%20512))  11/21 | N/A | N/A | Assert changed into TimeoutException in https://github.com/dotnet/corefx/commit/779171fea3d9f0b25d4058e281ca05b2b6eec323#diff-479492e701f07787f80f44f18ef076f8  12/1 | 20171201.03 | Win7 | WhenAllOrAnyFailed timed out after 30000  12/8 | 20171208.01 | Win8.1 | WhenAllOrAnyFailed timed out after 30000  12/10 | 20171210.03 | Win8.1 | WhenAllOrAnyFailed timed out after 30000  12/12 | 20171212.03 | Win10 | WhenAllOrAnyFailed timed out after 30000  12/13 | 20171213.05 | Win7 | WhenAllOrAnyFailed timed out after 30000 - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171213.05/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.SendFileTest~2FSendFile_APM(listenAt:%20127.0.0.1,%20sendPreAndPostBuffers:%20False,%20bytesToSend:%20512))  12/28 | 20171228.01 | Win8.1 | WhenAllOrAnyFailed timed out after 30000 - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171228.01/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.SendFileTest~2FSendFile_APM(listenAt:%20127.0.0.1,%20sendPreAndPostBuffers:%20False,%20bytesToSend:%2012345678))  12/30 | 20171230.02 | Win7 | WhenAllOrAnyFailed timed out after 30000 - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171230.02/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.SendFileTest~2FSendFile_APM(listenAt:%20127.0.0.1,%20sendPreAndPostBuffers:%20False,%20bytesToSend:%2012345678))  1/4 | 20180104.02 | Win10 | WhenAllOrAnyFailed timed out after 30000 - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180104.02/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.SendFileTest~2FSendFile_APM(listenAt:%20127.0.0.1,%20sendPreAndPostBuffers:%20False,%20bytesToSend:%2012345678))  1/23 | 20180123.04 | Win7 | WhenAllOrAnyFailed timed out after 30000 - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180123.04/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.SendFileTest~2FSendFile_APM(listenAt:%20127.0.0.1,%20sendPreAndPostBuffers:%20True,%20bytesToSend:%201024))  3/13 | 20180313.03 | Win8.1 | WhenAllOrAnyFailed timed out after 30000  3/16 | 20180316.01 | Win7 | WhenAllOrAnyFailed timed out after 30000  3/22 | 20180322.01 | Win8.1 | WhenAllOrAnyFailed timed out after 30000  3/22 | 20180322.06 | Win10 | WhenAllOrAnyFailed timed out after 30000    Timeout similar to #25894, started around same time. Sometimes correlated failures (12/28, 12/13).
25980	area-System.Net	Test failure: System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test / GetAsync_AllowedSSLVersion_Succeeds	## Type of failures    ### The operation has been canceled    Failure [20171213.08](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171213.08/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test~2FGetAsync_AllowedSSLVersion_Succeeds(acceptedProtocol:%20Tls12,%20requestOnlyThisProtocol:%20False)):  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The operation has been canceled     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in E:\A\_work\1811\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test.<>c__DisplayClass4_1.<<GetAsync_AllowedSSLVersion_Succeeds>b__0>d.MoveNext() in E:\A\_work\1811\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.SslProtocols.cs:line 119  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass3_0.<CreateServerAsync>b__0(Task t) in E:\A\_work\1811\s\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 67     at System.Threading.Tasks.ContinuationTaskFromTask.InnerInvoke() in E:\A\_work\1993\s\src\mscorlib\src\System\Threading\Tasks\TaskContinuation.cs:line 59     at System.Threading.Tasks.Task.<>c.<.cctor>b__278_1(Object obj) in E:\A\_work\1993\s\src\mscorlib\src\System\Threading\Tasks\Task.cs:line 2480     at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state) in E:\A\_work\1993\s\src\mscorlib\shared\System\Threading\ExecutionContext.cs:line 151     at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) in E:\A\_work\1993\s\src\mscorlib\src\System\Threading\Tasks\Task.cs:line 2440  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test.<GetAsync_AllowedSSLVersion_Succeeds>d__4.MoveNext() in E:\A\_work\1811\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.SslProtocols.cs:line 117  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Threading.Tasks.RendezvousAwaitable`1.GetResult() in E:\A\_work\1811\s\corefx\src\Common\src\System\Threading\Tasks\RendezvousAwaitable.cs:line 62     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() in E:\A\_work\1811\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 856  ```    ### The handle is invalid    Failure [20171120.02](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171120.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test~2FGetAsync_AllowedSSLVersion_Succeeds(acceptedProtocol:%20Tls12,%20requestOnlyThisProtocol:%20False)):  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The handle is invalid     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in E:\A\_work\1456\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test.<>c__DisplayClass4_1.<<GetAsync_AllowedSSLVersion_Succeeds>b__0>d.MoveNext() in E:\A\_work\1456\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.SslProtocols.cs:line 119  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass3_0.<CreateServerAsync>b__0(Task t) in E:\A\_work\1456\s\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 67     at System.Threading.Tasks.ContinuationTaskFromTask.InnerInvoke() in E:\A\_work\1762\s\src\mscorlib\src\System\Threading\Tasks\TaskContinuation.cs:line 59     at System.Threading.Tasks.Task.<>c.<.cctor>b__278_1(Object obj) in E:\A\_work\1762\s\src\mscorlib\src\System\Threading\Tasks\Task.cs:line 2480     at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state) in E:\A\_work\1762\s\src\mscorlib\shared\System\Threading\ExecutionContext.cs:line 151     at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) in E:\A\_work\1762\s\src\mscorlib\src\System\Threading\Tasks\Task.cs:line 2440  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test.<GetAsync_AllowedSSLVersion_Succeeds>d__4.MoveNext() in E:\A\_work\1456\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.SslProtocols.cs:line 117  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Net.Http.WinHttpException.ThrowExceptionUsingLastError() in E:\A\_work\1456\s\corefx\src\Common\src\System\Net\Http\WinHttpException.cs:line 44     at System.Net.Http.WinHttpHandler.SetRequestHandleRedirectionOptions(SafeWinHttpHandle requestHandle) in E:\A\_work\1456\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 1073     at System.Net.Http.WinHttpHandler.SetRequestHandleOptions(WinHttpRequestState state) in E:\A\_work\1456\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 956     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() in E:\A\_work\1456\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 831  ```    ### The handle is in the wrong state for the requested operation    Failure [20171010.01](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171010.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test~2FGetAsync_AllowedSSLVersion_Succeeds(acceptedProtocol:%20Tls,%20requestOnlyThisProtocol:%20False)):  ```  ystem.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The handle is in the wrong state for the requested operation     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test.<>c__DisplayClass4_1.<<GetAsync_AllowedSSLVersion_Succeeds>b__0>d.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass3_0.<CreateServerAsync>b__0(Task t)     at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)     at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test.<GetAsync_AllowedSSLVersion_Succeeds>d__4.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  ----- Inner Stack Trace -----     at System.Net.Http.WinHttpException.ThrowExceptionUsingLastError()     at System.Net.Http.WinHttpHandler.SetRequestHandleOptions(WinHttpRequestState state)     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext()  ```    ## History of failures    Day | Build | OS | Error message  -- | -- | -- | --  5/2 | 20170502.03 | Win7 | System.ComponentModel.Win32Exception : The credentials supplied to the   package were not recognized - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20170502.03/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test~2FGetAsync_AllowedSSLVersion_Succeeds(acceptedProtocol:%20Tls,%20requestOnlyThisProtocol:%20False))  5/10 | 20170510.01 | Win7 | The handle is invalid  5/11 | 20170511.01 | Win7 | The handle is invalid  9/27 | 20170927.01 | Win7 | System.IO.IOException : Authentication failed because the remote party   has closed the transport stream.  9/27 | 20170927.01 | Win7 | The handle is in the wrong state for the requested operation  10/9 | 20171009.04 | Win7 | The operation has been canceled  10/10 | 20171010.01 | Win7 | The handle is in the wrong state for the requested operation - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171010.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test~2FGetAsync_AllowedSSLVersion_Succeeds(acceptedProtocol:%20Tls,%20requestOnlyThisProtocol:%20False))  10/15 | 20171015.02 | Win7 | The operation has been canceled  11/2 | 20171102.06 | Win8.1 | The operation has been canceled  11/7 | 20171107.02 | Win8.1 | The operation has been canceled  11/16 | 20171116.01 | Win8.1 | The operation has been canceled  11/20 | 20171120.02 | Win7 | The handle is invalid - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171120.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test~2FGetAsync_AllowedSSLVersion_Succeeds(acceptedProtocol:%20Tls12,%20requestOnlyThisProtocol:%20False))  12/12 | 20171212.03 | Win7 | The operation has been canceled  12/13 | 20171213.08 | Win7 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171213.08/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test~2FGetAsync_AllowedSSLVersion_Succeeds(acceptedProtocol:%20Tls12,%20requestOnlyThisProtocol:%20False))  1/4 | 20180104.04 | Win7 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180104.04/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test~2FGetAsync_AllowedSSLVersion_Succeeds(acceptedProtocol:%20Tls12,%20requestOnlyThisProtocol:%20False))  1/19 | 20180119.02 | Win7 | The handle is in the wrong state for the requested operation - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180119.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test~2FGetAsync_AllowedSSLVersion_Succeeds(acceptedProtocol:%20Tls,%20requestOnlyThisProtocol:%20False))  1/19 | 20180119.02 | Win7 | The handle is invalid - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180119.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test~2FGetAsync_AllowedSSLVersion_Succeeds(acceptedProtocol:%20Tls11,%20requestOnlyThisProtocol:%20False))  1/19 | 20180119.02 | Win7 | System.IO.IOException: Authentication failed because the remote party has closed the transport stream. - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180119.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test~2FGetAsync_AllowedSSLVersion_Succeeds(acceptedProtocol:%20Tls,%20requestOnlyThisProtocol:%20True))  2/6 | 20180206.04 | Win7 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180206.04/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test~2FGetAsync_AllowedSSLVersion_Succeeds(acceptedProtocol:%20Tls11,%20requestOnlyThisProtocol:%20True))  2/26 | 20180226.04 | Win7 | The handle is invalid - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180226.04/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test~2FGetAsync_AllowedSSLVersion_Succeeds(acceptedProtocol:%20Tls11,%20requestOnlyThisProtocol:%20True))  2/27 | 20180227.02 | Win7 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180227.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test~2FGetAsync_AllowedSSLVersion_Succeeds(acceptedProtocol:%20Tls,%20requestOnlyThisProtocol:%20False))    Similar exceptions / errors as in #25896 and #25902 and #25912    
25981	area-System.Net	Test failure: System.Net.Http.Functional.Tests.ResponseStreamTest / GetStreamAsync_ReadToEnd_Success	## Types of failures    ### The handle is invalid    Failure [20171215.09](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171215.09/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.ResponseStreamTest~2FGetStreamAsync_ReadToEnd_Success(readMode:%202)):  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The handle is invalid     at System.Net.Http.HttpClient.<FinishSendAsyncUnbuffered>d__59.MoveNext() in E:\A\_work\1212\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 489  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.HttpClient.<FinishGetStreamAsync>d__33.MoveNext() in E:\A\_work\1212\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 252  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.ResponseStreamTest.<GetStreamAsync_ReadToEnd_Success>d__2.MoveNext() in E:\A\_work\1212\s\corefx\src\System.Net.Http\tests\FunctionalTests\ResponseStreamTest.cs:line 43  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Net.Http.WinHttpHandler.InternalReceiveResponseHeadersAsync(WinHttpRequestState state) in E:\A\_work\1212\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 1369     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() in E:\A\_work\1212\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 863  ```    ### The operation has been canceled    Failure [20171201.01](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171201.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.ResponseStreamTest~2FGetStreamAsync_ReadToEnd_Success(readMode:%204)):  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The operation has been canceled     at System.Net.Http.HttpClient.<FinishSendAsyncUnbuffered>d__59.MoveNext() in E:\A\_work\327\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 489  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.HttpClient.<FinishGetStreamAsync>d__33.MoveNext() in E:\A\_work\327\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 252  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.ResponseStreamTest.<GetStreamAsync_ReadToEnd_Success>d__2.MoveNext() in E:\A\_work\327\s\corefx\src\System.Net.Http\tests\FunctionalTests\ResponseStreamTest.cs:line 43  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Threading.Tasks.RendezvousAwaitable`1.GetResult() in E:\A\_work\327\s\corefx\src\Common\src\System\Threading\Tasks\RendezvousAwaitable.cs:line 62     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() in E:\A\_work\327\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 858  ```    ## History of failures    Day | Build | OS | Error message  -- | -- | -- | --  9/27 | 20170927.01 | Win7 | The operation has been canceled  10/10 | 20171010.03 | Win7 | The handle is invalid  11/7 | 20171107.04 | Win8.1 | The operation has been canceled  11/13 | 20171112.01 | Win7 | The operation has been canceled  11/16 | 20171116.54 | Win7 | The operation has been canceled  12/1 | 20171201.01 | Win7 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171201.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.ResponseStreamTest~2FGetStreamAsync_ReadToEnd_Success(readMode:%204))  12/12 | 20171212.02 | Win7 | The handle is invalid  12/15 | 20171215.09 | Win7 | The handle is invalid - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171215.09/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.ResponseStreamTest~2FGetStreamAsync_ReadToEnd_Success(readMode:%202))  2/6 | 20180206.04 | Win7 | The operation has been canceled - only in [catastrophic failure logs](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180206.04/workItem/System.Net.Http.Functional.Tests/wilogs)  2/7 | 20180207.02 | Win7 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180207.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.ResponseStreamTest~2FGetStreamAsync_ReadToEnd_Success(readMode:%202))  2/26 | 20180226.02 | Win10 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180226.02/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.ResponseStreamTest~2FGetStreamAsync_ReadToEnd_Success(readMode:%201))  3/1 | 20180301.06 | Win10 | The operation has been canceled  3/6 | 20180306.02 | Win10 | The operation has been canceled  3/8 | 20180308.06 | Win8.1 | The operation has been canceled    Similar exceptions / errors as in #25896 and #25902 and #25912 
25982	area-System.Security	Make GeneralizedTime correctly read down to the tick	TimeSpan.From* rounds to the millisecond, but the writer is 10000x as precise,  so make the reader be as precise as the writer.    For future work around cryptographic timestamps the microseconds and  hundred-nanoseconds might be relevant.
25983	area-System.Net	Test failure: System.Net.Http.Functional.Tests.HttpClientHandler_DefaultProxyCredentials_Test / ProxyExplicitlyProvided_DefaultCredentials_Ignored	## Types of failures    ### The operation has been canceled    Failure [20171215.05](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171215.05/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_DefaultProxyCredentials_Test~2FProxyExplicitlyProvided_DefaultCredentials_Ignored):  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The operation has been canceled     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext() in E:\A\_work\1955\s\corefx\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 464  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.LoopbackGetRequestHttpProxy.<StartAsync>d__2.MoveNext() in E:\A\_work\1955\s\corefx\src\System.Net.Http\tests\FunctionalTests\LoopbackGetRequestHttpProxy.cs:line 100  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Http.Functional.Tests.HttpClientHandler_DefaultProxyCredentials_Test.<ProxyExplicitlyProvided_DefaultCredentials_Ignored>d__2.MoveNext() in E:\A\_work\1955\s\corefx\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.DefaultProxyCredentials.cs:line 69  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Threading.Tasks.RendezvousAwaitable`1.GetResult() in E:\A\_work\1955\s\corefx\src\Common\src\System\Threading\Tasks\RendezvousAwaitable.cs:line 62     at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext() in E:\A\_work\1955\s\corefx\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 858  ```    ## History of failures    Previously, the test was failing (on .NET Core) on different error: https://github.com/dotnet/corefx/issues/23702#issuecomment-352601673    Day | Build | OS | Error message  -- | -- | -- | --  12/15 | 20171215.05 | Win8.1 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171215.05/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_DefaultProxyCredentials_Test~2FProxyExplicitlyProvided_DefaultCredentials_Ignored)  12/16 | 20171216.01 | Win8.1 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171216.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.ManagedHandler_HttpClientHandler_DefaultProxyCredentials_Test~2FProxyExplicitlyProvided_DefaultCredentials_Ignored) (ManagedHandler)  2/9 | 20180209.05 | Win8.1 | The operation has been canceled - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180209.05/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_DefaultProxyCredentials_Test~2FProxyExplicitlyProvided_DefaultCredentials_Ignored)    One of the failures is on MangedHandler - most likely a test issue.
25984	area-System.Net	Test failure: System.Net.Tests.SyncWebClientTest / OpenWrite_Success	## Type of failures    ### CurlException: SSL connect error    Build 20171210.01 (Fedora26):  ```  System.Net.WebException : An error occurred while sending the request. SSL connect error  ---- System.Net.Http.HttpRequestException : An error occurred while sending the request.  -------- System.Net.Http.CurlException : SSL connect error  at System.Net.HttpWebRequest.GetResponse() in /root/corefx-1210471/src/System.Net.Requests/src/System/Net/HttpWebRequest.cs:line 1014  at System.Net.WebClient.GetWebResponse(WebRequest request) in /root/corefx-1210471/src/System.Net.WebClient/src/System/Net/WebClient.cs:line 249  at System.Net.WebClient.WebClientWriteStream.Dispose(Boolean disposing) in /root/corefx-1210471/src/System.Net.WebClient/src/System/Net/WebClient.cs:line 1977  at System.IO.Stream.Close() in /root/coreclr/src/mscorlib/src/System/IO/Stream.cs:line 240  at System.Net.Tests.WebClientTestBase.<OpenWrite_Success>d__19.MoveNext() in /root/corefx-1210471/src/System.Net.WebClient/tests/WebClientTest.cs:line 631  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----  at System.Net.Http.HttpClient.<FinishSendAsyncUnbuffered>d__59.MoveNext() in /root/corefx-1210471/src/System.Net.Http/src/System/Net/Http/HttpClient.cs:line 489  --- End of stack trace from previous location where exception was thrown ---  at System.Net.HttpWebRequest.<SendRequest>d__194.MoveNext() in /root/corefx-1210471/src/System.Net.Requests/src/System/Net/HttpWebRequest.cs:line 1209  --- End of stack trace from previous location where exception was thrown ---  at System.Net.HttpWebRequest.GetResponse() in /root/corefx-1210471/src/System.Net.Requests/src/System/Net/HttpWebRequest.cs:line 1009  ----- Inner Stack Trace -----  at System.Net.Http.CurlHandler.ThrowIfCURLEError(CURLcode error) in /root/corefx-1210471/src/System.Net.Http/src/System/Net/Http/Unix/CurlHandler.cs:line 663  at System.Net.Http.CurlHandler.MultiAgent.FinishRequest(StrongToWeakReference`1 easyWrapper, CURLcode messageResult) in /root/corefx-1210471/src/System.Net.Http/src/System/Net/Http/Unix/CurlHandler.MultiAgent.cs:line 883  ```    ## History of failures    Day | Build | OS | Error message  -- | -- | -- | --  9/3 | 20170903.01 | Ubuntu17.04 | System.Net.WebException : The operation has timed out.  10/9 | 20171009.04 | Fedora25 | CurlException: SSL connect error  10/24 | 20171024.02 | Fedora26 | CurlException: SSL connect error  11/3 | 20171103.01 | Fedora26 | CurlException: SSL connect error  11/4 | 20171104.04 | Fedora26 | CurlException: SSL connect error  11/8 | 20171108.02 | Fedora25 | CurlException: SSL connect error  11/16 | 20171116.51 | Fedora26 | CurlException: SSL connect error  12/10 | 20171210.01 | Fedora26 | CurlException: SSL connect error  
25985	area-System.Security	Enable ECDH cipher suites as preferred cipher for key agreement.	cc @bartonjs Do you know of any test servers for TLS that has tools to see which cipher was chosen during handshake for validating this change?     @morganbr How did you find this bug, if you used some test app, can you share it?    addresses #24648     cc @karelz Should a separate issue be opened for tracking to port this to 2.0?
25986	area-Meta	Replace HashHelpers.Combine with HashCode.Combine 	`System.HashCode` was recently added in order to make high-quality fast hashing easy. We should replace usage of `HashHelpers.Combine`, an internal low-quality hash combiner with `HashCode.Combine`. It should lead to better distribution in dictionaries and the hashing should be nearly as fast.    See: https://github.com/dotnet/coreclr/issues/15508
25987	area-Meta	Replace HashHelpers.Combine with HashCode.Combine	Fixes #25986    All instances of HashHelpers.Combine and NumericsHelpers.CombineHash have been replaced. Copied code has also been replaced as far as grep is concerned. The helpers have been deleted.
25988	area-System.Net	NTLM authentication HttpClient in Core	"I am trying to use the HttpClient to access a REST service which requires NTLM authentication. However I keep getting a 401 Unauthorized. My code looks like this    ```c#      private static void Main()      {          var uri = new Uri(""http://localhost:15001"");          var credentialsCache = new CredentialCache { { uri, ""NTLM"", CredentialCache.DefaultNetworkCredentials } };          var handler = new HttpClientHandler { Credentials = credentialsCache };          var httpClient = new HttpClient(handler) { BaseAddress = uri, Timeout = new TimeSpan(0, 0, 10) };          httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(""application/json""));          var response = httpClient.GetAsync(""api/MyMethod"").Result;      }  ```    My target framework is netcoreapp2.0. If I change to net461, it will work. Not sure what I am doing wrong?    [EDIT] Add C# syntax highlighting by @karelz"
25989	area-System.Memory	Span: BinarySearch add Array baseline perf tests and remove TODO comments	Some leftover work from https://github.com/dotnet/corefx/pull/25777    Added BinarySearch perf tests using `Array.BinarySearch` for comparison as suggested by @ahsonkhan CC: @KrzysztofCwalina     From this it can be seen there are significant performance improvements when compare is fast i.e. for `int`, this is due to the improvements in the actual binary search code for Span.     Test Name                                                                                                 | Metric   | Iterations |    AVERAGE |    STDEV.S |        MIN |      MAX  :--------------------------------------------------------------------------------------------------------- |:-------- |:----------:| ----------:| ----------:| ----------:| --------:   ArrayBinarySearch_Int_FirstIndex(size: 1)                      | Duration |    100     |      1.410 |      0.025 |      1.310 |    1.478   ArrayBinarySearch_Int_FirstIndex(size: 10)                     | Duration |    100     |      1.780 |      0.042 |      1.681 |    1.889   ArrayBinarySearch_Int_FirstIndex(size: 100)                    | Duration |    100     |      2.083 |      0.044 |      2.014 |    2.177   ArrayBinarySearch_Int_FirstIndex(size: 1000)                   | Duration |    100     |      2.627 |      0.244 |      2.424 |    4.606   ArrayBinarySearch_Int_LastIndex(size: 1)                       | Duration |    100     |      1.361 |      0.039 |      1.308 |    1.491   ArrayBinarySearch_Int_LastIndex(size: 10)                      | Duration |    100     |      1.983 |      0.051 |      1.901 |    2.115   ArrayBinarySearch_Int_LastIndex(size: 100)                     | Duration |    100     |      2.730 |      0.061 |      2.586 |    2.857   ArrayBinarySearch_Int_LastIndex(size: 1000)                    | Duration |    100     |      3.129 |      0.062 |      2.955 |    3.246   ArrayBinarySearch_Int_MiddleIndex(size: 1)                     | Duration |    100     |      1.372 |      0.042 |      1.320 |    1.530   ArrayBinarySearch_Int_MiddleIndex(size: 10)                    | Duration |    100     |      1.362 |      0.031 |      1.318 |    1.455   ArrayBinarySearch_Int_MiddleIndex(size: 100)                   | Duration |    100     |      1.362 |      0.032 |      1.322 |    1.464   ArrayBinarySearch_Int_MiddleIndex(size: 1000)                  | Duration |    100     |      1.290 |      0.300 |      0.000 |    1.490   ArrayBinarySearch_Int_NotFoundAfter(size: 1)                   | Duration |    100     |      1.453 |      0.033 |      1.364 |    1.534   ArrayBinarySearch_Int_NotFoundAfter(size: 10)                  | Duration |    100     |      1.980 |      0.033 |      1.908 |    2.066   ArrayBinarySearch_Int_NotFoundAfter(size: 100)                 | Duration |    100     |      2.483 |      0.057 |      2.366 |    2.604   ArrayBinarySearch_Int_NotFoundAfter(size: 1000)                | Duration |    100     |      3.007 |      0.070 |      2.873 |    3.353   ArrayBinarySearch_Int_NotFoundBefore(size: 1)                  | Duration |    100     |      1.421 |      0.038 |      1.336 |    1.488   ArrayBinarySearch_Int_NotFoundBefore(size: 10)                 | Duration |    100     |      1.737 |      0.055 |      1.615 |    2.067   ArrayBinarySearch_Int_NotFoundBefore(size: 100)                | Duration |    100     |      2.140 |      0.059 |      2.032 |    2.274   ArrayBinarySearch_Int_NotFoundBefore(size: 1000)               | Duration |    100     |      2.558 |      0.058 |      2.450 |    2.722   ArrayBinarySearch_String_FirstIndex(size: 1)                   | Duration |    100     |     24.152 |      0.279 |     23.505 |   24.870   ArrayBinarySearch_String_FirstIndex(size: 10)                  | Duration |    100     |     67.717 |      0.636 |     66.251 |   69.698   ArrayBinarySearch_String_FirstIndex(size: 100)                 | Duration |     79     |    127.637 |      1.291 |    125.175 |  132.090   ArrayBinarySearch_String_FirstIndex(size: 1000)                | Duration |     54     |    187.029 |      2.363 |    183.460 |  197.605   ArrayBinarySearch_String_LastIndex(size: 1)                    | Duration |    100     |     24.109 |      0.260 |     23.394 |   24.659   ArrayBinarySearch_String_LastIndex(size: 10)                   | Duration |    100     |     90.462 |      0.870 |     88.901 |   95.927   ArrayBinarySearch_String_LastIndex(size: 100)                  | Duration |     67     |    149.617 |      1.113 |    147.428 |  152.731   ArrayBinarySearch_String_LastIndex(size: 1000)                 | Duration |     48     |    211.709 |      2.598 |    207.339 |  224.370   ArrayBinarySearch_String_MiddleIndex(size: 1)                  | Duration |    100     |     24.275 |      0.237 |     23.618 |   24.814   ArrayBinarySearch_String_MiddleIndex(size: 10)                 | Duration |    100     |     24.101 |      0.253 |     23.468 |   24.974   ArrayBinarySearch_String_MiddleIndex(size: 100)                | Duration |    100     |     24.148 |      0.282 |     23.543 |   24.911   ArrayBinarySearch_String_MiddleIndex(size: 1000)               | Duration |    100     |     24.288 |      0.355 |     23.565 |   25.233   ArrayBinarySearch_String_NotFoundAfter(size: 1)                | Duration |    100     |     24.421 |      0.621 |     23.702 |   29.705   ArrayBinarySearch_String_NotFoundAfter(size: 10)               | Duration |    100     |     77.455 |      0.670 |     76.127 |   79.343   ArrayBinarySearch_String_NotFoundAfter(size: 100)              | Duration |     80     |    126.242 |      0.947 |    124.447 |  129.343   ArrayBinarySearch_String_NotFoundAfter(size: 1000)             | Duration |     61     |    164.339 |      1.101 |    161.890 |  167.152   ArrayBinarySearch_String_NotFoundBefore(size: 1)               | Duration |    100     |     12.681 |      0.198 |     12.326 |   13.212   ArrayBinarySearch_String_NotFoundBefore(size: 10)              | Duration |    100     |     35.213 |      0.373 |     34.631 |   36.519   ArrayBinarySearch_String_NotFoundBefore(size: 100)             | Duration |    100     |     62.672 |      0.991 |     60.915 |   67.299   ArrayBinarySearch_String_NotFoundBefore(size: 1000)            | Duration |    100     |     91.516 |      0.746 |     89.792 |   93.891   SpanBinarySearch_Int_FirstIndex(size: 1)                       | Duration |    100     |      0.301 |      0.005 |      0.294 |    0.318   SpanBinarySearch_Int_FirstIndex(size: 10)                      | Duration |    100     |      0.674 |      0.023 |      0.623 |    0.744   SpanBinarySearch_Int_FirstIndex(size: 100)                     | Duration |    100     |      1.046 |      0.046 |      0.984 |    1.152   SpanBinarySearch_Int_FirstIndex(size: 1000)                    | Duration |    100     |      1.505 |      0.052 |      1.386 |    1.603   SpanBinarySearch_Int_LastIndex(size: 1)                        | Duration |    100     |      0.304 |      0.009 |      0.294 |    0.334   SpanBinarySearch_Int_LastIndex(size: 10)                       | Duration |    100     |      0.816 |      0.025 |      0.779 |    0.891   SpanBinarySearch_Int_LastIndex(size: 100)                      | Duration |    100     |      1.356 |      0.034 |      1.281 |    1.426   SpanBinarySearch_Int_LastIndex(size: 1000)                     | Duration |    100     |      1.885 |      0.051 |      1.782 |    1.969   SpanBinarySearch_Int_MiddleIndex(size: 1)                      | Duration |    100     |      0.294 |      0.012 |      0.278 |    0.340   SpanBinarySearch_Int_MiddleIndex(size: 10)                     | Duration |    100     |      0.302 |      0.005 |      0.295 |    0.329   SpanBinarySearch_Int_MiddleIndex(size: 100)                    | Duration |    100     |      0.294 |      0.013 |      0.278 |    0.334   SpanBinarySearch_Int_MiddleIndex(size: 1000)                   | Duration |    100     |      0.297 |      0.016 |      0.278 |    0.385   SpanBinarySearch_Int_NotFoundAfter(size: 1)                    | Duration |    100     |      0.334 |      0.012 |      0.323 |    0.404   SpanBinarySearch_Int_NotFoundAfter(size: 10)                   | Duration |    100     |      0.962 |      0.057 |      0.918 |    1.455   SpanBinarySearch_Int_NotFoundAfter(size: 100)                  | Duration |    100     |      1.383 |      0.031 |      1.326 |    1.477   SpanBinarySearch_Int_NotFoundAfter(size: 1000)                 | Duration |    100     |      1.908 |      0.049 |      1.817 |    2.076   SpanBinarySearch_Int_NotFoundBefore(size: 1)                   | Duration |    100     |      0.298 |      0.009 |      0.295 |    0.383   SpanBinarySearch_Int_NotFoundBefore(size: 10)                  | Duration |    100     |      0.573 |      0.013 |      0.561 |    0.647   SpanBinarySearch_Int_NotFoundBefore(size: 100)                 | Duration |    100     |      0.920 |      0.016 |      0.864 |    0.968   SpanBinarySearch_Int_NotFoundBefore(size: 1000)                | Duration |    100     |      1.265 |      0.034 |      1.197 |    1.339   SpanBinarySearch_String_FirstIndex(size: 1)                    | Duration |    100     |     24.081 |      0.314 |     23.481 |   24.939   SpanBinarySearch_String_FirstIndex(size: 10)                   | Duration |    100     |     67.620 |      0.831 |     65.922 |   72.061   SpanBinarySearch_String_FirstIndex(size: 100)                  | Duration |     78     |    129.594 |      1.312 |    127.684 |  136.034   SpanBinarySearch_String_FirstIndex(size: 1000)                 | Duration |     55     |    183.044 |      1.672 |    179.561 |  187.654   SpanBinarySearch_String_LastIndex(size: 1)                     | Duration |    100     |     24.069 |      0.306 |     23.358 |   24.830   SpanBinarySearch_String_LastIndex(size: 10)                    | Duration |    100     |     88.475 |      0.671 |     87.047 |   90.305   SpanBinarySearch_String_LastIndex(size: 100)                   | Duration |     67     |    149.397 |      1.759 |    147.435 |  158.016   SpanBinarySearch_String_LastIndex(size: 1000)                  | Duration |     49     |    204.532 |      1.352 |    201.917 |  207.409   SpanBinarySearch_String_MiddleIndex(size: 1)                   | Duration |    100     |     24.192 |      0.384 |     23.390 |   25.623   SpanBinarySearch_String_MiddleIndex(size: 10)                  | Duration |    100     |     24.185 |      0.254 |     23.629 |   24.838   SpanBinarySearch_String_MiddleIndex(size: 100)                 | Duration |    100     |     24.245 |      0.336 |     23.557 |   25.424   SpanBinarySearch_String_MiddleIndex(size: 1000)                | Duration |    100     |     24.136 |      0.288 |     23.532 |   25.513   SpanBinarySearch_String_NotFoundAfter(size: 1)                 | Duration |    100     |     24.172 |      0.286 |     23.562 |   24.985   SpanBinarySearch_String_NotFoundAfter(size: 10)                | Duration |    100     |     76.572 |      0.599 |     75.079 |   78.241   SpanBinarySearch_String_NotFoundAfter(size: 100)               | Duration |     82     |    123.173 |      1.227 |    121.331 |  129.054   SpanBinarySearch_String_NotFoundAfter(size: 1000)              | Duration |     63     |    160.362 |      1.506 |    157.191 |  165.588   SpanBinarySearch_String_NotFoundBefore(size: 1)                | Duration |    100     |     12.283 |      0.190 |     11.854 |   12.727   SpanBinarySearch_String_NotFoundBefore(size: 10)               | Duration |    100     |     32.589 |      0.493 |     31.624 |   35.652   SpanBinarySearch_String_NotFoundBefore(size: 100)              | Duration |    100     |     64.224 |      0.925 |     62.709 |   66.379   SpanBinarySearch_String_NotFoundBefore(size: 1000)             | Duration |    100     |     88.981 |      0.749 |     87.475 |   91.942   
25990	area-System.Diagnostics	Process info standard input encoding	Implement `ProcessStartInfo.StandardInputEncoding` property. Fix #20497
25991	area-Infrastructure	Invalid setting csharp_new_line_within_query_expression_clauses in .editorconfig	I used .editorconfig from corefx in our project. Noticed that .editorconfig file has one invalid setting that Roslyn doesn't support csharp_new_line_within_query_expression_clauses.  But Roslyn does support csharp_new_line_between_query_expression_clauses and it's missing from .editorconfig.    Also noticed that at least following settings are missing as well    csharp_indent_case_contents_when_block    dotnet_style_prefer_inferred_tuple_names    dotnet_style_prefer_inferred_anonymous_type_member_names    dotnet_style_require_accessibility_modifiers    dotnet_style_prefer_auto_properties    csharp_style_deconstructed_variable_declaration    dotnet_style_prefer_is_null_check_over_reference_equality_method  
25993	area-System.Net	"Ensure System.Uri normalizes Unicode hosts when ""file://"" scheme is present"	"When parsing ""file:"" IRIs containing Unicode, the host and path must be normalized and the results copied over to the canonical IRI string. This fix ensures that always happens.    The issue occurs when three things align:   The URI has the scheme ""file"", and is followed two, or by four or more slashes   The URI begins with a symbol that is unreserved for URIs, but is reserved for DNS names.   The URI contains Unicode characters    This occurs because of an oversight in the normalization process. The strings that represent the URI are reduced to just the scheme, and are then built up to the canonical version based on the rules associated with that scheme, and on the contents of the remainder of the URI. For example the URI. http://abcd#123 Is reduced to the string http://, and the rules associated with http build the string up to the canonical version, http://abcd. In most cases, the code for file URIs with more than one slash is processed by the same code path that processes DNS IRIs. However, in the case that the authority was not valid for DNS IRIs (such as those beginning with an underscore), the processing would fall through to the code for processing UNC hosts. While UNC hosts are allowed to have Unicode, the code path failed to normalize the Unicode from the URI.    This process resulted in an invalid internal state for the URI. The internal string representing the canonical URI would only contain the scheme name, but the integer storing the index of the end of the authority would be set as it was before normalization. Later, a method would try to loop over the internal string until the end of the authority, and would cause an IndexOutOfRange exception.    This issue was reported in internal bug 95292."
25994	area-System.IO	Tests For GetFullPath(string path,string basePath)	Fixes #25535   Implementation PR:- https://github.com/dotnet/coreclr/pull/15579
25996	area-Microsoft.CSharp	Remove ErrorType and dependant paths from Microsoft.CSharp	* Remove `ErrAppendMethodParentSym`'s `substMethTyParams` parameter    Only ever set to null.    * Remove `ErrAppendMethodParentSym`    Just calls into `ErrAppendParentSym` now, so just use that.    * Remove `UserStringBuilder` handling of `ErrorType`    `ErrorType` can never reach here.    * Remove `MethodOrPropertySymbol.errExpImpl`    Only ever set to null.    * Don't replace unfixed type parameters with `ErrorType`    Just used to test for presence and compare counts. We can do that with the null. They never escape further.    * Don't use `ErrorType` as dummy type in `ExprMemberGroup`    If left null it will still work as a dummy type for conversions, and still won't be iterated past in the method iterator.    * Remove `ErrorType`    Now never created.    This makes a lot of unreachable paths more obviously unreachable:    * Remove `CType.SetErrors()`, `InitFromParent()` & `HasErrors()`    `HasErrors` is always false.    * Remove path for `CreateBinopForPredefMethodCall` not finding method.    Can never happen in running dynamic code.    * Remove path for `CreateUnaryOpForPredefMethodCall` not finding method.    Can never happen in running dynamic code.    * Remove path for `expr.Type == null` in `CantConvert`    Can only happen with `ExprList`, and we never try to convert those. Change to returning exception so calls are obviously an exit point.    * Remove path in `mustCastCore` for null `dest`    `dest` can never be null    The paths by which `dest` is set are as follows:    ```  mustCastCore      GenerateAssignmentConversion (op2.Type)          BindAssignment (op2)              RuntimeBinder.BindAssigment (creates in CreateArgumentEXPR)      BindUDConversionCore (pTypeDestination)          BindUDConversionCore (pTypeDestination)              bindUserDefinedConversion (typeDst) returns false if this is null      bindUserDefinedConversion (as above)      BindUDConversionCore (as above)      mustCast          BindEnumUnaOp (creates type)          BindStandardUnaryOperator (from uofs.GetType(), can never be null)          BindLiftedEnumArithmeticBinOp (creates type)          BindLiftedUDBinop (creates type)          BindLiftedUDUnop (creates type)          BindNonliftedIncOp (arg.Type)              BindIncOp                  BindStandardUnaryOperator                      BindStandardUnaryOperator (recurses with cast)                      BindUnaryOperation (creates in CreateArgumentEXPR)          BindNubConversion (nubDst, selected after type check)          BindEnumBinOp (creates)          BindLiftedStandardBinOp (creates)          BindLiftedStandardUnop (selected after type check)          BindBoolBitwiseOp (creates)          mustCastInUncheckedContext              BindEnumUnaOp (selected after type check)              BindLiftedEnumArithmeticBinOp (creates)              LScalar (already accessed member, so would throw)          BindImplicitConversion (returnType, cannot be null)          mustCast (overload)              bindUserDefinedConversion (above)              BindNubConversion (creates)              BindLiftedUDUnop (above)                  bindUserDefinedConversion (creates)              BindLiftedUDBinop (creates)              BindLiftedIncOp (selected based on this parameter)              BindStandardUnaryOperator (above)              bindUserDefinedConversion (creates)              LiftArgument (within check on type)              CreateLocal (creates)              BindExplicitConversion (creates)  ```    * Remove `Expr.SetError`    Only called if another `Expr` has it set, and hence never.    * Remove `Expr.IsOK`    Always true    * Remove `EXPRExtensions.isCONSTANT_OK`    Without `IsOK` to check this can just be a type check.    * Remove `BindCallFailedOverloadResolution`    `BindMethodGroupToArguments` will call `BindToMethod`, which will call `CreateCall` which calls the `ExprCall` constructor, so outside of paths that throw it can never not return an `ExprCall`, so the null check will never succeed.
25997	area-System.Net	HttpClient/HttpWebRequest gives error 407 (ProxyAuthenticationRequired) when used with a proxy server that requires authentication	"When making a HTTP request with either HttpClient or HttpWebRequest via a proxy server that requires authentication the result is always 407 (ProxyAuthenticationRequired). Compiling the same code with .NET framework does not give an error. Code to reproduce the issue:    ```c#      var credentials = new NetworkCredential(""username"", ""password"");      var proxyURI = new Uri(""http://xxx.xxx.xxx.xxx:80"");      WebProxy proxy = new WebProxy(proxyURI, true) { UseDefaultCredentials = false, Credentials = credentials };        HttpWebRequest req = HttpWebRequest.Create(new Uri(""http://bbc.co.uk"")) as HttpWebRequest;      req.UseDefaultCredentials = false;      req.Proxy = proxy;        using (WebResponse response = req.GetResponse())      {          using (StreamReader responseStream = new StreamReader(response.GetResponseStream()))          {               string htmlData = responseStream.ReadToEnd();          }      }  ```    The same error is given if we make the request via `HttpClient` and `HttpWebRequest`. It also happens if you create a custom proxy server by implementing `IWebProxy`. Verified the bug on Windows 10 using VS2017 using .NET Core 1.0, 1.1 & 2.0. Verified the exact same code works fine on the same environment using .NET Framework 4.6.1.    [EDIT] Add C# syntax highlighting by @karelz"
25998	area-Infrastructure	Test failures in under `ru` locale, Win10: System.Drawing.Common and other	"Machine:  ```  OS Name:                   ?????????? Windows 10 Pro  OS Version:                10.0.16299 N/A Build 16299  OS Manufacturer:           Microsoft Corporation  OS Configuration:          Standalone Workstation  OS Build Type:             Multiprocessor Free  System Type:               x64-based PC  System Locale:             ru;Russian  Input Locale:              en-us;English (United States)  ```    **IsDirectPrintingSupported_ImageFormatSupported_ReturnsExpected(imageFormat: Png)**  ```        <test name=""System.Drawing.Printing.Tests.PrinterSettingsTests.IsDirectPrintingSupported_ImageFormatSupported_ReturnsExpected(imageFormat: Png)"" type=""System.Drawing.Printing.Tests.PrinterSettingsTests"" method=""IsDirectPrintingSupported_ImageFormatSupported_ReturnsExpected"" time=""0.0627535"" result=""Fail"">          <failure exception-type=""Xunit.Sdk.EqualException"">            <message><![CDATA[Assert.Equal() Failure\r\nExpected: True\r\nActual:   False]]></message>            <stack-trace><![CDATA[   at System.Drawing.Printing.Tests.PrinterSettingsTests.IsDirectPrintingSupported_ImageFormatSupported_ReturnsExpected(ImageFormat imageFormat) in C:\Users\art\dev\corefx\src\System.Drawing.Common\tests\Printing\PrinterSettingsTests.cs:line 399]]></stack-trace>          </failure>        </test>  ```    **PrinterSettingsTests.SupportsColor_ReturnsExpected**  ```        <test name=""System.Drawing.Printing.Tests.PrinterSettingsTests.SupportsColor_ReturnsExpected"" type=""System.Drawing.Printing.Tests.PrinterSettingsTests"" method=""SupportsColor_ReturnsExpected"" time=""0.0724562"" result=""Fail"">          <failure exception-type=""Xunit.Sdk.EqualException"">            <message><![CDATA[Assert.Equal() Failure\r\nExpected: True\r\nActual:   False]]></message>            <stack-trace><![CDATA[   at System.Drawing.Printing.Tests.PrinterSettingsTests.SupportsColor_ReturnsExpected() in C:\Users\art\dev\corefx\src\System.Drawing.Common\tests\Printing\PrinterSettingsTests.cs:line 439]]></stack-trace>          </failure>        </test>  ```    **ToLogFont_Invoke_ReturnsExpected**  ```        <test name=""System.Drawing.Tests.FontTests.ToLogFont_Invoke_ReturnsExpected(fontStyle: Bold, Italic, Strikeout, gdiCharSet: 1, gdiVerticalFont: True, expectedNamePrefix: \&quot;@\&quot;, expectedWeight: 700)"" type=""System.Drawing.Tests.FontTests"" method=""ToLogFont_Invoke_ReturnsExpected"" time=""0.0122065"" result=""Fail"">          <failure exception-type=""Xunit.Sdk.EqualException"">            <message><![CDATA[Assert.Equal() Failure\r\nExpected: 1\r\nActual:   204]]></message>            <stack-trace><![CDATA[   at System.Drawing.Tests.FontTests.ToLogFont_Invoke_ReturnsExpected(FontStyle fontStyle, Byte gdiCharSet, Boolean gdiVerticalFont, String expectedNamePrefix, Int32 expectedWeight) in C:\Users\art\dev\corefx\src\System.Drawing.Common\tests\FontTests.cs:line 733]]></stack-trace>          </failure>        </test>        <test name=""System.Drawing.Tests.FontTests.ToLogFont_Invoke_ReturnsExpected(fontStyle: Regular, gdiCharSet: 0, gdiVerticalFont: False, expectedNamePrefix: \&quot;\&quot;, expectedWeight: 400)"" type=""System.Drawing.Tests.FontTests"" method=""ToLogFont_Invoke_ReturnsExpected"" time=""0.0014526"" result=""Fail"">          <failure exception-type=""Xunit.Sdk.EqualException"">            <message><![CDATA[Assert.Equal() Failure\r\nExpected: 0\r\nActual:   204]]></message>            <stack-trace><![CDATA[   at System.Drawing.Tests.FontTests.ToLogFont_Invoke_ReturnsExpected(FontStyle fontStyle, Byte gdiCharSet, Boolean gdiVerticalFont, String expectedNamePrefix, Int32 expectedWeight) in C:\Users\art\dev\corefx\src\System.Drawing.Common\tests\FontTests.cs:line 733]]></stack-trace>          </failure>        </test>        <test name=""System.Drawing.Tests.FontTests.ToLogFont_Invoke_ReturnsExpected(fontStyle: Regular, gdiCharSet: 10, gdiVerticalFont: False, expectedNamePrefix: \&quot;\&quot;, expectedWeight: 400)"" type=""System.Drawing.Tests.FontTests"" method=""ToLogFont_Invoke_ReturnsExpected"" time=""0.0013763"" result=""Fail"">          <failure exception-type=""Xunit.Sdk.EqualException"">            <message><![CDATA[Assert.Equal() Failure\r\nExpected: 10\r\nActual:   204]]></message>            <stack-trace><![CDATA[   at System.Drawing.Tests.FontTests.ToLogFont_Invoke_ReturnsExpected(FontStyle fontStyle, Byte gdiCharSet, Boolean gdiVerticalFont, String expectedNamePrefix, Int32 expectedWeight) in C:\Users\art\dev\corefx\src\System.Drawing.Common\tests\FontTests.cs:line 733]]></stack-trace>          </failure>        </test>  ```    **ToLogFont_InvokeGraphics_ReturnsExpected**  ```        <test name=""System.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected(textRenderingHint: SystemDefault, expectedQuality: 0)"" type=""System.Drawing.Tests.FontTests"" method=""ToLogFont_InvokeGraphics_ReturnsExpected"" time=""0.0028333"" result=""Fail"">          <failure exception-type=""Xunit.Sdk.EqualException"">            <message><![CDATA[Assert.Equal() Failure\r\nExpected: 1\r\nActual:   204]]></message>            <stack-trace><![CDATA[   at System.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected(TextRenderingHint textRenderingHint, Int32 expectedQuality) in C:\Users\art\dev\corefx\src\System.Drawing.Common\tests\FontTests.cs:line 770]]></stack-trace>          </failure>        </test>        <test name=""System.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected(textRenderingHint: AntiAlias, expectedQuality: 3)"" type=""System.Drawing.Tests.FontTests"" method=""ToLogFont_InvokeGraphics_ReturnsExpected"" time=""0.0015959"" result=""Fail"">          <failure exception-type=""Xunit.Sdk.EqualException"">            <message><![CDATA[Assert.Equal() Failure\r\nExpected: 1\r\nActual:   204]]></message>            <stack-trace><![CDATA[   at System.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected(TextRenderingHint textRenderingHint, Int32 expectedQuality) in C:\Users\art\dev\corefx\src\System.Drawing.Common\tests\FontTests.cs:line 770]]></stack-trace>          </failure>        </test>        <test name=""System.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected(textRenderingHint: AntiAliasGridFit, expectedQuality: 3)"" type=""System.Drawing.Tests.FontTests"" method=""ToLogFont_InvokeGraphics_ReturnsExpected"" time=""0.001564"" result=""Fail"">          <failure exception-type=""Xunit.Sdk.EqualException"">            <message><![CDATA[Assert.Equal() Failure\r\nExpected: 1\r\nActual:   204]]></message>            <stack-trace><![CDATA[   at System.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected(TextRenderingHint textRenderingHint, Int32 expectedQuality) in C:\Users\art\dev\corefx\src\System.Drawing.Common\tests\FontTests.cs:line 770]]></stack-trace>          </failure>        </test>        <test name=""System.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected(textRenderingHint: SingleBitPerPixel, expectedQuality: 3)"" type=""System.Drawing.Tests.FontTests"" method=""ToLogFont_InvokeGraphics_ReturnsExpected"" time=""0.0016513"" result=""Fail"">          <failure exception-type=""Xunit.Sdk.EqualException"">            <message><![CDATA[Assert.Equal() Failure\r\nExpected: 1\r\nActual:   204]]></message>            <stack-trace><![CDATA[   at System.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected(TextRenderingHint textRenderingHint, Int32 expectedQuality) in C:\Users\art\dev\corefx\src\System.Drawing.Common\tests\FontTests.cs:line 770]]></stack-trace>          </failure>        </test>        <test name=""System.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected(textRenderingHint: SingleBitPerPixelGridFit, expectedQuality: 3)"" type=""System.Drawing.Tests.FontTests"" method=""ToLogFont_InvokeGraphics_ReturnsExpected"" time=""0.0022802"" result=""Fail"">          <failure exception-type=""Xunit.Sdk.EqualException"">            <message><![CDATA[Assert.Equal() Failure\r\nExpected: 1\r\nActual:   204]]></message>            <stack-trace><![CDATA[   at System.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected(TextRenderingHint textRenderingHint, Int32 expectedQuality) in C:\Users\art\dev\corefx\src\System.Drawing.Common\tests\FontTests.cs:line 770]]></stack-trace>          </failure>        </test>        <test name=""System.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected(textRenderingHint: ClearTypeGridFit, expectedQuality: 5)"" type=""System.Drawing.Tests.FontTests"" method=""ToLogFont_InvokeGraphics_ReturnsExpected"" time=""0.0018962"" result=""Fail"">          <failure exception-type=""Xunit.Sdk.EqualException"">            <message><![CDATA[Assert.Equal() Failure\r\nExpected: 1\r\nActual:   204]]></message>            <stack-trace><![CDATA[   at System.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected(TextRenderingHint textRenderingHint, Int32 expectedQuality) in C:\Users\art\dev\corefx\src\System.Drawing.Common\tests\FontTests.cs:line 770]]></stack-trace>          </failure>        </test>    ```  [testResults.zip](https://github.com/dotnet/corefx/files/1576175/testResults.zip)  As per #25857"
25999	area-System.Net	enable MulticastInterface_Set_AnyInterface_Succeeds again after infrastructure fixes	fixes #24114  Failures were caused by packet filter rules. This changed after some infrastructure changes where machines (redhat clones (without RH6))  no longer reboot during deployment.        @dotnet-bot test outerloop linux x64 debug build please
26000	area-System.Net	Make ArgumentException to blame correct parameter for invalid input	Attempts to set or add an empty string value to a System.Net.Mime.HeaderCollection results in an ArgumentException. This is expected behavior. However, the ArgumentException thrown from HeaderCollection.Set and HeaderCollection.Add in this case indicates that `name` is empty instead of `value`.     This PR is to make ArgumentException to blame correct parameter for invalid input.    This issue was reported in internal bug 116743.
26001	area-System.Threading	Tests For STA/MTA  Attribute For Main Method	Implementation PR - dotnet/coreclr#15512  Previous PR - #25934   The .NetCore respects the attribute for the main thread and CoInitializes it in the respective mode. These changes test this functionality.
26002	area-System.Memory	Change OwnedMemory<T> to IOwnedMemory<T>	This would allow many types with existing class hierarchy to work with Memory<T>.  For example, SafeBuffer, Utf8String, etc.    cc: @stephentoub, @terrajobst, @davidfowl, @ahsonkhan, @joshfree, @jkotas    
26003	area-System.Runtime	Uniform tuple representation	"Right now, tuples/value tuples are implemented as set of types with distinct arity (max to 7 elements). However they could be implemented in more uniform manner:    ```csharp  public interface ITuple { }  public struct Unit : ITuple   {      public static Unit Default { get; } = new Unit();  }  public struct Cons<TValue, TNext> : ITuple where TNext: ITuple  {      public TValue Value { get; }      public TNext Next { get; }      public Cons(TValue value, TNext next) { ... }  }  ````  With this implementation and some helper methods we could represent Tuples of any size:    ```csharp  Cons<int, Cons<string, Cons<bool, Unit>>> tuple =       Tuple.Cons(1, Tuple.Cons(""hello"", Tuple.Cons(true, Unit.Default)));  int item1 = tuple.Value;      // tuple.Item1  string item2 = tuple.Next.Value;    // tuple.Item2  bool item3 = tuple.Next.Next.Value;    // tuple.Item3  ```  While this design can work (and potentially can be even as efficient as `ValueTuple<>` thanks to generic nature of this data structure), it's quite clear, that without compiler's help it looks obscure and it's not pleasant to work with.    For this reason, the idea here would be to add language level support for tuples or variadic size:    ```csharp  Unit a = (); // unit type - potentially useful in the future of the language  (int, string, bool) tuple = (1, ""hello"", true); // equivalent to Cons<int, Cons<string, Cons<bool, Unit>>>  (item1, item2, item3) = tuple; // tuple deconstruction  ```"
26005	area-System.Net	Fix Set-Cookie header parsing in CookieContainer	When server responds with following response headers:     Set-Cookie: mobile_view=false; path=/   Set-Cookie:   Set-Cookie: language_id=17; path=/; expires=Fri, 26-Feb-2016 11:26:05 GMT     CookieParser in .NET stops parsing headers at second, empty, Set-Cookie header.     This PR is to make sure that CookieContainer continues parsing until reaching the end of the entire Set-Cookie header.    This issue was reported in internal bug 143892.
26006	area-System.Net	Ensure System.Uri consistently uses the correct RFC 3986 reserved character set	"There is an issue with System.Uri where certain percent encoded characters that should be left as-is are decoded, but only when the URI also contains Unicode or an encoded non-reserved symbol. This issue was heavily reported in .NET Framework, also appears to repro in CoreFx. Increased usage of Unicode has caused a recent rise in the number of reports.      Here are the conditions under which the unexpected behavior will occur:     - The URI contains the percent encoded form of any of the following reserved characters:  :, ', (, ), ! or *.  - The URI contains a Unicode or encoded non-reserved character.     The incorrect behavior is to decode the reserved characters, but only when both of the above are true. This is the wrong behavior not only because it is inconsistent (depending on the presence of Unicode or encoded non-reserved), but also because it goes against the spec:    ```     Percent-encoding a reserved character, or decoding a percent-encoded octet      that corresponds to a reserved character, will change how the URI is      interpreted by most applications.  Thus, characters in the reserved      set are protected from normalization and are therefore safe to be      used by scheme-specific and producer-specific algorithms for      delimiting data subcomponents within a URI.   ```  Uri.ToString is the only exception to the repro conditions above. The old ToString behavior was to always decode all characters except ?, #, % and the RFC 2396 reserved set. The new behavior is updates the reserved set to match RFC 3986. The RFC 2396 reserved set is a strict subset of the RFC 3986 set, and so no new characters will be decoded. This change makes ToString safer to use, as it can no longer change the semantics of a URI that uses ':' or the RFC 3986 reserved set.    The source of the issue was an update to the URI code to match the following change in the URI spec, where the new version adds a handful of reserved characters:   ```  RFC 2396   reserved    = "";"" | ""/"" | ""?"" | "":"" | ""@"" | ""&"" | ""="" | ""+"" |                 ""$"" | "",""   RFC 3986/3987   reserved    = gen-delims / sub-delims   gen-delims  = "":"" / ""/"" / ""?"" / ""#"" / ""["" / ""]"" / ""@""   sub-delims  = ""!"" / ""$"" / ""&"" / ""'"" / ""("" / "")""               / ""*"" / ""+"" / "","" / "";"" / ""=""   ```  When System.Uri was updated to follow RFC 3986, some codepaths missed the update to the new reserved set. Thus the added reserved symbols are not considered reserved in some circumstances. In addition, one function is also missing ':' from the original reserved set.    This has been fixed in .Net Framework 4.7.2. This fix updates places where the RFC 2396 set was still being used, and adds tests to ensure this behavior is consistent. It also retains the code used for quirking in .Net Framework, but always enables the new behavior instead of checking an AppContextSwitch.    Ref: Internal bug 150266"
26007	area-System.Net	Make test asynchronous.	Remove task.waitall from test, that may cause sporadic CI test failures.    cc @wfurt @karelz 
26008	area-System.IO	System.IO.Directory.Exists(string path) does not trim trailing whitespace of provided path on Linux	"The documentation of `System.IO.Directory.Exists(string path)` [here ](https://docs.microsoft.com/en-us/dotnet/api/system.io.directory.exists?view=netcore-2.0#System_IO_Directory_Exists_System_String_) states that  > Trailing spaces are removed from the end of the path parameter before checking whether the directory exists.    This is true for Windows, but not for Linux (tested on Ubuntu 17 and WSL)  ## Expected  ````c#  Assert.True(System.IO.Directory.Exists(""./""));  Assert.True(System.IO.Directory.Exists(""./ ""));  ````  ## Actual    The second assertion fails only on Linux (Ubuntu 17.04 VM in Azure and also WSL)    ## Environment  ````  > dotnet --info  .NET Command Line Tools (2.0.2)    Product Information:   Version:            2.0.2   Commit SHA-1 hash:  a04b4bf512    Runtime Environment:   OS Name:     ubuntu   OS Version:  17.04   OS Platform: Linux   RID:         linux-x64   Base Path:   /usr/share/dotnet/sdk/2.0.2/    Microsoft .NET Core Shared Framework Host      Version  : 2.0.0    Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d  ````"
26009	area-Meta	Add license headers.	Realised I'd neglected this in a file, and found some others.    Any *.cs file found without the usual license header has it added except:    1. Files that note they are auto-generated.  2. Files with a different header (unless it is very close to the usual, in which case adjust for typos and old versions).  3. FxCopBaseline.cs files.    Any usual licenses that didn't start on the first line were moved up.
26010	area-System.Runtime	Inconsistencies between netfx and netcoreapp in string random hashing	"While trying to add tests to check if the randomized string hashing is working fine ([issue 24466](https://github.com/dotnet/corefx/issues/24466)), I noticed that netfx is not using random function for GetHashCode.     The randomized string hashing function is working properly in netcoreapp but not in netfx.  ```""abc"".GetHashCode()``` should be randomized and be returning a different hashcode in different processes. But apparently instead it is returning the same hash code all the time.    Please refer to the tests added in this pr #24779.    "
26012	area-Microsoft.CSharp	Microsoft.CSharp is missing DynamicMetaObjectProviderDebugView	Why isn't `Microsoft.CSharp.RuntimeBinder.DynamicMetaObjectProviderDebugView` available in .NET Core? It's a debug view used by debuggers to show properties of dynamic types.
26013	area-System.Net	Add implementation for SetTcpKeepAlive in ServicePoint	Hi    I am porting my .NetFramework project to .NetStd 2.0.    I have long running workloads. I need to set Tcp Keep-Alive messages. This is supported in .NetFramework.  Its implementation in corefx is not doing anything after validation.  https://github.com/dotnet/corefx/blob/master/src/System.Net.ServicePoint/src/System/Net/ServicePoint.cs#L101    Hence, my HttpClient Api calls don't send tcp keep alive messages.    Is there any workaround ?   When can we expect full implementation of `SetTcpKeepAlive` ?  
26014	area-Infrastructure	Provide release notes per package and per version for all packages published on nuget.org	"Currently there's the lack of transparency what is going on with corefx packages published on nuget.org.  For example, in VS with my solution I open ""Manage NuGet Packages for solution"" and on ""Updates"" tab I can see that there's an update for System.Data.SqlClient. I have 4.4.0 but there's a newer 4.4.2 already.  Cool. Of cause I'll install it but I wonder what have changed.  There's no link to package page on nuget.org in VS UI btw. So I open nuget.org and search for System.Data.SqlClient. On [package's page](https://www.nuget.org/packages/System.Data.SqlClient) I can see the section ""Release Notes"" with this link - https://go.microsoft.com/fwlink/?LinkID=799421  It targets to https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.0-preview1.md  Mm. Kind of obsolete.  Nothing more.  "
26015	area-System.Xml	XmlSchemaSet.Compile throws XmlSchemaException: Undefined complexType is used as a base for complex type extension	"Given a XSD-schema `base.xsd` with an abstract complexType (""abstract-component"") and another XSD-schema which includes the base schema - `main.xsd`. Main schema contains a complexType (""abstract-data-source"") which extends ""abstract-component"" from the base schema.    It works fine on .net framework (any version).    But on .net core (2.0.3) a try to compile main.xsd throws XmlSchemaException: ""Undefined complexType 'xmlschema-test:abstract-component' is used as a base for complex type extension""    Here's repo with code - https://github.com/evil-shrike/demo-dotnet-xsd-abstracttype-bug    `base.xsd`:  ```xsd  <?xml version=""1.0"" encoding=""utf-8"" ?>  <xs:schema   xmlns=""xmlschema-test""   targetNamespace=""xmlschema-test""   xmlns:xs=""http://www.w3.org/2001/XMLSchema""  >   <xs:complexType name=""abstract-component"" abstract=""true"">    <xs:attribute name=""clr-type"" type=""xs:string"" use=""optional"" form=""qualified"" />   </xs:complexType>  </xs:schema>  ```    `main.xsd`:  ```xsd  <?xml version=""1.0"" encoding=""utf-8""?>  <xs:schema    xmlns=""xmlschema-test""    targetNamespace=""xmlschema-test""    xmlns:xs=""http://www.w3.org/2001/XMLSchema""   >   <xs:include schemaLocation=""base.xsd""></xs:include>   <xs:complexType name=""abstract-data-source"">    <xs:complexContent>     <xs:extension base=""abstract-component"">      <xs:attribute name=""n"" use=""optional"" form=""qualified"" />     </xs:extension>    </xs:complexContent>   </xs:complexType>  </xs:schema>  ```    Program.cs:  ```c#  using System;  using System.Collections.Generic;  using System.IO;  using System.Linq;  using System.Xml;  using System.Xml.Schema;    namespace xmlschema_core  {      class Program      {          static void Main(string[] args)          {           if (args.Length == 0)            {             Console.WriteLine("".exe <schema> [<schema> ...]"");            return;           }     var schemas = new XmlSchemaSet();     var schemaFiles = args;     foreach (string schemaFilePath in schemaFiles)     {      using (var reader = new XmlTextReader(schemaFilePath))      {       XmlSchema schema = XmlSchema.Read(reader, null);       schemas.Add(schema);      }     }     schemas.Compile();     Console.WriteLine(""success"");          }      }  }  ```    to run:  work: `dotnet run main.xsd --framework net461`  fail: `dotnet run main.xsd --framework netcoreapp2.0`    [EDIT] Add syntax highlighting by @karelz"
26016	area-System.Data	Enable BeginExecuteNonQuery functions in .NET Core	Make public previously private BeginExecuteNonQuery and related functions. Add basic functional tests.
26017	area-System.IO	Tests for span overloaded path api	Implementation PR - https://github.com/dotnet/coreclr/pull/15608  Fixes https://github.com/dotnet/corefx/issues/25539
26018	area-System.Net	HttpStatusCode to implement RFC 6585 	Please implement complete list of HTTP status codes.  See https://tools.ietf.org/html/rfc6585 for many status codes that are missing in:    https://github.com/dotnet/corefx/blob/master/src/System.Net.Primitives/src/System/Net/HttpStatusCode.cs    Ignoring the `Unofficial codes` section from this list: https://en.wikipedia.org/wiki/List_of_HTTP_status_codes, we basically should have all status codes covered in HttpStatusCode enum.    Ex, Azure DocumentDB server returns 429 (Too Many Requests) for which i have to check integral value of HttpResponseMessage.StatusCode in HttpClient.  
26020	area-System.Security	Adding certificate chain to local user store on linux doesn't reflect in chain building	"Repro code:    ```c#  using System;  using System.Security.Cryptography;  using System.Security.Cryptography.X509Certificates;    namespace certrepro  {      class Program      {          static void Main(string[] args)          {              var cert = new X509Certificate2(""s_rsa_cai1.p12"", ""password"", X509KeyStorageFlags.UserKeySet);                  X509Store certStore = new X509Store(""My"", StoreLocation.CurrentUser);              certStore.Open(OpenFlags.ReadWrite);              X509Certificate2Collection certs = new X509Certificate2Collection();              try              {                  certs.Import(""s_rsa_cai1.p12"", ""password"", X509KeyStorageFlags.DefaultKeySet);                  foreach(X509Certificate2 c in certs)                  {                      certStore.Add(c);                  }                    X509Chain chain = new X509Chain();                  chain.ChainPolicy.VerificationFlags = X509VerificationFlags.AllFlags;                  chain.ChainPolicy.RevocationFlag = X509RevocationFlag.ExcludeRoot;                  chain.ChainPolicy.RevocationMode = X509RevocationMode.NoCheck;                    if (chain.Build(cert))                  {                      Console.WriteLine(""Chain built successfully, count: {0}"", chain.ChainElements.Count);                  }                  else                  {                      chain.Dispose();                  }              }              finally              {                  foreach(X509Certificate2 c in certs)                  {                      certStore.Remove(c);                  }              }          }      }  }  ```    Output on Linux:    ```  lasekar@ubuntu1704:~/certrepro$ dotnet run  Chain built successfully, count: 1  ```    Output on Windows:    ```  C:\Users\lasekar\Desktop\certrepro>dotnet run  Chain built successfully, count: 2  ```    Using the certificate file: https://github.com/pepone/netstreamtest/blob/master/server/s_rsa_cai1.p12"
26021	area-System.Net	Make Socket.BeginConnect() checking for InvalidOperationException more robustly	Socket.BeginConnect() was not properly throwing InvalidOperationException consistently when a previous async operation was in progress. This resulted in extra BeginConnect operations starting which then caused random Socket failures and exceptions. This was not a regression from previous releases but an old bug. Without fixing this, multiple BeginConnect's are started incorrectly and random network socket failures will occur.    This PR fixs race conditions in BeginConnect logic so that InvalidOperationException's are thrown consistently when multiple operations are detected. Use atomic Interlocked.Exchange operations to protect state fields.    BeginConnect will now consistently throw InvalidOperationException when attempting multiple operations. This method is already documented to throw this exception.    Also, split the test cases in `public void BeginConnect_EndPoint_ListeningSocket_Throws_InvalidOperation()` from `ArgumentValidationTests.cs` because the check for multiple BeginConnect operations on same endpoint should comes first. (We don't allow this situation).    This issue was reported in internal bug 188428.
26022	area-System.Net	Allow bidirectional control characters in System.Uri	There is an issue in System.Uri that causes Unicode bidirectional control characters to be stripped during the encoding process, in violation of the IRI RFC. This occurs regardless of whether or not the characters occur as literals or as percent encoded UTF-8 octets.  There are five affected bidirectional formatting characters (LRN, RLM, LRE, LRO, and RTL). For example, the following source URI contains percent encoded UTF-8 octets representing the Unicode RTL control character U+200F:  ```      https://a/bcd/%E2%80%8Fefg/  ```  Like any other encoded Unicode character, we expect the result to remain percent encoded, as shown below:  ```      https://a/bcd/%E2%80%8Fefg/  ```  But the actual result is this:  ```      https://a/bcd/efg/  ```  This is clearly wrong -- we shouldn't be stripping percent encoded characters just because they have a special meaning when decoded. We see the same behavior when passing in an un-encoded version of the Bidi control character.      The problematic Bidi control characters are represented by the code points x200E, x200f, and x202A-x202E. According to the IRI Spec ABNF, these characters fall under the definition of ucschar. Ucschars are considered unreserved in the IRI spec, and thus should be legal to use. Additionally, during the Uri conversion process RFC 3987 Sec. 3.1 should apply, and un-encoded BiDi characters should be percent encoded.     After the fix is applied the behavior of System.Uri will match that of WinRT Windows.Foundation.Uri as well as that of common browsers such as Edge and Chrome. The fix also retains the code used for quirking in .Net Framework, but always enables the new behavior instead of checking an AppContextSwitch.    This issue was initially reported in .NET Framework, and was tracked by internal bug 130850. 
26023	area-System.Runtime	Simplify Nullable<T> usage with deconstruction semantics 	"Recently I upgraded to using C# 7.* and I finally got to do more with tuples. I love the `.Deconstruct` capabilities and how they extend into anything. I have found this to be particularly useful for `Nullable<T>`. I tweeted about it <a href=""https://twitter.com/davidpine7/status/941759704363085825"" target=""_blank"">here</a> and it caught a lot of positive attention from the developer community. In fact, I was inspired to make a pull request as @jaredpar and @VSadov seemed to think it ""should just be added to Nullable"".    # Rationale and Usage    This feature will simplify the usage of `Nullable<T>` access, as the consumer will have two variables namely `hasValue` and `value` - instead of an instance of the `Nullable<T>` that they would then have to `.` into.    ```csharp  public void TakeActionOnNullable<T>(Nullable<T> nullable)  {      // Leveraging the generic nullable deconstruction extension method     var (hasValue, value) = nullable;  }  ```    # Proposed API    This is my first PR in coreclr / corefx, is this what you're looking for?    ```csharp  [EditorBrowsable(EditorBrowsableState.Never)]  public static void Deconstruct<T>(this T? nullable, out bool hasValue, out T value)      where T : struct  {      hasValue = nullable.HasValue;      value = nullable ?? default;  }  ```    # Details    This extension method is generic and will support all variations of `Nullable<T>`, this means that any `Nullable<T>` can easily be deconstructed. This is obviously an opt-in, no developer will be forced to use this. It is however an option that could be considered a more terse approach.     # Pull Request    Here is the PR: https://github.com/dotnet/coreclr/pull/15605"
26024	area-System.IO	File.GetLastWriteTimeUtc on Ubuntu is precise only up to seconds	"### Steps to reproduce:  1. Create a new console app  2. Edit Program.cs to print it's last write time out:    ```C#  using System;  using System.IO;    namespace ts_test  {      class Program      {          static void Main(string[] args)          {              var file = Path.Combine(Directory.GetCurrentDirectory(), ""Program.cs"");              var t = File.GetLastWriteTimeUtc(file);                Console.WriteLine(t.ToString(""o""));          }      }  }  ```    On my Windows machine, here's the output:    > 2017-12-22T04:59:47.5871375Z    On my Ubuntu VM, here's the output:    > 2017-12-22T05:18:38.0000000Z    Notice the missing precision after the seconds digits. The filesystem does seem to have a higher precision timestamp associated with the file:  ```  >:~/src/ts-test$ ls --full-time Program.cs  -rw-rw-r-- 1 prkrishn prkrishn 320 2017-12-22 05:18:38.250041900 +0000 Program.cs  ```    ```   dotnet --info  .NET Command Line Tools (2.0.2)    Product Information:   Version:            2.0.2   Commit SHA-1 hash:  a04b4bf512    Runtime Environment:   OS Name:     ubuntu   OS Version:  16.04   OS Platform: Linux   RID:         ubuntu.16.04-x64   Base Path:   /usr/share/dotnet/sdk/2.0.2/    Microsoft .NET Core Shared Framework Host      Version  : 2.0.0    Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d  ```    ### Further background:  I noticed this when I was writing tests to cover incremental build scenarios in my MSBuild target. MSBuild uses file timestamps to determine if the inputs are consistent with the outputs. Consequently inputs modified within a second of creating the output would be treated as consistent resulting in MSBuild target executions from being skipped. I also some my tests fail on Travis OSX 10.12 but I don't have a machine handy to confirm if this was the cause.  "
26025	area-System.Net	Mac: 'Cannot access Kerberos ticket' after `dotnet ef database update`	Hello  After create model in project and set to dbcontext, for creation database give me this error  please help me.    ```  Cannot access Kerberos ticket. Ensure Kerberos has been initialized with 'kinit'.  ErrorCode=InternalError, Exception=Interop+NetSecurityNative+GssApiException: GSSAPI operation failed with error -  An unsupported mechanism was requested (unknown mech-code 0 for mech unknown).     at System.Net.Security.NegotiateStreamPal.GssInitSecurityContext(SafeGssContextHandle& context, SafeGssCredHandle credential, Boolean isNtlm, SafeGssNameHandle targetName, GssFlags inFlags, Byte[] buffer, Byte[]& outputBuffer, UInt32& outFlags, Int32& isNtlmUsed)     at System.Net.Security.NegotiateStreamPal.EstablishSecurityContext(SafeFreeNegoCredentials credential, SafeDeleteContext& context, String targetName, ContextFlagsPal inFlags, SecurityBuffer inputBuffer, SecurityBuffer outputBuffer, ContextFlagsPal&outFlags)     at System.Data.SqlClient.SNI.SNIProxy.GenSspiClientContext(SspiClientContextStatus sspiClientContextStatus, Byte[] receivedBuff, Byte[]& sendBuff, Byte[] serverName)     at System.Data.SqlClient.SNI.TdsParserStateObjectManaged.GenerateSspiClientContext(Byte[] receivedBuff, UInt32 receivedLength, Byte[]& sendBuff, UInt32& sendLength, Byte[] _sniSpnBuffer)     at System.Data.SqlClient.TdsParser.SNISSPIData(Byte[] receivedBuff, UInt32 receivedLength, Byte[]& sendBuff, UInt32& sendLength)  ```    [EDIT] Fix exception formatting by @karelz
26026	area-System.Data	Application crash because of unhandled exception in DbConnectionPool	This line of code is causing application to crash, because of unhandled exception. This exception is thrown in other thread, started by ThreadPool.QueueUserWorkItem and there is no way for user code to handle it.  https://github.com/dotnet/corefx/blob/ec22edc155aa13289770c9f49630cc7ab588fca4/src/System.Data.SqlClient/src/System/Data/ProviderBase/DbConnectionPool.cs#L755
26027	area-System.Drawing	Consolidate Font code between unix and windows	
26028	area-System.Reflection	Wrong exception thrown with invalid external table mask	In system.reflection.metadata\src\system\reflection\metadata\metadatareader.cs, an invalid External Table Mask should throw a BadImageFormatException but always throws a System.FormatException.
26029	area-System.Reflection	Fix bad Exception formatting	An invalid External Table Mask should throw a BadImageFormatException but always throws a System.FormatException. Remove a cast to TableMask and the correct exception is thrown. Also included a test.  Fixes #26028
26030	area-System.Net	Added native support for the HTTP PATCH verb.	Added native support for the HTTP PATCH verb.    I didn't see any existing tests for the other verbs equivalent methods and properties so no unit tests are included.    Closes #17299
26031	area-System.Collections	There should be an `ObservableDictionary<TKey, TVal>` in contrast to `ObservableCollection<T>`!	Yes we can find many implements on web for example [this](http://blogs.microsoft.co.il/shimmy/2010/12/26/observabledictionarylttkey-tvaluegt-c/) one, but I still think that there should be one reside in .NetFX!
26032	area-System.Net	Test failures: Remote servers unreachable	## Types of failures    Affected tests:  * System.Net.Tests.TaskWebClientTest / [UploadFile_Success](https://github.com/dotnet/corefx/blob/b227000d7d2b3d79224a95278d3e76dc74ff6b0c/src/System.Net.WebClient/tests/WebClientTest.cs#L669)  * System.Net.Tests.TaskWebClientTest / [UploadString_Success](https://github.com/dotnet/corefx/blob/b227000d7d2b3d79224a95278d3e76dc74ff6b0c/src/System.Net.WebClient/tests/WebClientTest.cs#L688)  * System.Net.Tests.WebClientTest / [RequestHeaders_AddHostHeaderAndSendRequest_ExpectedResult](https://github.com/dotnet/corefx/blob/b227000d7d2b3d79224a95278d3e76dc74ff6b0c/src/System.Net.WebClient/tests/WebClientTest.cs#L411-L415)  * System.Net.Tests.SyncWebClientTest / [UploadData_LargeData_Success](https://github.com/dotnet/corefx/blob/b227000d7d2b3d79224a95278d3e76dc74ff6b0c/src/System.Net.WebClient/tests/WebClientTest.cs#L652)  * System.Net.Tests.SyncWebClientTest / [OpenWrite_Success](https://github.com/dotnet/corefx/blob/b227000d7d2b3d79224a95278d3e76dc74ff6b0c/src/System.Net.WebClient/tests/WebClientTest.cs#L624)  * System.Net.Tests.SyncWebClientTest / [UploadData_Success](https://github.com/dotnet/corefx/blob/b227000d7d2b3d79224a95278d3e76dc74ff6b0c/src/System.Net.WebClient/tests/WebClientTest.cs#L637)    ### CurlException: SSL connect error    ```  System.Net.WebException : An error occurred while sending the request. SSL connect error  ---- System.Net.Http.HttpRequestException : An error occurred while sending the request.  -------- System.Net.Http.CurlException : SSL connect error  ```    ### CurlException: Couldn't resolve host name    Ubuntu17.04:    ```  System.Net.WebException : An error occurred while sending the request. Couldn't resolve host name  ---- System.Net.Http.HttpRequestException : An error occurred while sending the request.  -------- System.Net.Http.CurlException : Couldn't resolve host name  ```    ### WinHttpException: The server name or address could not be resolved    Windows:    ```  System.Net.WebException : An error occurred while sending the request. The server name or address could not be resolved  ---- System.Net.Http.HttpRequestException : An error occurred while sending the request.  -------- System.Net.Http.WinHttpException : The server name or address could not be resolved  ```    ## History of failures    Day | Build | OS | Error message | Test  -- | -- | -- | -- | --  6/28 | 20170628.02 | Fedora26 | CurlException: SSL connect error | UploadData_Success  7/8 | 20170708.04 | Fedora26 | CurlException: SSL connect error | UploadData_Success  9/2-9/3 | N/A | various | System.Net.WebException : The operation has timed out. | All tests  9/28 | 20170928.03 | Fedora25 | CurlException: SSL connect error | UploadFile_Success  9/29 | 20170929.02 | Fedora25 | CurlException: SSL connect error | UploadFile_Success  10/9 | 20171009.04 | Fedora25 | CurlException: SSL connect error | OpenWrite_Success  10/17 | 20171017.02 | Fedora26 | CurlException: SSL connect error | UploadFile_Success  10/18 | 20171018.02 | Fedora25 | CurlException: SSL connect error | UploadData_Success  10/19 | 20171019.01 | Ubuntu17.04 | CurlException: Couldn't resolve host name | UploadData_Success  10/19 | 20171019.01 | Ubuntu17.04 | CurlException: Couldn't resolve host name | UploadData_Success  10/19 | 20171019.01 | Ubuntu17.04 | CurlException: Couldn't resolve host name | UploadFile_Success  10/19 | 20171019.01 | Ubuntu17.04 | CurlException: Couldn't resolve host name | UploadFile_Success  10/19 | 20171019.01 | Ubuntu17.04 | CurlException: Couldn't resolve host name | RequestHeaders_AddHostHeaderAndSendRequest_ExpectedResult  10/24 | 20171024.02 | Fedora26 | CurlException: SSL connect error | OpenWrite_Success  10/25 | 20171025.02 | Fedora26 | CurlException: SSL connect error | UploadFile_Success  10/25 | 20171025.05 | Fedora25 | CurlException: SSL connect error | UploadFile_Success  10/28 | 20171028.03 | Fedora26 | CurlException: SSL connect error | UploadString_Success  10/29 | 20171029.01 | Fedora25 | CurlException: SSL connect error | UploadFile_Success  11/3 | 20171103.01 | Fedora26 | CurlException: SSL connect error | OpenWrite_Success  11/3 | 20171103.08 | Fedora26 | CurlException: SSL connect error | UploadData_Success  11/4 | 20171104.04 | Fedora26 | CurlException: SSL connect error | OpenWrite_Success  11/8 | 20171108.02 | Fedora25 | CurlException: SSL connect error | OpenWrite_Success  11/13 | 20171113.01 | Fedora26 | CurlException: SSL connect error | UploadData_Success  11/15 | 20171115.03 | Fedora25 | CurlException: SSL connect error | UploadFile_Success  11/16 | 20171116.51 | Fedora26 | CurlException: SSL connect error | OpenWrite_Success  11/19 | 20171119.01 | Fedora26 | CurlException: SSL connect error | UploadData_Success  11/29 | 20171129.01 | Fedora26 | CurlException: SSL connect error | UploadData_LargeData_Success  12/10 | 20171210.01 | Fedora26 | CurlException: SSL connect error | OpenWrite_Success  12/13 | 20171213.03 | Win7 | WinHttpException: The server name or address could not be resolved | UploadFile_Success  12/13 | 20171213.03 | Win7 | WinHttpException: The server name or address could not be resolved | UploadFile_Success  12/13 | 20171213.03 | Win7 | WinHttpException: The server name or address could not be resolved | RequestHeaders_AddHostHeaderAndSendRequest_ExpectedResult  12/13 | 20171213.03 | Win7 | WinHttpException: The server name or address could not be resolved | UploadString_Success  12/13 | 20171213.03 | Win7 | WinHttpException: The server name or address could not be resolved | UploadString_Success  12/13 | 20171213.03 | Win7 | WinHttpException: The server name or address could not be resolved | UploadFile_Success  12/13 | 20171213.11 | Fedora26 | CurlException: SSL connect error | UploadFile_Success  12/14 | 20171214.03 | Fedora26 | CurlException: SSL connect error | UploadData_Success  12/16 | 20171216.06 | Fedora26 | CurlException: SSL connect error | UploadFile_Success  12/17 | 20171217.02 | Fedora26 | CurlException: SSL connect error | UploadFile_Success  12/28 | 20171228.02 | Fedora26 | CurlException: SSL connect error | UploadData_Success  1/7 | 20180107.01 | Fedora26 | CurlException: SSL connect error | OpenWrite_Success - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180107.01/workItem/System.Net.WebClient.Tests/analysis/xunit/System.Net.Tests.TaskWebClientTest~2FOpenWrite_Success(echoServer:%20https:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx))  1/9 | 20180109.01 | Fedora26 | CurlException: SSL connect error | UploadFile_Success - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180109.01/workItem/System.Net.WebClient.Tests/analysis/xunit/System.Net.Tests.TaskWebClientTest~2FUploadFile_Success(echoServer:%20https:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx))  1/19 | 20180119.06 | Fedora26 | CurlException: SSL connect error | UploadData_LargeData_Success - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180119.06/workItem/System.Net.WebClient.Tests/analysis/xunit/System.Net.Tests.TaskWebClientTest~2FUploadData_LargeData_Success(echoServer:%20https:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx))  1/22 | 20180122.02 | Fedora26 | CurlException: SSL connect error | UploadFile_Success -[link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180122.02/workItem/System.Net.WebClient.Tests/analysis/xunit/System.Net.Tests.TaskWebClientTest~2FUploadFile_Success(echoServer:%20https:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx))  1/28 | 20180128.01 | Fedora26 | CurlException: SSL connect error | UploadFile_Success - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180128.01/workItem/System.Net.WebClient.Tests/analysis/xunit/System.Net.Tests.TaskWebClientTest~2FUploadFile_Success(echoServer:%20https:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx))  1/30 | 20180130.01 | Fedora26 | CurlException: SSL connect error | UploadFile_Success - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180130.01/workItem/System.Net.WebClient.Tests/analysis/xunit/System.Net.Tests.TaskWebClientTest~2FUploadFile_Success(echoServer:%20https:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx))  1/31 | 20180131.01 | Fedora26 | CurlException: SSL connect error | UploadFile_Success - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180131.01/workItem/System.Net.WebClient.Tests/analysis/xunit/System.Net.Tests.TaskWebClientTest~2FUploadFile_Success(echoServer:%20https:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx))  2/2 | 20180202.05 | Fedora26 | CurlException: SSL connect error | UploadFile_Success - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180202.05/workItem/System.Net.WebClient.Tests/analysis/xunit/System.Net.Tests.TaskWebClientTest~2FUploadFile_Success(echoServer:%20https:~2F~2Fcorefx-net.cloudapp.net~2FEcho.ashx))  3/7 | 20180307.03 | Fedora26 | CurlException: SSL connect error | UploadFile_Success  3/13 | 20180313.03 | Fedora26 | CurlException: SSL connect error | UploadFile_Success  
26033	area-System.Collections	Dictionary exposes internal type comparer	According to @jkotas, Dictionary is not supposed to leak the fact that it is internally using the NonRandomizedComparer as it does below:    ```  var dict = new Dictionary<string, int>();  Assert.NotSame(EqualityComparer<string>.Default, dict.Comparer);  ```    For more information please take a look at the following PR #24779 
26034	area-System.Net	TcpListener.Stop hangs if Accept is in progress	"Hi,    We are experiencing an issue on Linux, building with publish -r linux-x64.    It looks like TcpListener.Stop() hangs when we try to orderly shutdown the server.    The socket is waiting for an Accept, then other thread does TcpListener.Stop().    The same code works fine on Windows (.NET Core) and also on Linux/Mono.    Here the sequence is:  * We start the server.  * We try to stop it.  * It takes forever to finish.  * Attaching the debugger (from Visual Studio on Windows, which is awesome :P) we see the process is stopped in TcpListener.Stop and never leaves.    Attached a repro case, but the code is super simple:    ```c#  using System;  using System.Net;  using System.Net.Sockets;  using System.Threading;    namespace tcplistenertest  {      class Program      {          static void Main(string[] args)          {              Thread listenerThread = StartBackgroundThread(new ThreadStart(ThreadProc));                while(Console.ReadLine() != string.Empty)              {              }                mListener.Stop();              listenerThread.Join();          }            static void ThreadProc()          {              try              {                  mListener = StartListening();                    AcceptLoop(mListener);              }              catch(Exception e)              {                  Console.WriteLine($""ThreadProc error: {e.Message}"");                  Console.WriteLine($""Stack trace:{Environment.NewLine}{e.StackTrace}"");              }          }            static Thread StartBackgroundThread(ThreadStart task)          {              Thread thread = new Thread(task);              thread.IsBackground = true;              thread.Start();              return thread;          }            static TcpListener StartListening()          {              TcpListener result = new TcpListener(IPAddress.Any, PORT);              result.Start();                return result;          }            static void AcceptLoop(TcpListener listener)          {              // this is the main loop of the Socket based server              while (true)              {                  Socket socket = null;                  try                  {                      Console.WriteLine(""Accepting connection..."");                      socket = AcceptConnection(listener);                      Console.WriteLine($""Connection accepted from {socket.RemoteEndPoint}"");                  }                  catch (SocketException e)                  {                      Console.WriteLine($""Socket error accepting connection: {e.Message}"");                      Console.WriteLine($""Stack trace:{Environment.NewLine}{e.StackTrace}"");                      break;                  }                  catch (Exception e)                  {                      Console.WriteLine($""Generic error accepting connection: {e.Message}"");                      Console.WriteLine($""Stack trace:{Environment.NewLine}{e.StackTrace}"");                      break;                  }                    try                  {                      socket.Close();                  }                  catch (Exception e)                  {                      Console.WriteLine($""Error closing socket: {e.Message}"");                      Console.WriteLine($""Stack trace:{Environment.NewLine}{e.StackTrace}"");                      break;                  }              }                Console.WriteLine(""Accept loop thread stopping"");          }            static Socket AcceptConnection(TcpListener listener)          {              Socket socket = listener.AcceptSocket();              try              {                  socket.SetSocketOption(SocketOptionLevel.Tcp, SocketOptionName.Debug, 1);                  LingerOption optionValue = new LingerOption(true, 3);                    socket.SetSocketOption(SocketOptionLevel.Socket,                      SocketOptionName.Linger, optionValue);                    return socket;              }              catch (Exception)              {                  socket.Close();                  throw;              }          }            static TcpListener mListener;          const int PORT = 55000;      }  }    ```    [tcplistenertest-1.zip](https://github.com/dotnet/corefx/files/1583509/tcplistenertest-1.zip)    Thanks!  pablo    [EDIT] Add C# syntax highlighting by @karelz"
26035	area-System.Numerics	Adding the Acosh, Asinh, Atanh, and Cbrt functions to System.Math and System.MathF	This resolves https://github.com/dotnet/corefx/issues/16428
26037	area-System.Memory	Remove leftover uses of DangerousGetPinnableReference	Part of:  https://github.com/dotnet/corefx/issues/25412  https://github.com/dotnet/corefx/issues/25615    Related to: https://github.com/dotnet/corefx/pull/25936    Following the staging plan from here: https://github.com/dotnet/corefx/issues/23881#issuecomment-343767740    - [x] Add MemoryExtensions.GetReference/TryGetArray  - [x] Convert all uses of DangerousGetPinnableReference/DangerousTryGetArray in coreclr, corefx, corert, corefxlab, aspnet, ... to MemoryExtensions.GetReference  - [ ] Change DangerousGetPinnableReference to whatever we like to make it fit the pinning pattern and remove DangerousTryGetArray.    Doing it this way will avoid the need for complex staging or things being on the floor for extensive periods of time.    cc @jkotas, @stephentoub, @KrzysztofCwalina  
26042	area-System.Net	Test failures: System.Net.Http.Functional.Tests.DiagnosticsTest / *	## Types of failures    Affected tests:    * System.Net.Http.Functional.Tests.DiagnosticsTest:    * SendAsync_ExpectedDiagnosticSourceLogging    * SendAsync_ExpectedDiagnosticSourceNewAndDeprecatedEventsLogging    * SendAsync_ExpectedDiagnosticSourceUrlFilteredActivityLogging    * SendAsync_ExpectedDiagnosticStopOnlyActivityLogging  * System.Net.Http.Functional.Tests.HttpClientHandler_DefaultProxyCredentials_Test:    * ProxySetViaEnvironmentVariable_DefaultProxyCredentialsUsed    Test `SendAsync_ExpectedDiagnosticStopOnlyActivityLogging`  ```  Exit code was 139 but it should have been 42  Expected: True  Actual:   False  at System.Diagnostics.RemoteExecutorTestBase.RemoteInvokeHandle.Dispose() in /root/corefx-1192569/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 203  at System.Net.Http.Functional.Tests.DiagnosticsTest.SendAsync_ExpectedDiagnosticStopOnlyActivityLogging() in /root/corefx-1192569/src/System.Net.Http/tests/FunctionalTests/DiagnosticsTests.cs:line 583  ```    ## History of failures    Day | Build | OS | Test  -- | -- | -- | --  5/31 | 20170531.01 | Ubuntu16.04 | SendAsync_ExpectedDiagnosticSourceLogging  7/8 | 20170708.04 | Suse42.2 | [ManagedHandler] SendAsync_ExpectedDiagnosticSourceNewAndDeprecatedEventsLogging  8/1 | 20170801.01 | Ubuntu17.04 | SendAsync_ExpectedDiagnosticSourceUrlFilteredActivityLogging  8/19 | 20170819.02 | Ubuntu17.04 | [ManagedHandler] SendAsync_ExpectedDiagnosticSourceNewAndDeprecatedEventsLogging  8/22 | 20170822.01 | Centos73 | [ManagedHandler] SendAsync_ExpectedDiagnosticSourceUrlFilteredActivityLogging  8/23 | 20170823.07 | Ubuntu17.04 | [ManagedHandler] SendAsync_ExpectedDiagnosticSourceNewAndDeprecatedEventsLogging  8/27 | 20170827.01 | Centos73 | [ManagedHandler] SendAsync_ExpectedDiagnosticSourceNewAndDeprecatedEventsLogging  9/25 | 20170925.03 | Ubuntu17.04 | [ManagedHandler] SendAsync_ExpectedDiagnosticSourceUrlFilteredActivityLogging  9/26 | 20170926.06 | RedHat72 | [ManagedHandler] SendAsync_ExpectedDiagnosticSourceLogging  9/26 | 20170926.06 | RedHat72 | [ManagedHandler] SendAsync_ExpectedDiagnosticSourceNewAndDeprecatedEventsLogging  10/1 | 20171001.01 | RedHat72 | [ManagedHandler] ProxySetViaEnvironmentVariable_DefaultProxyCredentialsUsed  10/26 | 20171026.01 | Suse42.2 | ProxySetViaEnvironmentVariable_DefaultProxyCredentialsUsed  11/18 | 20171118.03 | Ubuntu17.10 | SendAsync_ExpectedDiagnosticSourceLogging  11/27 | 20171127.01 | Ubuntu16.04 | SendAsync_ExpectedDiagnosticSourceNewAndDeprecatedEventsLogging  12/4 | 20171204.02 | Ubuntu17.04 | SendAsync_ExpectedDiagnosticStopOnlyActivityLogging  12/23 | 20171223.03 | Ubuntu17.04 | SendAsync_ExpectedDiagnosticSourceNewAndDeprecatedEventsLogging  1/12 | 20180112.01| Ubuntu14.04 | SendAsync_ExpectedDiagnosticStopOnlyActivityLogging - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180112.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.DiagnosticsTest~2FSendAsync_ExpectedDiagnosticStopOnlyActivityLogging)  1/19 | 20180119.01 | Suse42.4 | ProxySetViaEnvironmentVariable_DefaultProxyCredentialsUsed - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180119.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandler_DefaultProxyCredentials_Test~2FProxySetViaEnvironmentVariable_DefaultProxyCredentialsUsed(useProxy:%20False))  3/31 | 20180331.02 | Ubuntu16.04 | SendAsync_ExpectedDiagnosticSourceLogging  3/31 | 20180331.05 | OpenSuse42.3 | SendAsync_ExpectedDiagnosticSourceLogging      Note: Related to:  * Some failures in #23209  * ManagedHandler failures in #23771
26043	area-System.Console	Unsubscribe from Console.CancelKeyPress hangs after Task.Delay was cancelled	"This will happen only if all of these conditions are met:  1) use Task.Delay  2) token source was cancelled inside ConsoleCancelEventHandler;  3) token source was cancelled with CancellationTokenSource.Cancel method;  4) method marked as async and Task.Delay is awaited.    Bug is not reproduced if any of these conditions is violated:  - **Condition ?1 is violated:** Use any other task instead of `Task.Delay`  [AsyncTaskCancel.cs](https://github.com/Maxim-Kornilov/CancelKeyPressBug/blob/master/CancelKeyPressBug/TestCases/AsyncTaskCancel.cs#L17)  - **Condition ?2 is violated:** Cancel outside `ConsoleCancelEventHandler`  [AsyncDelayCancelOutsideHandler.cs](https://github.com/Maxim-Kornilov/CancelKeyPressBug/blob/master/CancelKeyPressBug/TestCases/AsyncDelayCancelOutsideHandler.cs#L20)  But it hangs inside `ConsoleCancelEventHandler` if I add `GetAwaiter().GetResult()` to `Task.Run(() => tokenSource.Cancel())`  - **Condition ?3 is violated:** Cancel using `CancelAfter`  [AsyncDelayCancelAfter.cs](https://github.com/Maxim-Kornilov/CancelKeyPressBug/blob/master/CancelKeyPressBug/TestCases/AsyncDelayCancelAfter.cs#L20)  - **Condition ?4 is violated:** Use `GetAwaiter().GetResult()` for `Task.Delay`  [SyncDelay.cs](https://github.com/Maxim-Kornilov/CancelKeyPressBug/blob/master/CancelKeyPressBug/TestCases/SyncDelay.cs#L15)    This bug is reproduced even if  I use `dotnet publish -c release -r win10-x86`.     Simple test case or [GitHub repo with all test cases](https://github.com/Maxim-Kornilov/CancelKeyPressBug)  ```csharp  private static async Task SimpleTestCase()  {      var tokenSource = new CancellationTokenSource();      ConsoleCancelEventHandler cancelled = (s, e) =>      {          // Conditions #2 and #3          tokenSource.Cancel();          e.Cancel = true;      };      Console.CancelKeyPress += cancelled;        try      {          Console.WriteLine(""Press Ctrl+C to continue"");          // Conditions #1 and #4          await Task.Delay(TimeSpan.FromHours(1.0), tokenSource.Token);        }      catch (OperationCanceledException)      {          Console.WriteLine(""Cancelled"");      }        Console.CancelKeyPress -= cancelled;  }  ```    dotnet info  ```  ????????? ????????? ?????? .NET (2.0.2)    Product Information:   Version:            2.0.2   Commit SHA-1 hash:  a04b4bf512    Runtime Environment:   OS Name:     Windows   OS Version:  10.0.16299   OS Platform: Windows   RID:         win10-x64   Base Path:   C:\Program Files\dotnet\sdk\2.0.2\    Microsoft .NET Core Shared Framework Host      Version  : 2.0.0    Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d  ```    I know that Task.Delay is part of coreclr and Console.CancelKeyPress is part of corefx. I dont't know what causes the issue, but I file it here because the Console.CancelKeyPress is the one that not working as expexted."
26044	area-System.Net	Increase code coverage for System.Net.Security	Hi,    Pursuant to issue #17099, I have added tests for a couple of classes.    If you have any questions or comments, please let me know.    Thanks,    Michael
26045	area-System.Memory	Add another constructor to Span using IntPtr	Hello,    in F# we cannot cast ptr's to void ptr's (the type `nativeptr<unit>` is disallowed due to `unit` isn't an unmanaged type). Therefor it's currently not possible for me to create a Span from stackallocated memory in F# ?? (Signature of the constructor is funnily `ptr:nativeptr<unit>* length:int -> Span`).    Easiest solution short-term would be to add another constructor to the Span class which accepts an `IntPtr`. Long-term I try to solve the issue in F#, for reference see [this](https://github.com/Microsoft/visualfsharp/issues/4166) issue.    If there's something wrong with `IntPtr` please tell me, I might miss some reason for not using it?? ?
26048	area-System.Net	IPEndPoint cannot return the correct value when compare the same value	"There are wrong value return when I do the execute this code:  ip1==ip2  both ip1 and ip2 are IPEndPoint type,and value both are ""192.168.31.15:55360"",but it doesn't return true.  now I used the ToString() method to instead of that"
26049	area-System.Net	"Unnecessary ""is""-""cast"" sequence in IPEndPoint.Equals()"	Here's the current code:        //class IPEndPoint      public override bool Equals(object comparand)          {              if (!(comparand is IPEndPoint))              {                  return false;              }              return ((IPEndPoint)comparand)._address.Equals(_address) && ((IPEndPoint)comparand)._port == _port;        }    `is` is followed by two casts. This can be replaced with single `as`:          var other = comparand as IPEndPoint;        if (other == null)        {           return false;        }        return other._address.Equals(_address) && other._port == _port;         
26050	area-System.ComponentModel	Don't directly throw Exception System.ComponentModel.TypeConverter	Contributes to #23748     cc: @maryamariyan, @safern 
26051	area-System.Net	Only set Headers.ContentLength if it isn't already correct	A (handled) unmanaged COM exception is thrown by Windows.Web.Http.dll when an  attempt to set an already-present header is made. This particular line  is in the hot path and is almost always invoked on outgoing requests  causing these COM exceptions to be thrown all the time. Avoiding  downstream exceptions should make things faster and result in fewer  pipeline flushes, etc.    The unmanaged exception stack trace under Windows 10 build 17063:    ```  > KernelBase.dll!RaiseException() Unknown Symbols loaded.    combase.dll!SendReport(HRESULT error=0x8000000b, unsigned int cchMax=0, const wchar_t * message=0x00007ff854b2d8e4, unsigned short pSid=0x0000000000000000, void * pExceptionObject=0x0000000000000000, IUnknown *) Line 438 C++ Symbols loaded.    combase.dll!RoOriginateError(HRESULT error=0x8000000b, HSTRING__ * message) Line 590 C++ Symbols loaded.    Windows.Web.Http.dll!Windows::Foundation::Collections::Internal::HashMap<struct HSTRING__ *,struct HSTRING__ *,struct StringCaseInsensitiveHash,struct StringCaseInsensitiveEquals,struct Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<struct HSTRING__ *>,struct Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<struct HSTRING__ *>,struct Windows::Foundation::Collections::Internal::HashMapOptions<struct HSTRING__ *,struct HSTRING__ *,struct Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<struct HSTRING__ *>,0,1,0> >::Remove(struct HSTRING__ *) Unknown Symbols loaded.    Windows.Web.Http.dll!HttpHeaderCollectionBase::Remove(struct HSTRING__ *) Unknown Symbols loaded.    Windows.Web.Http.dll!HttpHeaderCollectionBase::TryRemoveHeaderValueInfo(struct HSTRING__ *) Unknown Symbols loaded.    Windows.Web.Http.dll!HttpHeaderCollectionBase::SetParsedValue(unsigned short const *,struct IInspectable *) Unknown Symbols loaded.    [Managed to Native Transition]  Annotated Frame    System.Net.Http.dll!System.Net.Http.HttpHandlerToFilter.CreateRequestContentAsync(System.Net.Http.HttpRequestMessage request = {System.Net.Http.HttpRequestMessage}, Windows.Web.Http.Headers.HttpRequestHeaderCollection rtHeaderCollection = {Windows.Web.Http.Headers.HttpRequestHeaderCollection}) Line 390 C# Symbols loaded.    System.Net.Http.dll!System.Net.Http.HttpHandlerToFilter.ConvertRequestAsync(System.Net.Http.HttpRequestMessage request = {System.Net.Http.HttpRequestMessage}, System.Net.Http.HttpMethod httpMethod = {System.Net.Http.HttpMethod}, bool skipRequestContentIfPresent = false) Line 333 C# Symbols loaded.    System.Net.Http.dll!System.Net.Http.HttpHandlerToFilter.SendAsync(System.Net.Http.HttpRequestMessage request = {System.Net.Http.HttpRequestMessage}, System.Threading.CancellationToken cancel = IsCancellationRequested = false) Line 78 C# Symbols loaded.    System.Net.Http.dll!System.Net.Http.HttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage request = {System.Net.Http.HttpRequestMessage}, System.Threading.CancellationToken cancellationToken = IsCancellationRequested = false) Line 596 C# Symbols loaded.    System.Net.Http.dll!System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) Line 51 C# Symbols loaded.    System.Net.Http.dll!System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage request = {System.Net.Http.HttpRequestMessage}, System.Net.Http.HttpCompletionOption completionOption = ResponseHeadersRead, System.Threading.CancellationToken cancellationToken) Line 433 C# Symbols loaded.    System.Net.Requests.dll!System.Net.HttpWebRequest.SendRequest() Line 1222 C# Symbols loaded.    System.Net.Requests.dll!System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback callback = {System.AsyncCallback}, object state = {System.Net.HttpWebRequest}) Line 1234 C# Symbols loaded.    System.Private.CoreLib.dll!System.Threading.Tasks.TaskFactory<System.Net.WebResponse>.FromAsyncImpl(System.Func<System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, System.Net.WebResponse> endFunction = {System.Func<System.IAsyncResult, System.Net.WebResponse>}, System.Action<System.IAsyncResult> endAction = null, object state, System.Threading.Tasks.TaskCreationOptions creationOptions) Line 810 C# Symbols loaded.    System.Net.Requests.dll!System.Net.WebRequest.GetResponseAsync.AnonymousMethod__68_0() Line 548 C# Symbols loaded.    System.Private.CoreLib.dll!System.Threading.Tasks.Task<System.Threading.Tasks.Task<System.Net.WebResponse>>.InnerInvoke() Line 611 C# Symbols loaded.    System.Private.CoreLib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state) Line 145 C# Symbols loaded.    System.Private.CoreLib.dll!System.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot = Id = 3321, Status = Running, Method = Inspecting the state of an object in the debuggee of type System.Delegate is not supported in this context., Result = Cannot evaluate expression because a native frame is on the top of the call stack.) Line 2449 C# Symbols loaded.    System.Private.CoreLib.dll!System.Threading.ThreadPoolWorkQueue.Dispatch() Line 582 C# Symbols loaded.    [Native to Managed Transition]  Annotated Frame    kernel32.dll!00007ff853204354() Unknown No symbols loaded.    ntdll.dll!RtlUserThreadStart() Unknown Symbols loaded.  ```    I don't have access to the source code for `Windows.Web.Http.dll` so this workaround is the best I can offer.
26052	area-System.Threading	Don't directly throw Exception System.Threading.Tasks.Dataflow	Contributes to #23748 .    cc: @kouvel, @tarekgh
26053	area-System.Reflection	Getting a ref return value using PropertyInfo	```c#      public class RefAndRefReadonlyTestClass      {          private int _refField;          private readonly int _refReadonlyField;            public RefAndRefReadonlyTestClass(int refReadonlyField)          {              _refReadonlyField = refReadonlyField;          }            public ref int RefField => ref _refField;            public ref readonly int RefReadonlyField => ref _refReadonlyField;            public void SetRefField(int value)          {              _refField = value;          }      }        [Test]      public void GetRefReturnProperty()      {          PropertyInfo property = TestReflectionUtils.GetProperty(typeof(RefAndRefReadonlyTestClass), nameof(RefAndRefReadonlyTestClass.RefField));            RefAndRefReadonlyTestClass c1 = new RefAndRefReadonlyTestClass(123);          c1.SetRefField(456);            object v = property.GetValue(c1, null);      }  ```    The code above throws this exception from PropertyInfo.GetValue: `System.NotSupportedException: 'ByRef return value not supported in reflection invocation.'`    Can you use a PropertyInfo to get the value of a ref return property?    [EDIT] Add C# syntax highlight by @karelz
26054	area-System.Net	Potential unexpected null in httpclient	This [SO](https://stackoverflow.com/questions/47973590/httpclient-header-getting-nulled-when-using-in-async-methods) question alludes to a potential unexpected header being null.    This [line](https://github.com/dotnet/corefx/blob/master/src/System.Net.Http/src/System/Net/Http/Headers/HttpHeaders.cs#L600) does not check for header value being possibly null, leading to the argument null exception.     In case the SO thread disappears here is the call stack, not that it is in net 4.6.1 and not core, so I'm 50/50 if this exists here or not.    #### Callstack  System.ArgumentNullException: Value cannot be null.     at System.Threading.Monitor.Enter(Object obj)     at System.Net.Http.Headers.HttpHeaders.ParseRawHeaderValues(String name, HeaderStoreItemInfo info, Boolean removeEmptyHeader)     at System.Net.Http.Headers.HttpHeaders.AddHeaders(HttpHeaders sourceHeaders)     at System.Net.Http.Headers.HttpRequestHeaders.AddHeaders(HttpHeaders sourceHeaders)     at System.Net.Http.HttpClient.PrepareRequestMessage(HttpRequestMessage request)     at System.Net.Http.HttpClient.SendAsync(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationToken cancellationToken)     at System.Net.Http.HttpClient.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)     at System.Net.Http.HttpClient.PutAsync(Uri requestUri, HttpContent content, CancellationToken cancellationToken)     at Attributes.Controllers.AttributesBaseController.<UpdateAttributes>d__6.MoveNext() in D:\Git\PortalSystem\Attributes\Controllers\AttributesBaseController.cs:line 42
26055	area-System.Text	"Tests under ""System.Text.RegularExpressions.Tests"" failed with ""Exit code was 131 but it should have been 42"""	failed test: RegexMatchTests.Match_SpecialUnicodeCharacters_Invariant  Configuration: oxs10.12_release  Detail: https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_release/lastCompletedBuild/testReport/System.Text.RegularExpressions.Tests/RegexMatchTests/Match_SpecialUnicodeCharacters_Invariant/  MESSAGE:  Exit code was 131 but it should have been 42\nExpected: True\nActual: False  ~~~~~~  STACK TRACE:  at System.Diagnostics.RemoteExecutorTestBase.RemoteInvokeHandle.Dispose() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_release/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 186
26056	area-System.ComponentModel	Test failure: System.ComponentModel.Composition.CompositionExceptionTests/Message_ShouldFormatCountOfRootCausesUsingTheCurrentCulture	Opened on behalf of @Sunny-pu  The test `System.ComponentModel.Composition.CompositionExceptionTests/Message_ShouldFormatCountOfRootCausesUsingTheCurrentCulture` has failed.  Assert.True() Failure\r     Expected: True\r     Actual:   False          Stack Trace:             at System.ComponentModel.Composition.CompositionExceptionTests.AssertMessage(CompositionException exception, Int32 rootCauseCount, CultureInfo culture) in E:\A\_work\1452\s\corefx\src\System.ComponentModel.Composition\tests\System\ComponentModel\Composition\CompositionExceptionTests.cs:line 413        at System.ComponentModel.Composition.CompositionExceptionTests.Message_ShouldFormatCountOfRootCausesUsingTheCurrentCulture() in E:\A\_work\1452\s\corefx\src\System.ComponentModel.Composition\tests\System\ComponentModel\Composition\Com